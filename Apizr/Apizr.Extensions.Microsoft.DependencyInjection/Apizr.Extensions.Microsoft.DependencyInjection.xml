<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Apizr.Extensions.Microsoft.DependencyInjection</name>
    </assembly>
    <members>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.ConnectivityHandlerType">
            <summary>
            Type of the connectivity handler
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.CacheHandlerType">
            <summary>
            Type of the cache handler
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.MappingHandlerType">
            <summary>
            Type of the mapping handler
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.RefitSettingsFactory">
            <summary>
            Refit settings factory
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.ConnectivityHandlerFactory">
            <summary>
            Connectivity handler factory
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.CacheHandlerFactory">
            <summary>
            Cache handler factory
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.MappingHandlerFactory">
            <summary>
            Mapping handler factory
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.CrudEntities">
            <summary>
            Entities auto registered with <see cref="T:Apizr.IApizrManager`1"/>
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.WebApis">
            <summary>
            Web apis auto registered with <see cref="T:Apizr.IApizrManager`1"/>
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.ObjectMappings">
            <summary>
            Mappings between api request object and model object used for classic auto registration
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.PostRegistries">
            <summary>
            Other registries plugged during post registration actions
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.PostRegistrationActions">
            <summary>
            Post registration actions
            </summary>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithRefitSettings(System.Func{System.IServiceProvider,Refit.RefitSettings})">
            <summary>
            Provide some Refit specific settings
            </summary>
            <param name="refitSettingsFactory">A <see cref="T:Refit.RefitSettings"/> instance factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithConnectivityHandler(System.Func{System.IServiceProvider,Apizr.Connecting.IConnectivityHandler})">
            <summary>
            Provide a connectivity handler to check connectivity before sending a request
            </summary>
            <param name="connectivityHandlerFactory">A <see cref="T:Apizr.Connecting.IConnectivityHandler"/> mapping implementation factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithConnectivityHandler``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Provide a connectivity handler to check connectivity before sending a request
            </summary>
            <typeparam name="TConnectivityHandler">Your connectivity checking service</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithConnectivityHandler``1">
            <summary>
            Provide a connectivity handler to check connectivity before sending a request
            </summary>
            <typeparam name="TConnectivityHandler">Your <see cref="T:Apizr.Connecting.IConnectivityHandler"/> mapping implementation</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithConnectivityHandler(System.Type)">
            <summary>
            Provide a connectivity handler to check connectivity before sending a request
            </summary>
            <param name="connectivityHandlerType">Type of your <see cref="T:Apizr.Connecting.IConnectivityHandler"/> mapping implementation</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithCacheHandler(System.Func{System.IServiceProvider,Apizr.Caching.ICacheHandler})">
            <summary>
            Provide a cache handler to cache data
            </summary>
            <param name="cacheHandlerFactory">A <see cref="T:Apizr.Caching.ICacheHandler"/> mapping implementation factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithCacheHandler``1">
            <summary>
            Provide a cache handler to cache data
            </summary>
            <typeparam name="TCacheHandler">Your <see cref="T:Apizr.Caching.ICacheHandler"/> mapping implementation</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithCacheHandler(System.Type)">
            <summary>
            Provide a cache handler to cache data
            </summary>
            <param name="cacheHandlerType">Type of your <see cref="T:Apizr.Caching.ICacheHandler"/> mapping implementation</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithMappingHandler(System.Func{System.IServiceProvider,Apizr.Mapping.IMappingHandler})">
            <summary>
            Provide a mapping handler to auto map entities during mediation
            </summary>
            <param name="mappingHandlerFactory">A <see cref="T:Apizr.Mapping.IMappingHandler"/> mapping implementation factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithMappingHandler``1">
            <summary>
            Provide a mapping handler to auto map entities during mediation
            </summary>
            <typeparam name="TMappingHandler">Your <see cref="T:Apizr.Mapping.IMappingHandler"/> mapping implementation</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithMappingHandler(System.Type)">
            <summary>
            Provide a mapping handler to auto map entities during mediation
            </summary>
            <param name="mappingHandlerType">Type of your <see cref="T:Apizr.Mapping.IMappingHandler"/> mapping implementation</param>
            <returns></returns>
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptions.ApizrManagerType">
            <summary>
            Type of the manager
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptions.BaseAddressFactory">
            <summary>
            Base address factory
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptions.LoggerFactory">
            <summary>
            The Logger factory
            </summary>
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder`2.WithBaseAddress(System.Func{System.IServiceProvider,System.String})">
            <summary>
            Define your web api base address (could be defined with WebApiAttribute)
            </summary>
            <param name="baseAddressFactory">Your web api base address factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder`2.WithBaseAddress(System.Func{System.IServiceProvider,System.Uri})">
            <summary>
            Define your web api base address (could be defined with WebApiAttribute)
            </summary>
            <param name="baseAddressFactory">Your web api base address factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`3.AddCrudManagerFor``5(System.Action{`2})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for <typeparamref name="T"/> object type, 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <typeparamref name="TReadAllResult"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <typeparam name="T">The object type to manage with crud api calls</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters</typeparam>
            <typeparam name="TApizrManager">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation</typeparam>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`3.AddCrudManagerFor(System.Type,System.Action{`2})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <paramref name="crudedType"/> object type (class), 
            with key of type <see cref="T:System.Int32"/> and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <param name="crudedType">The object type to manage with crud api calls (class)</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`3.AddCrudManagerFor(System.Type,System.Type,System.Action{`2})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <paramref name="crudedType"/> object type (class), 
            with key of type <paramref name="crudedKeyType"/> (primitive) and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="crudedType">The object type to manage with crud api calls (class)</param>
            <param name="crudedKeyType">The object key type (primitive)</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`3.AddCrudManagerFor(System.Type,System.Type,System.Type,System.Action{`2})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <paramref name="crudedType"/> object type (class), 
            with key of type <paramref name="crudedKeyType"/> (primitive) and "ReadAll" query result of type <paramref name="crudedReadAllResultType"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <param name="crudedType">The object type to manage with crud api calls (class)</param>
            <param name="crudedKeyType">The object key type (primitive)</param>
            <param name="crudedReadAllResultType">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`3.AddCrudManagerFor(System.Type,System.Type,System.Type,System.Type,System.Action{`2})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <paramref name="crudedType"/> object type (class), 
            with key of type <paramref name="crudedKeyType"/> (primitive) and "ReadAll" query result of type <paramref name="crudedReadAllResultType"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <param name="crudedType">The object type to manage with crud api calls (class)</param>
            <param name="crudedKeyType">The object key type (primitive)</param>
            <param name="crudedReadAllResultType">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</param>
            <param name="crudedReadAllParamsType">ReadAll query parameters type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`3.AddCrudManagerFor(System.Type,System.Type,System.Type,System.Type,System.Type,System.Action{`2})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for <paramref name="crudedType"/> object type (class), 
            with key of type <paramref name="crudedKeyType"/> (primitive) and "ReadAll" query result of type <paramref name="crudedReadAllResultType"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <param name="crudedType">The object type to manage with crud api calls</param>
            <param name="crudedKeyType">The object key type</param>
            <param name="crudedReadAllResultType">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</param>
            <param name="crudedReadAllParamsType">ReadAll query parameters type</param>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`3.AddCrudManagerFor(System.Type[])">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Requesting.CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="T:Apizr.Requesting.CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`3.AddCrudManagerFor(System.Reflection.Assembly[])">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Requesting.CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="assemblies">Any assembly to scan for <see cref="T:Apizr.Requesting.CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`3.AddCrudManagerFor(System.Action{`2},System.Type[])">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Requesting.CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="T:Apizr.Requesting.CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`3.AddCrudManagerFor(System.Action{`2},System.Reflection.Assembly[])">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Requesting.CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblies">Any assembly to scan for <see cref="T:Apizr.Requesting.CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`3.AddCrudManagerFor(System.Type,System.Type[])">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Requesting.CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="T:Apizr.Requesting.CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`3.AddCrudManagerFor(System.Type,System.Reflection.Assembly[])">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Requesting.CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="assemblies">Any assembly to scan for <see cref="T:Apizr.Requesting.CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`3.AddCrudManagerFor(System.Type,System.Action{`2},System.Type[])">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Requesting.CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="T:Apizr.Requesting.CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`3.AddCrudManagerFor(System.Type,System.Action{`2},System.Reflection.Assembly[])">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Requesting.CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblies">Any assembly to scan for <see cref="T:Apizr.Requesting.CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`3.AddManagerFor``2(System.Action{`2})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/>
            </summary>
            <typeparam name="TWebApi">The web api interface to manage</typeparam>
            <typeparam name="TApizrManager">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation</typeparam>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`3.AddManagerFor(System.Type,System.Action{`2})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/>
            </summary>
            <param name="webApiType">The web api interface type to manage</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`3.AddManagerFor(System.Action{`2},System.Type[])">
            <summary>
            Register a <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.WebApiAttribute"/> decorated interfaces
            </summary>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="T:Apizr.WebApiAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`3.AddManagerFor(System.Action{`2},System.Reflection.Assembly[])">
            <summary>
            Register a <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.WebApiAttribute"/> decorated interfaces
            </summary>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblies">Any assembly to scan for <see cref="T:Apizr.WebApiAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`3.AddManagerFor(System.Type,System.Action{`2},System.Type[])">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.WebApiAttribute"/> decorated interfaces
            </summary>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="T:Apizr.WebApiAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`3.AddManagerFor(System.Type,System.Action{`2},System.Reflection.Assembly[])">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.WebApiAttribute"/> decorated interfaces
            </summary>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblies">Any assembly to scan for <see cref="T:Apizr.WebApiAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`3.AddManagerFor(System.Type,System.Type,System.Action{`2})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/>
            </summary>
            <param name="webApiType">The web api interface type to manage</param>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="P:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.HttpTracerModeFactory">
            <summary>
            Http traffic tracing mode factory
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.TrafficVerbosityFactory">
            <summary>
            Http traffic tracing verbosity factory
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.LogLevelsFactory">
            <summary>
            Log levels factory
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.HttpClientHandlerFactory">
            <summary>
            HttpClientHandler factory
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.HttpClientBuilder">
            <summary>
            HttpClient builder
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories">
            <summary>
            Delegating handlers factories
            </summary>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithLogging(System.Func{System.IServiceProvider,Apizr.Logging.HttpTracerMode},System.Func{System.IServiceProvider,Apizr.Logging.HttpMessageParts},System.Func{System.IServiceProvider,Microsoft.Extensions.Logging.LogLevel[]})">
            <summary>
            Define http traffic tracing verbosity and log level (could be defined with TraceAttribute)
            </summary>
            <param name="httpTracerModeFactory">Http traffic tracing mode factory</param>
            <param name="trafficVerbosityFactory">Http traffic tracing verbosity factory</param>
            <param name="logLevelsFactory">Log levels factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithHttpClientHandler(System.Func{System.IServiceProvider,System.Net.Http.HttpClientHandler})">
            <summary>
            Provide a custom HttpClientHandler
            </summary>
            <param name="httpClientHandlerFactory">An <see cref="T:System.Net.Http.HttpClientHandler"/> instance factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.ConfigureHttpClientBuilder(System.Action{Microsoft.Extensions.DependencyInjection.IHttpClientBuilder})">
            <summary>
            Adjust some HttpClient settings
            </summary>
            <param name="httpClientBuilder">The HttpClient builder</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.AddDelegatingHandler(System.Func{System.IServiceProvider,System.Net.Http.DelegatingHandler})">
            <summary>
            Add a custom delegating handler
            </summary>
            <param name="delegatingHandlerFactory">A delegating handler factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.AddDelegatingHandler(System.Func{System.IServiceProvider,Apizr.Configuring.IApizrOptionsBase,System.Net.Http.DelegatingHandler})">
            <summary>
            Add a custom delegating handler
            </summary>
            <param name="delegatingHandlerFactory">A delegating handler factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithAuthenticationHandler``1(System.Func{System.IServiceProvider,Apizr.Configuring.IApizrOptionsBase,``0})">
            <summary>
            Provide your own <see cref="T:Apizr.Authenticating.AuthenticationHandlerBase"/> implementation
            </summary>
            <typeparam name="TAuthenticationHandler">Your <see cref="T:Apizr.Authenticating.AuthenticationHandlerBase"/> implementation</typeparam>
            <param name="authenticationHandlerFactory">A <typeparamref name="TAuthenticationHandler"/> instance factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithAuthenticationHandler``2(System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.String}}})">
            <summary>
            Provide your own settings management and token management services
            </summary>
            <typeparam name="TSettingsService">Your settings management service (saving/getting token)</typeparam>
            <typeparam name="TTokenService">Your token management service (refreshing token)</typeparam>
            <param name="tokenProperty">The token property used for saving</param>
            <param name="refreshTokenMethod">The method called to refresh the token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithAuthenticationHandler``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Func{System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.String}})">
            <summary>
            Provide your own settings management service and a method to refresh the token
            </summary>
            <typeparam name="TSettingsService">Your settings management service (saving/getting token)</typeparam>
            <param name="tokenProperty">The token property used for saving</param>
            <param name="refreshTokenFactory">The method factory called to refresh the token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizr(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder},System.Action{Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder})">
            <summary>
            Create a registry with all managers built with both common and proper options
            </summary>
            <param name="services">The service collection</param>
            <param name="registryBuilder">The registry builder with access to proper options</param>
            <param name="optionsBuilder">The common options shared by all managers</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <typeparamref name="T"/> object type (class),
            with key of type <see cref="T:System.Int32"/> and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <typeparam name="T">The object type to manage with crud api calls</typeparam>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <typeparamref name="T"/> object type (class), 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <typeparam name="T">The object type to manage with crud api calls</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <typeparamref name="T"/> object type (class), 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <typeparamref name="TReadAllResult"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``4(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <typeparamref name="T"/> object type (class), 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <typeparamref name="TReadAllResult"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters</typeparam>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``5(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for <typeparamref name="T"/> object type, 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <typeparamref name="TReadAllResult"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <typeparam name="T">The object type to manage with crud api calls</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters</typeparam>
            <typeparam name="TApizrManager">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation</typeparam>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <paramref name="crudedType"/> object type (class), 
            with key of type <see cref="T:System.Int32"/> and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <param name="services">The service collection</param>
            <param name="crudedType">The object type to manage with crud api calls (class)</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <paramref name="crudedType"/> object type (class), 
            with key of type <paramref name="crudedKeyType"/> (primitive) and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="services">The service collection</param>
            <param name="crudedType">The object type to manage with crud api calls (class)</param>
            <param name="crudedKeyType">The object key type (primitive)</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <paramref name="crudedType"/> object type (class), 
            with key of type <paramref name="crudedKeyType"/> (primitive) and "ReadAll" query result of type <paramref name="crudedReadAllResultType"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <param name="services">The service collection</param>
            <param name="crudedType">The object type to manage with crud api calls (class)</param>
            <param name="crudedKeyType">The object key type (primitive)</param>
            <param name="crudedReadAllResultType">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <paramref name="crudedType"/> object type (class), 
            with key of type <paramref name="crudedKeyType"/> (primitive) and "ReadAll" query result of type <paramref name="crudedReadAllResultType"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <param name="services">The service collection</param>
            <param name="crudedType">The object type to manage with crud api calls (class)</param>
            <param name="crudedKeyType">The object key type (primitive)</param>
            <param name="crudedReadAllResultType">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</param>
            <param name="crudedReadAllParamsType">ReadAll query parameters type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for <paramref name="crudedType"/> object type (class), 
            with key of type <paramref name="crudedKeyType"/> (primitive) and "ReadAll" query result of type <paramref name="crudedReadAllResultType"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <param name="services">The service collection</param>
            <param name="crudedType">The object type to manage with crud api calls</param>
            <param name="crudedKeyType">The object key type</param>
            <param name="crudedReadAllResultType">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</param>
            <param name="crudedReadAllParamsType">ReadAll query parameters type</param>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type[])">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Requesting.CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="services">The service collection</param>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="T:Apizr.Requesting.CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Requesting.CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="services">The service collection</param>
            <param name="assemblies">Any assembly to scan for <see cref="T:Apizr.Requesting.CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Type[])">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Requesting.CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="T:Apizr.Requesting.CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Requesting.CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblies">Any assembly to scan for <see cref="T:Apizr.Requesting.CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type[])">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Requesting.CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="services">The service collection</param>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="T:Apizr.Requesting.CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Reflection.Assembly[])">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Requesting.CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="services">The service collection</param>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="assemblies">Any assembly to scan for <see cref="T:Apizr.Requesting.CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Type[])">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Requesting.CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="services">The service collection</param>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="T:Apizr.Requesting.CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Requesting.CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="services">The service collection</param>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblies">Any assembly to scan for <see cref="T:Apizr.Requesting.CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/>
            </summary>
            <typeparam name="TWebApi">The web api interface to manage</typeparam>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/>
            </summary>
            <typeparam name="TWebApi">The web api interface to manage</typeparam>
            <typeparam name="TApizrManager">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation</typeparam>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/>
            </summary>
            <param name="services">The service collection</param>
            <param name="webApiType">The web api interface type to manage</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Type[])">
            <summary>
            Register a <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.WebApiAttribute"/> decorated interfaces
            </summary>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="T:Apizr.WebApiAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])">
            <summary>
            Register a <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.WebApiAttribute"/> decorated interfaces
            </summary>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblies">Any assembly to scan for <see cref="T:Apizr.WebApiAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Type[])">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.WebApiAttribute"/> decorated interfaces
            </summary>
            <param name="services">The service collection</param>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="T:Apizr.WebApiAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.WebApiAttribute"/> decorated interfaces
            </summary>
            <param name="services">The service collection</param>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblies">Any assembly to scan for <see cref="T:Apizr.WebApiAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/>
            </summary>
            <param name="services">The service collection</param>
            <param name="webApiType">The web api interface type to manage</param>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
    </members>
</doc>
