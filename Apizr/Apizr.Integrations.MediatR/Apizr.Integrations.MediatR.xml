<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Apizr.Integrations.MediatR</name>
    </assembly>
    <members>
        <member name="M:Apizr.ApizrExtendedOptionsBuilderExtensions.WithMediation(Apizr.IApizrExtendedOptionsBuilder)">
            <summary>
            Let Apizr handle requests execution with some mediation
            </summary>
            <param name="optionsBuilder"></param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Sending.ICrudMediator`4">
            <summary>
            <typeparamref name="T:MediatR.IMediator"/> but dedicated to <see cref="!:TApiEntity"/> cruding, getting all shorter
            </summary>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendCreateCommand(`0)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr with MediatR
            </summary>
            <param name="payload">The entity to create</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendCreateCommand(`0,System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr with MediatR
            </summary>
            <param name="payload">The entity to create</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendCreateCommand``1(``0)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr with MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="payload">The entity to create</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendCreateCommand``1(``0,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr with MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="payload">The entity to create</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadAllQuery">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadAllQuery(System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR
            </summary>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadAllQuery(System.Int32)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR with priority
            </summary>
            <param name="priority">The execution priority</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadAllQuery(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR with priority
            </summary>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadAllQuery``1">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR returning mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadAllQuery``1(System.Threading.CancellationToken)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR returning mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadAllQuery``1(System.Int32)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="priority">The execution priority</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadAllQuery``1(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadAllQuery(`3)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR
            </summary>
            <param name="readAllParams">The read all filters</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadAllQuery(`3,System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadAllQuery(`3,System.Int32)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR with priority
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadAllQuery(`3,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR with priority
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadAllQuery``1(`3)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadAllQuery``1(`3,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadAllQuery``1(`3,System.Int32)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadAllQuery``1(`3,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadQuery(`1)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr with MediatR
            </summary>
            <param name="key">The entity key</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadQuery(`1,System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr with MediatR
            </summary>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadQuery(`1,System.Int32)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr with MediatR with priority
            </summary>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadQuery(`1,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr with MediatR with priority
            </summary>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadQuery``1(`1)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr with MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadQuery``1(`1,System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr with MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadQuery``1(`1,System.Int32)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr with MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendReadQuery``1(`1,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr with MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendUpdateCommand(`1,`0)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr with MediatR
            </summary>
            <param name="key">The entity key</param>
            <param name="payload">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendUpdateCommand(`1,`0,System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr with MediatR
            </summary>
            <param name="key">The entity key</param>
            <param name="payload">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendUpdateCommand``1(`1,``0)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr with MediatR
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="payload">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendUpdateCommand``1(`1,``0,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr with MediatR
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="payload">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendDeleteCommand(`1)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr with MediatR
            </summary>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ICrudMediator`4.SendDeleteCommand(`1,System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr with MediatR
            </summary>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Sending.IMediator`1">
            <summary>
            <typeparamref name="T:MediatR.IMediator"/> but dedicated to <see cref="!:TWebApi"/>, getting all shorter
            </summary>
            <typeparam name="TWebApi">The api interface to play with mediation</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IMediator`1.SendFor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}})">
            <summary>
            Send an api call command to Apizr with MediatR
            </summary>
            <param name="executeApiMethod">The <see cref="!:TWebApi"/> call to execute</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IMediator`1.SendFor(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task}},System.Threading.CancellationToken)">
            <summary>
            Send a cancellable api call command to Apizr with MediatR
            </summary>
            <param name="executeApiMethod">The <see cref="!:TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IMediator`1.SendFor``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}})">
            <summary>
            Send an api call query to Apizr with MediatR
            </summary>
            <typeparam name="TApiResponse">The api response</typeparam>
            <param name="executeApiMethod">The <see cref="!:TWebApi"/> call to execute</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IMediator`1.SendFor``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{``0}}},System.Threading.CancellationToken)">
            <summary>
            Send a cancellable api call query to Apizr with MediatR
            </summary>
            <typeparam name="TApiResponse">The api response</typeparam>
            <param name="executeApiMethod">The <see cref="!:TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``1}}})">
            <summary>
            Send an api call query to Apizr with MediatR returning a mapped result
            </summary>
            <typeparam name="TModelResponse">The mapped model response</typeparam>
            <typeparam name="TApiResponse">The api response</typeparam>
            <param name="executeApiMethod">The <see cref="!:TWebApi"/> call to execute</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken)">
            <summary>
            Send a cancellable api call query to Apizr with MediatR returning a mapped result
            </summary>
            <typeparam name="TModelResponse">The mapped model response</typeparam>
            <typeparam name="TApiResponse">The api response</typeparam>
            <param name="executeApiMethod">The <see cref="!:TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,Apizr.Mapping.IMappingHandler,System.Threading.Tasks.Task{``1}}})">
            <summary>
            Send a mapped api call query to Apizr with MediatR returning a mapped result
            </summary>
            <typeparam name="TModelResponse">The mapped model response</typeparam>
            <typeparam name="TApiResponse">The api response</typeparam>
            <param name="executeApiMethod">The <see cref="!:TWebApi"/> call to execute</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,Apizr.Mapping.IMappingHandler,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken)">
            <summary>
            Send a cancellable mapped api call query to Apizr with MediatR returning a mapped result
            </summary>
            <typeparam name="TModelResponse">The mapped model response</typeparam>
            <typeparam name="TApiResponse">The api response</typeparam>
            <param name="executeApiMethod">The <see cref="!:TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
    </members>
</doc>
