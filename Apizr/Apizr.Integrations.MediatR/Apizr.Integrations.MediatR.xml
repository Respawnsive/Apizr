<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Apizr.Integrations.MediatR</name>
    </assembly>
    <members>
        <member name="T:Apizr.MediationOptionsBuilderExtensions">
            <summary>
            MediatR options builder extensions
            </summary>
        </member>
        <member name="M:Apizr.MediationOptionsBuilderExtensions.WithMediation(Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder)">
            <summary>
            Let Apizr handle requests execution with some mediation
            </summary>
            <param name="optionsBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.MediationOptionsBuilderExtensions.WithMediation(Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder)">
            <summary>
            Let Apizr handle requests execution with some mediation
            </summary>
            <param name="optionsBuilder"></param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Commanding.IMediationCommand`4">
            <summary>
            A mediation command sending mapped request and returning a mapped result
            </summary>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
        </member>
        <member name="T:Apizr.Mediation.Commanding.IMediationCommand`2">
            <summary>
            A mediation command sending a request and returning a result
            </summary>
            <typeparam name="TRequestData">The api request type</typeparam>
            <typeparam name="TResultData">The api result type</typeparam>
        </member>
        <member name="T:Apizr.Mediation.Commanding.IMediationCommand`1">
            <summary>
            A mediation command sending a request
            </summary>
            <typeparam name="TRequestData">The api request type</typeparam>
        </member>
        <member name="T:Apizr.Mediation.Commanding.IMediationCommand">
            <summary>
            A mediation command
            </summary>
        </member>
        <member name="T:Apizr.Mediation.Commanding.IMediationCommandHandler`2">
            <summary>
            The mediation command handler
            </summary>
            <typeparam name="TCommand">The handled command type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
        </member>
        <member name="T:Apizr.Mediation.Commanding.IMediationCommandHandler`1">
            <summary>
            The mediation command handler
            </summary>
            <typeparam name="TCommand">The handled command type</typeparam>
        </member>
        <member name="T:Apizr.Mediation.Commanding.MediationCommandBase`6">
            <summary>
            The top level base mediation command
            </summary>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Commanding.MediationCommandBase`6.#ctor(System.Action{`5})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Commanding.MediationCommandBase`4">
            <summary>
            The top level base mediation command
            </summary>
            <typeparam name="TRequestData">The api request type</typeparam>
            <typeparam name="TResultData">The api result type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Commanding.MediationCommandBase`4.#ctor(System.Action{`3})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Commanding.MediationCommandBase`3">
            <summary>
            The top level base mediation command
            </summary>
            <typeparam name="TRequestData">The api request type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Commanding.MediationCommandBase`3.#ctor(System.Action{`2})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Commanding.MediationCommandBase`2">
            <summary>
            The top level base mediation command
            </summary>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Commanding.MediationCommandBase`2.#ctor(System.Action{`1})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Configuring.Registry.ApizrMediationRegistry">
            <summary>
            Registry options available for extended registrations with mediation
            </summary>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.ApizrMediationRegistry.AddOrUpdate(System.Type,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase">
            <summary>
            Registry options available for extended registrations with mediation
            </summary>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.GetEnumerator">
            <summary>
            Get factory enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get factory enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.GetCrudMediatorFor``1">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.GetCrudMediatorFor``2">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.GetCrudMediatorFor``3">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.GetCrudMediatorFor``4">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.GetMediatorFor``1">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.TryGetCrudMediatorFor``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,System.Int32,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{System.String,System.Object}}@)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.TryGetCrudMediatorFor``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{System.String,System.Object}}@)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.TryGetCrudMediatorFor``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,System.Collections.Generic.IDictionary{System.String,System.Object}}@)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.TryGetCrudMediatorFor``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3}@)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.TryGetMediatorFor``1(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0}@)">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.Count">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.ContainsCrudMediatorFor``1">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.ContainsCrudMediatorFor``2">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.ContainsCrudMediatorFor``3">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.ContainsCrudMediatorFor``4">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.ContainsMediatorFor``1">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Configuring.Registry.IApizrMediationConcurrentRegistry">
            <inheritdoc cref="T:Apizr.Mediation.Configuring.Registry.IApizrMediationRegistry" />
        </member>
        <member name="T:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry">
            <summary>
            Registry options available for extended registrations with mediation
            </summary>
        </member>
        <member name="P:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.Count">
            <summary>
            Mediators count
            </summary>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor``1">
            <summary>
            Check if registry contains a mediator for <typeparamref name="T"/> entity type
            </summary>
            <typeparam name="T">The entity type to manage</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor``2">
            <summary>
            Check if registry contains a mediator for <typeparamref name="T"/> entity type with <typeparamref name="TKey"/> key type
            </summary>
            <typeparam name="T">The entity type to manage</typeparam>
            <typeparam name="TKey">The entity key type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor``3">
            <summary>
            Check if registry contains a mediator for <typeparamref name="T"/> entity type with <typeparamref name="TKey"/> key type and <typeparamref name="TReadAllResult"/> ReadAll result type
            </summary>
            <typeparam name="T">The entity type to manage</typeparam>
            <typeparam name="TKey">The entity key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor``4">
            <summary>
            Check if registry contains a mediator for <typeparamref name="T"/> entity type with <typeparamref name="TKey"/> key type,
            <typeparamref name="TReadAllResult"/> ReadAll result type and <typeparamref name="TReadAllParams"/> ReadAll params type
            </summary>
            <typeparam name="T">The entity type to manage</typeparam>
            <typeparam name="TKey">The entity key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll params type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.ContainsMediatorFor``1">
            <summary>
            Check if registry contains a mediator for <typeparamref name="TWebApi"/> api type
            </summary>
            <typeparam name="TWebApi">The api type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.GetCrudMediatorFor``1">
            <summary>
            Get a Crud mediator instance for an entity type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.GetCrudMediatorFor``2">
            <summary>
            Get a Crud mediator instance for an entity type with a specific key type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.GetCrudMediatorFor``3">
            <summary>
            Get a Crud mediator instance for an entity type with a specific key type and ReadAll result type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.GetCrudMediatorFor``4">
            <summary>
            Get a Crud mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll request params type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.GetMediatorFor``1">
            <summary>
            Get an api mediator instance
            </summary>
            <typeparam name="TWebApi">The managed api type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,System.Int32,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{System.String,System.Object}}@)">
            <summary>
            Try to get a Crud mediator instance for an entity type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{System.String,System.Object}}@)">
            <summary>
            Try to get a Crud mediator instance for an entity type with a specific key type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,System.Collections.Generic.IDictionary{System.String,System.Object}}@)">
            <summary>
            Try to get a Crud mediator instance for an entity type with a specific key type and ReadAll result type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3}@)">
            <summary>
            Try to get a Crud mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll request params type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.TryGetMediatorFor``1(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0}@)">
            <summary>
            Try to get an api mediator instance
            </summary>
            <typeparam name="TWebApi">The managed api type</typeparam>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Configuring.Registry.IApizrMediationRegistry">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Cruding.Base.CreateCommandBase`4">
            <summary>
            The top level base mediation Create command
            </summary>
            <typeparam name="TRequestData">The api request type</typeparam>
            <typeparam name="TResultData">The api result type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Base.CreateCommandBase`4.#ctor(`0,System.Action{`3})">
            <summary>
            
            </summary>
            <param name="requestData">The api request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="P:Apizr.Mediation.Cruding.Base.CreateCommandBase`4.RequestData">
            <summary>
            The request data to send
            </summary>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Base.DeleteCommandBase`5">
            <summary>
            The top level base mediation Delete command
            </summary>
            <typeparam name="T">The api entity type</typeparam>
            <typeparam name="TKey">The entity's crud key type</typeparam>
            <typeparam name="TResultData">The api result type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Base.DeleteCommandBase`5.#ctor(`1,System.Action{`4})">
            <summary>
            The top level base mediation Delete command constructor
            </summary>
            <param name="key">The entity's crud key</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="P:Apizr.Mediation.Cruding.Base.DeleteCommandBase`5.Key">
            <summary>
            The entity's crud key
            </summary>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Base.DeleteCommandBase`4">
            <summary>
            The top level base mediation Delete command
            </summary>
            <typeparam name="T">The api entity type</typeparam>
            <typeparam name="TResultData">The api result type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Base.DeleteCommandBase`4.#ctor(System.Int32,System.Action{`3})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Cruding.Base.DeleteCommandBase`3">
            <summary>
            The top level base mediation Delete command
            </summary>
            <typeparam name="T">The api entity type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Base.DeleteCommandBase`3.#ctor(System.Int32,System.Action{`2})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Cruding.Base.ReadAllQueryBase`4">
            <summary>
            The top level base mediation ReadAll query
            </summary>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Base.ReadAllQueryBase`4.#ctor(`0,System.Action{`3})">
            <summary>
            The top level base mediation ReadAll query constructor
            </summary>
            <param name="parameters">The query parameters to send</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="P:Apizr.Mediation.Cruding.Base.ReadAllQueryBase`4.Parameters">
            <summary>
            The query parameters to send
            </summary>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Base.ReadAllQueryBase`3">
            <summary>
            The top level base mediation ReadAll query
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Base.ReadAllQueryBase`3.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{`2})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Cruding.Base.ReadQueryBase`4">
            <summary>
            The top level base mediation Read query
            </summary>
            <typeparam name="TResponse">The result entity type</typeparam>
            <typeparam name="TKey">The entity's crud key type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Base.ReadQueryBase`4.#ctor(`1,System.Action{`3})">
            <summary>
            The top level base mediation Read query
            </summary>
            <param name="key">The entity's crud key</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="P:Apizr.Mediation.Cruding.Base.ReadQueryBase`4.Key">
            <summary>
            The entity's crud key
            </summary>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Base.ReadQueryBase`3">
            <summary>
            The top level base mediation Read query
            </summary>
            <typeparam name="TResponse">The result entity type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Base.ReadQueryBase`3.#ctor(System.Int32,System.Action{`2})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Cruding.Base.UpdateCommandBase`5">
            <summary>
            The top level base mediation Update command
            </summary>
            <typeparam name="TKey">The entity's crud key type</typeparam>
            <typeparam name="TRequestData">The request data type</typeparam>
            <typeparam name="TResultData">The result data type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Base.UpdateCommandBase`5.#ctor(`0,`1,System.Action{`4})">
            <summary>
            The top level base mediation Update command constructor
            </summary>
            <param name="key">The entity's crud key</param>
            <param name="requestData">The request data to send</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="P:Apizr.Mediation.Cruding.Base.UpdateCommandBase`5.Key">
            <summary>
            The entity's crud key
            </summary>
        </member>
        <member name="P:Apizr.Mediation.Cruding.Base.UpdateCommandBase`5.RequestData">
            <summary>
            The request data to send
            </summary>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Base.UpdateCommandBase`4">
            <summary>
            The top level base mediation Update command
            </summary>
            <typeparam name="TRequestData">The request data type</typeparam>
            <typeparam name="TResultData">The result data type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Base.UpdateCommandBase`4.#ctor(System.Int32,`0,System.Action{`3})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Cruding.Base.UpdateCommandBase`3">
            <summary>
            The top level base mediation Update command
            </summary>
            <typeparam name="TRequestData">The request data type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.#ctor(System.Int32,`0,System.Action{`2})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Cruding.CreateCommand`1">
            <summary>
            The mediation Create command
            </summary>
            <typeparam name="TModelData">The data type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.CreateCommand`1.#ctor(`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation Create command constructor
            </summary>
            <param name="modelData">The request data to send</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Mediation.Cruding.DeleteCommand`2">
            <summary>
            The mediation Delete command
            </summary>
            <typeparam name="T">The api entity type</typeparam>
            <typeparam name="TKey">The entity's crud key type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.DeleteCommand`2.#ctor(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation Delete command constructor
            </summary>
            <param name="key">The entity's crud key</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Mediation.Cruding.DeleteCommand`1">
            <summary>
            The mediation Delete command
            </summary>
            <typeparam name="T">The api entity type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.DeleteCommand`1.#ctor(System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation Delete command constructor
            </summary>
            <param name="key">The entity's crud key</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Handling.Base.CreateCommandHandlerBase`9">
            <summary>
            The base Create command handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params</typeparam>
            <typeparam name="TCommand">The command to handle</typeparam>
            <typeparam name="TCommandResult">The command result to return</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Handling.Base.CreateCommandHandlerBase`9.Handle(`5,System.Threading.CancellationToken)">
            <summary>
            Handling the Create command
            </summary>
            <param name="request">The Create command</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Handling.Base.CrudRequestHandlerBase`6">
            <summary>
            The base CRUD request handler
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase`9">
            <summary>
            The base Delete command handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params type</typeparam>
            <typeparam name="TCommand">The command type to handle</typeparam>
            <typeparam name="TCommandResult">The command result type to return</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase`9.Handle(`5,System.Threading.CancellationToken)">
            <summary>
            Handling the Delete command
            </summary>
            <param name="request">The Delete command</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase`8">
            <summary>
            The base Delete command handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params</typeparam>
            <typeparam name="TCommand">The command to handle</typeparam>
            <typeparam name="TCommandResult">The command result to return</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase`8.Handle(`4,System.Threading.CancellationToken)">
            <summary>
            Handling the Delete command
            </summary>
            <param name="request">The Delete command</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase`9">
            <summary>
            The base ReadAll query handler
            </summary>
            <typeparam name="TApiEntity"></typeparam>
            <typeparam name="TApiEntityKey">The api entity type</typeparam>
            <typeparam name="TModelEntityReadAllResult">The returned model result type</typeparam>
            <typeparam name="TApiEntityReadAllResult">The received api result type</typeparam>
            <typeparam name="TReadAllParams">The query parameters type</typeparam>
            <typeparam name="TQuery">The query type to handle</typeparam>
            <typeparam name="TQueryResult">The query result type to handle</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase`9.Handle(`5,System.Threading.CancellationToken)">
            <summary>
            Handling the ReadAll query
            </summary>
            <param name="request">The ReadAll query</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase`8">
            <summary>
            The base ReadAll query handler
            </summary>
            <typeparam name="TApiEntity"></typeparam>
            <typeparam name="TApiEntityKey">The api entity type</typeparam>
            <typeparam name="TModelEntityReadAllResult">The returned model result type</typeparam>
            <typeparam name="TApiEntityReadAllResult">The received api result type</typeparam>
            <typeparam name="TQuery">The query type to handle</typeparam>
            <typeparam name="TQueryResult">The query result type to handle</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase`8.Handle(`4,System.Threading.CancellationToken)">
            <summary>
            Handling the ReadAll query
            </summary>
            <param name="request">The ReadAll query</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase`9">
            <summary>
            The base Read query handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params type</typeparam>
            <typeparam name="TQuery">The query type to handle</typeparam>
            <typeparam name="TQueryResult">The query result type to handle</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase`9.Handle(`5,System.Threading.CancellationToken)">
            <summary>
            Handling the Read query
            </summary>
            <param name="request">The Read query</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase`8">
            <summary>
            The base Read query handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params type</typeparam>
            <typeparam name="TQuery">The query type to handle</typeparam>
            <typeparam name="TQueryResult">The query result type to handle</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase`8.Handle(`4,System.Threading.CancellationToken)">
            <summary>
            Handling the Read query
            </summary>
            <param name="request">The Read query</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase`9">
            <summary>
            The base Update command handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params type</typeparam>
            <typeparam name="TCommand">The command type to handle</typeparam>
            <typeparam name="TCommandResult">The command result type to return</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase`9.Handle(`5,System.Threading.CancellationToken)">
            <summary>
            Handling the Update command
            </summary>
            <param name="request">The Update command</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase`7">
            <summary>
            The base Update command handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params type</typeparam>
            <typeparam name="TCommand">The command type to handle</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase`7.Handle(`4,System.Threading.CancellationToken)">
            <summary>
            Handling the Update command
            </summary>
            <param name="request">The Update command</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase`8">
            <summary>
            The base Update command handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params type</typeparam>
            <typeparam name="TCommand">The command type to handle</typeparam>
            <typeparam name="TCommandResult">The command result type to return</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase`8.Handle(`4,System.Threading.CancellationToken)">
            <summary>
            Handling the Update command
            </summary>
            <param name="request">The Update command</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Handling.CreateCommandHandler`5">
            <summary>
            The Create command handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Handling.CreateCommandHandler`5.Handle(Apizr.Mediation.Cruding.CreateCommand{`0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Cruding.Handling.DeleteCommandHandler`5">
            <summary>
            The Delete command handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Handling.DeleteCommandHandler`5.Handle(Apizr.Mediation.Cruding.DeleteCommand{`0,`2},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Cruding.Handling.DeleteCommandHandler`4">
            <summary>
            The Delete command handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Handling.DeleteCommandHandler`4.Handle(Apizr.Mediation.Cruding.DeleteCommand{`0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Cruding.Handling.ReadAllQueryHandler`5">
            <summary>
            The ReadAll query handler
            </summary>
            <typeparam name="TApiEntity"></typeparam>
            <typeparam name="TApiEntityKey">The api entity type</typeparam>
            <typeparam name="TModelReadAllResult">The returned model result type</typeparam>
            <typeparam name="TApiReadAllResult">The received api result type</typeparam>
            <typeparam name="TReadAllParams">The query parameters type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Handling.ReadAllQueryHandler`5.Handle(Apizr.Mediation.Cruding.ReadAllQuery{`4,`2},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Cruding.Handling.ReadAllQueryHandler`4">
            <summary>
            The ReadAll query handler
            </summary>
            <typeparam name="TApiEntity"></typeparam>
            <typeparam name="TApiEntityKey">The api entity type</typeparam>
            <typeparam name="TModelReadAllResult">The returned model result type</typeparam>
            <typeparam name="TApiReadAllResult">The received api result type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Handling.ReadAllQueryHandler`4.Handle(Apizr.Mediation.Cruding.ReadAllQuery{`2},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Cruding.Handling.ReadQueryHandler`5">
            <summary>
            The Read query handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Handling.ReadQueryHandler`5.Handle(Apizr.Mediation.Cruding.ReadQuery{`0,`2},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Cruding.Handling.ReadQueryHandler`4">
            <summary>
            The Read query handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Handling.ReadQueryHandler`4.Handle(Apizr.Mediation.Cruding.ReadQuery{`0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Cruding.Handling.UpdateCommandHandler`5">
            <summary>
            The Update command handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Handling.UpdateCommandHandler`5.Handle(Apizr.Mediation.Cruding.UpdateCommand{`2,`0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Cruding.Handling.UpdateCommandHandler`4">
            <summary>
            The Update command handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Handling.UpdateCommandHandler`4.Handle(Apizr.Mediation.Cruding.UpdateCommand{`0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Cruding.ReadAllQuery`2">
            <summary>
            The mediation ReadAll query
            </summary>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <typeparam name="TReadAllResult">The api result type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.ReadAllQuery`2.#ctor(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation ReadAll query constructor
            </summary>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Mediation.Cruding.ReadAllQuery`2.#ctor(`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation ReadAll query constructor
            </summary>
            <param name="parameters">The query parameters to send</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Mediation.Cruding.ReadAllQuery`1">
            <summary>
            The mediation ReadAll query
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.ReadAllQuery`1.#ctor(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation ReadAll query constructor
            </summary>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Mediation.Cruding.ReadAllQuery`1.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation ReadAll query constructor
            </summary>
            <param name="parameters">The query parameters to send</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Mediation.Cruding.ReadQuery`2">
            <summary>
            The mediation Read query
            </summary>
            <typeparam name="TResultData">The result entity type</typeparam>
            <typeparam name="TKey">The entity's crud key type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.ReadQuery`2.#ctor(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation Read query constructor
            </summary>
            <param name="key">The entity's crud key</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Mediation.Cruding.ReadQuery`1">
            <summary>
            The mediation Read query
            </summary>
            <typeparam name="TResultData">The result entity type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.ReadQuery`1.#ctor(System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation Read query constructor
            </summary>
            <param name="key">The entity's crud key</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator">
            <summary>
            Apizr mediator dedicated to cruding
            </summary>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator.SendCreateCommand``1(``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator.SendCreateCommand``2(``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator.SendReadAllQuery``1(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator.SendReadAllQuery``2(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator.SendReadAllQuery``2(``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator.SendReadAllQuery``3(``2,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator.SendReadQuery``2(``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator.SendReadQuery``3(``2,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator.SendUpdateCommand``2(``1,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator.SendUpdateCommand``3(``2,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator.SendDeleteCommand``2(``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator`4">
            <summary>
            Apizr mediator dedicated to cruding
            </summary>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator`4.SendCreateCommand(`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator`4.SendCreateCommand``1(``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator`4.SendReadAllQuery(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator`4.SendReadAllQuery``1(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator`4.SendReadAllQuery(`3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator`4.SendReadQuery(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator`4.SendReadQuery``1(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator`4.SendUpdateCommand(`1,`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator`4.SendUpdateCommand``1(`1,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.ApizrCrudMediator`4.SendDeleteCommand(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator">
            <summary>
            Apizr mediator dedicated to cruding
            </summary>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendCreateCommand``1(``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendCreateCommand``2(``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="entity">The entity to create</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``1(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``2(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning mapped result
            </summary>
            <param name="optionsBuilder">Options provided to the request</param>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``2(``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``3(``2,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadQuery``2(``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadQuery``3(``2,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendUpdateCommand``2(``1,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendUpdateCommand``3(``2,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendDeleteCommand``2(``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4">
            <summary>
            Apizr mediator dedicated to <typeparamref name="TApiEntity"/> cruding, getting all shorter
            </summary>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand(`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR
            </summary>
            <param name="entity">The entity to create</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand``1(``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="entity">The entity to create</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR
            </summary>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand(`1,`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand``1(`1,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR
            </summary>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Sending.IApizrCrudMediatorBase">
            <summary>
            Apizr base mediator dedicated to cruding
            </summary>
        </member>
        <member name="T:Apizr.Mediation.Cruding.UpdateCommand`2">
            <summary>
            The mediation Update command
            </summary>
            <typeparam name="TKey">The entity's crud key type</typeparam>
            <typeparam name="TRequestData">The request data type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.UpdateCommand`2.#ctor(`0,`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation Update command constructor
            </summary>
            <param name="key">The entity's crud key</param>
            <param name="requestData">The request data to send</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Mediation.Cruding.UpdateCommand`1">
            <summary>
            The mediation Update command
            </summary>
            <typeparam name="TRequestData">The request data type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Cruding.UpdateCommand`1.#ctor(System.Int32,`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation Update command constructor
            </summary>
            <param name="key">The entity's crud key</param>
            <param name="requestData">The request data to send</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions">
            <summary>
            Apizr mediator dedicated to cruding
            </summary>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="onException">Handle exception</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="entity">The entity to create</param>
            <param name="onException">Handle exception</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="entity">The entity to create</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="onException">Handle exception and return cached result</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="onException">Handle exception and return cached result</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="onException">Handle exception and return cached result</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="onException">Handle exception and return cached result</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="onException">Handle exception and return cached result</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="onException">Handle exception and return cached result</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,``0,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="onException">Handle exception</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,``0,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,``0,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,``0,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="onException">Handle exception</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,``0,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,``0,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="onException">Handle exception</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Extending.ApizrMediatorExtensions">
            <summary>
            Apizr mediator extensions to send request using MediatR by calling expression
            </summary>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``1(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}},System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="onException">Handle exception</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``1(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``1(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``1(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="token">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="onException">Handle exception</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and a cancellation token
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="token">A cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and a Polly Context
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="token">A cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``2(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api result type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="onException">Handle exception and return cached result</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``2(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api result type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``2(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``2(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``2(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="onException">Handle exception and return cached result</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="token">A cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="token">A cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``5(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="onException">Handle exception and return cached result</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``5(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``5(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``5(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrMediatorExtensions.SendFor``5(Apizr.Mediation.Requesting.Sending.IApizrMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="context">The Polly context</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``0,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="onException">Handle exception</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``0,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``0,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``0,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="onException">Handle exception</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``0,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``0,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="onException">Handle exception and return cached result</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="onException">Handle exception and return cached result</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="onException">Handle exception and return cached result</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="onException">Handle exception and return cached result</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="onException">Handle exception and return cached result</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="onException">Handle exception and return cached result</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,``0,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="onException">Handle exception</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,``0,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,``0,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,``0,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="onException">Handle exception</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,``0,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,``0,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="onException">Handle exception</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions">
            <summary>
            Apizr mediator extensions to send request using MediatR by calling expression
            </summary>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``1(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}},System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="onException">Handle exception</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``1(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``1(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``1(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="token">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="onException">Handle exception</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and a cancellation token
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="token">A cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and a Polly Context
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="token">A cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``2(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api result type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="onException">Handle exception and return cached result</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``2(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api result type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``2(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``2(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``2(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="onException">Handle exception and return cached result</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="token">A cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``3(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="token">A cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``5(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="onException">Handle exception and return cached result</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``5(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``5(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``5(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.SendFor``5(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="context">The Polly context</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Querying.IMediationQuery`1">
            <summary>
            A mediation query getting some <typeparamref name="TResultData"/> data
            </summary>
            <typeparam name="TResultData">The returned data</typeparam>
        </member>
        <member name="T:Apizr.Mediation.Querying.IMediationQueryHandler`2">
            <summary>
            The mediation query handler
            </summary>
            <typeparam name="TQuery">The query to handle</typeparam>
            <typeparam name="TResponse">The response to send back</typeparam>
        </member>
        <member name="T:Apizr.Mediation.Querying.MediationQueryBase`3">
            <summary>
            The base mediation query getting some <typeparamref name="TResultData"/> data
            </summary>
            <typeparam name="TResultData">The returned data</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Querying.MediationQueryBase`3.#ctor(System.Action{`2})">
            <summary>
            The base mediation query constructor
            </summary>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Base.ExecuteRequestBase`3">
            <summary>
            The top level base mediation execute request
            </summary>
            <typeparam name="TFormattedModelResultData">The result type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteRequestBase`3.#ctor(System.Linq.Expressions.Expression,System.Action{`2})">
            <summary>
            The top level base mediation execute request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="P:Apizr.Mediation.Requesting.Base.ExecuteRequestBase`3.ExecuteApiMethod">
            <summary>
            The request to execute
            </summary>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Base.ExecuteRequestBase`4">
            <summary>
            The top level base mediation execute request
            </summary>
            <typeparam name="TFormattedModelResultData">The result type</typeparam>
            <typeparam name="TModelRequestData">The request data type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteRequestBase`4.#ctor(System.Linq.Expressions.Expression,System.Action{`3})">
            <summary>
            The top level base mediation execute request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteRequestBase`4.#ctor(System.Linq.Expressions.Expression,`1,System.Action{`3})">
            <summary>
            The top level base mediation execute request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelRequestData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="P:Apizr.Mediation.Requesting.Base.ExecuteRequestBase`4.ModelRequestData">
            <summary>
            The data provided to the request
            </summary>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Base.ExecuteRequestBase`2">
            <summary>
            The top level base mediation execute request
            </summary>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteRequestBase`2.#ctor(System.Linq.Expressions.Expression,System.Action{`1})">
            <summary>
            The top level base mediation execute request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`8">
            <summary>
            The top level base mediation execute result request (returning result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TFormattedModelResultData">The formatted model result type</typeparam>
            <typeparam name="TApiRequestData">The api request type</typeparam>
            <typeparam name="TModelRequestData">The model request type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`8.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`2}}},System.Action{`7})">
            <summary>
            The top level base mediation execute result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`8.#ctor(System.Linq.Expressions.Expression{System.Func{`6,`0,System.Threading.Tasks.Task{`2}}},System.Action{`7})">
            <summary>
            The top level base mediation execute result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`8.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`4,System.Threading.Tasks.Task{`2}}},`5,System.Action{`7})">
            <summary>
            The top level base mediation execute result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelRequestData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`8.#ctor(System.Linq.Expressions.Expression{System.Func{`6,`0,`4,System.Threading.Tasks.Task{`2}}},`5,System.Action{`7})">
            <summary>
            The top level base mediation execute result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelRequestData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`7">
            <summary>
            The top level base mediation execute result request (returning result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The api request type</typeparam>
            <typeparam name="TModelRequestData">The model request type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`7.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`2}}},System.Action{`6})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`7.#ctor(System.Linq.Expressions.Expression{System.Func{`5,`0,System.Threading.Tasks.Task{`2}}},System.Action{`6})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`7.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`3,System.Threading.Tasks.Task{`2}}},`4,System.Action{`6})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`7.#ctor(System.Linq.Expressions.Expression{System.Func{`5,`0,`3,System.Threading.Tasks.Task{`2}}},`4,System.Action{`6})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`6">
            <summary>
            The top level base mediation execute result request (returning result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <typeparam name="TFormattedModelResultData">The formatted model result type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`6.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`2}}},System.Action{`5})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`6.#ctor(System.Linq.Expressions.Expression{System.Func{`4,`0,System.Threading.Tasks.Task{`2}}},System.Action{`5})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`6.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`2,System.Threading.Tasks.Task{`2}}},`1,System.Action{`5})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`6.#ctor(System.Linq.Expressions.Expression{System.Func{`4,`0,`2,System.Threading.Tasks.Task{`2}}},`1,System.Action{`5})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5">
            <summary>
            The top level base mediation execute result request (returning result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`2}}},System.Action{`4})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{`3,`0,System.Threading.Tasks.Task{`2}}},System.Action{`4})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`2,System.Threading.Tasks.Task{`2}}},`1,System.Action{`4})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{`3,`0,`2,System.Threading.Tasks.Task{`2}}},`1,System.Action{`4})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`4">
            <summary>
            The top level base mediation execute result request (returning result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`4.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`1}}},System.Action{`3})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`4.#ctor(System.Linq.Expressions.Expression{System.Func{`2,`0,System.Threading.Tasks.Task{`1}}},System.Action{`3})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`6">
            <summary>
            The top level base mediation execute unit request (returning no result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <typeparam name="TFormattedModelResultData">The formatted model result data type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`6.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`2,System.Threading.Tasks.Task}},`1,System.Action{`5})">
            <summary>
            The top level base mediation execute unit request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`6.#ctor(System.Linq.Expressions.Expression{System.Func{`4,`0,`2,System.Threading.Tasks.Task}},`1,System.Action{`5})">
            <summary>
            The top level base mediation execute unit request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`5">
            <summary>
            The top level base mediation execute unit request (returning no result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`2,System.Threading.Tasks.Task}},`1,System.Action{`4})">
            <summary>
            The top level base mediation execute unit request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{`3,`0,`2,System.Threading.Tasks.Task}},`1,System.Action{`4})">
            <summary>
            The top level base mediation execute unit request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`4">
            <summary>
            The top level base mediation execute unit request (returning no result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TFormattedModelResultData">The formatted model result data type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`4.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Action{`3})">
            <summary>
            The top level base mediation execute unit request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`4.#ctor(System.Linq.Expressions.Expression{System.Func{`2,`0,System.Threading.Tasks.Task}},System.Action{`3})">
            <summary>
            The top level base mediation execute unit request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`3">
            <summary>
            The top level base mediation execute unit request (returning no result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Action{`2})">
            <summary>
            The top level base mediation execute unit request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`3.#ctor(System.Linq.Expressions.Expression{System.Func{`1,`0,System.Threading.Tasks.Task}},System.Action{`2})">
            <summary>
            The top level base mediation execute unit request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Base.RequestBase`3">
            <summary>
            The top level base mediation request
            </summary>
            <typeparam name="TFormattedModelResultData">The result type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.RequestBase`3.#ctor(System.Action{`2})">
            <summary>
            The base request constructor
            </summary>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="P:Apizr.Mediation.Requesting.Base.RequestBase`3.OptionsBuilder">
            <summary>
            The request options builder
            </summary>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Base.RequestBase`4">
            <summary>
            The top level base mediation request
            </summary>
            <typeparam name="TFormattedModelResultData">The result type</typeparam>
            <typeparam name="TModelRequestData">The request type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Base.RequestBase`4.#ctor(`1,System.Action{`3})">
            <summary>
            The base request constructor
            </summary>
            <param name="modelRequestData">The request type</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="P:Apizr.Mediation.Requesting.Base.RequestBase`4.ModelRequestData">
            <summary>
            The request to send
            </summary>
        </member>
        <member name="T:Apizr.Mediation.Requesting.ExecuteResultRequest`5">
            <summary>
            The mediation execute result request (returning result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The api request type</typeparam>
            <typeparam name="TModelRequestData">The model request type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.ExecuteResultRequest`5.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`3,System.Threading.Tasks.Task{`2}}},`4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelRequestData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Mediation.Requesting.ExecuteResultRequest`5.#ctor(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,`3,System.Threading.Tasks.Task{`2}}},`4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelRequestData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Mediation.Requesting.ExecuteResultRequest`3">
            <summary>
            The mediation execute result request (returning result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.ExecuteResultRequest`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Mediation.Requesting.ExecuteResultRequest`3.#ctor(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{`2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Mediation.Requesting.ExecuteResultRequest`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`2,System.Threading.Tasks.Task{`2}}},`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Mediation.Requesting.ExecuteResultRequest`3.#ctor(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,`2,System.Threading.Tasks.Task{`2}}},`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Mediation.Requesting.ExecuteResultRequest`2">
            <summary>
            The mediation execute result request (returning result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.ExecuteResultRequest`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Mediation.Requesting.ExecuteResultRequest`2.#ctor(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{`1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Mediation.Requesting.ExecuteUnitRequest`3">
            <summary>
            The mediation execute unit request (returning no result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.ExecuteUnitRequest`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`2,System.Threading.Tasks.Task}},`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute unit request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Mediation.Requesting.ExecuteUnitRequest`3.#ctor(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,`2,System.Threading.Tasks.Task}},`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute unit request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Mediation.Requesting.ExecuteUnitRequest`1">
            <summary>
            The mediation execute unit request (returning no result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.ExecuteUnitRequest`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute unit request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Mediation.Requesting.ExecuteUnitRequest`1.#ctor(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute unit request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase`9">
            <summary>
            The top level base mediation execute result request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TFormattedModelResultData">The formatted model result type</typeparam>
            <typeparam name="TApiRequestData">The api request type</typeparam>
            <typeparam name="TModelRequestData">The model request type</typeparam>
            <typeparam name="TRequest">The request to handle</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase`9.Handle(`6,System.Threading.CancellationToken)">
            <summary>
            Handling the execute result request
            </summary>
            <param name="request">The execute result request</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase`8">
            <summary>
            The top level base mediation execute result request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The api request type</typeparam>
            <typeparam name="TModelRequestData">The model request type</typeparam>
            <typeparam name="TRequest">The request to handle</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase`8.Handle(`5,System.Threading.CancellationToken)">
            <summary>
            Handling the execute result request
            </summary>
            <param name="request">The execute result request</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase`7">
            <summary>
            The top level base mediation execute result request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <typeparam name="TFormattedModelResultData">The formatted model result type</typeparam>
            <typeparam name="TRequest">The request to handle</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase`7.Handle(`4,System.Threading.CancellationToken)">
            <summary>
            Handling the execute result request
            </summary>
            <param name="request">The execute result request</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase`6">
            <summary>
            The top level base mediation execute result request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <typeparam name="TRequest">The request to handle</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase`6.Handle(`3,System.Threading.CancellationToken)">
            <summary>
            Handling the execute result request
            </summary>
            <param name="request">The execute result request</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase`5">
            <summary>
            The top level base mediation execute result request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <typeparam name="TRequest">The request to handle</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase`5.Handle(`2,System.Threading.CancellationToken)">
            <summary>
            Handling the execute result request
            </summary>
            <param name="request">The execute result request</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`7">
            <summary>
            The top level base mediation execute unit request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <typeparam name="TFormattedModelResultData">The formatted model result data type</typeparam>
            <typeparam name="TRequest">The execute unit request to handle</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`7.Handle(`4,System.Threading.CancellationToken)">
            <summary>
            Handling the execute unit request
            </summary>
            <param name="request">The execute result request</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`6">
            <summary>
            The top level base mediation execute unit request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <typeparam name="TRequest">The execute unit request to handle</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`6.Handle(`3,System.Threading.CancellationToken)">
            <summary>
            Handling the execute unit request
            </summary>
            <param name="request">The execute result request</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`5">
            <summary>
            The top level base mediation execute unit request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TFormattedModelResultData">The formatted model result data type</typeparam>
            <typeparam name="TRequest">The execute unit request to handle</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`5.Handle(`2,System.Threading.CancellationToken)">
            <summary>
            Handling the execute unit request
            </summary>
            <param name="request">The execute result request</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`4">
            <summary>
            The top level base mediation execute unit request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TRequest">The execute unit request to handle</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`4.Handle(`1,System.Threading.CancellationToken)">
            <summary>
            Handling the execute unit request
            </summary>
            <param name="request">The execute result request</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Handling.Base.RequestHandlerBase`2">
            <summary>
            The top level base request handler
            </summary>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler`5">
            <summary>
            The mediation execute result request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The api request type</typeparam>
            <typeparam name="TModelRequestData">The model request type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler`5.Handle(Apizr.Mediation.Requesting.ExecuteResultRequest{`0,`1,`2,`3,`4},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler`3">
            <summary>
            The mediation execute result request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler`3.Handle(Apizr.Mediation.Requesting.ExecuteResultRequest{`0,`1,`2},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler`2">
            <summary>
            The mediation execute result request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler`2.Handle(Apizr.Mediation.Requesting.ExecuteResultRequest{`0,`1},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Requesting.Handling.ExecuteUnitRequestHandler`3">
            <summary>
            The mediation execute unit request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Handling.ExecuteUnitRequestHandler`3.Handle(Apizr.Mediation.Requesting.ExecuteUnitRequest{`0,`1,`2},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Requesting.Handling.ExecuteUnitRequestHandler`1">
            <summary>
            The mediation execute unit request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Handling.ExecuteUnitRequestHandler`1.Handle(Apizr.Mediation.Requesting.ExecuteUnitRequest{`0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Requesting.Sending.ApizrMediator">
            <summary>
            Apizr mediator to send request using MediatR by calling expression
            </summary>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``2,System.Threading.Tasks.Task}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{``2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Requesting.Sending.ApizrMediator`1">
            <summary>
            Apizr mediator to send request using MediatR by calling expression
            </summary>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator`1.SendFor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator`1.SendFor(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``1,System.Threading.Tasks.Task}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator`1.SendFor``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator`1.SendFor``1(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{``0}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task{``1}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``1,System.Threading.Tasks.Task{``1}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator`1.SendFor``4(System.Linq.Expressions.Expression{System.Func{`0,``2,System.Threading.Tasks.Task{``1}}},``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.ApizrMediator`1.SendFor``4(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``2,System.Threading.Tasks.Task{``1}}},``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mediation.Requesting.Sending.IApizrMediator">
            <summary>
            Apizr mediator to send request using MediatR by calling expression
            </summary>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``2,System.Threading.Tasks.Task}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api result type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{``2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Sending.IApizrMediator`1">
            <summary>
            <see cref="T:Apizr.Mediation.Requesting.Sending.IApizrMediator"/> but dedicated to <typeparamref name="TWebApi"/>, getting all shorter
            </summary>
            <typeparam name="TWebApi">The api interface to play with MediatR</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR
            </summary>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token
            </summary>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request
            </summary>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``1,System.Threading.Tasks.Task}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token
            </summary>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR
            </summary>
            <typeparam name="TApiData">The api result type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``1(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{``0}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token
            </summary>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task{``1}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning a mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``1,System.Threading.Tasks.Task{``1}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``4(System.Linq.Expressions.Expression{System.Func{`0,``2,System.Threading.Tasks.Task{``1}}},``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning a mapped result
            </summary>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``4(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``2,System.Threading.Tasks.Task{``1}}},``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Sending.IApizrMediatorBase">
            <summary>
            Apizr base mediator
            </summary>
        </member>
    </members>
</doc>
