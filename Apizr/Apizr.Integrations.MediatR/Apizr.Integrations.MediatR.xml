<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Apizr.Integrations.MediatR</name>
    </assembly>
    <members>
        <member name="M:Apizr.MediationOptionsBuilderExtensions.WithMediation(Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder)">
            <summary>
            Let Apizr handle requests execution with some mediation
            </summary>
            <param name="optionsBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.MediationOptionsBuilderExtensions.WithMediation(Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder)">
            <summary>
            Let Apizr handle requests execution with some mediation
            </summary>
            <param name="optionsBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.GetCrudFor``1">
            <summary>
            Get a Crud mediator instance for an entity type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.GetCrudFor``2">
            <summary>
            Get a Crud mediator instance for an entity type with a specific key type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.GetCrudFor``3">
            <summary>
            Get a Crud mediator instance for an entity type with a specific key type and ReadAll result type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.GetCrudFor``4">
            <summary>
            Get a Crud mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll request params type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.GetFor``1">
            <summary>
            Get an api mediator instance
            </summary>
            <typeparam name="TWebApi">The managed api type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.TryGetCrudFor``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,System.Int32,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{System.String,System.Object}}@)">
            <summary>
            Try to get a Crud mediator instance for an entity type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.TryGetCrudFor``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{System.String,System.Object}}@)">
            <summary>
            Try to get a Crud mediator instance for an entity type with a specific key type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.TryGetCrudFor``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,System.Collections.Generic.IDictionary{System.String,System.Object}}@)">
            <summary>
            Try to get a Crud mediator instance for an entity type with a specific key type and ReadAll result type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.TryGetCrudFor``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3}@)">
            <summary>
            Try to get a Crud mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll request params type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.TryGetFor``1(Apizr.Mediation.Requesting.Sending.IApizrMediator{``0}@)">
            <summary>
            Try to get an api mediator instance
            </summary>
            <typeparam name="TWebApi">The managed api type</typeparam>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator">
            <summary>
            Apizr mediator dedicated to cruding
            </summary>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendCreateCommand``1(``0,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendCreateCommand``1(``0,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendCreateCommand``1(``0,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendCreateCommand``1(``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendCreateCommand``2(``0,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="entity">The entity to create</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendCreateCommand``2(``0,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendCreateCommand``2(``0,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="entity">The entity to create</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendCreateCommand``2(``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``1(System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``1(Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``1(System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``1(System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``1(System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``1(System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``1(Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``1(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``2(System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning mapped result
            </summary>
            <param name="clearCache">Clear request cache before executing</param>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``2(Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``2(System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``2(System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``2(System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``2(System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``2(Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``2(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``2(``1,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``2(``1,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``2(``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``2(``1,System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``2(``1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``2(``1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``2(``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``2(``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``3(``2,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``3(``2,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``3(``2,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``3(``2,System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``3(``2,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``3(``2,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``3(``2,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadAllQuery``3(``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadQuery``2(``1,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadQuery``2(``1,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadQuery``2(``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadQuery``2(``1,System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadQuery``2(``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadQuery``2(``1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadQuery``2(``1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadQuery``2(``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadQuery``3(``2,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadQuery``3(``2,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadQuery``3(``2,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadQuery``3(``2,System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadQuery``3(``2,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadQuery``3(``2,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadQuery``3(``2,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendReadQuery``3(``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendUpdateCommand``2(``1,``0,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendUpdateCommand``2(``1,``0,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendUpdateCommand``2(``1,``0,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendUpdateCommand``2(``1,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendUpdateCommand``3(``2,``0,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendUpdateCommand``3(``2,``0,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendUpdateCommand``3(``2,``0,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendUpdateCommand``3(``2,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendDeleteCommand``2(``1,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendDeleteCommand``2(``1,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendDeleteCommand``2(``1,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.SendDeleteCommand``2(``1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4">
            <summary>
            Apizr mediator dedicated to <typeparamref name="TApiEntity"/> cruding, getting all shorter
            </summary>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand(`0,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR
            </summary>
            <param name="entity">The entity to create</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand(`0,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR
            </summary>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand(`0,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR
            </summary>
            <param name="entity">The entity to create</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand(`0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR
            </summary>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand``1(``0,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="entity">The entity to create</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand``1(``0,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand``1(``0,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="entity">The entity to create</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand``1(``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR
            </summary>
            <param name="key">The entity key</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR
            </summary>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR
            </summary>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority
            </summary>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR
            </summary>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority
            </summary>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority
            </summary>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority
            </summary>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority returning a mapped result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand(`1,`0,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand(`1,`0,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand(`1,`0,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand(`1,`0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand``1(`1,``0,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand``1(`1,``0,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand``1(`1,``0,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand``1(`1,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand(`1,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR
            </summary>
            <param name="key">The entity key</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand(`1,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR
            </summary>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand(`1,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR
            </summary>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand(`1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR
            </summary>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Sending.IApizrMediator">
            <summary>
            Apizr mediator to send request using MediatR by calling expression
            </summary>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}},System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="token">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and a cancellation token
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="token">A cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and a Polly Context
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="token">A cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api result type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">A cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">A cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Mediation.Requesting.Sending.IApizrMediator`1">
            <summary>
            <see cref="T:Apizr.Mediation.Requesting.Sending.IApizrMediator"/> but dedicated to <typeparamref name="TWebApi"/>, getting all shorter
            </summary>
            <typeparam name="TWebApi">The api interface to play with MediatR</typeparam>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR
            </summary>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,System.Threading.Tasks.Task}},Polly.Context,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context
            </summary>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task}},System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token
            </summary>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token
            </summary>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="token">The cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task}},``0,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request
            </summary>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,``1,System.Threading.Tasks.Task}},``0,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and a cancellation token
            </summary>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="token">A cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,``1,System.Threading.Tasks.Task}},``0,Polly.Context,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and a Polly Context
            </summary>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,``1,System.Threading.Tasks.Task}},``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token
            </summary>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="token">A cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}},System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR
            </summary>
            <typeparam name="TApiData">The api result type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,System.Threading.Tasks.Task{``0}}},Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context
            </summary>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{``0}}},System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token
            </summary>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{``0}}},Polly.Context,System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token
            </summary>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``1}}},System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR returning a mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and returning a mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{``1}}},System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task{``1}}},``0,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning a mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,``1,System.Threading.Tasks.Task{``1}}},``0,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning a mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,``1,System.Threading.Tasks.Task{``1}}},``0,System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">A cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,``1,System.Threading.Tasks.Task{``1}}},``0,Polly.Context,System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">A cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``4(System.Linq.Expressions.Expression{System.Func{`0,``2,System.Threading.Tasks.Task{``1}}},``3,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning a mapped result
            </summary>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``4(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,``2,System.Threading.Tasks.Task{``1}}},``3,System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``4(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,``2,System.Threading.Tasks.Task{``1}}},``3,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning a mapped result
            </summary>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Mediation.Requesting.Sending.IApizrMediator`1.SendFor``4(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,``2,System.Threading.Tasks.Task{``1}}},``3,Polly.Context,System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result
            </summary>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
    </members>
</doc>
