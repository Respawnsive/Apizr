<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Apizr.Integrations.Optional</name>
    </assembly>
    <members>
        <member name="M:Apizr.OptionalOptionsBuilderExtensions.WithOptionalMediation(Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder)">
            <summary>
            Let Apizr handle requests execution with some mediation and optional result
            </summary>
            <param name="optionsBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.OptionalOptionsBuilderExtensions.WithOptionalMediation(Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder)">
            <summary>
            Let Apizr handle requests execution with some mediation and optional result
            </summary>
            <param name="optionsBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.GetCrudFor``1">
            <summary>
            Get a Crud optional mediator instance for an entity type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.GetCrudFor``2">
            <summary>
            Get a Crud optional mediator instance for an entity type with a specific key type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.GetCrudFor``3">
            <summary>
            Get a Crud optional mediator instance for an entity type with a specific key type and ReadAll result type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.GetCrudFor``4">
            <summary>
            Get a Crud optional mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll request params type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.GetFor``1">
            <summary>
            Get an api optional mediator instance
            </summary>
            <typeparam name="TWebApi">The managed api type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.TryGetCrudFor``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,System.Int32,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{System.String,System.Object}}@)">
            <summary>
            Try to get a Crud optional mediator instance for an entity type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.TryGetCrudFor``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{System.String,System.Object}}@)">
            <summary>
            Try to get a Crud optional mediator instance for an entity type with a specific key type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.TryGetCrudFor``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,System.Collections.Generic.IDictionary{System.String,System.Object}}@)">
            <summary>
            Try to get a Crud optional mediator instance for an entity type with a specific key type and ReadAll result type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.TryGetCrudFor``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3}@)">
            <summary>
            Try to get a Crud optional mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll request params type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.TryGetFor``1(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0}@)">
            <summary>
            Try to get an api optional mediator instance
            </summary>
            <typeparam name="TWebApi">The managed api type</typeparam>
            <returns></returns>
        </member>
        <member name="T:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator">
            <summary>
            Apizr mediator dedicated to cruding and with optional result
            </summary>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``1(``0)">
            <summary>
            Send a <see cref="T:Apizr.Optional.Cruding.CreateOptionalCommand`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="entity">The entity to create</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``1(``0,Polly.Context)">
            <summary>
            Send a <see cref="T:Apizr.Optional.Cruding.CreateOptionalCommand`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``1(``0,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Optional.Cruding.CreateOptionalCommand`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``1(``0,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Optional.Cruding.CreateOptionalCommand`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``2(``0)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="entity">The entity to create</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``2(``0,Polly.Context)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``2(``0,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="entity">The entity to create</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``2(``0,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Int32,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning mapped optional result
            </summary>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(Polly.Context,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Int32,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Int32,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,Polly.Context,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Int32,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Int32,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Int32,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``2(``1,``0)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``2(``1,``0,Polly.Context)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``2(``1,``0,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``2(``1,``0,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``3(``2,``0)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``3(``2,``0,Polly.Context)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``3(``2,``0,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``3(``2,``0,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand``2(``1)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand``2(``1,Polly.Context)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand``2(``1,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand``2(``1,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4">
            <summary>
            <see cref="T:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator"/> but dedicated to <typeparamref name="TApiEntity"/> cruding with optional result, getting all shorter
            </summary>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand(`0)">
            <summary>
            Send a <see cref="T:Apizr.Optional.Cruding.CreateOptionalCommand`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="payload">The entity to create</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand(`0,Polly.Context)">
            <summary>
            Send a <see cref="T:Apizr.Optional.Cruding.CreateOptionalCommand`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="payload">The entity to create</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand(`0,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Optional.Cruding.CreateOptionalCommand`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="payload">The entity to create</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand(`0,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Optional.Cruding.CreateOptionalCommand`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="payload">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand``1(``0)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="payload">The entity to create</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand``1(``0,Polly.Context)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="payload">The entity to create</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand``1(``0,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="payload">The entity to create</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand``1(``0,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="payload">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Int32,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(Polly.Context,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Int32,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Int32,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,Polly.Context,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Int32,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Int32,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Int32,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand(`1,`0)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="payload">The entity to update</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand(`1,`0,Polly.Context)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="payload">The entity to update</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand(`1,`0,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="payload">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand(`1,`0,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="payload">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand``1(`1,``0)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="payload">The entity to update</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand``1(`1,``0,Polly.Context)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="payload">The entity to update</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand``1(`1,``0,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="payload">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand``1(`1,``0,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="payload">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand(`1)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand(`1,Polly.Context)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand(`1,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand(`1,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Action{``0})">
            <summary>
            The action will be invoked just before throwing any exception that might have occurred during request execution
            </summary>
            <typeparam name="TResult">The returned result (from fetch if succeed or cache if failed)</typeparam>
            <param name="option"></param>
            <param name="onResult">The action to invoke</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Func{``0,Apizr.ApizrException{``0},System.Boolean})">
            <summary>
            The function will be invoked with the returned result and potential occurred exception.
            You might decide to throw from the function itself, or to return the success boolean.
            </summary>
            <typeparam name="TResult">The returned result (from fetch if succeed or cache if failed)</typeparam>
            <param name="option"></param>
            <param name="onResult">The function to invoke</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Func{``0,Apizr.ApizrException{``0},System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            The function will be invoked with the returned result and potential occurred exception.
            Checking exception, you might decide to throw it from the function itself, or to return the success boolean.
            </summary>
            <typeparam name="TResult">The returned result (from fetch if succeed or cache if failed)</typeparam>
            <param name="option"></param>
            <param name="onResult">The function to invoke</param>
        </member>
        <member name="M:Apizr.Optional.Extending.OptionalMediationExtensions.CatchAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Action{System.Exception},System.Boolean)">
            <summary>
            Return <typeparamref name="TResult"/> (from fetch or cache), no matter of exception (handled by <paramref name="onException"/>).
            Could throw if you ask to with <paramref name="letThrowOnExceptionWithEmptyCache"/> in case of exception with empty cache (<paramref name="onException"/> won't be called),
            otherwise return the empty cache (have to be managed) after calling <paramref name="onException"/> action.
            </summary>
            <typeparam name="TResult">The returned result (from fetch if succeed or cache if failed)</typeparam>
            <param name="option"></param>
            <param name="onException">Action to call to handle exception (like informing the user) before returning result from cache</param>
            <param name="letThrowOnExceptionWithEmptyCache">True to let it throw the inner exception in case of empty cache, False to handle it with <paramref name="onException"/> action and return empty cache result</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator">
            <summary>
            Apizr mediator to send request using MediatR by calling expression and returning optional result
            </summary>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}})">
            <summary>
            Send an api call to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1)">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and a cancellation token and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="token">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context)">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and a Polly Context and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="token">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api result type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1">
            <summary>
            <see cref="T:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator"/> but dedicated to <typeparamref name="TWebApi"/> with optional result, getting all shorter
            </summary>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}})">
            <summary>
            Send an api call to Apizr using MediatR and returning an optional result
            </summary>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,System.Threading.Tasks.Task}},Polly.Context)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and returning an optional result
            </summary>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task}},System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token and returning an optional result
            </summary>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional result
            </summary>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task}},``0)">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and returning an optional result
            </summary>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,``1,System.Threading.Tasks.Task}},``0,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and a cancellation token and returning an optional result
            </summary>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="token">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,``1,System.Threading.Tasks.Task}},``0,Polly.Context)">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and a Polly Context and returning an optional result
            </summary>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,``1,System.Threading.Tasks.Task}},``0,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token and returning an optional result
            </summary>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="token">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}},System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiData">The api result type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,System.Threading.Tasks.Task{``0}}},Polly.Context,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and returning an optional result
            </summary>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{``0}}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token and returning an optional result
            </summary>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{``0}}},Polly.Context,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional result
            </summary>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``1}}},System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR returning an optional mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and returning an optional mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{``1}}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task{``1}}},``0,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,``1,System.Threading.Tasks.Task{``1}}},``0,Polly.Context,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning an optional mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,``1,System.Threading.Tasks.Task{``1}}},``0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,``1,System.Threading.Tasks.Task{``1}}},``0,Polly.Context,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``4(System.Linq.Expressions.Expression{System.Func{`0,``2,System.Threading.Tasks.Task{``1}}},``3,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result
            </summary>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``4(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,``2,System.Threading.Tasks.Task{``1}}},``3,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``4(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,``2,System.Threading.Tasks.Task{``1}}},``3,Polly.Context,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning an optional mapped result
            </summary>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``4(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,``2,System.Threading.Tasks.Task{``1}}},``3,Polly.Context,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
    </members>
</doc>
