<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Apizr.Integrations.Optional</name>
    </assembly>
    <members>
        <member name="M:Apizr.ApizrExtendedOptionsBuilderExtensions.WithOptionalMediation(Apizr.IApizrExtendedOptionsBuilder)">
            <summary>
            Let Apizr handle requests execution with some mediation and optional result
            </summary>
            <param name="optionsBuilder"></param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4">
            <summary>
            <typeparamref name="T:MediatR.IMediator"/> but dedicated to <see cref="!:TApiEntity"/> cruding with optional result, getting all shorter
            </summary>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendCreateOptionalCommand(`0)">
            <summary>
            Send a <typeparamref name="T:Apizr.Optional.Cruding.CreateOptionalCommand`1"/> to Apizr with MediatR returning an optional result
            </summary>
            <param name="payload">The entity to create</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendCreateOptionalCommand(`0,System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Optional.Cruding.CreateOptionalCommand`1"/> to Apizr with MediatR returning an optional result
            </summary>
            <param name="payload">The entity to create</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendCreateOptionalCommand``1(``0)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr with MediatR returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="payload">The entity to create</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendCreateOptionalCommand``1(``0,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr with MediatR returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="payload">The entity to create</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadAllOptionalQuery">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR returning an optional result
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadAllOptionalQuery(System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR returning an optional result
            </summary>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadAllOptionalQuery(System.Int32)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR with priority returning an optional result
            </summary>
            <param name="priority">The execution priority</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadAllOptionalQuery(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR with priority returning an optional result
            </summary>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadAllOptionalQuery``1">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR returning mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Threading.CancellationToken)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR returning mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Int32)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR with priority returning mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="priority">The execution priority</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR with priority returning mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadAllOptionalQuery(`3)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR returning an optional result
            </summary>
            <param name="readAllParams">The read all filters</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR returning an optional result
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Int32)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR with priority returning an optional result
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR with priority returning an optional result
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR returning a mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR returning a mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Int32)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR with priority returning a mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr with MediatR with priority returning a mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadOptionalQuery(`1)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr with MediatR returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr with MediatR returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Int32)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr with MediatR with priority returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr with MediatR with priority returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadOptionalQuery``1(`1)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr with MediatR returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr with MediatR returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Int32)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr with MediatR with priority returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr with MediatR with priority returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendUpdateOptionalCommand(`1,`0)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr with MediatR returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="payload">The entity to update</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendUpdateOptionalCommand(`1,`0,System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr with MediatR returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="payload">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendUpdateOptionalCommand``1(`1,``0)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr with MediatR returning an optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="payload">The entity to update</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendUpdateOptionalCommand``1(`1,``0,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <typeparamref name="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr with MediatR returning an optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="payload">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendDeleteOptionalCommand(`1)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr with MediatR returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ICrudOptionalMediator`4.SendDeleteOptionalCommand(`1,System.Threading.CancellationToken)">
            <summary>
            Send a <typeparamref name="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr with MediatR returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Action{``0})">
            <summary>
            The action will be invoked just before throwing any exception that might have occurred during request execution
            </summary>
            <typeparam name="TResult">The returned result (from fetch if succeed or cache if failed)</typeparam>
            <param name="option"></param>
            <param name="onResult">The action to invoke</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Func{``0,Apizr.ApizrException{``0},System.Boolean})">
            <summary>
            The function will be invoked with the returned result and potential occurred exception.
            You might decide to throw from the function itself, or to return the success boolean.
            </summary>
            <typeparam name="TResult">The returned result (from fetch if succeed or cache if failed)</typeparam>
            <param name="option"></param>
            <param name="onResult">The function to invoke</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Func{``0,Apizr.ApizrException{``0},System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            The function will be invoked with the returned result and potential occurred exception.
            Checking exception, you might decide to throw it from the function itself, or to return the success boolean.
            </summary>
            <typeparam name="TResult">The returned result (from fetch if succeed or cache if failed)</typeparam>
            <param name="option"></param>
            <param name="onResult">The function to invoke</param>
        </member>
        <member name="M:Apizr.Optional.Extending.OptionalMediationExtensions.CatchAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Action{System.Exception},System.Boolean)">
            <summary>
            Return <see cref="!:TResult"/> (from fetch or cache), no matter of exception (handled by <see cref="!:onException"/>).
            Could throw if you ask to with <see cref="!:letThrowOnExceptionWithEmptyCache"/> in case of exception with empty cache (<see cref="!:onException"/> won't be called),
            otherwise return the empty cache (have to be managed) after calling <see cref="!:onException"/> action.
            </summary>
            <typeparam name="TResult">The returned result (from fetch if succeed or cache if failed)</typeparam>
            <param name="option"></param>
            <param name="onException">Action to call to handle exception (like informing the user) before returning result from cache</param>
            <param name="letThrowOnExceptionWithEmptyCache">True to let it throw the inner exception in case of empty cache, False to handle it with <see cref="!:onException"/> action and return empty cache result</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Optional.Requesting.Sending.IOptionalMediator`1">
            <summary>
            <typeparamref name="T:MediatR.IMediator"/> but dedicated to <see cref="!:TWebApi"/> with optional result, getting all shorter
            </summary>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IOptionalMediator`1.SendFor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}})">
            <summary>
            Send an api call command to Apizr with MediatR returning an optional result
            </summary>
            <param name="executeApiMethod">The <see cref="!:TWebApi"/> call to execute</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IOptionalMediator`1.SendFor(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task}},System.Threading.CancellationToken)">
            <summary>
            Send a cancellable api call command to Apizr with MediatR returning an optional result
            </summary>
            <param name="executeApiMethod">The <see cref="!:TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IOptionalMediator`1.SendFor``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}})">
            <summary>
            Send an api call query to Apizr with MediatR returning an optional result
            </summary>
            <typeparam name="TApiResponse">The api response</typeparam>
            <param name="executeApiMethod">The <see cref="!:TWebApi"/> call to execute</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IOptionalMediator`1.SendFor``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{``0}}},System.Threading.CancellationToken)">
            <summary>
            Send a cancellable api call query to Apizr with MediatR returning an optional result
            </summary>
            <typeparam name="TApiResponse">The api response</typeparam>
            <param name="executeApiMethod">The <see cref="!:TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``1}}})">
            <summary>
            Send an api call query to Apizr with MediatR returning a mapped optional result
            </summary>
            <typeparam name="TModelResponse">The mapped model response</typeparam>
            <typeparam name="TApiResponse">The api response</typeparam>
            <param name="executeApiMethod">The <see cref="!:TWebApi"/> call to execute</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken)">
            <summary>
            Send a cancellable api call query to Apizr with MediatR returning a mapped optional result
            </summary>
            <typeparam name="TModelResponse">The mapped model response</typeparam>
            <typeparam name="TApiResponse">The api response</typeparam>
            <param name="executeApiMethod">The <see cref="!:TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,Apizr.Mapping.IMappingHandler,System.Threading.Tasks.Task{``1}}})">
            <summary>
            Send a mapped api call query to Apizr with MediatR returning a mapped optional result
            </summary>
            <typeparam name="TModelResponse">The mapped model response</typeparam>
            <typeparam name="TApiResponse">The api response</typeparam>
            <param name="executeApiMethod">The <see cref="!:TWebApi"/> call to execute</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,Apizr.Mapping.IMappingHandler,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken)">
            <summary>
            Send a cancellable mapped api call query to Apizr with MediatR returning a mapped optional result
            </summary>
            <typeparam name="TModelResponse">The mapped model response</typeparam>
            <typeparam name="TApiResponse">The api response</typeparam>
            <param name="executeApiMethod">The <see cref="!:TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
    </members>
</doc>
