<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Apizr.Integrations.Shiny</name>
    </assembly>
    <members>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrCrudFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.IApizrExtendedOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <see cref="!:T"/> object type (class),
            with key of type <see cref="T:System.Int32"/> and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <typeparam name="T">The object type to manage with crud api calls</typeparam>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrCrudFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.IApizrExtendedOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <see cref="!:T"/> object type (class), 
            with key of type <see cref="!:TKey"/> (primitive) and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <typeparam name="T">The object type to manage with crud api calls</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrCrudFor``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.IApizrExtendedOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <see cref="!:T"/> object type (class), 
            with key of type <see cref="!:TKey"/> (primitive) and "ReadAll" query result of type <see cref="!:TReadAllResult"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrCrudFor``4(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.IApizrExtendedOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <see cref="!:T"/> object type (class), 
            with key of type <see cref="!:TKey"/> (primitive) and "ReadAll" query result of type <see cref="!:TReadAllResult"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters</typeparam>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrCrudFor``5(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.IApizrExtendedOptionsBuilder})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for <see cref="!:T"/> object type, 
            with key of type <see cref="!:TKey"/> (primitive) and "ReadAll" query result of type <see cref="!:TReadAllResult"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <typeparam name="T">The object type to manage with crud api calls</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters</typeparam>
            <typeparam name="TApizrManager">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation</typeparam>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.IApizrExtendedOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <see cref="!:crudedType"/> object type (class), 
            with key of type <see cref="T:System.Int32"/> and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <param name="services">The service collection</param>
            <param name="crudedType">The object type to manage with crud api calls (class)</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.IApizrExtendedOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <see cref="!:crudedType"/> object type (class), 
            with key of type <see cref="!:crudedKeyType"/> (primitive) and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <param name="services">The service collection</param>
            <param name="crudedType">The object type to manage with crud api calls (class)</param>
            <param name="crudedKeyType">The object key type (primitive)</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Action{Apizr.IApizrExtendedOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <see cref="!:crudedType"/> object type (class), 
            with key of type <see cref="!:crudedKeyType"/> (primitive) and "ReadAll" query result of type <see cref="!:crudedReadAllResultType"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <param name="services">The service collection</param>
            <param name="crudedType">The object type to manage with crud api calls (class)</param>
            <param name="crudedKeyType">The object key type (primitive)</param>
            <param name="crudedReadAllResultType">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.IApizrExtendedOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <see cref="!:crudedType"/> object type (class), 
            with key of type <see cref="!:crudedKeyType"/> (primitive) and "ReadAll" query result of type <see cref="!:crudedReadAllResultType"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <param name="services">The service collection</param>
            <param name="crudedType">The object type to manage with crud api calls (class)</param>
            <param name="crudedKeyType">The object key type (primitive)</param>
            <param name="crudedReadAllResultType">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</param>
            <param name="crudedReadAllParamsType">ReadAll query parameters type</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.IApizrExtendedOptionsBuilder})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for <see cref="!:crudedType"/> object type,
            with key of type <see cref="!:crudedKeyType"/> (primitive) and "ReadAll" query result of type <see cref="!:crudedReadAllResultType"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <param name="services">The service collection</param>
            <param name="crudedType">The object type to manage with crud api calls</param>
            <param name="crudedKeyType">The object key type</param>
            <param name="crudedReadAllResultType">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</param>
            <param name="crudedReadAllParamsType">ReadAll query parameters type</param>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.IApizrExtendedOptionsBuilder},System.Type[])">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Requesting.CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="T:Apizr.Requesting.CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Requesting.CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <param name="assemblies">Any assembly to scan for <see cref="T:Apizr.Requesting.CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.IApizrExtendedOptionsBuilder},System.Type[])">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Requesting.CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="services">The service collection</param>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="T:Apizr.Requesting.CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Requesting.CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="services">The service collection</param>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <param name="assemblies">Any assembly to scan for <see cref="T:Apizr.Requesting.CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.IApizrExtendedOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/>
            </summary>
            <typeparam name="TWebApi">The web api interface to manage</typeparam>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.IApizrExtendedOptionsBuilder})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/>
            </summary>
            <typeparam name="TWebApi">The web api interface to manage</typeparam>
            <typeparam name="TApizrManager">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation</typeparam>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.IApizrExtendedOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/>
            </summary>
            <param name="services">The service collection</param>
            <param name="webApiType">The web api interface type to manage</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.IApizrExtendedOptionsBuilder},System.Type[])">
            <summary>
            Register a <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.WebApiAttribute"/> decorated interfaces
            </summary>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="T:Apizr.WebApiAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])">
            <summary>
            Register a <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.WebApiAttribute"/> decorated interfaces
            </summary>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <param name="assemblies">Any assembly to scan for <see cref="T:Apizr.WebApiAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.IApizrExtendedOptionsBuilder},System.Type[])">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.WebApiAttribute"/> decorated interfaces
            </summary>
            <param name="services">The service collection</param>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="T:Apizr.WebApiAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.WebApiAttribute"/> decorated interfaces
            </summary>
            <param name="services">The service collection</param>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <param name="assemblies">Any assembly to scan for <see cref="T:Apizr.WebApiAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.UseApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.IApizrExtendedOptionsBuilder})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/>
            </summary>
            <param name="services">The service collection</param>
            <param name="webApiType">The web api interface type to manage</param>
            <param name="apizrManagerType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
    </members>
</doc>
