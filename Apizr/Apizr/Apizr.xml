<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Apizr</name>
    </assembly>
    <members>
        <member name="M:Apizr.Apizr.Create(System.Action{Apizr.Configuring.Registry.IApizrRegistryBuilder},System.Action{Apizr.Configuring.Common.IApizrCommonOptionsBuilder})">
            <summary>
            Create a registry with all managers built with both common and proper options
            </summary>
            <param name="registryBuilder">The registry builder with access to proper options</param>
            <param name="commonOptionsBuilder">The common options shared by all managers</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Apizr.CreateCrudFor``1(System.Action{Apizr.Configuring.IApizrOptionsBuilder})">
            <summary>
            Create a <see cref="T:Apizr.ApizrManager`1"/> instance for <typeparamref name="T"/> object type (class), 
            with key of type <see cref="T:System.Int32"/> and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Apizr.CreateCrudFor``2(System.Action{Apizr.Configuring.IApizrOptionsBuilder})">
            <summary>
            Create a <see cref="T:Apizr.ApizrManager`1"/> instance for <typeparamref name="T"/> object type (class), 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Apizr.CreateCrudFor``3(System.Action{Apizr.Configuring.IApizrOptionsBuilder})">
            <summary>
            Create a <see cref="T:Apizr.ApizrManager`1"/> instance for <typeparamref name="T"/> object type (class), 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <typeparamref name="TReadAllResult"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Apizr.CreateCrudFor``4(System.Action{Apizr.Configuring.IApizrOptionsBuilder})">
            <summary>
            Create a <see cref="T:Apizr.ApizrManager`1"/> instance for <typeparamref name="T"/> object type (class), 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <typeparamref name="TReadAllResult"/>
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters</typeparam>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Apizr.CreateCrudFor``5(System.Func{Apizr.ILazyFactory{Apizr.Requesting.ICrudApi{``0,``1,``2,``3}},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Polly.Registry.IReadOnlyPolicyRegistry{System.String},Apizr.Configuring.IApizrOptionsBase,``4},System.Action{Apizr.Configuring.IApizrOptionsBuilder})">
            <summary>
            Create a <typeparamref name="TApizrManager"/> instance for a managed crud api for <typeparamref name="T"/> object (class), 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <typeparamref name="TReadAllResult"/>
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <typeparam name="TApizrManager">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters</typeparam>
            <param name="apizrManagerFactory">The custom manager implementation instance factory</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Apizr.CreateFor``1(System.Action{Apizr.Configuring.IApizrOptionsBuilder})">
            <summary>
            Create a <see cref="T:Apizr.ApizrManager`1"/> instance
            </summary>
            <typeparam name="TWebApi">The web api interface to manage</typeparam>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Apizr.CreateFor``2(System.Func{Apizr.ILazyFactory{``0},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Polly.Registry.IReadOnlyPolicyRegistry{System.String},Apizr.Configuring.IApizrOptions{``0},``1},System.Action{Apizr.Configuring.IApizrOptionsBuilder})">
            <summary>
            Create a <typeparamref name="TApizrManager"/> instance for a managed <typeparamref name="TWebApi"/>
            </summary>
            <typeparam name="TWebApi">The web api interface to manage</typeparam>
            <typeparam name="TApizrManager">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation</typeparam>
            <param name="apizrManagerFactory">The custom manager implementation instance factory</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.ApizrException">
            <summary>
            An exception with optional cached object
            </summary>
        </member>
        <member name="T:Apizr.ApizrException`1">
            <summary>
            An exception with optional cached <typeparamref name="TResult"/>
            </summary>
        </member>
        <member name="M:Apizr.Authenticating.AuthenticationHandlerBase.CloneHttpRequestMessageAsync(System.Net.Http.HttpRequestMessage)">
            <summary>
            Clone a HttpRequestMessage
            Credit: http://stackoverflow.com/questions/25044166/how-to-clone-a-httprequestmessage-when-the-original-request-has-content
            </summary>
            <param name="req">The request</param>
            <returns>A copy of the request</returns>
        </member>
        <member name="M:Apizr.Authenticating.IAuthenticationHandler.GetToken">
            <summary>
            The method called to get token from settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apizr.Authenticating.IAuthenticationHandler.SetToken(System.String)">
            <summary>
            The method called to save token into settings
            </summary>
            <param name="token">The token to save</param>
        </member>
        <member name="M:Apizr.Authenticating.IAuthenticationHandler.RefreshTokenAsync(System.Net.Http.HttpRequestMessage)">
            <summary>
            The method called to refresh token when rejected or empty
            </summary>
            <param name="request">The request to authenticate</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Caching.Attributes.CacheAttribute">
            <summary>
            Tells Apizr to cache all methods returning result when decorating an interface or a specific one when decorating a method
            You have to provide an <see cref="T:Apizr.Caching.ICacheHandler"/> mapping implementation to Apizr to use this feature
            </summary>
        </member>
        <member name="T:Apizr.Caching.Attributes.CacheAttributeBase">
            <summary>
            Tells Apizr to cache all methods returning result when decorating an interface or a specific one when decorating a method
            You have to provide an <see cref="T:Apizr.Caching.ICacheHandler"/> mapping implementation to Apizr to use this feature
            </summary>
        </member>
        <member name="P:Apizr.Caching.Attributes.CacheAttributeBase.LifeSpan">
            <summary>
            This specific caching life time
            </summary>
        </member>
        <member name="P:Apizr.Caching.Attributes.CacheAttributeBase.Mode">
            <summary>
            Tells Apizr to return a value if we get a cached result for it (GetOrFetch) or to try fetching fresh data every time (GetAndFetch)
            </summary>
        </member>
        <member name="P:Apizr.Caching.Attributes.CacheAttributeBase.ShouldInvalidateOnError">
            <summary>
            Tells Apizr to remove the cache on error
            </summary>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttributeBase.#ctor">
            <summary>
            Cache with no specific lifetime, default GetAndFetch mode and no invalidation on error
            </summary>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttributeBase.#ctor(Apizr.Caching.CacheMode)">
            <summary>
            Cache with no specific lifetime, no invalidation on error but a specific cache mode
            </summary>
            <param name="mode">GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one</param>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttributeBase.#ctor(System.String)">
            <summary>
            Cache with default GetAndFetch mode, no invalidation on error but with a specific lifetime
            </summary>
            <param name="lifeSpanRepresentation">TimeSpan representation to parse</param>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttributeBase.#ctor(System.Boolean)">
            <summary>
            Cache with no specific lifetime, default GetAndFetch mode but with or without invalidation on error
            </summary>
            <param name="shouldInvalidateOnError">Should invalidate on error</param>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttributeBase.#ctor(Apizr.Caching.CacheMode,System.String)">
            <summary>
            Cache with a specific cache and mode specific lifetime, but no invalidation on error
            </summary>
            <param name="mode">GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one</param>
            <param name="lifeSpanRepresentation">TimeSpan representation to parse</param>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttributeBase.#ctor(Apizr.Caching.CacheMode,System.Boolean)">
            <summary>
            Cache with a specific cache and invalidation on error, but no specific lifetime
            </summary>
            <param name="mode">GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one</param>
            <param name="shouldInvalidateOnError">Should invalidate on error</param>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttributeBase.#ctor(System.TimeSpan,System.Boolean)">
            <summary>
            Cache with a specific lifetime and invalidation on error, but default GetAndFetch mode
            </summary>
            <param name="lifeSpan">This specific caching lifetime</param>
            <param name="shouldInvalidateOnError">Should invalidate on error</param>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttributeBase.#ctor(Apizr.Caching.CacheMode,System.String,System.Boolean)">
            <summary>
            Cache with a specific cache mode, a specific lifetime and invalidation on error
            </summary>
            <param name="mode">GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one</param>
            <param name="lifeSpanRepresentation">This specific caching lifetime</param>
            <param name="shouldInvalidateOnError">Should invalidate on error</param>
        </member>
        <member name="T:Apizr.Caching.Attributes.CacheKeyAttribute">
            <summary>
            Tells Apizr the key to cache value at
            </summary>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheKeyAttribute.#ctor">
            <summary>
            The decorated parameter will be used as cache key (should be primitive otherwise ToString() method will be used, unless providing a property name)
            </summary>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheKeyAttribute.#ctor(System.String)">
            <summary>
            If you use non primitive type (like your ModelClass object) as Cache Primary key you should provide 
            property name of primitive primary Id, otherwise ToString() method will be used.
            </summary>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="F:Apizr.Caching.CacheMode.None">
            <summary>
            Returns fresh data when request succeed (no cache)
            </summary>
        </member>
        <member name="F:Apizr.Caching.CacheMode.GetAndFetch">
            <summary>
            Returns fresh data when request succeed otherwise cached one if exist (dynamic data)
            </summary>
        </member>
        <member name="F:Apizr.Caching.CacheMode.GetOrFetch">
            <summary>
            Returns cached data if we get some otherwise fresh one if request succeed (static data)
            </summary>
        </member>
        <member name="T:Apizr.Caching.ICacheHandler">
            <summary>
            The cache handler method mapping interface
            Implement it to provide some caching features to Apizr
            </summary>
        </member>
        <member name="M:Apizr.Caching.ICacheHandler.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Map Apizr cache saving method to your cache handler method
            </summary>
            <param name="key">The key to cache at</param>
            <param name="value">The value to cache</param>
            <param name="lifeSpan">The optional life span</param>
            <param name="cancellationToken">An optional cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Caching.ICacheHandler.GetAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Map Apizr cache getting method to your cache handler method
            </summary>
            <typeparam name="T">The expected value type</typeparam>
            <param name="key">The key to get from</param>
            <param name="cancellationToken">An optional cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Caching.ICacheHandler.RemoveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Map Apizr cache removing method to your cache handler method
            </summary>
            <param name="key">The key to remove from</param>
            <param name="cancellationToken">An optional cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Caching.ICacheHandler.ClearAsync(System.Threading.CancellationToken)">
            <summary>
            Map Apizr cache clearing method to your cache handler method
            </summary>
            <param name="cancellationToken">An optional cancellation token</param>
            <returns></returns>
        </member>
        <member name="P:Apizr.Configuring.Common.IApizrCommonOptions.LoggerFactoryFactory">
            <summary>
            The LoggerFactory factory (I know, I know...)
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Common.IApizrCommonOptions.PolicyRegistryFactory">
            <summary>
            Policy registry factory
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Common.IApizrCommonOptions.RefitSettingsFactory">
            <summary>
            Refit settings factory
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Common.IApizrCommonOptions.ConnectivityHandlerFactory">
            <summary>
            Connectivity handler factory
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Common.IApizrCommonOptions.CacheHandlerFactory">
            <summary>
            Cache handler factory
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Common.IApizrCommonOptions.MappingHandlerFactory">
            <summary>
            Mapping handler factory
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Common.IApizrCommonOptionsBase">
            <summary>
            Common options
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Common.IApizrCommonOptionsBase.RefitSettings">
            <summary>
            Refit settings
            </summary>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrCommonOptionsBuilder`2.WithPolicyRegistry(Polly.Registry.IReadOnlyPolicyRegistry{System.String})">
            <summary>
            Provide a policy registry
            </summary>
            <param name="policyRegistry">A policy registry instance</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrCommonOptionsBuilder`2.WithPolicyRegistry(System.Func{Polly.Registry.IReadOnlyPolicyRegistry{System.String}})">
            <summary>
            Provide a policy registry
            </summary>
            <param name="policyRegistryFactory">A policy registry instance factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrCommonOptionsBuilder`2.WithRefitSettings(System.Func{Refit.RefitSettings})">
            <summary>
            Provide some Refit specific settings
            </summary>
            <param name="refitSettingsFactory">A <see cref="T:Refit.RefitSettings"/> instance factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrCommonOptionsBuilder`2.WithConnectivityHandler(System.Func{Apizr.Connecting.IConnectivityHandler})">
            <summary>
            Provide a connectivity handler
            </summary>
            <param name="connectivityHandlerFactory">An <see cref="T:Apizr.Connecting.IConnectivityHandler"/> mapping implementation instance factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrCommonOptionsBuilder`2.WithCacheHandler(System.Func{Apizr.Caching.ICacheHandler})">
            <summary>
            Provide a cache handler to cache data
            </summary>
            <param name="cacheHandlerFactory">An <see cref="T:Apizr.Caching.ICacheHandler"/> mapping implementation instance factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrCommonOptionsBuilder`2.WithLoggerFactory(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Provide a logger factory
            </summary>
            <param name="loggerFactory">The logger factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrCommonOptionsBuilder`2.WithLoggerFactory(System.Func{Microsoft.Extensions.Logging.ILoggerFactory})">
            <summary>
            Provide a logger factory
            </summary>
            <param name="loggerFactory">The logger factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrCommonOptionsBuilder`2.WithMappingHandler(System.Func{Apizr.Mapping.IMappingHandler})">
            <summary>
            Provide a mapping handler to map entities
            </summary>
            <param name="mappingHandlerFactory">An <see cref="T:Apizr.Mapping.IMappingHandler"/> mapping implementation instance factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase`2.WithRefitSettings(Refit.RefitSettings)">
            <summary>
            Provide some Refit specific settings
            </summary>
            <param name="refitSettings">A <see cref="T:Refit.RefitSettings"/> instance</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase`2.WithConnectivityHandler(Apizr.Connecting.IConnectivityHandler)">
            <summary>
            Provide a connectivity handler to check connectivity before sending a request
            </summary>
            <param name="connectivityHandler">An <see cref="T:Apizr.Connecting.IConnectivityHandler"/> mapping implementation instance</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase`2.WithConnectivityHandler(System.Func{System.Boolean})">
            <summary>
            Provide a function to invoke while checking connectivity
            </summary>
            <param name="connectivityCheckingFunction">A function to invoke while checking connectivity</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase`2.WithCacheHandler(Apizr.Caching.ICacheHandler)">
            <summary>
            Provide a cache handler to cache data
            </summary>
            <param name="cacheHandler">An <see cref="T:Apizr.Caching.ICacheHandler"/> mapping implementation instance</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase`2.WithMappingHandler(Apizr.Mapping.IMappingHandler)">
            <summary>
            Provide a mapping handler to map entities
            </summary>
            <param name="mappingHandler">An <see cref="T:Apizr.Mapping.IMappingHandler"/> mapping implementation instance</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Configuring.IApizrOptions`1">
            <summary>
            Options dedicated to <typeparamref name="TWebApi"/>
            </summary>
            <typeparam name="TWebApi"></typeparam>
        </member>
        <member name="T:Apizr.Configuring.IApizrOptionsBase">
            <summary>
            Specific options
            </summary>
        </member>
        <member name="T:Apizr.Configuring.IApizrOptionsBuilder`2">
            <summary>
            The options builder
            </summary>
        </member>
        <member name="M:Apizr.Configuring.Proper.IApizrGlobalProperOptionsBuilderBase`2.WithBaseAddress(System.String)">
            <summary>
            Define your web api base address (could be defined with WebApiAttribute)
            </summary>
            <param name="baseAddress">Your web api base address</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Proper.IApizrGlobalProperOptionsBuilderBase`2.WithBaseAddress(System.Uri)">
            <summary>
            Define your web api base address (could be defined with WebApiAttribute)
            </summary>
            <param name="baseAddress">Your web api base address</param>
            <returns></returns>
        </member>
        <member name="P:Apizr.Configuring.Proper.IApizrProperOptions.BaseAddressFactory">
            <summary>
            Base address factory
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Proper.IApizrProperOptions.LoggerFactory">
            <summary>
            The Logger factory
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Proper.IApizrProperOptionsBase">
            <summary>
            Common options
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Proper.IApizrProperOptionsBase.WebApiType">
            <summary>
            Web api interface type
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Proper.IApizrProperOptionsBase.BaseAddress">
            <summary>
            Base address
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Proper.IApizrProperOptionsBase.PolicyRegistryKeys">
            <summary>
            Policy keys from the registry
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Proper.IApizrProperOptionsBase.Logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Apizr.Configuring.Proper.IApizrProperOptionsBuilder`2.WithBaseAddress(System.Func{System.String})">
            <summary>
            Define your web api base address (could be defined with WebApiAttribute)
            </summary>
            <param name="baseAddressFactory">Your web api base address factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Proper.IApizrProperOptionsBuilder`2.WithBaseAddress(System.Func{System.Uri})">
            <summary>
            Define your web api base address (could be defined with WebApiAttribute)
            </summary>
            <param name="baseAddressFactory">Your web api base address factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.GetCrudFor``1">
            <summary>
            Get a Crud manager instance for an entity type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.GetCrudFor``2">
            <summary>
            Get a Crud manager instance for an entity type with a specific key type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.GetCrudFor``3">
            <summary>
            Get a Crud manager instance for an entity type with a specific key type and ReadAll result type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.GetCrudFor``4">
            <summary>
            Get a Crud manager instance for an entity type with a specific key type, ReadAll result type and ReadAll params type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll request params type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.GetFor``1">
            <summary>
            Get an api manager instance
            </summary>
            <typeparam name="TWebApi">The managed api type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.TryGetCrudFor``1(Apizr.IApizrManager{Apizr.Requesting.ICrudApi{``0,System.Int32,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{System.String,System.Object}}}@)">
            <summary>
            Try to get a Crud manager instance for an entity type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.TryGetCrudFor``2(Apizr.IApizrManager{Apizr.Requesting.ICrudApi{``0,``1,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{System.String,System.Object}}}@)">
            <summary>
            Try to get a Crud manager instance for an entity type with a specific key type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.TryGetCrudFor``3(Apizr.IApizrManager{Apizr.Requesting.ICrudApi{``0,``1,``2,System.Collections.Generic.IDictionary{System.String,System.Object}}}@)">
            <summary>
            Try to get a Crud manager instance for an entity type with a specific key type and ReadAll result type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.TryGetCrudFor``4(Apizr.IApizrManager{Apizr.Requesting.ICrudApi{``0,``1,``2,``3}}@)">
            <summary>
            Try to get a Crud manager instance for an entity type with a specific key type, ReadAll result type and ReadAll params type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll request params type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.TryGetFor``1(Apizr.IApizrManager{``0}@)">
            <summary>
            Try to get an api manager instance
            </summary>
            <typeparam name="TWebApi">The managed api type</typeparam>
            <returns></returns>
        </member>
        <member name="P:Apizr.Configuring.Registry.IApizrEnumerableRegistryBase.Count">
            <summary>
            Managers count
            </summary>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistryBase.ContainsCrudFor``1">
            <summary>
            Check if registry contains a manager for <typeparamref name="T"/> entity type
            </summary>
            <typeparam name="T">The entity type to manage</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistryBase.ContainsCrudFor``2">
            <summary>
            Check if registry contains a manager for <typeparamref name="T"/> entity type with <typeparamref name="TKey"/> key type
            </summary>
            <typeparam name="T">The entity type to manage</typeparam>
            <typeparam name="TKey">The entity key type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistryBase.ContainsCrudFor``3">
            <summary>
            Check if registry contains a manager for <typeparamref name="T"/> entity type with <typeparamref name="TKey"/> key type and <typeparamref name="TReadAllResult"/> ReadAll result type
            </summary>
            <typeparam name="T">The entity type to manage</typeparam>
            <typeparam name="TKey">The entity key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistryBase.ContainsCrudFor``4">
            <summary>
            Check if registry contains a manager for <typeparamref name="T"/> entity type with <typeparamref name="TKey"/> key type,
            <typeparamref name="TReadAllResult"/> ReadAll result type and <typeparamref name="TReadAllParams"/> ReadAll params type
            </summary>
            <typeparam name="T">The entity type to manage</typeparam>
            <typeparam name="TKey">The entity key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll params type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistryBase.ContainsFor``1">
            <summary>
            Check if registry contains a manager for <typeparamref name="TWebApi"/> api type
            </summary>
            <typeparam name="TWebApi">The api type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrRegistryBuilder`3.AddCrudFor``5(System.Func{Apizr.ILazyFactory{Apizr.Requesting.ICrudApi{``0,``1,``2,``3}},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Polly.Registry.IReadOnlyPolicyRegistry{System.String},Apizr.Configuring.IApizrOptionsBase,``4},System.Action{`2})">
            <summary>
            Create a <typeparamref name="TApizrManager"/> instance for a managed crud api for <typeparamref name="T"/> object (class), 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <typeparamref name="TReadAllResult"/>
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <typeparam name="TApizrManager">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters</typeparam>
            <param name="apizrManagerFactory">The custom manager implementation instance factory</param>
            <param name="properOptionsBuilder">The builder defining some api proper options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrRegistryBuilder`3.AddFor``2(System.Func{Apizr.ILazyFactory{``0},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Polly.Registry.IReadOnlyPolicyRegistry{System.String},Apizr.Configuring.IApizrOptions{``0},``1},System.Action{`2})">
            <summary>
            Create a <typeparamref name="TApizrManager"/> instance for a managed <typeparamref name="TWebApi"/>
            </summary>
            <typeparam name="TWebApi">The web api interface to manage</typeparam>
            <typeparam name="TApizrManager">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation</typeparam>
            <param name="apizrManagerFactory">The custom manager implementation instance factory</param>
            <param name="properOptionsBuilder">The builder defining some api proper options</param>
            <returns></returns>
        </member>
        <member name="P:Apizr.Configuring.Registry.IApizrRegistryBuilderBase`3.ApizrRegistry">
            <summary>
            Apizr registry
            </summary>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrRegistryBuilderBase`3.AddCrudFor``1(System.Action{`2})">
            <summary>
            Create a <see cref="T:Apizr.ApizrManager`1"/> instance for <typeparamref name="T"/> object type (class), 
            with key of type <see cref="T:System.Int32"/> and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <param name="optionsBuilder">The builder defining some api proper options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrRegistryBuilderBase`3.AddCrudFor``2(System.Action{`2})">
            <summary>
            Create a <see cref="T:Apizr.ApizrManager`1"/> instance for <typeparamref name="T"/> object type (class), 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <param name="optionsBuilder">The builder defining some api proper options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrRegistryBuilderBase`3.AddCrudFor``3(System.Action{`2})">
            <summary>
            Create a <see cref="T:Apizr.ApizrManager`1"/> instance for <typeparamref name="T"/> object type (class), 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <typeparamref name="TReadAllResult"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <param name="optionsBuilder">The builder defining some api proper options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrRegistryBuilderBase`3.AddCrudFor``4(System.Action{`2})">
            <summary>
            Create a <see cref="T:Apizr.ApizrManager`1"/> instance for <typeparamref name="T"/> object type (class), 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <typeparamref name="TReadAllResult"/>
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters</typeparam>
            <param name="optionsBuilder">The builder defining some api proper options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrRegistryBuilderBase`3.AddFor``1(System.Action{`2})">
            <summary>
            Create a <see cref="T:Apizr.ApizrManager`1"/> instance
            </summary>
            <typeparam name="TWebApi">The web api interface to manage</typeparam>
            <param name="optionsBuilder">The builder defining some api proper options</param>
            <returns></returns>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2.ApizrOptions">
            <summary>
            Apizr common options
            </summary>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2.WithHttpClientHandler(System.Net.Http.HttpClientHandler)">
            <summary>
            Provide a custom HttpClientHandler
            </summary>
            <param name="httpClientHandler">An <see cref="T:System.Net.Http.HttpClientHandler"/> instance</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2.WithAuthenticationHandler(System.Func{System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.String}})">
            <summary>
            Provide a method to refresh the authorization token when needed
            </summary>
            <param name="refreshTokenFactory">Refresh token method called when expired or empty</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2.AddDelegatingHandler(System.Net.Http.DelegatingHandler)">
            <summary>
            Add a custom delegating handler
            </summary>
            <param name="delegatingHandler">A delegating handler</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2.WithLogging(Apizr.Logging.HttpTracerMode,Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Configure logging level for the api
            </summary>
            <param name="httpTracerMode"></param>
            <param name="trafficVerbosity">Http traffic tracing verbosity (default: All)</param>
            <param name="logLevel">Log level to apply while writing (default: Information)</param>
            <returns></returns>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrSharedOptions.HttpTracerModeFactory">
            <summary>
            Http traffic tracing mode factory
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrSharedOptions.TrafficVerbosityFactory">
            <summary>
            Http traffic tracing verbosity factory
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrSharedOptions.LogLevelFactory">
            <summary>
            Log level factory
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrSharedOptions.HttpClientHandlerFactory">
            <summary>
            HttpClientHandler factory
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrSharedOptions.DelegatingHandlersFactories">
            <summary>
            Delegating handlers factories
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrSharedOptionsBase.HttpTracerMode">
            <summary>
            Http traffic tracing mode
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrSharedOptionsBase.TrafficVerbosity">
            <summary>
            Http traffic tracing verbosity
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrSharedOptionsBase.LogLevel">
            <summary>
            Log level while writing
            </summary>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedOptionsBuilder`2.WithHttpClientHandler(System.Func{System.Net.Http.HttpClientHandler})">
            <summary>
            Provide a custom HttpClientHandler
            </summary>
            <param name="httpClientHandlerFactory">An <see cref="T:System.Net.Http.HttpClientHandler"/> instance factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedOptionsBuilder`2.WithAuthenticationHandler``1(System.Func{Microsoft.Extensions.Logging.ILogger,Apizr.Configuring.IApizrOptionsBase,``0})">
            <summary>
            Provide your own <see cref="T:Apizr.Authenticating.AuthenticationHandlerBase"/> implementation factory
            </summary>
            <typeparam name="TAuthenticationHandler">Your <see cref="T:Apizr.Authenticating.AuthenticationHandlerBase"/> implementation</typeparam>
            <param name="authenticationHandlerFactory">A <typeparamref name="TAuthenticationHandler"/> instance factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedOptionsBuilder`2.WithAuthenticationHandler``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}},``1,System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.String}}})">
            <summary>
            Provide your own settings management and token management services
            </summary>
            <typeparam name="TSettingsService">Your settings management service (saving/getting token)</typeparam>
            <typeparam name="TTokenService">Your token management service (refreshing token)</typeparam>
            <param name="settingsService">A <typeparamref name="TSettingsService"/> instance</param>
            <param name="tokenProperty">The token property used for saving</param>
            <param name="tokenService">A <typeparamref name="TTokenService"/> instance</param>
            <param name="refreshTokenMethod">The method called to refresh the token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedOptionsBuilder`2.WithAuthenticationHandler``2(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Func{``1},System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.String}}})">
            <summary>
            Provide your own settings management and token management services
            </summary>
            <typeparam name="TSettingsService">Your settings management service (saving/getting token)</typeparam>
            <typeparam name="TTokenService">Your token management service (refreshing token)</typeparam>
            <param name="settingsServiceFactory">A <typeparamref name="TSettingsService"/> instance factory</param>
            <param name="tokenProperty">The token property used for saving</param>
            <param name="tokenServiceFactory">A <typeparamref name="TTokenService"/> instance factory</param>
            <param name="refreshTokenMethod">The method called to refresh the token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedOptionsBuilder`2.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Func{System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.String}})">
            <summary>
            Provide your own settings management service and a method to refresh the token
            </summary>
            <typeparam name="TSettingsService">Your settings management service (saving/getting token)</typeparam>
            <param name="settingsService">A <typeparamref name="TSettingsService"/> instance</param>
            <param name="tokenProperty">The token property used for saving</param>
            <param name="refreshTokenFactory">The method factory called to refresh the token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedOptionsBuilder`2.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Func{System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.String}})">
            <summary>
            Provide your own settings management service and a method to refresh the token
            </summary>
            <typeparam name="TSettingsService">Your settings management service (saving/getting token)</typeparam>
            <param name="settingsServiceFactory">A <typeparamref name="TSettingsService"/> instance factory</param>
            <param name="tokenProperty">The token property used for saving</param>
            <param name="refreshTokenFactory">The method factory called to refresh the token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedOptionsBuilder`2.AddDelegatingHandler(System.Func{Microsoft.Extensions.Logging.ILogger,System.Net.Http.DelegatingHandler})">
            <summary>
            Add a custom delegating handler
            </summary>
            <param name="delegatingHandlerFactory">A delegating handler factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedOptionsBuilder`2.AddDelegatingHandler(System.Func{Microsoft.Extensions.Logging.ILogger,Apizr.Configuring.IApizrOptionsBase,System.Net.Http.DelegatingHandler})">
            <summary>
            Add a custom delegating handler
            </summary>
            <param name="delegatingHandlerFactory">A delegating handler factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedOptionsBuilder`2.WithLogging(System.Func{Apizr.Logging.HttpTracerMode},System.Func{Apizr.Logging.HttpMessageParts},System.Func{Microsoft.Extensions.Logging.LogLevel})">
            <summary>
            Configure logging level for the api
            </summary>
            <param name="httpTracerModeFactory">Http traffic tracing mode</param>
            <param name="trafficVerbosityFactory">Http traffic tracing verbosity factory</param>
            <param name="logLevelFactory">Log level factory</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Connecting.IConnectivityHandler">
            <summary>
            The connectivity handler method mapping interface
            Implement it to provide some connectivity features to Apizr
            </summary>
        </member>
        <member name="M:Apizr.Connecting.IConnectivityHandler.IsConnected">
            <summary>
            Map Apizr connectivity check to your connectivity handler
            </summary>
            <returns></returns>
        </member>
        <member name="T:Apizr.IApizrManager`1">
            <summary>
            The manager encapsulating <typeparamref name="TWebApi"/>'s task
            </summary>
            <typeparam name="TWebApi">The web api interface to manage</typeparam>
        </member>
        <member name="P:Apizr.IApizrManager`1.Api">
            <summary>
            Original Refit Api without any Apizr management. You should use ExecuteAsync instead to get all the Apizr goodness :)
            </summary>
        </member>
        <member name="P:Apizr.IApizrManager`1.Options">
            <summary>
            Basic Apizr options
            </summary>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task}},``0,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task}},System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="cancellationToken">A cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,System.Threading.Tasks.Task}},Polly.Context,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,``1,System.Threading.Tasks.Task}},``0,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="cancellationToken">A cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,``1,System.Threading.Tasks.Task}},``0,Polly.Context,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="cancellationToken">A cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,``1,System.Threading.Tasks.Task}},``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="cancellationToken">A cancellation token</param>
            <param name="onException">Handle exception (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}},System.Boolean,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <typeparam name="TApiData">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``4(System.Linq.Expressions.Expression{System.Func{`0,``2,System.Threading.Tasks.Task{``1}}},``3,System.Boolean,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TModelResultData">The mapped model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The mapped api request data type</typeparam>
            <typeparam name="TModelRequestData">The model request data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data to map</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task{``1}}},``0,System.Boolean,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``1}}},System.Boolean,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{``0}}},System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <typeparam name="TApiData">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="cancellationToken">A cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,System.Threading.Tasks.Task{``0}}},Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <typeparam name="TApiData">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``4(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,``2,System.Threading.Tasks.Task{``1}}},``3,System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TModelResultData">The mapped model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The mapped api request data type</typeparam>
            <typeparam name="TModelRequestData">The model request data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data to map</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="cancellationToken">A cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,``1,System.Threading.Tasks.Task{``1}}},``0,System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="cancellationToken">A cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{``1}}},System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="cancellationToken">A cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``4(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,``2,System.Threading.Tasks.Task{``1}}},``3,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TModelResultData">The mapped model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The mapped api request data type</typeparam>
            <typeparam name="TModelRequestData">The model request data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,``1,System.Threading.Tasks.Task{``1}}},``0,Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{``0}}},Polly.Context,System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <typeparam name="TApiData">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="cancellationToken">A cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``4(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,``2,System.Threading.Tasks.Task{``1}}},``3,Polly.Context,System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TModelResultData">The mapped model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The mapped api request data type</typeparam>
            <typeparam name="TModelRequestData">The model request data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="cancellationToken">A cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,``1,System.Threading.Tasks.Task{``1}}},``0,Polly.Context,System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="cancellationToken">A cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean,System.Threading.CancellationToken,System.Action{System.Exception})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <param name="cancellationToken">A cancellation token</param>
            <param name="onException">Handle exception and return cached result (default: null = throwing)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ClearCacheAsync(System.Threading.CancellationToken)">
            <summary>
            Clear all cache
            </summary>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ClearCacheAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}})">
            <summary>
            Clear the cache of a specific request
            </summary>
            <typeparam name="TResult">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="executeApiMethod">The specific <typeparamref name="TWebApi"/>'s task to clear cache for</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ClearCacheAsync``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{``0}}},System.Threading.CancellationToken)">
            <summary>
            Clear the cache of a specific request
            </summary>
            <typeparam name="TResult">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="executeApiMethod">The specific <typeparamref name="TWebApi"/>'s task to clear cache for</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.ILazyFactory`1">
            <summary>
            A lazy instance
            </summary>
            <typeparam name="TInstance">Type of your instance</typeparam>
        </member>
        <member name="P:Apizr.ILazyFactory`1.Value">
            <summary>
            The lazy instance
            </summary>
        </member>
        <member name="T:Apizr.Logging.Attributes.LogAttribute">
            <summary>
            Tells Apizr to trace and log HTTP(s) traffic
            </summary>
        </member>
        <member name="T:Apizr.Logging.Attributes.LogAttributeBase">
            <summary>
            Tells Apizr to trace and log HTTP(s) traffic
            </summary>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttributeBase.#ctor">
            <summary>
            Trace All http traffic and log Apizr execution steps at Information log level
            </summary>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttributeBase.#ctor(Apizr.Logging.HttpMessageParts)">
            <summary>
            Trace http traffic at specified verbosity and log Apizr execution steps at Information log level
            </summary>
            <param name="trafficVerbosity">Http traffic tracing verbosity (default: all)</param>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttributeBase.#ctor(Apizr.Logging.HttpTracerMode)">
            <summary>
            Trace All http traffic and log Apizr execution steps at specified log level
            </summary>
            <param name="httpTracerMode">Http traffic tracing mode (default: Everything)</param>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttributeBase.#ctor(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Trace All http traffic and log Apizr execution steps at specified log level
            </summary>
            <param name="logLevel">Log level to apply while writing (default: Trace)</param>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttributeBase.#ctor(Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode)">
            <summary>
            Trace All http traffic and log Apizr execution steps at specified log level
            </summary>
            <param name="trafficVerbosity">Http traffic tracing verbosity (default: all)</param>
            <param name="httpTracerMode">Http traffic tracing mode (default: Everything)</param>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttributeBase.#ctor(Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Trace All http traffic and log Apizr execution steps at specified log level
            </summary>
            <param name="trafficVerbosity">Http traffic tracing verbosity (default: all)</param>
            <param name="logLevel">Log level to apply while writing (default: Trace)</param>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttributeBase.#ctor(Apizr.Logging.HttpTracerMode,Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Trace All http traffic and log Apizr execution steps at specified log level
            </summary>
            <param name="httpTracerMode">Http traffic tracing mode (default: Everything)</param>
            <param name="logLevel">Log level to apply while writing (default: Trace)</param>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttributeBase.#ctor(Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode,Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Trace All http traffic and log Apizr execution steps at specified log level
            </summary>
            <param name="trafficVerbosity">Http traffic tracing verbosity (default: all)</param>
            <param name="httpTracerMode">Http traffic tracing mode (default: Everything)</param>
            <param name="logLevel">Log level to apply while writing (default: Trace)</param>
        </member>
        <member name="P:Apizr.Logging.Attributes.LogAttributeBase.HttpTracerMode">
            <summary>
            Http traffic tracing mode (default: Everything)
            </summary>
        </member>
        <member name="P:Apizr.Logging.Attributes.LogAttributeBase.TrafficVerbosity">
            <summary>
            Http traffic tracing verbosity (default: all)
            </summary>
        </member>
        <member name="P:Apizr.Logging.Attributes.LogAttributeBase.LogLevel">
            <summary>
            Log level to apply while writing (default: Information)
            </summary>
        </member>
        <member name="T:Apizr.Logging.Attributes.LogCreateAttribute">
            <summary>
            Tells Apizr to trace and log HTTP(s) traffic
            </summary>
        </member>
        <member name="T:Apizr.Logging.Attributes.LogDeleteAttribute">
            <summary>
            Tells Apizr to trace and log HTTP(s) traffic
            </summary>
        </member>
        <member name="T:Apizr.Logging.Attributes.LogReadAllAttribute">
            <summary>
            Tells Apizr to trace and log HTTP(s) traffic
            </summary>
        </member>
        <member name="T:Apizr.Logging.Attributes.LogReadAttribute">
            <summary>
            Tells Apizr to trace and log HTTP(s) traffic
            </summary>
        </member>
        <member name="T:Apizr.Logging.Attributes.LogUpdateAttribute">
            <summary>
            Tells Apizr to trace and log HTTP(s) traffic
            </summary>
        </member>
        <member name="P:Apizr.Logging.ExtendedHttpHandlerBuilder.HttpTracerHandler">
            <summary>
            Underlying instance of the <typeparamref name="T:HttpTracer.HttpHandlerBuilder:HttpTracer.HttpHandlerBuilder"/> class.
            </summary>
        </member>
        <member name="M:Apizr.Logging.ExtendedHttpHandlerBuilder.#ctor(Apizr.Configuring.IApizrOptionsBase)">
            <summary>
            Initializes a new instance of the <typeparamref name="T:ExtendedHttpTracerHandler:ExtendedHttpTracerHandler"/> class.
            </summary>
            <param name="logger">Logger.</param>
            <param name="apizrOptions"></param>
        </member>
        <member name="M:Apizr.Logging.ExtendedHttpHandlerBuilder.#ctor(System.Net.Http.HttpClientHandler,Apizr.Configuring.IApizrOptionsBase)">
            <summary>
            Initializes a new instance of the <typeparamref name="T:ExtendedHttpTracerHandler:ExtendedHttpTracerHandler"/> class.
            </summary>
            <param name="innerHandler">HttpClientHandler.</param>
            <param name="logger">Logger.</param>
            <param name="apizrOptions"></param>
        </member>
        <member name="M:Apizr.Logging.ExtendedHttpHandlerBuilder.#ctor(Apizr.Logging.ExtendedHttpTracerHandler)">
            <summary>
            Initializes a new instance of the <typeparamref name="T:ExtendedHttpTracerHandler:ExtendedHttpTracerHandler"/> class.
            </summary>
            <param name="tracerHandler">Tracer handler.</param>
        </member>
        <member name="M:Apizr.Logging.ExtendedHttpHandlerBuilder.AddHandler(System.Net.Http.DelegatingHandler)">
            <summary>
            Adds a <see cref="T:System.Net.Http.HttpMessageHandler"/> to the chain of handlers.
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Logging.ExtendedHttpHandlerBuilder.Build">
            <summary>
            Adds <see cref="T:System.Net.Http.DelegatingHandler"/> as the last link of the chain.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Apizr.Logging.ExtendedHttpTracerHandler.DefaultDurationFormat">
            <summary>
            Duration string format. Defaults to "Duration: {0:ss\\:fffffff}"
            </summary>
            <remarks>
            <para>
            Receives a <typeparamref name="TimeSpan"/> at the [0] index.
            </para>
            <para>
            See <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings">https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings</a> for more details on TimeSpan formatting.
            </para>
            </remarks>
        </member>
        <member name="M:Apizr.Logging.ExtendedHttpTracerHandler.#ctor(Apizr.Configuring.IApizrOptionsBase)">
            <summary> Constructs the <see cref="T:Apizr.Logging.ExtendedHttpTracerHandler"/> with a custom <see cref="T:Microsoft.Extensions.Logging.ILogger"/> and a custom <see cref="T:System.Net.Http.HttpMessageHandler"/></summary>
            <param name="logger">Microsoft extended logger</param>
            <param name="apizrOptions">Apizr options</param>
        </member>
        <member name="M:Apizr.Logging.ExtendedHttpTracerHandler.#ctor(System.Net.Http.HttpMessageHandler,Apizr.Configuring.IApizrOptionsBase)">
            <summary> Constructs the <see cref="T:Apizr.Logging.ExtendedHttpTracerHandler"/> with a custom <see cref="T:Microsoft.Extensions.Logging.ILogger"/> and a custom <see cref="T:System.Net.Http.HttpMessageHandler"/></summary>
            <param name="handler">User defined <see cref="T:System.Net.Http.HttpMessageHandler"/></param>
            <param name="logger">Microsoft extended logger</param>
            <param name="apizrOptions">Apizr options</param>
        </member>
        <member name="M:Apizr.Mapping.IMappingHandler.Map``1(System.Object)">
            <summary>
            Execute a mapping from the source object to a new destination object.
            The source type is inferred from the source object.
            </summary>
            <typeparam name="TDestination">Destination type to create</typeparam>
            <param name="source">Source object to map from</param>
            <returns>Mapped destination object</returns>
        </member>
        <member name="M:Apizr.Mapping.IMappingHandler.Map``2(``0)">
            <summary>
            Execute a mapping from the source object to a new destination object.
            </summary>
            <typeparam name="TSource">Source type to use, regardless of the runtime type</typeparam>
            <typeparam name="TDestination">Destination type to create</typeparam>
            <param name="source">Source object to map from</param>
            <returns>Mapped destination object</returns>
        </member>
        <member name="M:Apizr.Mapping.IMappingHandler.Map``2(``0,``1)">
            <summary>
            Execute a mapping from the source object to the existing destination object.
            </summary>
            <typeparam name="TSource">Source type to use</typeparam>
            <typeparam name="TDestination">Destination type</typeparam>
            <param name="source">Source object to map from</param>
            <param name="destination">Destination object to map into</param>
            <returns>The mapped destination object, same instance as the <paramref name="destination"/> object</returns>
        </member>
        <member name="M:Apizr.Mapping.IMappingHandler.Map(System.Object,System.Type,System.Type)">
            <summary>
            Execute a mapping from the source object to a new destination object with explicit <see cref="T:System.Type"/> objects
            </summary>
            <param name="source">Source object to map from</param>
            <param name="sourceType">Source type to use</param>
            <param name="destinationType">Destination type to create</param>
            <returns>Mapped destination object</returns>
        </member>
        <member name="M:Apizr.Mapping.IMappingHandler.Map(System.Object,System.Object,System.Type,System.Type)">
            <summary>
            Execute a mapping from the source object to existing destination object with explicit <see cref="T:System.Type"/> objects
            </summary>
            <param name="source">Source object to map from</param>
            <param name="destination">Destination object to map into</param>
            <param name="sourceType">Source type to use</param>
            <param name="destinationType">Destination type to use</param>
            <returns>Mapped destination object, same instance as the <paramref name="destination"/> object</returns>
        </member>
        <member name="T:Apizr.Mapping.MappedCrudEntityAttribute">
            <summary>
            Tells Apizr to auto register an <see cref="T:Apizr.IApizrManager`1"/> for the referenced api entity
            and mapped to this decorated model entity (works only with IServiceCollection extensions registration)
            </summary>
        </member>
        <member name="M:Apizr.Mapping.MappedCrudEntityAttribute.#ctor(System.String,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Define some crud api settings from this mapped model entity
            </summary>
            <param name="apiEntityBaseUri">The mapped api entity's base crud uri</param>
            <param name="apiEntityType">The mapped api entity type</param>
            <param name="apiEntityKeyType">The mapped api entity's crud key type (default: null = typeof(int))</param>
            <param name="apiEntityReadAllResultType">The mapped api entity "ReadAll" query result type  (default: null = typeof(IEnumerable{}))</param>
            <param name="apiEntityReadAllParamsType">The mapped api entity ReadAll query parameters type  (default: null = typeof(IDictionary{string, object}))</param>
        </member>
        <member name="T:Apizr.Mapping.MappedEntity`2">
            <summary>
            [AutoMapper integration required] Tells Apizr that Api entity is mapped with a model entity
            </summary>
            <typeparam name="TModelEntity">The friendly model entity to play with</typeparam>
            <typeparam name="TApiEntity">The real api entity used for requesting</typeparam>
        </member>
        <member name="T:Apizr.Mapping.MappedWithAttribute">
            <summary>
            Tells Apizr to map api request object with model object
            </summary>
        </member>
        <member name="M:Apizr.Mapping.MappedWithAttribute.#ctor(System.Type)">
            <summary>
            Tells Apizr to map api response to a model response
            </summary>
            <param name="mappedWithType"></param>
        </member>
        <member name="P:Apizr.Mapping.MappedWithAttribute.MappedWithType">
            <summary>
            The model object to map with
            </summary>
        </member>
        <member name="T:Apizr.Mapping.VoidMappingHandler">
            <summary>
            Void mapping should never be used and will just be ignored
            </summary>
        </member>
        <member name="T:Apizr.Policing.HttpRequestMessageExtensions">
            <summary>
            Extension methods for <see cref="T:System.Net.Http.HttpRequestMessage"/> Polly integration.
            </summary>
        </member>
        <member name="M:Apizr.Policing.HttpRequestMessageExtensions.GetOrBuildPolicyExecutionContext(System.Net.Http.HttpRequestMessage)">
            <summary>
            Gets the <see cref="T:Polly.Context"/> associated with the provided <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/>.</param>
            <returns>The <see cref="T:Polly.Context"/> if set, otherwise <c>null</c>.</returns>
            <remarks>
            The <see cref="T:Apizr.Policing.PolicyHttpMessageHandler"/> will attach a context to the <see cref="T:System.Net.Http.HttpResponseMessage"/> prior
            to executing a <see cref="T:Polly.Policy"/>, if one does not already exist. The <see cref="T:Polly.Context"/> will be provided
            to the policy for use inside the <see cref="T:Polly.Policy"/> and in other message handlers.
            </remarks>
        </member>
        <member name="M:Apizr.Policing.HttpRequestMessageExtensions.GetPolicyExecutionContext(System.Net.Http.HttpRequestMessage)">
            <summary>
            Gets the <see cref="T:Polly.Context"/> associated with the provided <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/>.</param>
            <returns>The <see cref="T:Polly.Context"/> if set, otherwise <c>null</c>.</returns>
            <remarks>
            The <see cref="T:Apizr.Policing.PolicyHttpMessageHandler"/> will attach a context to the <see cref="T:System.Net.Http.HttpResponseMessage"/> prior
            to executing a <see cref="T:Polly.Policy"/>, if one does not already exist. The <see cref="T:Polly.Context"/> will be provided
            to the policy for use inside the <see cref="T:Polly.Policy"/> and in other message handlers.
            </remarks>
        </member>
        <member name="M:Apizr.Policing.HttpRequestMessageExtensions.SetPolicyExecutionContext(System.Net.Http.HttpRequestMessage,Polly.Context)">
            <summary>
            Sets the <see cref="T:Polly.Context"/> associated with the provided <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/>.</param>
            <param name="context">The <see cref="T:Polly.Context"/>, may be <c>null</c>.</param>
            <remarks>
            The <see cref="T:Apizr.Policing.PolicyHttpMessageHandler"/> will attach a context to the <see cref="T:System.Net.Http.HttpResponseMessage"/> prior
            to executing a <see cref="T:Polly.Policy"/>, if one does not already exist. The <see cref="T:Polly.Context"/> will be provided
            to the policy for use inside the <see cref="T:Polly.Policy"/> and in other message handlers.
            </remarks>
        </member>
        <member name="T:Apizr.Policing.LoggedPolicies">
            <summary>
            Policy logging helper
            </summary>
        </member>
        <member name="M:Apizr.Policing.LoggedPolicies.OnLoggedRetry(Polly.DelegateResult{System.Net.Http.HttpResponseMessage},System.TimeSpan,System.Int32,Polly.Context)">
            <summary>
            Tells Apizr to log retries
            </summary>
            <param name="result"></param>
            <param name="timeSpan"></param>
            <param name="retryCount"></param>
            <param name="context"></param>
        </member>
        <member name="M:Apizr.Policing.LoggedPolicies.OnLoggedRetry(Polly.DelegateResult{System.Net.Http.HttpResponseMessage},System.TimeSpan,System.Int32,Polly.Context,System.Action{Polly.DelegateResult{System.Net.Http.HttpResponseMessage},System.TimeSpan,System.Int32,Polly.Context})">
            <summary>
            Tells Apizr to log retries plus some more actions
            </summary>
            <param name="result"></param>
            <param name="timeSpan"></param>
            <param name="retryCount"></param>
            <param name="context"></param>
            <param name="onRetry"></param>
        </member>
        <member name="T:Apizr.Policing.PolicyAttributeBase">
            <summary>
            Tells Apizr to apply some policies to all method when decorating an assembly or an interface or a specific one when decorating a method
            You have to provide a policy registry to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Policing.PolicyAttributeBase.#ctor(System.String[])">
            <summary>
            Apply policies with keys
            </summary>
            <param name="registryKeys">Policy registry keys</param>
        </member>
        <member name="P:Apizr.Policing.PolicyAttributeBase.RegistryKeys">
            <summary>
            Policy registry keys
            </summary>
        </member>
        <member name="T:Apizr.Policing.PolicyHttpMessageHandler">
            <summary>
            A <see cref="T:System.Net.Http.DelegatingHandler"/> implementation that executes request processing surrounded by a <see cref="T:Polly.Policy"/>.
            </summary>
        </member>
        <member name="M:Apizr.Policing.PolicyHttpMessageHandler.#ctor(Polly.IAsyncPolicy{System.Net.Http.HttpResponseMessage})">
            <summary>
            Creates a new <see cref="T:Apizr.Policing.PolicyHttpMessageHandler"/>.
            </summary>
            <param name="policy">The policy.</param>
        </member>
        <member name="M:Apizr.Policing.PolicyHttpMessageHandler.#ctor(System.Func{System.Net.Http.HttpRequestMessage,Polly.IAsyncPolicy{System.Net.Http.HttpResponseMessage}})">
            <summary>
            Creates a new <see cref="T:Apizr.Policing.PolicyHttpMessageHandler"/>.
            </summary>
            <param name="policySelector">A function which can select the desired policy for a given <see cref="T:System.Net.Http.HttpRequestMessage"/>.</param>
        </member>
        <member name="M:Apizr.Policing.PolicyHttpMessageHandler.SendCoreAsync(System.Net.Http.HttpRequestMessage,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Called inside the execution of the <see cref="T:Polly.Policy"/> to perform request processing.
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/>.</param>
            <param name="context">The <see cref="T:Polly.Context"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>Returns a <see cref="T:System.Threading.Tasks.Task`1"/> that will yield a response when completed.</returns>
        </member>
        <member name="T:Apizr.Policing.PollyContextExtensions">
            <summary>
            Polly logging extensions
            </summary>
        </member>
        <member name="M:Apizr.Policing.PollyContextExtensions.WithLogger(Polly.Context,Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.LogLevel,Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode)">
            <summary>
            Passing your <see cref="T:Microsoft.Extensions.Logging.ILogger"/> mapping implementation to Polly context
            </summary>
            <param name="context">Polly context</param>
            <param name="logger">Your <see cref="T:Microsoft.Extensions.Logging.ILogger"/> mapping implementation</param>
            <param name="logLevel"></param>
            <param name="verbosity"></param>
            <param name="tracerMode"></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Policing.PollyContextExtensions.TryGetLogger(Polly.Context,Microsoft.Extensions.Logging.ILogger@,Microsoft.Extensions.Logging.LogLevel@,Apizr.Logging.HttpMessageParts@,Apizr.Logging.HttpTracerMode@)">
            <summary>
            Trying to get your <see cref="T:Microsoft.Extensions.Logging.ILogger"/> mapping implementation from Polly context
            </summary>
            <param name="context">Polly context</param>
            <param name="logger">Your <see cref="T:Microsoft.Extensions.Logging.ILogger"/> mapping implementation</param>
            <param name="logLevel"></param>
            <param name="verbosity"></param>
            <param name="tracerMode"></param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Requesting.CrudEntityAttribute">
            <summary>
            Tells Apizr to auto register an <see cref="T:Apizr.IApizrManager`1"/> for this decorated entity (works only with IServiceCollection extensions registration)
            </summary>
        </member>
        <member name="M:Apizr.Requesting.CrudEntityAttribute.#ctor(System.String,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Define some crud api settings from this api entity
            </summary>
            <param name="baseUri">This specific api entity's base crud uri</param>
            <param name="keyType">This specific api entity's crud key type (default: null = typeof(int))</param>
            <param name="readAllResultType">The "ReadAll" query result type  (default: null = typeof(IEnumerable{}))</param>
            <param name="readAllParamsType">ReadAll query parameters type  (default: null = typeof(IDictionary{string, object}))</param>
            <param name="modelEntityType">Model entity type mapped with this api entity type (default: null = decorated api entity type)</param>
        </member>
        <member name="P:Apizr.Requesting.CrudEntityAttribute.BaseUri">
            <summary>
            This specific entity's base crud uri
            </summary>
        </member>
        <member name="P:Apizr.Requesting.CrudEntityAttribute.KeyType">
            <summary>
            This specific object's crud key type
            </summary>
        </member>
        <member name="P:Apizr.Requesting.CrudEntityAttribute.ReadAllResultType">
            <summary>
            "ReadAll" query result type
            </summary>
        </member>
        <member name="P:Apizr.Requesting.CrudEntityAttribute.ReadAllParamsType">
            <summary>
            "ReadAll" query parameters type
            </summary>
        </member>
        <member name="P:Apizr.Requesting.CrudEntityAttribute.MappedEntityType">
            <summary>
            Model entity type mapped with this Api entity type
            </summary>
        </member>
        <member name="T:Apizr.Requesting.ICrudApi`4">
            <summary>
            The crud api interface
            </summary>
            <typeparam name="T">The entity type</typeparam>
            <typeparam name="TKey">The entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
        </member>
        <member name="T:Apizr.WebApiAttribute">
            <summary>
            Define general web api settings (could be defined with options builder)
            </summary>
        </member>
        <member name="M:Apizr.WebApiAttribute.#ctor">
            <summary>
            Define web api with priority management and auto registration enabled, but without base uri (should be defined with options builder)
            </summary>
        </member>
        <member name="M:Apizr.WebApiAttribute.#ctor(System.String)">
            <summary>
            Define web api with a base uri and with priority management and auto registration enabled
            </summary>
            <param name="baseUri">The web api base uri</param>
        </member>
        <member name="M:Apizr.WebApiAttribute.#ctor(System.Boolean)">
            <summary>
            Define web api enabling or not priority management and auto registration, but without base uri (should be defined with options builder)
            </summary>
            <param name="isAutoRegistrable">Makes decorated interface registrable by assembly scanning</param>
        </member>
        <member name="M:Apizr.WebApiAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Define web api with a base uri, enabling or not priority management and auto registration
            </summary>
            <param name="baseUri">The web api base uri</param>
            <param name="isAutoRegistrable">Makes decorated interface registrable by assembly scanning</param>
        </member>
        <member name="P:Apizr.WebApiAttribute.BaseUri">
            <summary>
            The web api base uri
            </summary>
        </member>
        <member name="P:Apizr.WebApiAttribute.IsAutoRegistrable">
            <summary>
            Makes decorated interface registrable by assembly scanning
            </summary>
        </member>
        <member name="T:Refit.Implementation.Generated">
            <inheritdoc />
        </member>
        <member name="T:Refit.Implementation.Generated.ApizrRequestingICrudApi`4">
            <inheritdoc />
        </member>
        <member name="P:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Client">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.#ctor(System.Net.Http.HttpClient,Refit.IRequestBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Create(`0)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Create(`0,Polly.Context)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Create(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Create(`0,Polly.Context,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.ReadAll">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.ReadAll(`3)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.ReadAll(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.ReadAll(Polly.Context)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.ReadAll(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.ReadAll(`3,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.ReadAll(`3,Polly.Context)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.ReadAll(`3,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.ReadAll(System.Int32,Polly.Context)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.ReadAll(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.ReadAll(Polly.Context,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.ReadAll(`3,System.Int32,Polly.Context)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.ReadAll(`3,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.ReadAll(`3,Polly.Context,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.ReadAll(`3,System.Int32,Polly.Context,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Read(`1)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Read(`1,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Read(`1,Polly.Context)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Read(`1,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Read(`1,System.Int32,Polly.Context)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Read(`1,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Read(`1,System.Int32,Polly.Context,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Update(`1,`0)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Update(`1,`0,Polly.Context)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Update(`1,`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Update(`1,`0,Polly.Context,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Delete(`1)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Delete(`1,Polly.Context)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Delete(`1,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Delete(`1,Polly.Context,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Create(`0)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Create(`0,Polly.Context)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Create(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Create(`0,Polly.Context,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#ReadAll">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#ReadAll(`3)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#ReadAll(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#ReadAll(Polly.Context)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#ReadAll(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#ReadAll(`3,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#ReadAll(`3,Polly.Context)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#ReadAll(`3,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#ReadAll(System.Int32,Polly.Context)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#ReadAll(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#ReadAll(Polly.Context,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#ReadAll(`3,System.Int32,Polly.Context)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#ReadAll(`3,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#ReadAll(`3,Polly.Context,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#ReadAll(`3,System.Int32,Polly.Context,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Read(`1)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Read(`1,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Read(`1,Polly.Context)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Read(`1,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Read(`1,System.Int32,Polly.Context)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Read(`1,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Read(`1,System.Int32,Polly.Context,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Update(`1,`0)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Update(`1,`0,Polly.Context)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Update(`1,`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Update(`1,`0,Polly.Context,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Delete(`1)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Delete(`1,Polly.Context)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Delete(`1,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Delete(`1,Polly.Context,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
    </members>
</doc>
