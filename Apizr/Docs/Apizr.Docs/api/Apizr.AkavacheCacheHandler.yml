### YamlMime:ManagedReference
items:
- uid: Apizr.AkavacheCacheHandler
  commentId: T:Apizr.AkavacheCacheHandler
  id: AkavacheCacheHandler
  parent: Apizr
  children:
  - Apizr.AkavacheCacheHandler.#ctor
  - Apizr.AkavacheCacheHandler.#ctor(System.Func{Akavache.IBlobCache})
  - Apizr.AkavacheCacheHandler.#ctor(System.Func{Akavache.IBlobCache},System.String)
  - Apizr.AkavacheCacheHandler.#ctor(System.String)
  - Apizr.AkavacheCacheHandler.ClearAsync(System.Threading.CancellationToken)
  - Apizr.AkavacheCacheHandler.GetAsync``1(System.String,System.Threading.CancellationToken)
  - Apizr.AkavacheCacheHandler.RemoveAsync(System.String,System.Threading.CancellationToken)
  - Apizr.AkavacheCacheHandler.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: AkavacheCacheHandler
  nameWithType: AkavacheCacheHandler
  fullName: Apizr.AkavacheCacheHandler
  type: Class
  source:
    id: AkavacheCacheHandler
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Akavache\AkavacheCacheHandler.cs
    startLine: 14
  assemblies:
  - Apizr.Integrations.Akavache
  namespace: Apizr
  summary: "\nAkavache cache handler implementation\n"
  example: []
  syntax:
    content: 'public class AkavacheCacheHandler : ICacheHandler'
    content.vb: >-
      Public Class AkavacheCacheHandler
          Implements ICacheHandler
  inheritance:
  - System.Object
  implements:
  - Apizr.Caching.ICacheHandler
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Apizr.AkavacheCacheHandler.#ctor
  commentId: M:Apizr.AkavacheCacheHandler.#ctor
  id: '#ctor'
  parent: Apizr.AkavacheCacheHandler
  langs:
  - csharp
  - vb
  name: AkavacheCacheHandler()
  nameWithType: AkavacheCacheHandler.AkavacheCacheHandler()
  fullName: Apizr.AkavacheCacheHandler.AkavacheCacheHandler()
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Akavache\AkavacheCacheHandler.cs
    startLine: 21
  assemblies:
  - Apizr.Integrations.Akavache
  namespace: Apizr
  summary: "\nSet Akavache as CacheHandler with LocalMachine blob cache and ApizrAkavacheCacheHandler name\n"
  example: []
  syntax:
    content: public AkavacheCacheHandler()
    content.vb: Public Sub New
  overload: Apizr.AkavacheCacheHandler.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Apizr.AkavacheCacheHandler.#ctor(System.Func{Akavache.IBlobCache})
  commentId: M:Apizr.AkavacheCacheHandler.#ctor(System.Func{Akavache.IBlobCache})
  id: '#ctor(System.Func{Akavache.IBlobCache})'
  parent: Apizr.AkavacheCacheHandler
  langs:
  - csharp
  - vb
  name: AkavacheCacheHandler(Func<IBlobCache>)
  nameWithType: AkavacheCacheHandler.AkavacheCacheHandler(Func<IBlobCache>)
  fullName: Apizr.AkavacheCacheHandler.AkavacheCacheHandler(System.Func<Akavache.IBlobCache>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Akavache\AkavacheCacheHandler.cs
    startLine: 29
  assemblies:
  - Apizr.Integrations.Akavache
  namespace: Apizr
  summary: "\nSet Akavache as CacheHandler with your blob cache and ApizrAkavacheCacheHandler name\n"
  example: []
  syntax:
    content: public AkavacheCacheHandler(Func<IBlobCache> blobCacheFactory)
    parameters:
    - id: blobCacheFactory
      type: System.Func{Akavache.IBlobCache}
      description: The blob cache factory of your choice
    content.vb: Public Sub New(blobCacheFactory As Func(Of IBlobCache))
  overload: Apizr.AkavacheCacheHandler.#ctor*
  nameWithType.vb: AkavacheCacheHandler.AkavacheCacheHandler(Func(Of IBlobCache))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.AkavacheCacheHandler.AkavacheCacheHandler(System.Func(Of Akavache.IBlobCache))
  name.vb: AkavacheCacheHandler(Func(Of IBlobCache))
- uid: Apizr.AkavacheCacheHandler.#ctor(System.String)
  commentId: M:Apizr.AkavacheCacheHandler.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Apizr.AkavacheCacheHandler
  langs:
  - csharp
  - vb
  name: AkavacheCacheHandler(String)
  nameWithType: AkavacheCacheHandler.AkavacheCacheHandler(String)
  fullName: Apizr.AkavacheCacheHandler.AkavacheCacheHandler(System.String)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Akavache\AkavacheCacheHandler.cs
    startLine: 37
  assemblies:
  - Apizr.Integrations.Akavache
  namespace: Apizr
  summary: "\nSet Akavache as CacheHandler with LocalMachine blob cache and your provided name\n"
  example: []
  syntax:
    content: public AkavacheCacheHandler(string applicationName)
    parameters:
    - id: applicationName
      type: System.String
      description: The application name used by Akavache
    content.vb: Public Sub New(applicationName As String)
  overload: Apizr.AkavacheCacheHandler.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Apizr.AkavacheCacheHandler.#ctor(System.Func{Akavache.IBlobCache},System.String)
  commentId: M:Apizr.AkavacheCacheHandler.#ctor(System.Func{Akavache.IBlobCache},System.String)
  id: '#ctor(System.Func{Akavache.IBlobCache},System.String)'
  parent: Apizr.AkavacheCacheHandler
  langs:
  - csharp
  - vb
  name: AkavacheCacheHandler(Func<IBlobCache>, String)
  nameWithType: AkavacheCacheHandler.AkavacheCacheHandler(Func<IBlobCache>, String)
  fullName: Apizr.AkavacheCacheHandler.AkavacheCacheHandler(System.Func<Akavache.IBlobCache>, System.String)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Akavache\AkavacheCacheHandler.cs
    startLine: 47
  assemblies:
  - Apizr.Integrations.Akavache
  namespace: Apizr
  summary: "\nSet Akavache as CacheHandler with your blob cache and your provided name\n"
  example: []
  syntax:
    content: public AkavacheCacheHandler(Func<IBlobCache> blobCacheFactory, string applicationName)
    parameters:
    - id: blobCacheFactory
      type: System.Func{Akavache.IBlobCache}
      description: The blob cache factory of your choice
    - id: applicationName
      type: System.String
      description: The application name used by Akavache
    content.vb: Public Sub New(blobCacheFactory As Func(Of IBlobCache), applicationName As String)
  overload: Apizr.AkavacheCacheHandler.#ctor*
  nameWithType.vb: AkavacheCacheHandler.AkavacheCacheHandler(Func(Of IBlobCache), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.AkavacheCacheHandler.AkavacheCacheHandler(System.Func(Of Akavache.IBlobCache), System.String)
  name.vb: AkavacheCacheHandler(Func(Of IBlobCache), String)
- uid: Apizr.AkavacheCacheHandler.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)
  commentId: M:Apizr.AkavacheCacheHandler.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)
  id: SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)
  parent: Apizr.AkavacheCacheHandler
  langs:
  - csharp
  - vb
  name: SetAsync(String, Object, Nullable<TimeSpan>, CancellationToken)
  nameWithType: AkavacheCacheHandler.SetAsync(String, Object, Nullable<TimeSpan>, CancellationToken)
  fullName: Apizr.AkavacheCacheHandler.SetAsync(System.String, System.Object, System.Nullable<System.TimeSpan>, System.Threading.CancellationToken)
  type: Method
  source:
    id: SetAsync
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Akavache\AkavacheCacheHandler.cs
    startLine: 54
  assemblies:
  - Apizr.Integrations.Akavache
  namespace: Apizr
  summary: "\nMap Apizr cache saving method to your cache handler method\n"
  example: []
  syntax:
    content: public Task SetAsync(string key, object value, TimeSpan? lifeSpan = null, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: key
      type: System.String
      description: The key to cache at
    - id: value
      type: System.Object
      description: The value to cache
    - id: lifeSpan
      type: System.Nullable{System.TimeSpan}
      description: The optional life span
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function SetAsync(key As String, value As Object, lifeSpan As TimeSpan? = Nothing, cancellationToken As CancellationToken = Nothing) As Task
  overload: Apizr.AkavacheCacheHandler.SetAsync*
  implements:
  - Apizr.Caching.ICacheHandler.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)
  nameWithType.vb: AkavacheCacheHandler.SetAsync(String, Object, Nullable(Of TimeSpan), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.AkavacheCacheHandler.SetAsync(System.String, System.Object, System.Nullable(Of System.TimeSpan), System.Threading.CancellationToken)
  name.vb: SetAsync(String, Object, Nullable(Of TimeSpan), CancellationToken)
- uid: Apizr.AkavacheCacheHandler.GetAsync``1(System.String,System.Threading.CancellationToken)
  commentId: M:Apizr.AkavacheCacheHandler.GetAsync``1(System.String,System.Threading.CancellationToken)
  id: GetAsync``1(System.String,System.Threading.CancellationToken)
  parent: Apizr.AkavacheCacheHandler
  langs:
  - csharp
  - vb
  name: GetAsync<T>(String, CancellationToken)
  nameWithType: AkavacheCacheHandler.GetAsync<T>(String, CancellationToken)
  fullName: Apizr.AkavacheCacheHandler.GetAsync<T>(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetAsync
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Akavache\AkavacheCacheHandler.cs
    startLine: 63
  assemblies:
  - Apizr.Integrations.Akavache
  namespace: Apizr
  summary: "\nMap Apizr cache getting method to your cache handler method\n"
  example: []
  syntax:
    content: public Task<T> GetAsync<T>(string key, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: key
      type: System.String
      description: The key to get from
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
      description: The expected value type
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: Public Function GetAsync(Of T)(key As String, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Apizr.AkavacheCacheHandler.GetAsync*
  implements:
  - Apizr.Caching.ICacheHandler.GetAsync``1(System.String,System.Threading.CancellationToken)
  nameWithType.vb: AkavacheCacheHandler.GetAsync(Of T)(String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.AkavacheCacheHandler.GetAsync(Of T)(System.String, System.Threading.CancellationToken)
  name.vb: GetAsync(Of T)(String, CancellationToken)
- uid: Apizr.AkavacheCacheHandler.RemoveAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Apizr.AkavacheCacheHandler.RemoveAsync(System.String,System.Threading.CancellationToken)
  id: RemoveAsync(System.String,System.Threading.CancellationToken)
  parent: Apizr.AkavacheCacheHandler
  langs:
  - csharp
  - vb
  name: RemoveAsync(String, CancellationToken)
  nameWithType: AkavacheCacheHandler.RemoveAsync(String, CancellationToken)
  fullName: Apizr.AkavacheCacheHandler.RemoveAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    id: RemoveAsync
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Akavache\AkavacheCacheHandler.cs
    startLine: 71
  assemblies:
  - Apizr.Integrations.Akavache
  namespace: Apizr
  summary: "\nMap Apizr cache removing method to your cache handler method\n"
  example: []
  syntax:
    content: public Task<bool> RemoveAsync(string key, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: key
      type: System.String
      description: The key to remove from
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: ''
    content.vb: Public Function RemoveAsync(key As String, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: Apizr.AkavacheCacheHandler.RemoveAsync*
  implements:
  - Apizr.Caching.ICacheHandler.RemoveAsync(System.String,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Apizr.AkavacheCacheHandler.ClearAsync(System.Threading.CancellationToken)
  commentId: M:Apizr.AkavacheCacheHandler.ClearAsync(System.Threading.CancellationToken)
  id: ClearAsync(System.Threading.CancellationToken)
  parent: Apizr.AkavacheCacheHandler
  langs:
  - csharp
  - vb
  name: ClearAsync(CancellationToken)
  nameWithType: AkavacheCacheHandler.ClearAsync(CancellationToken)
  fullName: Apizr.AkavacheCacheHandler.ClearAsync(System.Threading.CancellationToken)
  type: Method
  source:
    id: ClearAsync
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Akavache\AkavacheCacheHandler.cs
    startLine: 80
  assemblies:
  - Apizr.Integrations.Akavache
  namespace: Apizr
  summary: "\nMap Apizr cache clearing method to your cache handler method\n"
  example: []
  syntax:
    content: public Task ClearAsync(CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function ClearAsync(cancellationToken As CancellationToken = Nothing) As Task
  overload: Apizr.AkavacheCacheHandler.ClearAsync*
  implements:
  - Apizr.Caching.ICacheHandler.ClearAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Apizr
  commentId: N:Apizr
  name: Apizr
  nameWithType: Apizr
  fullName: Apizr
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Apizr.Caching.ICacheHandler
  commentId: T:Apizr.Caching.ICacheHandler
  parent: Apizr.Caching
  name: ICacheHandler
  nameWithType: ICacheHandler
  fullName: Apizr.Caching.ICacheHandler
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Apizr.Caching
  commentId: N:Apizr.Caching
  name: Apizr.Caching
  nameWithType: Apizr.Caching
  fullName: Apizr.Caching
- uid: Apizr.AkavacheCacheHandler.#ctor*
  commentId: Overload:Apizr.AkavacheCacheHandler.#ctor
  name: AkavacheCacheHandler
  nameWithType: AkavacheCacheHandler.AkavacheCacheHandler
  fullName: Apizr.AkavacheCacheHandler.AkavacheCacheHandler
- uid: System.Func{Akavache.IBlobCache}
  commentId: T:System.Func{Akavache.IBlobCache}
  parent: System
  definition: System.Func`1
  name: Func<IBlobCache>
  nameWithType: Func<IBlobCache>
  fullName: System.Func<Akavache.IBlobCache>
  nameWithType.vb: Func(Of IBlobCache)
  fullName.vb: System.Func(Of Akavache.IBlobCache)
  name.vb: Func(Of IBlobCache)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Akavache.IBlobCache
    name: IBlobCache
    nameWithType: IBlobCache
    fullName: Akavache.IBlobCache
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Akavache.IBlobCache
    name: IBlobCache
    nameWithType: IBlobCache
    fullName: Akavache.IBlobCache
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Apizr.AkavacheCacheHandler.SetAsync*
  commentId: Overload:Apizr.AkavacheCacheHandler.SetAsync
  name: SetAsync
  nameWithType: AkavacheCacheHandler.SetAsync
  fullName: Apizr.AkavacheCacheHandler.SetAsync
- uid: Apizr.Caching.ICacheHandler.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)
  commentId: M:Apizr.Caching.ICacheHandler.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)
  parent: Apizr.Caching.ICacheHandler
  isExternal: true
  name: SetAsync(String, Object, Nullable<TimeSpan>, CancellationToken)
  nameWithType: ICacheHandler.SetAsync(String, Object, Nullable<TimeSpan>, CancellationToken)
  fullName: Apizr.Caching.ICacheHandler.SetAsync(System.String, System.Object, System.Nullable<System.TimeSpan>, System.Threading.CancellationToken)
  nameWithType.vb: ICacheHandler.SetAsync(String, Object, Nullable(Of TimeSpan), CancellationToken)
  fullName.vb: Apizr.Caching.ICacheHandler.SetAsync(System.String, System.Object, System.Nullable(Of System.TimeSpan), System.Threading.CancellationToken)
  name.vb: SetAsync(String, Object, Nullable(Of TimeSpan), CancellationToken)
  spec.csharp:
  - uid: Apizr.Caching.ICacheHandler.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)
    name: SetAsync
    nameWithType: ICacheHandler.SetAsync
    fullName: Apizr.Caching.ICacheHandler.SetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Caching.ICacheHandler.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)
    name: SetAsync
    nameWithType: ICacheHandler.SetAsync
    fullName: Apizr.Caching.ICacheHandler.SetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullName.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Apizr.AkavacheCacheHandler.GetAsync*
  commentId: Overload:Apizr.AkavacheCacheHandler.GetAsync
  name: GetAsync
  nameWithType: AkavacheCacheHandler.GetAsync
  fullName: Apizr.AkavacheCacheHandler.GetAsync
- uid: Apizr.Caching.ICacheHandler.GetAsync``1(System.String,System.Threading.CancellationToken)
  commentId: M:Apizr.Caching.ICacheHandler.GetAsync``1(System.String,System.Threading.CancellationToken)
  parent: Apizr.Caching.ICacheHandler
  isExternal: true
  name: GetAsync<T>(String, CancellationToken)
  nameWithType: ICacheHandler.GetAsync<T>(String, CancellationToken)
  fullName: Apizr.Caching.ICacheHandler.GetAsync<T>(System.String, System.Threading.CancellationToken)
  nameWithType.vb: ICacheHandler.GetAsync(Of T)(String, CancellationToken)
  fullName.vb: Apizr.Caching.ICacheHandler.GetAsync(Of T)(System.String, System.Threading.CancellationToken)
  name.vb: GetAsync(Of T)(String, CancellationToken)
  spec.csharp:
  - uid: Apizr.Caching.ICacheHandler.GetAsync``1(System.String,System.Threading.CancellationToken)
    name: GetAsync<T>
    nameWithType: ICacheHandler.GetAsync<T>
    fullName: Apizr.Caching.ICacheHandler.GetAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Caching.ICacheHandler.GetAsync``1(System.String,System.Threading.CancellationToken)
    name: GetAsync(Of T)
    nameWithType: ICacheHandler.GetAsync(Of T)
    fullName: Apizr.Caching.ICacheHandler.GetAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.AkavacheCacheHandler.RemoveAsync*
  commentId: Overload:Apizr.AkavacheCacheHandler.RemoveAsync
  name: RemoveAsync
  nameWithType: AkavacheCacheHandler.RemoveAsync
  fullName: Apizr.AkavacheCacheHandler.RemoveAsync
- uid: Apizr.Caching.ICacheHandler.RemoveAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Apizr.Caching.ICacheHandler.RemoveAsync(System.String,System.Threading.CancellationToken)
  parent: Apizr.Caching.ICacheHandler
  isExternal: true
  name: RemoveAsync(String, CancellationToken)
  nameWithType: ICacheHandler.RemoveAsync(String, CancellationToken)
  fullName: Apizr.Caching.ICacheHandler.RemoveAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Apizr.Caching.ICacheHandler.RemoveAsync(System.String,System.Threading.CancellationToken)
    name: RemoveAsync
    nameWithType: ICacheHandler.RemoveAsync
    fullName: Apizr.Caching.ICacheHandler.RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Caching.ICacheHandler.RemoveAsync(System.String,System.Threading.CancellationToken)
    name: RemoveAsync
    nameWithType: ICacheHandler.RemoveAsync
    fullName: Apizr.Caching.ICacheHandler.RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.AkavacheCacheHandler.ClearAsync*
  commentId: Overload:Apizr.AkavacheCacheHandler.ClearAsync
  name: ClearAsync
  nameWithType: AkavacheCacheHandler.ClearAsync
  fullName: Apizr.AkavacheCacheHandler.ClearAsync
- uid: Apizr.Caching.ICacheHandler.ClearAsync(System.Threading.CancellationToken)
  commentId: M:Apizr.Caching.ICacheHandler.ClearAsync(System.Threading.CancellationToken)
  parent: Apizr.Caching.ICacheHandler
  isExternal: true
  name: ClearAsync(CancellationToken)
  nameWithType: ICacheHandler.ClearAsync(CancellationToken)
  fullName: Apizr.Caching.ICacheHandler.ClearAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Apizr.Caching.ICacheHandler.ClearAsync(System.Threading.CancellationToken)
    name: ClearAsync
    nameWithType: ICacheHandler.ClearAsync
    fullName: Apizr.Caching.ICacheHandler.ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Caching.ICacheHandler.ClearAsync(System.Threading.CancellationToken)
    name: ClearAsync
    nameWithType: ICacheHandler.ClearAsync
    fullName: Apizr.Caching.ICacheHandler.ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
