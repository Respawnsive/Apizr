### YamlMime:ManagedReference
items:
- uid: Apizr.ApizrBuilder
  commentId: T:Apizr.ApizrBuilder
  id: ApizrBuilder
  parent: Apizr
  children:
  - Apizr.ApizrBuilder.CreateCrudManagerFor``1(System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  - Apizr.ApizrBuilder.CreateCrudManagerFor``2(System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  - Apizr.ApizrBuilder.CreateCrudManagerFor``3(System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  - Apizr.ApizrBuilder.CreateCrudManagerFor``4(System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  - Apizr.ApizrBuilder.CreateCrudManagerFor``5(System.Func{Apizr.ILazyFactory{Apizr.Requesting.ICrudApi{``0,``1,``2,``3}},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Polly.Registry.IReadOnlyPolicyRegistry{System.String},Apizr.Configuring.IApizrOptionsBase,``4},System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  - Apizr.ApizrBuilder.CreateManagerFor``1(System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  - Apizr.ApizrBuilder.CreateManagerFor``2(System.Func{Apizr.ILazyFactory{``0},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Polly.Registry.IReadOnlyPolicyRegistry{System.String},Apizr.Configuring.IApizrOptions{``0},``1},System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  - Apizr.ApizrBuilder.CreateRegistry(System.Action{Apizr.Configuring.Registry.IApizrRegistryBuilder},System.Action{Apizr.Configuring.Common.IApizrCommonOptionsBuilder})
  langs:
  - csharp
  - vb
  name: ApizrBuilder
  nameWithType: ApizrBuilder
  fullName: Apizr.ApizrBuilder
  type: Class
  source:
    id: ApizrBuilder
    path: C:\Dev\Community\Apizr\Apizr\Apizr\ApizrBuilder.cs
    startLine: 25
  assemblies:
  - Apizr
  namespace: Apizr
  syntax:
    content: public static class ApizrBuilder
    content.vb: Public Module ApizrBuilder
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Apizr.ApizrBuilder.CreateRegistry(System.Action{Apizr.Configuring.Registry.IApizrRegistryBuilder},System.Action{Apizr.Configuring.Common.IApizrCommonOptionsBuilder})
  commentId: M:Apizr.ApizrBuilder.CreateRegistry(System.Action{Apizr.Configuring.Registry.IApizrRegistryBuilder},System.Action{Apizr.Configuring.Common.IApizrCommonOptionsBuilder})
  id: CreateRegistry(System.Action{Apizr.Configuring.Registry.IApizrRegistryBuilder},System.Action{Apizr.Configuring.Common.IApizrCommonOptionsBuilder})
  parent: Apizr.ApizrBuilder
  langs:
  - csharp
  - vb
  name: CreateRegistry(Action<IApizrRegistryBuilder>, Action<IApizrCommonOptionsBuilder>)
  nameWithType: ApizrBuilder.CreateRegistry(Action<IApizrRegistryBuilder>, Action<IApizrCommonOptionsBuilder>)
  fullName: Apizr.ApizrBuilder.CreateRegistry(System.Action<Apizr.Configuring.Registry.IApizrRegistryBuilder>, System.Action<Apizr.Configuring.Common.IApizrCommonOptionsBuilder>)
  type: Method
  source:
    id: CreateRegistry
    path: C:\Dev\Community\Apizr\Apizr\Apizr\ApizrBuilder.cs
    startLine: 35
  assemblies:
  - Apizr
  namespace: Apizr
  summary: "\nCreate a registry with all managers built with both common and proper options\n"
  example: []
  syntax:
    content: public static IApizrRegistry CreateRegistry(Action<IApizrRegistryBuilder> registryBuilder, Action<IApizrCommonOptionsBuilder> commonOptionsBuilder = null)
    parameters:
    - id: registryBuilder
      type: System.Action{Apizr.Configuring.Registry.IApizrRegistryBuilder}
      description: The registry builder with access to proper options
    - id: commonOptionsBuilder
      type: System.Action{Apizr.Configuring.Common.IApizrCommonOptionsBuilder}
      description: The common options shared by all managers
    return:
      type: Apizr.Configuring.Registry.IApizrRegistry
      description: ''
    content.vb: Public Shared Function CreateRegistry(registryBuilder As Action(Of IApizrRegistryBuilder), commonOptionsBuilder As Action(Of IApizrCommonOptionsBuilder) = Nothing) As IApizrRegistry
  overload: Apizr.ApizrBuilder.CreateRegistry*
  nameWithType.vb: ApizrBuilder.CreateRegistry(Action(Of IApizrRegistryBuilder), Action(Of IApizrCommonOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ApizrBuilder.CreateRegistry(System.Action(Of Apizr.Configuring.Registry.IApizrRegistryBuilder), System.Action(Of Apizr.Configuring.Common.IApizrCommonOptionsBuilder))
  name.vb: CreateRegistry(Action(Of IApizrRegistryBuilder), Action(Of IApizrCommonOptionsBuilder))
- uid: Apizr.ApizrBuilder.CreateCrudManagerFor``1(System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  commentId: M:Apizr.ApizrBuilder.CreateCrudManagerFor``1(System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  id: CreateCrudManagerFor``1(System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  parent: Apizr.ApizrBuilder
  langs:
  - csharp
  - vb
  name: CreateCrudManagerFor<T>(Action<IApizrOptionsBuilder>)
  nameWithType: ApizrBuilder.CreateCrudManagerFor<T>(Action<IApizrOptionsBuilder>)
  fullName: Apizr.ApizrBuilder.CreateCrudManagerFor<T>(System.Action<Apizr.Configuring.IApizrOptionsBuilder>)
  type: Method
  source:
    id: CreateCrudManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr\ApizrBuilder.cs
    startLine: 60
  assemblies:
  - Apizr
  namespace: Apizr
  summary: "\nCreate a <xref href=\"Apizr.ApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> instance for <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> object type (class), \nwith key of type <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> and &quot;ReadAll&quot; query result of type <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref>\nand ReadAll query parameters of type IDictionary{string,object}\n"
  example: []
  syntax:
    content: >-
      public static IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> CreateCrudManagerFor<T>(Action<IApizrOptionsBuilder> optionsBuilder = null)
          where T : class
    parameters:
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.IApizrOptionsBuilder}
      description: The builder defining some options
    typeParameters:
    - id: T
      description: The object type to manage with crud api calls (class)
    return:
      type: Apizr.IApizrManager{Apizr.Requesting.ICrudApi{{T},System.Int32,System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IDictionary{System.String,System.Object}}}
      description: ''
    content.vb: Public Shared Function CreateCrudManagerFor(Of T As Class)(optionsBuilder As Action(Of IApizrOptionsBuilder) = Nothing) As IApizrManager(Of ICrudApi(Of T, Integer, IEnumerable(Of T), IDictionary(Of String, Object)))
  overload: Apizr.ApizrBuilder.CreateCrudManagerFor*
  nameWithType.vb: ApizrBuilder.CreateCrudManagerFor(Of T)(Action(Of IApizrOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ApizrBuilder.CreateCrudManagerFor(Of T)(System.Action(Of Apizr.Configuring.IApizrOptionsBuilder))
  name.vb: CreateCrudManagerFor(Of T)(Action(Of IApizrOptionsBuilder))
- uid: Apizr.ApizrBuilder.CreateCrudManagerFor``2(System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  commentId: M:Apizr.ApizrBuilder.CreateCrudManagerFor``2(System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  id: CreateCrudManagerFor``2(System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  parent: Apizr.ApizrBuilder
  langs:
  - csharp
  - vb
  name: CreateCrudManagerFor<T, TKey>(Action<IApizrOptionsBuilder>)
  nameWithType: ApizrBuilder.CreateCrudManagerFor<T, TKey>(Action<IApizrOptionsBuilder>)
  fullName: Apizr.ApizrBuilder.CreateCrudManagerFor<T, TKey>(System.Action<Apizr.Configuring.IApizrOptionsBuilder>)
  type: Method
  source:
    id: CreateCrudManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr\ApizrBuilder.cs
    startLine: 78
  assemblies:
  - Apizr
  namespace: Apizr
  summary: "\nCreate a <xref href=\"Apizr.ApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> instance for <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> object type (class), \nwith key of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TKey</code> (primitive) and &quot;ReadAll&quot; query result of type <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref>\nand ReadAll query parameters of type IDictionary{string,object}\n"
  example: []
  syntax:
    content: >-
      public static IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> CreateCrudManagerFor<T, TKey>(Action<IApizrOptionsBuilder> optionsBuilder = null)
          where T : class
    parameters:
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.IApizrOptionsBuilder}
      description: The builder defining some options
    typeParameters:
    - id: T
      description: The object type to manage with crud api calls (class)
    - id: TKey
      description: The object key type (primitive)
    return:
      type: Apizr.IApizrManager{Apizr.Requesting.ICrudApi{{T},{TKey},System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IDictionary{System.String,System.Object}}}
      description: ''
    content.vb: Public Shared Function CreateCrudManagerFor(Of T As Class, TKey)(optionsBuilder As Action(Of IApizrOptionsBuilder) = Nothing) As IApizrManager(Of ICrudApi(Of T, TKey, IEnumerable(Of T), IDictionary(Of String, Object)))
  overload: Apizr.ApizrBuilder.CreateCrudManagerFor*
  nameWithType.vb: ApizrBuilder.CreateCrudManagerFor(Of T, TKey)(Action(Of IApizrOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ApizrBuilder.CreateCrudManagerFor(Of T, TKey)(System.Action(Of Apizr.Configuring.IApizrOptionsBuilder))
  name.vb: CreateCrudManagerFor(Of T, TKey)(Action(Of IApizrOptionsBuilder))
- uid: Apizr.ApizrBuilder.CreateCrudManagerFor``3(System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  commentId: M:Apizr.ApizrBuilder.CreateCrudManagerFor``3(System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  id: CreateCrudManagerFor``3(System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  parent: Apizr.ApizrBuilder
  langs:
  - csharp
  - vb
  name: CreateCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrOptionsBuilder>)
  nameWithType: ApizrBuilder.CreateCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrOptionsBuilder>)
  fullName: Apizr.ApizrBuilder.CreateCrudManagerFor<T, TKey, TReadAllResult>(System.Action<Apizr.Configuring.IApizrOptionsBuilder>)
  type: Method
  source:
    id: CreateCrudManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr\ApizrBuilder.cs
    startLine: 98
  assemblies:
  - Apizr
  namespace: Apizr
  summary: "\nCreate a <xref href=\"Apizr.ApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> instance for <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> object type (class), \nwith key of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TKey</code> (primitive) and &quot;ReadAll&quot; query result of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TReadAllResult</code>\nand ReadAll query parameters of type IDictionary{string,object}\n"
  example: []
  syntax:
    content: >-
      public static IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> CreateCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrOptionsBuilder> optionsBuilder = null)
          where T : class
    parameters:
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.IApizrOptionsBuilder}
      description: The builder defining some options
    typeParameters:
    - id: T
      description: The object type to manage with crud api calls (class)
    - id: TKey
      description: The object key type (primitive)
    - id: TReadAllResult
      description: >-
        &quot;ReadAll&quot; query result type

        (should inherit from <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> or be of class type)
    return:
      type: Apizr.IApizrManager{Apizr.Requesting.ICrudApi{{T},{TKey},{TReadAllResult},System.Collections.Generic.IDictionary{System.String,System.Object}}}
      description: ''
    content.vb: Public Shared Function CreateCrudManagerFor(Of T As Class, TKey, TReadAllResult)(optionsBuilder As Action(Of IApizrOptionsBuilder) = Nothing) As IApizrManager(Of ICrudApi(Of T, TKey, TReadAllResult, IDictionary(Of String, Object)))
  overload: Apizr.ApizrBuilder.CreateCrudManagerFor*
  nameWithType.vb: ApizrBuilder.CreateCrudManagerFor(Of T, TKey, TReadAllResult)(Action(Of IApizrOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ApizrBuilder.CreateCrudManagerFor(Of T, TKey, TReadAllResult)(System.Action(Of Apizr.Configuring.IApizrOptionsBuilder))
  name.vb: CreateCrudManagerFor(Of T, TKey, TReadAllResult)(Action(Of IApizrOptionsBuilder))
- uid: Apizr.ApizrBuilder.CreateCrudManagerFor``4(System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  commentId: M:Apizr.ApizrBuilder.CreateCrudManagerFor``4(System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  id: CreateCrudManagerFor``4(System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  parent: Apizr.ApizrBuilder
  langs:
  - csharp
  - vb
  name: CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrOptionsBuilder>)
  nameWithType: ApizrBuilder.CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrOptionsBuilder>)
  fullName: Apizr.ApizrBuilder.CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(System.Action<Apizr.Configuring.IApizrOptionsBuilder>)
  type: Method
  source:
    id: CreateCrudManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr\ApizrBuilder.cs
    startLine: 122
  assemblies:
  - Apizr
  namespace: Apizr
  summary: "\nCreate a <xref href=\"Apizr.ApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> instance for <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> object type (class), \nwith key of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TKey</code> (primitive) and &quot;ReadAll&quot; query result of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TReadAllResult</code>\nand ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)\n"
  example: []
  syntax:
    content: >-
      public static IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrOptionsBuilder> optionsBuilder = null)
          where T : class where TReadAllParams : class
    parameters:
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.IApizrOptionsBuilder}
      description: The builder defining some options
    typeParameters:
    - id: T
      description: The object type to manage with crud api calls (class)
    - id: TKey
      description: The object key type (primitive)
    - id: TReadAllResult
      description: >-
        &quot;ReadAll&quot; query result type

        (should inherit from <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> or be of class type)
    - id: TReadAllParams
      description: ReadAll query parameters
    return:
      type: Apizr.IApizrManager{Apizr.Requesting.ICrudApi{{T},{TKey},{TReadAllResult},{TReadAllParams}}}
      description: ''
    content.vb: Public Shared Function CreateCrudManagerFor(Of T As Class, TKey, TReadAllResult, TReadAllParams As Class)(optionsBuilder As Action(Of IApizrOptionsBuilder) = Nothing) As IApizrManager(Of ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams))
  overload: Apizr.ApizrBuilder.CreateCrudManagerFor*
  nameWithType.vb: ApizrBuilder.CreateCrudManagerFor(Of T, TKey, TReadAllResult, TReadAllParams)(Action(Of IApizrOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ApizrBuilder.CreateCrudManagerFor(Of T, TKey, TReadAllResult, TReadAllParams)(System.Action(Of Apizr.Configuring.IApizrOptionsBuilder))
  name.vb: CreateCrudManagerFor(Of T, TKey, TReadAllResult, TReadAllParams)(Action(Of IApizrOptionsBuilder))
- uid: Apizr.ApizrBuilder.CreateCrudManagerFor``5(System.Func{Apizr.ILazyFactory{Apizr.Requesting.ICrudApi{``0,``1,``2,``3}},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Polly.Registry.IReadOnlyPolicyRegistry{System.String},Apizr.Configuring.IApizrOptionsBase,``4},System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  commentId: M:Apizr.ApizrBuilder.CreateCrudManagerFor``5(System.Func{Apizr.ILazyFactory{Apizr.Requesting.ICrudApi{``0,``1,``2,``3}},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Polly.Registry.IReadOnlyPolicyRegistry{System.String},Apizr.Configuring.IApizrOptionsBase,``4},System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  id: CreateCrudManagerFor``5(System.Func{Apizr.ILazyFactory{Apizr.Requesting.ICrudApi{``0,``1,``2,``3}},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Polly.Registry.IReadOnlyPolicyRegistry{System.String},Apizr.Configuring.IApizrOptionsBase,``4},System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  parent: Apizr.ApizrBuilder
  langs:
  - csharp
  - vb
  name: CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrOptionsBase, TApizrManager>, Action<IApizrOptionsBuilder>)
  nameWithType: ApizrBuilder.CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrOptionsBase, TApizrManager>, Action<IApizrOptionsBuilder>)
  fullName: Apizr.ApizrBuilder.CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(System.Func<Apizr.ILazyFactory<Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, Apizr.Connecting.IConnectivityHandler, Apizr.Caching.ICacheHandler, Apizr.Mapping.IMappingHandler, Polly.Registry.IReadOnlyPolicyRegistry<System.String>, Apizr.Configuring.IApizrOptionsBase, TApizrManager>, System.Action<Apizr.Configuring.IApizrOptionsBuilder>)
  type: Method
  source:
    id: CreateCrudManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr\ApizrBuilder.cs
    startLine: 148
  assemblies:
  - Apizr
  namespace: Apizr
  summary: "\nCreate a <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TApizrManager</code> instance for a managed crud api for <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> object (class), \nwith key of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TKey</code> (primitive) and &quot;ReadAll&quot; query result of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TReadAllResult</code>\nand ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)\n"
  example: []
  syntax:
    content: >-
      public static TApizrManager CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<string>, IApizrOptionsBase, TApizrManager> apizrManagerFactory, Action<IApizrOptionsBuilder> optionsBuilder = null)
          where T : class where TReadAllParams : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>
    parameters:
    - id: apizrManagerFactory
      type: System.Func{Apizr.ILazyFactory{Apizr.Requesting.ICrudApi{{T},{TKey},{TReadAllResult},{TReadAllParams}}},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Polly.Registry.IReadOnlyPolicyRegistry{System.String},Apizr.Configuring.IApizrOptionsBase,{TApizrManager}}
      description: The custom manager implementation instance factory
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.IApizrOptionsBuilder}
      description: The builder defining some options
    typeParameters:
    - id: T
      description: The object type to manage with crud api calls (class)
    - id: TKey
      description: The object key type (primitive)
    - id: TReadAllResult
      description: >-
        &quot;ReadAll&quot; query result type

        (should inherit from <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> or be of class type)
    - id: TReadAllParams
      description: ReadAll query parameters
    - id: TApizrManager
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation
    return:
      type: '{TApizrManager}'
      description: ''
    content.vb: Public Shared Function CreateCrudManagerFor(Of T As Class, TKey, TReadAllResult, TReadAllParams As Class, TApizrManager As IApizrManager(Of ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams)))(apizrManagerFactory As Func(Of ILazyFactory(Of ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams)), IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry(Of String), IApizrOptionsBase, TApizrManager), optionsBuilder As Action(Of IApizrOptionsBuilder) = Nothing) As TApizrManager
  overload: Apizr.ApizrBuilder.CreateCrudManagerFor*
  nameWithType.vb: ApizrBuilder.CreateCrudManagerFor(Of T, TKey, TReadAllResult, TReadAllParams, TApizrManager)(Func(Of ILazyFactory(Of ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams)), IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry(Of String), IApizrOptionsBase, TApizrManager), Action(Of IApizrOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ApizrBuilder.CreateCrudManagerFor(Of T, TKey, TReadAllResult, TReadAllParams, TApizrManager)(System.Func(Of Apizr.ILazyFactory(Of Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams)), Apizr.Connecting.IConnectivityHandler, Apizr.Caching.ICacheHandler, Apizr.Mapping.IMappingHandler, Polly.Registry.IReadOnlyPolicyRegistry(Of System.String), Apizr.Configuring.IApizrOptionsBase, TApizrManager), System.Action(Of Apizr.Configuring.IApizrOptionsBuilder))
  name.vb: CreateCrudManagerFor(Of T, TKey, TReadAllResult, TReadAllParams, TApizrManager)(Func(Of ILazyFactory(Of ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams)), IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry(Of String), IApizrOptionsBase, TApizrManager), Action(Of IApizrOptionsBuilder))
- uid: Apizr.ApizrBuilder.CreateManagerFor``1(System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  commentId: M:Apizr.ApizrBuilder.CreateManagerFor``1(System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  id: CreateManagerFor``1(System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  parent: Apizr.ApizrBuilder
  langs:
  - csharp
  - vb
  name: CreateManagerFor<TWebApi>(Action<IApizrOptionsBuilder>)
  nameWithType: ApizrBuilder.CreateManagerFor<TWebApi>(Action<IApizrOptionsBuilder>)
  fullName: Apizr.ApizrBuilder.CreateManagerFor<TWebApi>(System.Action<Apizr.Configuring.IApizrOptionsBuilder>)
  type: Method
  source:
    id: CreateManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr\ApizrBuilder.cs
    startLine: 168
  assemblies:
  - Apizr
  namespace: Apizr
  summary: "\nCreate a <xref href=\"Apizr.ApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> instance\n"
  example: []
  syntax:
    content: public static IApizrManager<TWebApi> CreateManagerFor<TWebApi>(Action<IApizrOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.IApizrOptionsBuilder}
      description: The builder defining some options
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    return:
      type: Apizr.IApizrManager{{TWebApi}}
      description: ''
    content.vb: Public Shared Function CreateManagerFor(Of TWebApi)(optionsBuilder As Action(Of IApizrOptionsBuilder) = Nothing) As IApizrManager(Of TWebApi)
  overload: Apizr.ApizrBuilder.CreateManagerFor*
  nameWithType.vb: ApizrBuilder.CreateManagerFor(Of TWebApi)(Action(Of IApizrOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ApizrBuilder.CreateManagerFor(Of TWebApi)(System.Action(Of Apizr.Configuring.IApizrOptionsBuilder))
  name.vb: CreateManagerFor(Of TWebApi)(Action(Of IApizrOptionsBuilder))
- uid: Apizr.ApizrBuilder.CreateManagerFor``2(System.Func{Apizr.ILazyFactory{``0},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Polly.Registry.IReadOnlyPolicyRegistry{System.String},Apizr.Configuring.IApizrOptions{``0},``1},System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  commentId: M:Apizr.ApizrBuilder.CreateManagerFor``2(System.Func{Apizr.ILazyFactory{``0},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Polly.Registry.IReadOnlyPolicyRegistry{System.String},Apizr.Configuring.IApizrOptions{``0},``1},System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  id: CreateManagerFor``2(System.Func{Apizr.ILazyFactory{``0},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Polly.Registry.IReadOnlyPolicyRegistry{System.String},Apizr.Configuring.IApizrOptions{``0},``1},System.Action{Apizr.Configuring.IApizrOptionsBuilder})
  parent: Apizr.ApizrBuilder
  langs:
  - csharp
  - vb
  name: CreateManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrOptions<TWebApi>, TApizrManager>, Action<IApizrOptionsBuilder>)
  nameWithType: ApizrBuilder.CreateManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrOptions<TWebApi>, TApizrManager>, Action<IApizrOptionsBuilder>)
  fullName: Apizr.ApizrBuilder.CreateManagerFor<TWebApi, TApizrManager>(System.Func<Apizr.ILazyFactory<TWebApi>, Apizr.Connecting.IConnectivityHandler, Apizr.Caching.ICacheHandler, Apizr.Mapping.IMappingHandler, Polly.Registry.IReadOnlyPolicyRegistry<System.String>, Apizr.Configuring.IApizrOptions<TWebApi>, TApizrManager>, System.Action<Apizr.Configuring.IApizrOptionsBuilder>)
  type: Method
  source:
    id: CreateManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr\ApizrBuilder.cs
    startLine: 183
  assemblies:
  - Apizr
  namespace: Apizr
  summary: "\nCreate a <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TApizrManager</code> instance for a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>\n"
  example: []
  syntax:
    content: >-
      public static TApizrManager CreateManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<string>, IApizrOptions<TWebApi>, TApizrManager> apizrManagerFactory, Action<IApizrOptionsBuilder> optionsBuilder = null)
          where TApizrManager : IApizrManager<TWebApi>
    parameters:
    - id: apizrManagerFactory
      type: System.Func{Apizr.ILazyFactory{{TWebApi}},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Polly.Registry.IReadOnlyPolicyRegistry{System.String},Apizr.Configuring.IApizrOptions{{TWebApi}},{TApizrManager}}
      description: The custom manager implementation instance factory
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.IApizrOptionsBuilder}
      description: The builder defining some options
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TApizrManager
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation
    return:
      type: '{TApizrManager}'
      description: ''
    content.vb: Public Shared Function CreateManagerFor(Of TWebApi, TApizrManager As IApizrManager(Of TWebApi))(apizrManagerFactory As Func(Of ILazyFactory(Of TWebApi), IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry(Of String), IApizrOptions(Of TWebApi), TApizrManager), optionsBuilder As Action(Of IApizrOptionsBuilder) = Nothing) As TApizrManager
  overload: Apizr.ApizrBuilder.CreateManagerFor*
  nameWithType.vb: ApizrBuilder.CreateManagerFor(Of TWebApi, TApizrManager)(Func(Of ILazyFactory(Of TWebApi), IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry(Of String), IApizrOptions(Of TWebApi), TApizrManager), Action(Of IApizrOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ApizrBuilder.CreateManagerFor(Of TWebApi, TApizrManager)(System.Func(Of Apizr.ILazyFactory(Of TWebApi), Apizr.Connecting.IConnectivityHandler, Apizr.Caching.ICacheHandler, Apizr.Mapping.IMappingHandler, Polly.Registry.IReadOnlyPolicyRegistry(Of System.String), Apizr.Configuring.IApizrOptions(Of TWebApi), TApizrManager), System.Action(Of Apizr.Configuring.IApizrOptionsBuilder))
  name.vb: CreateManagerFor(Of TWebApi, TApizrManager)(Func(Of ILazyFactory(Of TWebApi), IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry(Of String), IApizrOptions(Of TWebApi), TApizrManager), Action(Of IApizrOptionsBuilder))
references:
- uid: Apizr
  commentId: N:Apizr
  name: Apizr
  nameWithType: Apizr
  fullName: Apizr
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Apizr.ApizrBuilder.CreateRegistry*
  commentId: Overload:Apizr.ApizrBuilder.CreateRegistry
  name: CreateRegistry
  nameWithType: ApizrBuilder.CreateRegistry
  fullName: Apizr.ApizrBuilder.CreateRegistry
- uid: System.Action{Apizr.Configuring.Registry.IApizrRegistryBuilder}
  commentId: T:System.Action{Apizr.Configuring.Registry.IApizrRegistryBuilder}
  parent: System
  definition: System.Action`1
  name: Action<IApizrRegistryBuilder>
  nameWithType: Action<IApizrRegistryBuilder>
  fullName: System.Action<Apizr.Configuring.Registry.IApizrRegistryBuilder>
  nameWithType.vb: Action(Of IApizrRegistryBuilder)
  fullName.vb: System.Action(Of Apizr.Configuring.Registry.IApizrRegistryBuilder)
  name.vb: Action(Of IApizrRegistryBuilder)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Apizr.Configuring.Registry.IApizrRegistryBuilder
    name: IApizrRegistryBuilder
    nameWithType: IApizrRegistryBuilder
    fullName: Apizr.Configuring.Registry.IApizrRegistryBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Apizr.Configuring.Registry.IApizrRegistryBuilder
    name: IApizrRegistryBuilder
    nameWithType: IApizrRegistryBuilder
    fullName: Apizr.Configuring.Registry.IApizrRegistryBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{Apizr.Configuring.Common.IApizrCommonOptionsBuilder}
  commentId: T:System.Action{Apizr.Configuring.Common.IApizrCommonOptionsBuilder}
  parent: System
  definition: System.Action`1
  name: Action<IApizrCommonOptionsBuilder>
  nameWithType: Action<IApizrCommonOptionsBuilder>
  fullName: System.Action<Apizr.Configuring.Common.IApizrCommonOptionsBuilder>
  nameWithType.vb: Action(Of IApizrCommonOptionsBuilder)
  fullName.vb: System.Action(Of Apizr.Configuring.Common.IApizrCommonOptionsBuilder)
  name.vb: Action(Of IApizrCommonOptionsBuilder)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Apizr.Configuring.Common.IApizrCommonOptionsBuilder
    name: IApizrCommonOptionsBuilder
    nameWithType: IApizrCommonOptionsBuilder
    fullName: Apizr.Configuring.Common.IApizrCommonOptionsBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Apizr.Configuring.Common.IApizrCommonOptionsBuilder
    name: IApizrCommonOptionsBuilder
    nameWithType: IApizrCommonOptionsBuilder
    fullName: Apizr.Configuring.Common.IApizrCommonOptionsBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Configuring.Registry.IApizrRegistry
  commentId: T:Apizr.Configuring.Registry.IApizrRegistry
  parent: Apizr.Configuring.Registry
  name: IApizrRegistry
  nameWithType: IApizrRegistry
  fullName: Apizr.Configuring.Registry.IApizrRegistry
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Configuring.Registry
  commentId: N:Apizr.Configuring.Registry
  name: Apizr.Configuring.Registry
  nameWithType: Apizr.Configuring.Registry
  fullName: Apizr.Configuring.Registry
- uid: Apizr.ApizrManager`1
  commentId: T:Apizr.ApizrManager`1
  name: ApizrManager<TWebApi>
  nameWithType: ApizrManager<TWebApi>
  fullName: Apizr.ApizrManager<TWebApi>
  nameWithType.vb: ApizrManager(Of TWebApi)
  fullName.vb: Apizr.ApizrManager(Of TWebApi)
  name.vb: ApizrManager(Of TWebApi)
  spec.csharp:
  - uid: Apizr.ApizrManager`1
    name: ApizrManager
    nameWithType: ApizrManager
    fullName: Apizr.ApizrManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.ApizrManager`1
    name: ApizrManager
    nameWithType: ApizrManager
    fullName: Apizr.ApizrManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.ApizrBuilder.CreateCrudManagerFor*
  commentId: Overload:Apizr.ApizrBuilder.CreateCrudManagerFor
  name: CreateCrudManagerFor
  nameWithType: ApizrBuilder.CreateCrudManagerFor
  fullName: Apizr.ApizrBuilder.CreateCrudManagerFor
- uid: System.Action{Apizr.Configuring.IApizrOptionsBuilder}
  commentId: T:System.Action{Apizr.Configuring.IApizrOptionsBuilder}
  parent: System
  definition: System.Action`1
  name: Action<IApizrOptionsBuilder>
  nameWithType: Action<IApizrOptionsBuilder>
  fullName: System.Action<Apizr.Configuring.IApizrOptionsBuilder>
  nameWithType.vb: Action(Of IApizrOptionsBuilder)
  fullName.vb: System.Action(Of Apizr.Configuring.IApizrOptionsBuilder)
  name.vb: Action(Of IApizrOptionsBuilder)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Apizr.Configuring.IApizrOptionsBuilder
    name: IApizrOptionsBuilder
    nameWithType: IApizrOptionsBuilder
    fullName: Apizr.Configuring.IApizrOptionsBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Apizr.Configuring.IApizrOptionsBuilder
    name: IApizrOptionsBuilder
    nameWithType: IApizrOptionsBuilder
    fullName: Apizr.Configuring.IApizrOptionsBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.IApizrManager{Apizr.Requesting.ICrudApi{{T},System.Int32,System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IDictionary{System.String,System.Object}}}
  commentId: T:Apizr.IApizrManager{Apizr.Requesting.ICrudApi{``0,System.Int32,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{System.String,System.Object}}}
  parent: Apizr
  definition: Apizr.IApizrManager`1
  name: IApizrManager<ICrudApi<T, Int32, IEnumerable<T>, IDictionary<String, Object>>>
  nameWithType: IApizrManager<ICrudApi<T, Int32, IEnumerable<T>, IDictionary<String, Object>>>
  fullName: Apizr.IApizrManager<Apizr.Requesting.ICrudApi<T, System.Int32, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IDictionary<System.String, System.Object>>>
  nameWithType.vb: IApizrManager(Of ICrudApi(Of T, Int32, IEnumerable(Of T), IDictionary(Of String, Object)))
  fullName.vb: Apizr.IApizrManager(Of Apizr.Requesting.ICrudApi(Of T, System.Int32, System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IDictionary(Of System.String, System.Object)))
  name.vb: IApizrManager(Of ICrudApi(Of T, Int32, IEnumerable(Of T), IDictionary(Of String, Object)))
  spec.csharp:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: <
    nameWithType: <
    fullName: <
  - uid: Apizr.Requesting.ICrudApi`4
    name: ICrudApi
    nameWithType: ICrudApi
    fullName: Apizr.Requesting.ICrudApi
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Apizr.Requesting.ICrudApi`4
    name: ICrudApi
    nameWithType: ICrudApi
    fullName: Apizr.Requesting.ICrudApi
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.IApizrManager`1
  commentId: T:Apizr.IApizrManager`1
  name: IApizrManager<TWebApi>
  nameWithType: IApizrManager<TWebApi>
  fullName: Apizr.IApizrManager<TWebApi>
  nameWithType.vb: IApizrManager(Of TWebApi)
  fullName.vb: Apizr.IApizrManager(Of TWebApi)
  name.vb: IApizrManager(Of TWebApi)
  spec.csharp:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.IApizrManager{Apizr.Requesting.ICrudApi{{T},{TKey},System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IDictionary{System.String,System.Object}}}
  commentId: T:Apizr.IApizrManager{Apizr.Requesting.ICrudApi{``0,``1,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{System.String,System.Object}}}
  parent: Apizr
  definition: Apizr.IApizrManager`1
  name: IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<String, Object>>>
  nameWithType: IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<String, Object>>>
  fullName: Apizr.IApizrManager<Apizr.Requesting.ICrudApi<T, TKey, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IDictionary<System.String, System.Object>>>
  nameWithType.vb: IApizrManager(Of ICrudApi(Of T, TKey, IEnumerable(Of T), IDictionary(Of String, Object)))
  fullName.vb: Apizr.IApizrManager(Of Apizr.Requesting.ICrudApi(Of T, TKey, System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IDictionary(Of System.String, System.Object)))
  name.vb: IApizrManager(Of ICrudApi(Of T, TKey, IEnumerable(Of T), IDictionary(Of String, Object)))
  spec.csharp:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: <
    nameWithType: <
    fullName: <
  - uid: Apizr.Requesting.ICrudApi`4
    name: ICrudApi
    nameWithType: ICrudApi
    fullName: Apizr.Requesting.ICrudApi
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Apizr.Requesting.ICrudApi`4
    name: ICrudApi
    nameWithType: ICrudApi
    fullName: Apizr.Requesting.ICrudApi
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.IApizrManager{Apizr.Requesting.ICrudApi{{T},{TKey},{TReadAllResult},System.Collections.Generic.IDictionary{System.String,System.Object}}}
  commentId: T:Apizr.IApizrManager{Apizr.Requesting.ICrudApi{``0,``1,``2,System.Collections.Generic.IDictionary{System.String,System.Object}}}
  parent: Apizr
  definition: Apizr.IApizrManager`1
  name: IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<String, Object>>>
  nameWithType: IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<String, Object>>>
  fullName: Apizr.IApizrManager<Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, System.Collections.Generic.IDictionary<System.String, System.Object>>>
  nameWithType.vb: IApizrManager(Of ICrudApi(Of T, TKey, TReadAllResult, IDictionary(Of String, Object)))
  fullName.vb: Apizr.IApizrManager(Of Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, System.Collections.Generic.IDictionary(Of System.String, System.Object)))
  name.vb: IApizrManager(Of ICrudApi(Of T, TKey, TReadAllResult, IDictionary(Of String, Object)))
  spec.csharp:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: <
    nameWithType: <
    fullName: <
  - uid: Apizr.Requesting.ICrudApi`4
    name: ICrudApi
    nameWithType: ICrudApi
    fullName: Apizr.Requesting.ICrudApi
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Apizr.Requesting.ICrudApi`4
    name: ICrudApi
    nameWithType: ICrudApi
    fullName: Apizr.Requesting.ICrudApi
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.IApizrManager{Apizr.Requesting.ICrudApi{{T},{TKey},{TReadAllResult},{TReadAllParams}}}
  commentId: T:Apizr.IApizrManager{Apizr.Requesting.ICrudApi{``0,``1,``2,``3}}
  parent: Apizr
  definition: Apizr.IApizrManager`1
  name: IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>
  nameWithType: IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>
  fullName: Apizr.IApizrManager<Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>
  nameWithType.vb: IApizrManager(Of ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams))
  fullName.vb: Apizr.IApizrManager(Of Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams))
  name.vb: IApizrManager(Of ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams))
  spec.csharp:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: <
    nameWithType: <
    fullName: <
  - uid: Apizr.Requesting.ICrudApi`4
    name: ICrudApi
    nameWithType: ICrudApi
    fullName: Apizr.Requesting.ICrudApi
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllParams
    nameWithType: TReadAllParams
    fullName: TReadAllParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Apizr.Requesting.ICrudApi`4
    name: ICrudApi
    nameWithType: ICrudApi
    fullName: Apizr.Requesting.ICrudApi
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllParams
    nameWithType: TReadAllParams
    fullName: TReadAllParams
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Apizr.ILazyFactory{Apizr.Requesting.ICrudApi{{T},{TKey},{TReadAllResult},{TReadAllParams}}},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Polly.Registry.IReadOnlyPolicyRegistry{System.String},Apizr.Configuring.IApizrOptionsBase,{TApizrManager}}
  commentId: T:System.Func{Apizr.ILazyFactory{Apizr.Requesting.ICrudApi{``0,``1,``2,``3}},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Polly.Registry.IReadOnlyPolicyRegistry{System.String},Apizr.Configuring.IApizrOptionsBase,``4}
  parent: System
  definition: System.Func`7
  name: Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrOptionsBase, TApizrManager>
  nameWithType: Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrOptionsBase, TApizrManager>
  fullName: System.Func<Apizr.ILazyFactory<Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, Apizr.Connecting.IConnectivityHandler, Apizr.Caching.ICacheHandler, Apizr.Mapping.IMappingHandler, Polly.Registry.IReadOnlyPolicyRegistry<System.String>, Apizr.Configuring.IApizrOptionsBase, TApizrManager>
  nameWithType.vb: Func(Of ILazyFactory(Of ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams)), IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry(Of String), IApizrOptionsBase, TApizrManager)
  fullName.vb: System.Func(Of Apizr.ILazyFactory(Of Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams)), Apizr.Connecting.IConnectivityHandler, Apizr.Caching.ICacheHandler, Apizr.Mapping.IMappingHandler, Polly.Registry.IReadOnlyPolicyRegistry(Of System.String), Apizr.Configuring.IApizrOptionsBase, TApizrManager)
  name.vb: Func(Of ILazyFactory(Of ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams)), IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry(Of String), IApizrOptionsBase, TApizrManager)
  spec.csharp:
  - uid: System.Func`7
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Apizr.ILazyFactory`1
    name: ILazyFactory
    nameWithType: ILazyFactory
    fullName: Apizr.ILazyFactory
  - name: <
    nameWithType: <
    fullName: <
  - uid: Apizr.Requesting.ICrudApi`4
    name: ICrudApi
    nameWithType: ICrudApi
    fullName: Apizr.Requesting.ICrudApi
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllParams
    nameWithType: TReadAllParams
    fullName: TReadAllParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.Connecting.IConnectivityHandler
    name: IConnectivityHandler
    nameWithType: IConnectivityHandler
    fullName: Apizr.Connecting.IConnectivityHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.Caching.ICacheHandler
    name: ICacheHandler
    nameWithType: ICacheHandler
    fullName: Apizr.Caching.ICacheHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.Mapping.IMappingHandler
    name: IMappingHandler
    nameWithType: IMappingHandler
    fullName: Apizr.Mapping.IMappingHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Registry.IReadOnlyPolicyRegistry`1
    name: IReadOnlyPolicyRegistry
    nameWithType: IReadOnlyPolicyRegistry
    fullName: Polly.Registry.IReadOnlyPolicyRegistry
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.Configuring.IApizrOptionsBase
    name: IApizrOptionsBase
    nameWithType: IApizrOptionsBase
    fullName: Apizr.Configuring.IApizrOptionsBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApizrManager
    nameWithType: TApizrManager
    fullName: TApizrManager
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`7
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Apizr.ILazyFactory`1
    name: ILazyFactory
    nameWithType: ILazyFactory
    fullName: Apizr.ILazyFactory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Apizr.Requesting.ICrudApi`4
    name: ICrudApi
    nameWithType: ICrudApi
    fullName: Apizr.Requesting.ICrudApi
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllParams
    nameWithType: TReadAllParams
    fullName: TReadAllParams
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.Connecting.IConnectivityHandler
    name: IConnectivityHandler
    nameWithType: IConnectivityHandler
    fullName: Apizr.Connecting.IConnectivityHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.Caching.ICacheHandler
    name: ICacheHandler
    nameWithType: ICacheHandler
    fullName: Apizr.Caching.ICacheHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.Mapping.IMappingHandler
    name: IMappingHandler
    nameWithType: IMappingHandler
    fullName: Apizr.Mapping.IMappingHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Registry.IReadOnlyPolicyRegistry`1
    name: IReadOnlyPolicyRegistry
    nameWithType: IReadOnlyPolicyRegistry
    fullName: Polly.Registry.IReadOnlyPolicyRegistry
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.Configuring.IApizrOptionsBase
    name: IApizrOptionsBase
    nameWithType: IApizrOptionsBase
    fullName: Apizr.Configuring.IApizrOptionsBase
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApizrManager
    nameWithType: TApizrManager
    fullName: TApizrManager
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TApizrManager}'
  commentId: '!:TApizrManager'
  definition: TApizrManager
  name: TApizrManager
  nameWithType: TApizrManager
  fullName: TApizrManager
- uid: System.Func`7
  commentId: T:System.Func`7
  isExternal: true
  name: Func<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, TResult)
  spec.csharp:
  - uid: System.Func`7
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`7
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TApizrManager
  name: TApizrManager
  nameWithType: TApizrManager
  fullName: TApizrManager
- uid: Apizr.ApizrBuilder.CreateManagerFor*
  commentId: Overload:Apizr.ApizrBuilder.CreateManagerFor
  name: CreateManagerFor
  nameWithType: ApizrBuilder.CreateManagerFor
  fullName: Apizr.ApizrBuilder.CreateManagerFor
- uid: Apizr.IApizrManager{{TWebApi}}
  commentId: T:Apizr.IApizrManager{``0}
  parent: Apizr
  definition: Apizr.IApizrManager`1
  name: IApizrManager<TWebApi>
  nameWithType: IApizrManager<TWebApi>
  fullName: Apizr.IApizrManager<TWebApi>
  nameWithType.vb: IApizrManager(Of TWebApi)
  fullName.vb: Apizr.IApizrManager(Of TWebApi)
  name.vb: IApizrManager(Of TWebApi)
  spec.csharp:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Apizr.ILazyFactory{{TWebApi}},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Polly.Registry.IReadOnlyPolicyRegistry{System.String},Apizr.Configuring.IApizrOptions{{TWebApi}},{TApizrManager}}
  commentId: T:System.Func{Apizr.ILazyFactory{``0},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Polly.Registry.IReadOnlyPolicyRegistry{System.String},Apizr.Configuring.IApizrOptions{``0},``1}
  parent: System
  definition: System.Func`7
  name: Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrOptions<TWebApi>, TApizrManager>
  nameWithType: Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrOptions<TWebApi>, TApizrManager>
  fullName: System.Func<Apizr.ILazyFactory<TWebApi>, Apizr.Connecting.IConnectivityHandler, Apizr.Caching.ICacheHandler, Apizr.Mapping.IMappingHandler, Polly.Registry.IReadOnlyPolicyRegistry<System.String>, Apizr.Configuring.IApizrOptions<TWebApi>, TApizrManager>
  nameWithType.vb: Func(Of ILazyFactory(Of TWebApi), IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry(Of String), IApizrOptions(Of TWebApi), TApizrManager)
  fullName.vb: System.Func(Of Apizr.ILazyFactory(Of TWebApi), Apizr.Connecting.IConnectivityHandler, Apizr.Caching.ICacheHandler, Apizr.Mapping.IMappingHandler, Polly.Registry.IReadOnlyPolicyRegistry(Of System.String), Apizr.Configuring.IApizrOptions(Of TWebApi), TApizrManager)
  name.vb: Func(Of ILazyFactory(Of TWebApi), IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry(Of String), IApizrOptions(Of TWebApi), TApizrManager)
  spec.csharp:
  - uid: System.Func`7
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Apizr.ILazyFactory`1
    name: ILazyFactory
    nameWithType: ILazyFactory
    fullName: Apizr.ILazyFactory
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.Connecting.IConnectivityHandler
    name: IConnectivityHandler
    nameWithType: IConnectivityHandler
    fullName: Apizr.Connecting.IConnectivityHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.Caching.ICacheHandler
    name: ICacheHandler
    nameWithType: ICacheHandler
    fullName: Apizr.Caching.ICacheHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.Mapping.IMappingHandler
    name: IMappingHandler
    nameWithType: IMappingHandler
    fullName: Apizr.Mapping.IMappingHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Registry.IReadOnlyPolicyRegistry`1
    name: IReadOnlyPolicyRegistry
    nameWithType: IReadOnlyPolicyRegistry
    fullName: Polly.Registry.IReadOnlyPolicyRegistry
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.Configuring.IApizrOptions`1
    name: IApizrOptions
    nameWithType: IApizrOptions
    fullName: Apizr.Configuring.IApizrOptions
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApizrManager
    nameWithType: TApizrManager
    fullName: TApizrManager
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`7
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Apizr.ILazyFactory`1
    name: ILazyFactory
    nameWithType: ILazyFactory
    fullName: Apizr.ILazyFactory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.Connecting.IConnectivityHandler
    name: IConnectivityHandler
    nameWithType: IConnectivityHandler
    fullName: Apizr.Connecting.IConnectivityHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.Caching.ICacheHandler
    name: ICacheHandler
    nameWithType: ICacheHandler
    fullName: Apizr.Caching.ICacheHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.Mapping.IMappingHandler
    name: IMappingHandler
    nameWithType: IMappingHandler
    fullName: Apizr.Mapping.IMappingHandler
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Registry.IReadOnlyPolicyRegistry`1
    name: IReadOnlyPolicyRegistry
    nameWithType: IReadOnlyPolicyRegistry
    fullName: Polly.Registry.IReadOnlyPolicyRegistry
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.Configuring.IApizrOptions`1
    name: IApizrOptions
    nameWithType: IApizrOptions
    fullName: Apizr.Configuring.IApizrOptions
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApizrManager
    nameWithType: TApizrManager
    fullName: TApizrManager
  - name: )
    nameWithType: )
    fullName: )
