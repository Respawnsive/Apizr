### YamlMime:ManagedReference
items:
- uid: Apizr.Caching.ICacheHandler
  commentId: T:Apizr.Caching.ICacheHandler
  id: ICacheHandler
  parent: Apizr.Caching
  children:
  - Apizr.Caching.ICacheHandler.ClearAsync(System.Threading.CancellationToken)
  - Apizr.Caching.ICacheHandler.GetAsync``1(System.String,System.Threading.CancellationToken)
  - Apizr.Caching.ICacheHandler.RemoveAsync(System.String,System.Threading.CancellationToken)
  - Apizr.Caching.ICacheHandler.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ICacheHandler
  nameWithType: ICacheHandler
  fullName: Apizr.Caching.ICacheHandler
  type: Interface
  source:
    remote:
      path: Apizr/Apizr/Caching/ICacheHandler.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: ICacheHandler
    path: ../../Apizr/Caching/ICacheHandler.cs
    startLine: 10
  assemblies:
  - Apizr
  namespace: Apizr.Caching
  summary: "\nThe cache handler method mapping interface\nImplement it to provide some caching features to Apizr\n"
  example: []
  syntax:
    content: public interface ICacheHandler
    content.vb: Public Interface ICacheHandler
  extensionMethods:
  - System.Object.Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Apizr.Caching.ICacheHandler.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)
  commentId: M:Apizr.Caching.ICacheHandler.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)
  id: SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)
  parent: Apizr.Caching.ICacheHandler
  langs:
  - csharp
  - vb
  name: SetAsync(String, Object, Nullable<TimeSpan>, CancellationToken)
  nameWithType: ICacheHandler.SetAsync(String, Object, Nullable<TimeSpan>, CancellationToken)
  fullName: Apizr.Caching.ICacheHandler.SetAsync(System.String, System.Object, System.Nullable<System.TimeSpan>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Apizr/Caching/ICacheHandler.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: SetAsync
    path: ../../Apizr/Caching/ICacheHandler.cs
    startLine: 20
  assemblies:
  - Apizr
  namespace: Apizr.Caching
  summary: "\nMap Apizr cache saving method to your cache handler method\n"
  example: []
  syntax:
    content: Task SetAsync(string key, object value, TimeSpan? lifeSpan = null, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: key
      type: System.String
      description: The key to cache at
    - id: value
      type: System.Object
      description: The value to cache
    - id: lifeSpan
      type: System.Nullable{System.TimeSpan}
      description: The optional life span
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SetAsync(key As String, value As Object, lifeSpan As TimeSpan? = Nothing, cancellationToken As CancellationToken = Nothing) As Task
  overload: Apizr.Caching.ICacheHandler.SetAsync*
  nameWithType.vb: ICacheHandler.SetAsync(String, Object, Nullable(Of TimeSpan), CancellationToken)
  fullName.vb: Apizr.Caching.ICacheHandler.SetAsync(System.String, System.Object, System.Nullable(Of System.TimeSpan), System.Threading.CancellationToken)
  name.vb: SetAsync(String, Object, Nullable(Of TimeSpan), CancellationToken)
- uid: Apizr.Caching.ICacheHandler.GetAsync``1(System.String,System.Threading.CancellationToken)
  commentId: M:Apizr.Caching.ICacheHandler.GetAsync``1(System.String,System.Threading.CancellationToken)
  id: GetAsync``1(System.String,System.Threading.CancellationToken)
  parent: Apizr.Caching.ICacheHandler
  langs:
  - csharp
  - vb
  name: GetAsync<T>(String, CancellationToken)
  nameWithType: ICacheHandler.GetAsync<T>(String, CancellationToken)
  fullName: Apizr.Caching.ICacheHandler.GetAsync<T>(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Apizr/Caching/ICacheHandler.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: GetAsync
    path: ../../Apizr/Caching/ICacheHandler.cs
    startLine: 29
  assemblies:
  - Apizr
  namespace: Apizr.Caching
  summary: "\nMap Apizr cache getting method to your cache handler method\n"
  example: []
  syntax:
    content: Task<T> GetAsync<T>(string key, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: key
      type: System.String
      description: The key to get from
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
      description: The expected value type
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: Function GetAsync(Of T)(key As String, cancellationToken As CancellationToken = Nothing) As Task(Of T)
  overload: Apizr.Caching.ICacheHandler.GetAsync*
  nameWithType.vb: ICacheHandler.GetAsync(Of T)(String, CancellationToken)
  fullName.vb: Apizr.Caching.ICacheHandler.GetAsync(Of T)(System.String, System.Threading.CancellationToken)
  name.vb: GetAsync(Of T)(String, CancellationToken)
- uid: Apizr.Caching.ICacheHandler.RemoveAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Apizr.Caching.ICacheHandler.RemoveAsync(System.String,System.Threading.CancellationToken)
  id: RemoveAsync(System.String,System.Threading.CancellationToken)
  parent: Apizr.Caching.ICacheHandler
  langs:
  - csharp
  - vb
  name: RemoveAsync(String, CancellationToken)
  nameWithType: ICacheHandler.RemoveAsync(String, CancellationToken)
  fullName: Apizr.Caching.ICacheHandler.RemoveAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Apizr/Caching/ICacheHandler.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: RemoveAsync
    path: ../../Apizr/Caching/ICacheHandler.cs
    startLine: 37
  assemblies:
  - Apizr
  namespace: Apizr.Caching
  summary: "\nMap Apizr cache removing method to your cache handler method\n"
  example: []
  syntax:
    content: Task<bool> RemoveAsync(string key, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: key
      type: System.String
      description: The key to remove from
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: ''
    content.vb: Function RemoveAsync(key As String, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: Apizr.Caching.ICacheHandler.RemoveAsync*
- uid: Apizr.Caching.ICacheHandler.ClearAsync(System.Threading.CancellationToken)
  commentId: M:Apizr.Caching.ICacheHandler.ClearAsync(System.Threading.CancellationToken)
  id: ClearAsync(System.Threading.CancellationToken)
  parent: Apizr.Caching.ICacheHandler
  langs:
  - csharp
  - vb
  name: ClearAsync(CancellationToken)
  nameWithType: ICacheHandler.ClearAsync(CancellationToken)
  fullName: Apizr.Caching.ICacheHandler.ClearAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Apizr/Caching/ICacheHandler.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: ClearAsync
    path: ../../Apizr/Caching/ICacheHandler.cs
    startLine: 44
  assemblies:
  - Apizr
  namespace: Apizr.Caching
  summary: "\nMap Apizr cache clearing method to your cache handler method\n"
  example: []
  syntax:
    content: Task ClearAsync(CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function ClearAsync(cancellationToken As CancellationToken = Nothing) As Task
  overload: Apizr.Caching.ICacheHandler.ClearAsync*
references:
- uid: Apizr.Caching
  commentId: N:Apizr.Caching
  name: Apizr.Caching
  nameWithType: Apizr.Caching
  fullName: Apizr.Caching
- uid: System.Object.Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
  commentId: M:Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  parent: Apizr.Extending.ObjectExtensions
  definition: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  name: ToString(String, String)
  nameWithType: ObjectExtensions.ToString(String, String)
  fullName: Apizr.Extending.ObjectExtensions.ToString(System.String, System.String)
  spec.csharp:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  commentId: M:Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  isExternal: true
  name: ToString(Object, String, String)
  nameWithType: ObjectExtensions.ToString(Object, String, String)
  fullName: Apizr.Extending.ObjectExtensions.ToString(System.Object, System.String, System.String)
  spec.csharp:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Extending.ObjectExtensions
  commentId: T:Apizr.Extending.ObjectExtensions
  parent: Apizr.Extending
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Apizr.Extending.ObjectExtensions
- uid: Apizr.Extending
  commentId: N:Apizr.Extending
  name: Apizr.Extending
  nameWithType: Apizr.Extending
  fullName: Apizr.Extending
- uid: Apizr.Caching.ICacheHandler.SetAsync*
  commentId: Overload:Apizr.Caching.ICacheHandler.SetAsync
  name: SetAsync
  nameWithType: ICacheHandler.SetAsync
  fullName: Apizr.Caching.ICacheHandler.SetAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullName.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Apizr.Caching.ICacheHandler.GetAsync*
  commentId: Overload:Apizr.Caching.ICacheHandler.GetAsync
  name: GetAsync
  nameWithType: ICacheHandler.GetAsync
  fullName: Apizr.Caching.ICacheHandler.GetAsync
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Caching.ICacheHandler.RemoveAsync*
  commentId: Overload:Apizr.Caching.ICacheHandler.RemoveAsync
  name: RemoveAsync
  nameWithType: ICacheHandler.RemoveAsync
  fullName: Apizr.Caching.ICacheHandler.RemoveAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Caching.ICacheHandler.ClearAsync*
  commentId: Overload:Apizr.Caching.ICacheHandler.ClearAsync
  name: ClearAsync
  nameWithType: ICacheHandler.ClearAsync
  fullName: Apizr.Caching.ICacheHandler.ClearAsync
