### YamlMime:ManagedReference
items:
- uid: Apizr.Extending.ApizrManagerExtensions
  commentId: T:Apizr.Extending.ApizrManagerExtensions
  id: ApizrManagerExtensions
  parent: Apizr.Extending
  children:
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``1(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}},System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``1(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``1(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``1(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean)
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean)
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean)
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean)
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  langs:
  - csharp
  - vb
  name: ApizrManagerExtensions
  nameWithType: ApizrManagerExtensions
  fullName: Apizr.Extending.ApizrManagerExtensions
  type: Class
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ApizrManagerExtensions
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 8
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  syntax:
    content: public static class ApizrManagerExtensions
    content.vb: Public Module ApizrManagerExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``1(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}},System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``1(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}},System.Action{System.Exception})
  id: ExecuteAsync``1(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}},System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task>>, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task>>, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task>>, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 21
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task ExecuteAsync<TWebApi>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, Task>> executeApiMethod, Action<Exception> onException)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task to execute
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of TWebApi, Task)), onException As Action(Of Exception)) As Task
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, Task)), Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task)), System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, Task)), Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1,System.Action{System.Exception})
  id: ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<TWebApi, TApiData, System.Threading.Tasks.Task>>, TModelData, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 38
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<Exception> onException)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiData},System.Threading.Tasks.Task}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of TWebApi, TApiData, Task)), modelData As TModelData, onException As Action(Of Exception)) As Task
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, TApiData, Task)), TModelData, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiData, System.Threading.Tasks.Task)), TModelData, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, TApiData, Task)), TModelData, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``1(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``1(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken,System.Action{System.Exception})
  id: ExecuteAsync``1(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task>>, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 55
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task ExecuteAsync<TWebApi>(this IApizrManager<TWebApi> manager, Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod, CancellationToken cancellationToken = default(CancellationToken), Action<Exception> onException = null)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task to execute
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of CancellationToken, TWebApi, Task)), cancellationToken As CancellationToken = Nothing, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi)(IApizrManager(Of TWebApi), Expression(Of Func(Of CancellationToken, TWebApi, Task)), CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task)), System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi)(IApizrManager(Of TWebApi), Expression(Of Func(Of CancellationToken, TWebApi, Task)), CancellationToken, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``1(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``1(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context,System.Action{System.Exception})
  id: ExecuteAsync``1(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, System.Threading.Tasks.Task>>, Polly.Context, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 73
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task ExecuteAsync<TWebApi>(this IApizrManager<TWebApi> manager, Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context = null, Action<Exception> onException = null)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},System.Threading.Tasks.Task}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task to execute
    - id: context
      type: Polly.Context
      description: The Polly Context to pass through it all
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of Context, TWebApi, Task)), context As Context = Nothing, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, TWebApi, Task)), Context, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, System.Threading.Tasks.Task)), Polly.Context, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, TWebApi, Task)), Context, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken,System.Action{System.Exception})
  id: ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task>>, TModelData, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 94
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, CancellationToken cancellationToken = default(CancellationToken), Action<Exception> onException = null)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task)), modelData As TModelData, cancellationToken As CancellationToken = Nothing, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task)), TModelData, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task)), TModelData, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task)), TModelData, CancellationToken, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Action{System.Exception})
  id: ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task>>, TModelData, Polly.Context, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 115
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, Action<Exception> onException = null)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},{TApiData},System.Threading.Tasks.Task}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    - id: context
      type: Polly.Context
      description: The Polly Context to pass through it all
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of Context, TWebApi, TApiData, Task)), modelData As TModelData, context As Context = Nothing, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, TWebApi, TApiData, Task)), TModelData, Context, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task)), TModelData, Polly.Context, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, TWebApi, TApiData, Task)), TModelData, Context, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``1(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``1(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  id: ExecuteAsync``1(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task>>, Polly.Context, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 134
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task ExecuteAsync<TWebApi>(this IApizrManager<TWebApi> manager, Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context = null, CancellationToken cancellationToken = default(CancellationToken), Action<Exception> onException = null)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task to execute
    - id: context
      type: Polly.Context
      description: The Polly Context to pass through it all
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of Context, CancellationToken, TWebApi, Task)), context As Context = Nothing, cancellationToken As CancellationToken = Nothing, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, CancellationToken, TWebApi, Task)), Context, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task)), Polly.Context, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, CancellationToken, TWebApi, Task)), Context, CancellationToken, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  id: ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task>>, TModelData, Polly.Context, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 157
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken cancellationToken = default(CancellationToken), Action<Exception> onException = null)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    - id: context
      type: Polly.Context
      description: The Polly Context to pass through it all
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task)), modelData As TModelData, context As Context = Nothing, cancellationToken As CancellationToken = Nothing, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task)), TModelData, Context, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task)), TModelData, Polly.Context, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task)), TModelData, Context, CancellationToken, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean)
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean)
  id: ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 182
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiData> ExecuteAsync<TWebApi, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task to execute
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TApiData
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task result
    return:
      type: System.Threading.Tasks.Task{{TApiData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of TWebApi, Task(Of TApiData))), clearCache As Boolean) As Task(Of TApiData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, Task(Of TApiData))), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Boolean)
  name.vb: ExecuteAsync(Of TWebApi, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, Task(Of TApiData))), Boolean)
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Action{System.Exception})
  id: ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 198
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiData> ExecuteAsync<TWebApi, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<Exception> onException)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task to execute
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TApiData
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task result
    return:
      type: System.Threading.Tasks.Task{{TApiData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of TWebApi, Task(Of TApiData))), onException As Action(Of Exception)) As Task(Of TApiData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, Task(Of TApiData))), Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, Task(Of TApiData))), Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean,System.Action{System.Exception})
  id: ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 215
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiData> ExecuteAsync<TWebApi, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache, Action<Exception> onException)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task to execute
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TApiData
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task result
    return:
      type: System.Threading.Tasks.Task{{TApiData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of TWebApi, Task(Of TApiData))), clearCache As Boolean, onException As Action(Of Exception)) As Task(Of TApiData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, Task(Of TApiData))), Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, Task(Of TApiData))), Boolean, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean)
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean)
  id: ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 237
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelResultData> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelRequestData
      type: '{TModelRequestData}'
      description: The model request data to map
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelResultData
      description: The mapped model result type
    - id: TApiResultData
      description: The api result type
    - id: TApiRequestData
      description: The mapped api request data type
    - id: TModelRequestData
      description: The model request data type
    return:
      type: System.Threading.Tasks.Task{{TModelResultData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), modelRequestData As TModelRequestData, clearCache As Boolean) As Task(Of TModelResultData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, System.Boolean)
  name.vb: ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Boolean)
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{System.Exception})
  id: ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 260
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelResultData> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<Exception> onException)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelRequestData
      type: '{TModelRequestData}'
      description: The model request data to map
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelResultData
      description: The mapped model result type
    - id: TApiResultData
      description: The api result type
    - id: TApiRequestData
      description: The mapped api request data type
    - id: TModelRequestData
      description: The model request data type
    return:
      type: System.Threading.Tasks.Task{{TModelResultData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), modelRequestData As TModelRequestData, onException As Action(Of Exception)) As Task(Of TModelResultData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean,System.Action{System.Exception})
  id: ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 284
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelResultData> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache, Action<Exception> onException)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelRequestData
      type: '{TModelRequestData}'
      description: The model request data to map
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelResultData
      description: The mapped model result type
    - id: TApiResultData
      description: The api result type
    - id: TApiRequestData
      description: The mapped api request data type
    - id: TModelRequestData
      description: The model request data type
    return:
      type: System.Threading.Tasks.Task{{TModelResultData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), modelRequestData As TModelRequestData, clearCache As Boolean, onException As Action(Of Exception)) As Task(Of TModelResultData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Boolean, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean)
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean)
  id: ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>, TModelData, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 306
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task{{TModelData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData))), modelData As TModelData, clearCache As Boolean) As Task(Of TModelData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData))), TModelData, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData))), TModelData, System.Boolean)
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData))), TModelData, Boolean)
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{System.Exception})
  id: ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>, TModelData, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 325
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<Exception> onException)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task{{TModelData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData))), modelData As TModelData, onException As Action(Of Exception)) As Task(Of TModelData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData))), TModelData, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData))), TModelData, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData))), TModelData, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean,System.Action{System.Exception})
  id: ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>, TModelData, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 346
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache, Action<Exception> onException)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task{{TModelData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData))), modelData As TModelData, clearCache As Boolean, onException As Action(Of Exception)) As Task(Of TModelData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData))), TModelData, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData))), TModelData, System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData))), TModelData, Boolean, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean)
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean)
  id: ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 366
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task{{TModelData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of TWebApi, Task(Of TApiData))), clearCache As Boolean) As Task(Of TModelData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, Task(Of TApiData))), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Boolean)
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, Task(Of TApiData))), Boolean)
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Action{System.Exception})
  id: ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 384
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<Exception> onException)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task{{TModelData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of TWebApi, Task(Of TApiData))), onException As Action(Of Exception)) As Task(Of TModelData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, Task(Of TApiData))), Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, Task(Of TApiData))), Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean,System.Action{System.Exception})
  id: ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 403
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache, Action<Exception> onException)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task{{TModelData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of TWebApi, Task(Of TApiData))), clearCache As Boolean, onException As Action(Of Exception)) As Task(Of TModelData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, Task(Of TApiData))), Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of TWebApi, Task(Of TApiData))), Boolean, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 424
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiData> ExecuteAsync<TWebApi, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task to execute
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TApiData
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task result
    return:
      type: System.Threading.Tasks.Task{{TApiData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData))), cancellationToken As CancellationToken = Nothing, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData))), CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData))), CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean,System.Action{System.Exception})
  id: ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, System.Threading.Tasks.Task<TApiData>>>, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 447
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiData> ExecuteAsync<TWebApi, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task to execute
    - id: context
      type: Polly.Context
      description: The Polly Context to pass through it all
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TApiData
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task result
    return:
      type: System.Threading.Tasks.Task{{TApiData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of Context, TWebApi, Task(Of TApiData))), context As Context = Nothing, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, TWebApi, Task(Of TApiData))), Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, System.Threading.Tasks.Task(Of TApiData))), Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, TWebApi, Task(Of TApiData))), Context, Boolean, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 473
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelResultData> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrManager<TWebApi> manager, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelRequestData
      type: '{TModelRequestData}'
      description: The model request data to map
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelResultData
      description: The mapped model result type
    - id: TApiResultData
      description: The api result type
    - id: TApiRequestData
      description: The mapped api request data type
    - id: TModelRequestData
      description: The model request data type
    return:
      type: System.Threading.Tasks.Task{{TModelResultData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), modelRequestData As TModelRequestData, cancellationToken As CancellationToken = Nothing, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelResultData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(IApizrManager(Of TWebApi), Expression(Of Func(Of CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(IApizrManager(Of TWebApi), Expression(Of Func(Of CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>, TModelData, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 501
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task{{TModelData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task(Of TApiData))), modelData As TModelData, cancellationToken As CancellationToken = Nothing, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task(Of TApiData))), TModelData, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData))), TModelData, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task(Of TApiData))), TModelData, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 527
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task{{TModelData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData))), cancellationToken As CancellationToken = Nothing, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData))), CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData))), CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 554
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelResultData> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrManager<TWebApi> manager, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelRequestData
      type: '{TModelRequestData}'
      description: The model request data to map
    - id: context
      type: Polly.Context
      description: The Polly Context to pass through it all
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelResultData
      description: The mapped model result type
    - id: TApiResultData
      description: The api result type
    - id: TApiRequestData
      description: The mapped api request data type
    - id: TModelRequestData
      description: The model request data type
    return:
      type: System.Threading.Tasks.Task{{TModelResultData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of Context, TWebApi, TApiRequestData, Task(Of TApiResultData))), modelRequestData As TModelRequestData, context As Context = Nothing, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelResultData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Context, Boolean, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>, TModelData, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 582
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    - id: context
      type: Polly.Context
      description: The Polly Context to pass through it all
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task{{TModelData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of Context, TWebApi, TApiData, Task(Of TApiData))), modelData As TModelData, context As Context = Nothing, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, TWebApi, TApiData, Task(Of TApiData))), TModelData, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData))), TModelData, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, TWebApi, TApiData, Task(Of TApiData))), TModelData, Context, Boolean, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean,System.Action{System.Exception})
  id: ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, System.Threading.Tasks.Task<TApiData>>>, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 605
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: context
      type: Polly.Context
      description: The Polly Context to pass through it all
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task{{TModelData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of Context, TWebApi, Task(Of TApiData))), context As Context = Nothing, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, TWebApi, Task(Of TApiData))), Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, System.Threading.Tasks.Task(Of TApiData))), Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, TWebApi, Task(Of TApiData))), Context, Boolean, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: ExecuteAsync``2(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiData>>>, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 628
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiData> ExecuteAsync<TWebApi, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task to execute
    - id: context
      type: Polly.Context
      description: The Polly Context to pass through it all
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TApiData
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task result
    return:
      type: System.Threading.Tasks.Task{{TApiData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData))), context As Context = Nothing, cancellationToken As CancellationToken = Nothing, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData))), Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiData))), Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData))), Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: ExecuteAsync``5(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 657
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelResultData> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrManager<TWebApi> manager, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelRequestData
      type: '{TModelRequestData}'
      description: The model request data to map
    - id: context
      type: Polly.Context
      description: The Polly Context to pass through it all
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelResultData
      description: The mapped model result type
    - id: TApiResultData
      description: The api result type
    - id: TApiRequestData
      description: The mapped api request data type
    - id: TModelRequestData
      description: The model request data type
    return:
      type: System.Threading.Tasks.Task{{TModelResultData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), modelRequestData As TModelRequestData, context As Context = Nothing, cancellationToken As CancellationToken = Nothing, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelResultData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>, TModelData, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 690
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    - id: context
      type: Polly.Context
      description: The Polly Context to pass through it all
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task{{TModelData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task(Of TApiData))), modelData As TModelData, context As Context = Nothing, cancellationToken As CancellationToken = Nothing, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task(Of TApiData))), TModelData, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData))), TModelData, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task(Of TApiData))), TModelData, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: ExecuteAsync``3(Apizr.IApizrManager{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrManagerExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.IApizrManager<TWebApi>, System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiData>>>, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrManagerExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrManagerExtensions.cs
    startLine: 717
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: manager
      type: Apizr.IApizrManager{{TWebApi}}
      description: The api manager
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: context
      type: Polly.Context
      description: The Polly Context to pass through it all
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task{{TModelData}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(manager As IApizrManager(Of TWebApi), executeApiMethod As Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData))), context As Context = Nothing, cancellationToken As CancellationToken = Nothing, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelData)
  overload: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData))), Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.IApizrManager(Of TWebApi), System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiData))), Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrManager(Of TWebApi), Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData))), Context, CancellationToken, Boolean, Action(Of Exception))
references:
- uid: Apizr.Extending
  commentId: N:Apizr.Extending
  name: Apizr.Extending
  nameWithType: Apizr.Extending
  fullName: Apizr.Extending
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync*
  commentId: Overload:Apizr.Extending.ApizrManagerExtensions.ExecuteAsync
  name: ExecuteAsync
  nameWithType: ApizrManagerExtensions.ExecuteAsync
  fullName: Apizr.Extending.ApizrManagerExtensions.ExecuteAsync
- uid: Apizr.IApizrManager{{TWebApi}}
  commentId: T:Apizr.IApizrManager{``0}
  parent: Apizr
  definition: Apizr.IApizrManager`1
  name: IApizrManager<TWebApi>
  nameWithType: IApizrManager<TWebApi>
  fullName: Apizr.IApizrManager<TWebApi>
  nameWithType.vb: IApizrManager(Of TWebApi)
  fullName.vb: Apizr.IApizrManager(Of TWebApi)
  name.vb: IApizrManager(Of TWebApi)
  spec.csharp:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TWebApi, Task>>
  nameWithType: Expression<Func<TWebApi, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of TWebApi, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of TWebApi, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.Exception}
  commentId: T:System.Action{System.Exception}
  parent: System
  definition: System.Action`1
  name: Action<Exception>
  nameWithType: Action<Exception>
  fullName: System.Action<System.Exception>
  nameWithType.vb: Action(Of Exception)
  fullName.vb: System.Action(Of System.Exception)
  name.vb: Action(Of Exception)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Apizr.IApizrManager`1
  commentId: T:Apizr.IApizrManager`1
  name: IApizrManager<TWebApi>
  nameWithType: IApizrManager<TWebApi>
  fullName: Apizr.IApizrManager<TWebApi>
  nameWithType.vb: IApizrManager(Of TWebApi)
  fullName.vb: Apizr.IApizrManager(Of TWebApi)
  name.vb: IApizrManager(Of TWebApi)
  spec.csharp:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr
  commentId: N:Apizr
  name: Apizr
  nameWithType: Apizr
  fullName: Apizr
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiData},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TWebApi, TApiData, Task>>
  nameWithType: Expression<Func<TWebApi, TApiData, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<TWebApi, TApiData, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of TWebApi, TApiData, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiData, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of TWebApi, TApiData, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TModelData}'
  commentId: '!:TModelData'
  definition: TModelData
  name: TModelData
  nameWithType: TModelData
  fullName: TModelData
- uid: TModelData
  name: TModelData
  nameWithType: TModelData
  fullName: TModelData
- uid: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<CancellationToken, TWebApi, Task>>
  nameWithType: Expression<Func<CancellationToken, TWebApi, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of CancellationToken, TWebApi, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of CancellationToken, TWebApi, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, TWebApi, Task>>
  nameWithType: Expression<Func<Context, TWebApi, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of Context, TWebApi, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of Context, TWebApi, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Polly.Context
  commentId: T:Polly.Context
  parent: Polly
  isExternal: true
  name: Context
  nameWithType: Context
  fullName: Polly.Context
- uid: Polly
  commentId: N:Polly
  isExternal: true
  name: Polly
  nameWithType: Polly
  fullName: Polly
- uid: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<CancellationToken, TWebApi, TApiData, Task>>
  nameWithType: Expression<Func<CancellationToken, TWebApi, TApiData, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},{TApiData},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, TWebApi, TApiData, Task>>
  nameWithType: Expression<Func<Context, TWebApi, TApiData, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of Context, TWebApi, TApiData, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of Context, TWebApi, TApiData, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, CancellationToken, TWebApi, Task>>
  nameWithType: Expression<Func<Context, CancellationToken, TWebApi, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>
  nameWithType: Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TWebApi, Task<TApiData>>>
  nameWithType: Expression<Func<TWebApi, Task<TApiData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task<TApiData>>>
  nameWithType.vb: Expression(Of Func(Of TWebApi, Task(Of TApiData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task(Of TApiData)))
  name.vb: Expression(Of Func(Of TWebApi, Task(Of TApiData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{{TApiData}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TApiData>
  nameWithType: Task<TApiData>
  fullName: System.Threading.Tasks.Task<TApiData>
  nameWithType.vb: Task(Of TApiData)
  fullName.vb: System.Threading.Tasks.Task(Of TApiData)
  name.vb: Task(Of TApiData)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``2,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>
  nameWithType: Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>
  nameWithType.vb: Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData)))
  name.vb: Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TModelRequestData}'
  commentId: '!:TModelRequestData'
  definition: TModelRequestData
  name: TModelRequestData
  nameWithType: TModelRequestData
  fullName: TModelRequestData
- uid: System.Threading.Tasks.Task{{TModelResultData}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TModelResultData>
  nameWithType: Task<TModelResultData>
  fullName: System.Threading.Tasks.Task<TModelResultData>
  nameWithType.vb: Task(Of TModelResultData)
  fullName.vb: System.Threading.Tasks.Task(Of TModelResultData)
  name.vb: Task(Of TModelResultData)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: TModelRequestData
  name: TModelRequestData
  nameWithType: TModelRequestData
  fullName: TModelRequestData
- uid: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TWebApi, TApiData, Task<TApiData>>>
  nameWithType: Expression<Func<TWebApi, TApiData, Task<TApiData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>
  nameWithType.vb: Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData)))
  name.vb: Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TModelData}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TModelData>
  nameWithType: Task<TModelData>
  fullName: System.Threading.Tasks.Task<TModelData>
  nameWithType.vb: Task(Of TModelData)
  fullName.vb: System.Threading.Tasks.Task(Of TModelData)
  name.vb: Task(Of TModelData)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>
  nameWithType: Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiData>>>
  nameWithType.vb: Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiData)))
  name.vb: Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, TWebApi, Task<TApiData>>>
  nameWithType: Expression<Func<Context, TWebApi, Task<TApiData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, System.Threading.Tasks.Task<TApiData>>>
  nameWithType.vb: Expression(Of Func(Of Context, TWebApi, Task(Of TApiData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, System.Threading.Tasks.Task(Of TApiData)))
  name.vb: Expression(Of Func(Of Context, TWebApi, Task(Of TApiData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>
  nameWithType: Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>
  nameWithType.vb: Expression(Of Func(Of CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData)))
  name.vb: Expression(Of Func(Of CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>
  nameWithType: Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>
  nameWithType.vb: Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task(Of TApiData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData)))
  name.vb: Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task(Of TApiData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>
  nameWithType: Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>
  nameWithType.vb: Expression(Of Func(Of Context, TWebApi, TApiRequestData, Task(Of TApiResultData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData)))
  name.vb: Expression(Of Func(Of Context, TWebApi, TApiRequestData, Task(Of TApiResultData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>
  nameWithType: Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>
  nameWithType.vb: Expression(Of Func(Of Context, TWebApi, TApiData, Task(Of TApiData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData)))
  name.vb: Expression(Of Func(Of Context, TWebApi, TApiData, Task(Of TApiData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>
  nameWithType: Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiData>>>
  nameWithType.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiData)))
  name.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>
  nameWithType: Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>
  nameWithType.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData)))
  name.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>
  nameWithType: Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>
  nameWithType.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task(Of TApiData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData)))
  name.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task(Of TApiData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
