### YamlMime:ManagedReference
items:
- uid: Apizr.Extending.ApizrRegistryExtensions
  commentId: T:Apizr.Extending.ApizrRegistryExtensions
  id: ApizrRegistryExtensions
  parent: Apizr.Extending
  children:
  - Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Threading.CancellationToken)
  - Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}})
  - Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken)
  - Apizr.Extending.ApizrRegistryExtensions.CreateAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.CreateAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.DeleteAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.DeleteAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``2,System.Threading.Tasks.Task}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{``2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``5(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``5(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync``4(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync``4(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync``5(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.ReadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.ReadAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.ReadAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.ReadAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``2,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.UpdateAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.UpdateAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``1,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.UpdateAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.ApizrRegistryExtensions.UpdateAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``2,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  langs:
  - csharp
  - vb
  name: ApizrRegistryExtensions
  nameWithType: ApizrRegistryExtensions
  fullName: Apizr.Extending.ApizrRegistryExtensions
  type: Class
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ApizrRegistryExtensions
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 10
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  syntax:
    content: public static class ApizrRegistryExtensions
    content.vb: Public Module ApizrRegistryExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: ExecuteAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync<TWebApi>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task>>, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 23
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task\n"
  example: []
  syntax:
    content: public static Task ExecuteAsync<TWebApi>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task to execute
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TWebApi
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi)(registry As IApizrEnumerableRegistry, executeApiMethod As Expression(Of Func(Of TWebApi, Task)), optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task
  overload: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync*
  nameWithType.vb: ApizrRegistryExtensions.ExecuteAsync(Of TWebApi)(IApizrEnumerableRegistry, Expression(Of Func(Of TWebApi, Task)), Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync(Of TWebApi)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task)), System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: ExecuteAsync(Of TWebApi)(IApizrEnumerableRegistry, Expression(Of Func(Of TWebApi, Task)), Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: ExecuteAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync<TWebApi>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression<System.Func<Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, System.Threading.Tasks.Task>>, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 35
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task\n"
  example: []
  syntax:
    content: public static Task ExecuteAsync<TWebApi>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,{TWebApi},System.Threading.Tasks.Task}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task to execute
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TWebApi
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi)(registry As IApizrEnumerableRegistry, executeApiMethod As Expression(Of Func(Of IApizrRequestOptions, TWebApi, Task)), optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task
  overload: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync*
  nameWithType.vb: ApizrRegistryExtensions.ExecuteAsync(Of TWebApi)(IApizrEnumerableRegistry, Expression(Of Func(Of IApizrRequestOptions, TWebApi, Task)), Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync(Of TWebApi)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression(Of System.Func(Of Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, System.Threading.Tasks.Task)), System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: ExecuteAsync(Of TWebApi)(IApizrEnumerableRegistry, Expression(Of Func(Of IApizrRequestOptions, TWebApi, Task)), Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression<System.Func<TWebApi, TApiData, System.Threading.Tasks.Task>>, TModelData, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 51
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task\n"
  example: []
  syntax:
    content: public static Task ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiData},System.Threading.Tasks.Task}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TWebApi
      description: The web api to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(registry As IApizrEnumerableRegistry, executeApiMethod As Expression(Of Func(Of TWebApi, TApiData, Task)), modelData As TModelData, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task
  overload: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync*
  nameWithType.vb: ApizrRegistryExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrEnumerableRegistry, Expression(Of Func(Of TWebApi, TApiData, Task)), TModelData, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiData, System.Threading.Tasks.Task)), TModelData, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrEnumerableRegistry, Expression(Of Func(Of TWebApi, TApiData, Task)), TModelData, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``2,System.Threading.Tasks.Task}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``2,System.Threading.Tasks.Task}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``2,System.Threading.Tasks.Task}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression<System.Func<Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, TApiData, System.Threading.Tasks.Task>>, TModelData, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 69
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task\n"
  example: []
  syntax:
    content: public static Task ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,{TWebApi},{TApiData},System.Threading.Tasks.Task}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TWebApi
      description: The web api to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(registry As IApizrEnumerableRegistry, executeApiMethod As Expression(Of Func(Of IApizrRequestOptions, TWebApi, TApiData, Task)), modelData As TModelData, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task
  overload: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync*
  nameWithType.vb: ApizrRegistryExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrEnumerableRegistry, Expression(Of Func(Of IApizrRequestOptions, TWebApi, TApiData, Task)), TModelData, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression(Of System.Func(Of Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, TApiData, System.Threading.Tasks.Task)), TModelData, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrEnumerableRegistry, Expression(Of Func(Of IApizrRequestOptions, TWebApi, TApiData, Task)), TModelData, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: ExecuteAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 89
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task\n"
  example: []
  syntax:
    content: public static Task<TApiData> ExecuteAsync<TWebApi, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task to execute
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TWebApi
      description: The web api to manage
    - id: TApiData
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task result
    return:
      type: System.Threading.Tasks.Task{{TApiData}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TApiData)(registry As IApizrEnumerableRegistry, executeApiMethod As Expression(Of Func(Of TWebApi, Task(Of TApiData))), optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TApiData)
  overload: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync*
  nameWithType.vb: ApizrRegistryExtensions.ExecuteAsync(Of TWebApi, TApiData)(IApizrEnumerableRegistry, Expression(Of Func(Of TWebApi, Task(Of TApiData))), Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync(Of TWebApi, TApiData)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: ExecuteAsync(Of TWebApi, TApiData)(IApizrEnumerableRegistry, Expression(Of Func(Of TWebApi, Task(Of TApiData))), Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``5(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``5(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: ExecuteAsync``5(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression<System.Func<TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 107
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: public static Task<TModelResultData> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelRequestData
      type: '{TModelRequestData}'
      description: The model request data to map
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TWebApi
      description: The web api to manage
    - id: TModelResultData
      description: The mapped model result type
    - id: TApiResultData
      description: The api result type
    - id: TApiRequestData
      description: The mapped api request data type
    - id: TModelRequestData
      description: The model request data type
    return:
      type: System.Threading.Tasks.Task{{TModelResultData}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(registry As IApizrEnumerableRegistry, executeApiMethod As Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), modelRequestData As TModelRequestData, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TModelResultData)
  overload: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync*
  nameWithType.vb: ApizrRegistryExtensions.ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(IApizrEnumerableRegistry, Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(IApizrEnumerableRegistry, Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression<System.Func<TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>, TModelData, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 128
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TWebApi
      description: The web api to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task{{TModelData}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(registry As IApizrEnumerableRegistry, executeApiMethod As Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData))), modelData As TModelData, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TModelData)
  overload: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync*
  nameWithType.vb: ApizrRegistryExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrEnumerableRegistry, Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData))), TModelData, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData))), TModelData, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrEnumerableRegistry, Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData))), TModelData, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 145
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TWebApi
      description: The web api to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task{{TModelData}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(registry As IApizrEnumerableRegistry, executeApiMethod As Expression(Of Func(Of TWebApi, Task(Of TApiData))), optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TModelData)
  overload: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync*
  nameWithType.vb: ApizrRegistryExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrEnumerableRegistry, Expression(Of Func(Of TWebApi, Task(Of TApiData))), Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrEnumerableRegistry, Expression(Of Func(Of TWebApi, Task(Of TApiData))), Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: ExecuteAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression<System.Func<Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 160
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task\n"
  example: []
  syntax:
    content: public static Task<TApiData> ExecuteAsync<TWebApi, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task to execute
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TWebApi
      description: The web api to manage
    - id: TApiData
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task result
    return:
      type: System.Threading.Tasks.Task{{TApiData}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TApiData)(registry As IApizrEnumerableRegistry, executeApiMethod As Expression(Of Func(Of IApizrRequestOptions, TWebApi, Task(Of TApiData))), optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TApiData)
  overload: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync*
  nameWithType.vb: ApizrRegistryExtensions.ExecuteAsync(Of TWebApi, TApiData)(IApizrEnumerableRegistry, Expression(Of Func(Of IApizrRequestOptions, TWebApi, Task(Of TApiData))), Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync(Of TWebApi, TApiData)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression(Of System.Func(Of Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: ExecuteAsync(Of TWebApi, TApiData)(IApizrEnumerableRegistry, Expression(Of Func(Of IApizrRequestOptions, TWebApi, Task(Of TApiData))), Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``5(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``5(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: ExecuteAsync``5(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression<System.Func<Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 179
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: public static Task<TModelResultData> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelRequestData
      type: '{TModelRequestData}'
      description: The model request data to map
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TWebApi
      description: The web api to manage
    - id: TModelResultData
      description: The mapped model result type
    - id: TApiResultData
      description: The api result type
    - id: TApiRequestData
      description: The mapped api request data type
    - id: TModelRequestData
      description: The model request data type
    return:
      type: System.Threading.Tasks.Task{{TModelResultData}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(registry As IApizrEnumerableRegistry, executeApiMethod As Expression(Of Func(Of IApizrRequestOptions, TWebApi, TApiRequestData, Task(Of TApiResultData))), modelRequestData As TModelRequestData, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TModelResultData)
  overload: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync*
  nameWithType.vb: ApizrRegistryExtensions.ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(IApizrEnumerableRegistry, Expression(Of Func(Of IApizrRequestOptions, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression(Of System.Func(Of Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: ExecuteAsync(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(IApizrEnumerableRegistry, Expression(Of Func(Of IApizrRequestOptions, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression<System.Func<Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>, TModelData, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 200
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TWebApi
      description: The web api to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task{{TModelData}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(registry As IApizrEnumerableRegistry, executeApiMethod As Expression(Of Func(Of IApizrRequestOptions, TWebApi, TApiData, Task(Of TApiData))), modelData As TModelData, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TModelData)
  overload: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync*
  nameWithType.vb: ApizrRegistryExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrEnumerableRegistry, Expression(Of Func(Of IApizrRequestOptions, TWebApi, TApiData, Task(Of TApiData))), TModelData, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression(Of System.Func(Of Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData))), TModelData, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrEnumerableRegistry, Expression(Of Func(Of IApizrRequestOptions, TWebApi, TApiData, Task(Of TApiData))), TModelData, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{``2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{``2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{``2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression<System.Func<Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ExecuteAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 218
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nExecute a managed <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TWebApi</code>&apos;s task returning a mapped result\n"
  example: []
  syntax:
    content: public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TWebApi
      description: The web api to manage
    - id: TModelData
      description: The model data type
    - id: TApiData
      description: The api data type
    return:
      type: System.Threading.Tasks.Task{{TModelData}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteAsync(Of TWebApi, TModelData, TApiData)(registry As IApizrEnumerableRegistry, executeApiMethod As Expression(Of Func(Of IApizrRequestOptions, TWebApi, Task(Of TApiData))), optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TModelData)
  overload: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync*
  nameWithType.vb: ApizrRegistryExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrEnumerableRegistry, Expression(Of Func(Of IApizrRequestOptions, TWebApi, Task(Of TApiData))), Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync(Of TWebApi, TModelData, TApiData)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression(Of System.Func(Of Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: ExecuteAsync(Of TWebApi, TModelData, TApiData)(IApizrEnumerableRegistry, Expression(Of Func(Of IApizrRequestOptions, TWebApi, Task(Of TApiData))), Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.CreateAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.CreateAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: CreateAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: CreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.CreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.CreateAsync<TApiEntity>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, TApiEntity, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: CreateAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 240
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nSend a Create request\n"
  example: []
  syntax:
    content: >-
      public static Task<TApiEntity> CreateAsync<TApiEntity>(this IApizrEnumerableRegistry registry, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TApiEntity : class
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateAsync(Of TApiEntity As Class)(registry As IApizrEnumerableRegistry, entity As TApiEntity, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Extending.ApizrRegistryExtensions.CreateAsync*
  nameWithType.vb: ApizrRegistryExtensions.CreateAsync(Of TApiEntity)(IApizrEnumerableRegistry, TApiEntity, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.CreateAsync(Of TApiEntity)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, TApiEntity, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: CreateAsync(Of TApiEntity)(IApizrEnumerableRegistry, TApiEntity, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.CreateAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.CreateAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: CreateAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: CreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.CreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.CreateAsync<TModelEntity, TApiEntity>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, TModelEntity, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: CreateAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 255
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nSend a mapped Create request, returning a mapped result\n"
  example: []
  syntax:
    content: >-
      public static Task<TModelEntity> CreateAsync<TModelEntity, TApiEntity>(this IApizrEnumerableRegistry registry, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TApiEntity : class
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateAsync(Of TModelEntity, TApiEntity As Class)(registry As IApizrEnumerableRegistry, entity As TModelEntity, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Extending.ApizrRegistryExtensions.CreateAsync*
  nameWithType.vb: ApizrRegistryExtensions.CreateAsync(Of TModelEntity, TApiEntity)(IApizrEnumerableRegistry, TModelEntity, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.CreateAsync(Of TModelEntity, TApiEntity)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, TModelEntity, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: CreateAsync(Of TModelEntity, TApiEntity)(IApizrEnumerableRegistry, TModelEntity, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: ReadAllAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ReadAllAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 274
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nSend a ReadAll request\n"
  example: []
  syntax:
    content: >-
      public static Task<TReadAllResult> ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(this IApizrEnumerableRegistry registry, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TApiEntity : class
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadAllAsync(Of TApiEntity As Class, TApiEntityKey, TReadAllResult)(registry As IApizrEnumerableRegistry, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync*
  nameWithType.vb: ApizrRegistryExtensions.ReadAllAsync(Of TApiEntity, TApiEntityKey, TReadAllResult)(IApizrEnumerableRegistry, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync(Of TApiEntity, TApiEntityKey, TReadAllResult)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: ReadAllAsync(Of TApiEntity, TApiEntityKey, TReadAllResult)(IApizrEnumerableRegistry, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync``4(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync``4(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: ReadAllAsync``4(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ReadAllAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 290
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nSend a ReadAll request, returning mapped result\n"
  example: []
  syntax:
    content: >-
      public static Task<TModelReadAllResult> ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(this IApizrEnumerableRegistry registry, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TApiEntity : class
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadAllAsync(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TApiReadAllResult)(registry As IApizrEnumerableRegistry, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync*
  nameWithType.vb: ApizrRegistryExtensions.ReadAllAsync(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult)(IApizrEnumerableRegistry, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: ReadAllAsync(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult)(IApizrEnumerableRegistry, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync``4(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync``4(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: ReadAllAsync``4(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, TReadAllParams, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ReadAllAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 309
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nSend a ReadAll request with some parameters\n"
  example: []
  syntax:
    content: >-
      public static Task<TReadAllResult> ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrEnumerableRegistry registry, TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TApiEntity : class
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadAllAsync(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(registry As IApizrEnumerableRegistry, readAllParams As TReadAllParams, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync*
  nameWithType.vb: ApizrRegistryExtensions.ReadAllAsync(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrEnumerableRegistry, TReadAllParams, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, TReadAllParams, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: ReadAllAsync(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrEnumerableRegistry, TReadAllParams, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync``5(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync``5(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: ReadAllAsync``5(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, TReadAllParams, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ReadAllAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 328
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nSend a ReadAll request with some parameters, returning mapped result\n"
  example: []
  syntax:
    content: >-
      public static Task<TModelReadAllResult> ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(this IApizrEnumerableRegistry registry, TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TApiEntity : class
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadAllAsync(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TApiReadAllResult, TReadAllParams)(registry As IApizrEnumerableRegistry, readAllParams As TReadAllParams, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync*
  nameWithType.vb: ApizrRegistryExtensions.ReadAllAsync(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams)(IApizrEnumerableRegistry, TReadAllParams, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, TReadAllParams, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: ReadAllAsync(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams)(IApizrEnumerableRegistry, TReadAllParams, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.ReadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ReadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: ReadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ReadAsync<TApiEntity>(IApizrEnumerableRegistry, Int32, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.ReadAsync<TApiEntity>(IApizrEnumerableRegistry, Int32, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ReadAsync<TApiEntity>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Int32, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ReadAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 349
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nSend a Read request\n"
  example: []
  syntax:
    content: >-
      public static Task<TApiEntity> ReadAsync<TApiEntity>(this IApizrEnumerableRegistry registry, int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TApiEntity : class
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: key
      type: System.Int32
      description: The entity key
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadAsync(Of TApiEntity As Class)(registry As IApizrEnumerableRegistry, key As Integer, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Extending.ApizrRegistryExtensions.ReadAsync*
  nameWithType.vb: ApizrRegistryExtensions.ReadAsync(Of TApiEntity)(IApizrEnumerableRegistry, Int32, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ReadAsync(Of TApiEntity)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Int32, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: ReadAsync(Of TApiEntity)(IApizrEnumerableRegistry, Int32, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.ReadAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ReadAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: ReadAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.ReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ReadAsync<TApiEntity, TApiEntityKey>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, TApiEntityKey, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ReadAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 364
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nSend a Read request\n"
  example: []
  syntax:
    content: >-
      public static Task<TApiEntity> ReadAsync<TApiEntity, TApiEntityKey>(this IApizrEnumerableRegistry registry, TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TApiEntity : class
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadAsync(Of TApiEntity As Class, TApiEntityKey)(registry As IApizrEnumerableRegistry, key As TApiEntityKey, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Extending.ApizrRegistryExtensions.ReadAsync*
  nameWithType.vb: ApizrRegistryExtensions.ReadAsync(Of TApiEntity, TApiEntityKey)(IApizrEnumerableRegistry, TApiEntityKey, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ReadAsync(Of TApiEntity, TApiEntityKey)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, TApiEntityKey, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: ReadAsync(Of TApiEntity, TApiEntityKey)(IApizrEnumerableRegistry, TApiEntityKey, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.ReadAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ReadAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: ReadAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, Int32, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, Int32, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Int32, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ReadAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 379
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nSend a Read request, returning mapped result\n"
  example: []
  syntax:
    content: >-
      public static Task<TModelEntity> ReadAsync<TModelEntity, TApiEntity>(this IApizrEnumerableRegistry registry, int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TApiEntity : class
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: key
      type: System.Int32
      description: The entity key
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadAsync(Of TModelEntity, TApiEntity As Class)(registry As IApizrEnumerableRegistry, key As Integer, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Extending.ApizrRegistryExtensions.ReadAsync*
  nameWithType.vb: ApizrRegistryExtensions.ReadAsync(Of TModelEntity, TApiEntity)(IApizrEnumerableRegistry, Int32, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ReadAsync(Of TModelEntity, TApiEntity)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Int32, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: ReadAsync(Of TModelEntity, TApiEntity)(IApizrEnumerableRegistry, Int32, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.ReadAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``2,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ReadAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``2,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: ReadAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``2,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, TApiEntityKey, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ReadAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 396
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nSend a Read request, returning mapped result\n"
  example: []
  syntax:
    content: >-
      public static Task<TModelEntity> ReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrEnumerableRegistry registry, TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TApiEntity : class
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadAsync(Of TModelEntity, TApiEntity As Class, TApiEntityKey)(registry As IApizrEnumerableRegistry, key As TApiEntityKey, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Extending.ApizrRegistryExtensions.ReadAsync*
  nameWithType.vb: ApizrRegistryExtensions.ReadAsync(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrEnumerableRegistry, TApiEntityKey, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ReadAsync(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, TApiEntityKey, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: ReadAsync(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrEnumerableRegistry, TApiEntityKey, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.UpdateAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.UpdateAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: UpdateAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: UpdateAsync<TApiEntity>(IApizrEnumerableRegistry, Int32, TApiEntity, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.UpdateAsync<TApiEntity>(IApizrEnumerableRegistry, Int32, TApiEntity, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.UpdateAsync<TApiEntity>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Int32, TApiEntity, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: UpdateAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 416
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nSend an Update request\n"
  example: []
  syntax:
    content: >-
      public static Task UpdateAsync<TApiEntity>(this IApizrEnumerableRegistry registry, int key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TApiEntity : class
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: key
      type: System.Int32
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpdateAsync(Of TApiEntity As Class)(registry As IApizrEnumerableRegistry, key As Integer, entity As TApiEntity, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task
  overload: Apizr.Extending.ApizrRegistryExtensions.UpdateAsync*
  nameWithType.vb: ApizrRegistryExtensions.UpdateAsync(Of TApiEntity)(IApizrEnumerableRegistry, Int32, TApiEntity, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.UpdateAsync(Of TApiEntity)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Int32, TApiEntity, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: UpdateAsync(Of TApiEntity)(IApizrEnumerableRegistry, Int32, TApiEntity, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.UpdateAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``1,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.UpdateAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``1,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: UpdateAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``1,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: UpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.UpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.UpdateAsync<TApiEntity, TApiEntityKey>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: UpdateAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 433
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nSend an Update request\n"
  example: []
  syntax:
    content: >-
      public static Task UpdateAsync<TApiEntity, TApiEntityKey>(this IApizrEnumerableRegistry registry, TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TApiEntity : class
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpdateAsync(Of TApiEntity As Class, TApiEntityKey)(registry As IApizrEnumerableRegistry, key As TApiEntityKey, entity As TApiEntity, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task
  overload: Apizr.Extending.ApizrRegistryExtensions.UpdateAsync*
  nameWithType.vb: ApizrRegistryExtensions.UpdateAsync(Of TApiEntity, TApiEntityKey)(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.UpdateAsync(Of TApiEntity, TApiEntityKey)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: UpdateAsync(Of TApiEntity, TApiEntityKey)(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.UpdateAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.UpdateAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: UpdateAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: UpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, Int32, TModelEntity, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, Int32, TModelEntity, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Int32, TModelEntity, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: UpdateAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 450
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nSend a mapped Update request, returning mapped result\n"
  example: []
  syntax:
    content: >-
      public static Task UpdateAsync<TModelEntity, TApiEntity>(this IApizrEnumerableRegistry registry, int key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TApiEntity : class
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: key
      type: System.Int32
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpdateAsync(Of TModelEntity, TApiEntity As Class)(registry As IApizrEnumerableRegistry, key As Integer, entity As TModelEntity, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task
  overload: Apizr.Extending.ApizrRegistryExtensions.UpdateAsync*
  nameWithType.vb: ApizrRegistryExtensions.UpdateAsync(Of TModelEntity, TApiEntity)(IApizrEnumerableRegistry, Int32, TModelEntity, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.UpdateAsync(Of TModelEntity, TApiEntity)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Int32, TModelEntity, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: UpdateAsync(Of TModelEntity, TApiEntity)(IApizrEnumerableRegistry, Int32, TModelEntity, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.UpdateAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``2,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.UpdateAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``2,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: UpdateAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``2,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: UpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: UpdateAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 469
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nSend a mapped Update request, returning mapped result\n"
  example: []
  syntax:
    content: >-
      public static Task UpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrEnumerableRegistry registry, TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TApiEntity : class
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UpdateAsync(Of TModelEntity, TApiEntity As Class, TApiEntityKey)(registry As IApizrEnumerableRegistry, key As TApiEntityKey, entity As TModelEntity, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task
  overload: Apizr.Extending.ApizrRegistryExtensions.UpdateAsync*
  nameWithType.vb: ApizrRegistryExtensions.UpdateAsync(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.UpdateAsync(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: UpdateAsync(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.DeleteAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.DeleteAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: DeleteAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: DeleteAsync<TApiEntity>(IApizrEnumerableRegistry, Int32, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.DeleteAsync<TApiEntity>(IApizrEnumerableRegistry, Int32, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.DeleteAsync<TApiEntity>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Int32, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: DeleteAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 489
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nSend an Delete request\n"
  example: []
  syntax:
    content: >-
      public static Task DeleteAsync<TApiEntity>(this IApizrEnumerableRegistry registry, int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TApiEntity : class
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: key
      type: System.Int32
      description: The entity key
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DeleteAsync(Of TApiEntity As Class)(registry As IApizrEnumerableRegistry, key As Integer, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task
  overload: Apizr.Extending.ApizrRegistryExtensions.DeleteAsync*
  nameWithType.vb: ApizrRegistryExtensions.DeleteAsync(Of TApiEntity)(IApizrEnumerableRegistry, Int32, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.DeleteAsync(Of TApiEntity)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Int32, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: DeleteAsync(Of TApiEntity)(IApizrEnumerableRegistry, Int32, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.DeleteAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.DeleteAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: DeleteAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: DeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>)
  nameWithType: ApizrRegistryExtensions.DeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.DeleteAsync<TApiEntity, TApiEntityKey>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, TApiEntityKey, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: DeleteAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 504
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nSend an Delete request\n"
  example: []
  syntax:
    content: >-
      public static Task DeleteAsync<TApiEntity, TApiEntityKey>(this IApizrEnumerableRegistry registry, TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TApiEntity : class
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DeleteAsync(Of TApiEntity As Class, TApiEntityKey)(registry As IApizrEnumerableRegistry, key As TApiEntityKey, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task
  overload: Apizr.Extending.ApizrRegistryExtensions.DeleteAsync*
  nameWithType.vb: ApizrRegistryExtensions.DeleteAsync(Of TApiEntity, TApiEntityKey)(IApizrEnumerableRegistry, TApiEntityKey, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.DeleteAsync(Of TApiEntity, TApiEntityKey)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, TApiEntityKey, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: DeleteAsync(Of TApiEntity, TApiEntityKey)(IApizrEnumerableRegistry, TApiEntityKey, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Threading.CancellationToken)
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Threading.CancellationToken)
  id: ClearCacheAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ClearCacheAsync<TWebApi>(IApizrEnumerableRegistry, CancellationToken)
  nameWithType: ApizrRegistryExtensions.ClearCacheAsync<TWebApi>(IApizrEnumerableRegistry, CancellationToken)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync<TWebApi>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ClearCacheAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 523
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nClear all cache\n"
  example: []
  syntax:
    content: public static Task<bool> ClearCacheAsync<TWebApi>(this IApizrEnumerableRegistry registry, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token
    typeParameters:
    - id: TWebApi
      description: The web api to manage
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ClearCacheAsync(Of TWebApi)(registry As IApizrEnumerableRegistry, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync*
  nameWithType.vb: ApizrRegistryExtensions.ClearCacheAsync(Of TWebApi)(IApizrEnumerableRegistry, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync(Of TWebApi)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Threading.CancellationToken)
  name.vb: ClearCacheAsync(Of TWebApi)(IApizrEnumerableRegistry, CancellationToken)
- uid: Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}})
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}})
  id: ClearCacheAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}})
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TResult>>>)
  nameWithType: ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TResult>>>)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task<TResult>>>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ClearCacheAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 535
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nClear the cache of a specific request\n"
  example: []
  syntax:
    content: public static Task<bool> ClearCacheAsync<TWebApi, TResult>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, Task<TResult>>> executeApiMethod)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task{{TResult}}}}
      description: The specific <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task to clear cache for
    typeParameters:
    - id: TWebApi
      description: The web api to manage
    - id: TResult
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task result
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ClearCacheAsync(Of TWebApi, TResult)(registry As IApizrEnumerableRegistry, executeApiMethod As Expression(Of Func(Of TWebApi, Task(Of TResult)))) As Task(Of Boolean)
  overload: Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync*
  nameWithType.vb: ApizrRegistryExtensions.ClearCacheAsync(Of TWebApi, TResult)(IApizrEnumerableRegistry, Expression(Of Func(Of TWebApi, Task(Of TResult))))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync(Of TWebApi, TResult)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task(Of TResult))))
  name.vb: ClearCacheAsync(Of TWebApi, TResult)(IApizrEnumerableRegistry, Expression(Of Func(Of TWebApi, Task(Of TResult))))
- uid: Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken)
  commentId: M:Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken)
  id: ClearCacheAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Extending.ApizrRegistryExtensions
  langs:
  - csharp
  - vb
  name: ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<CancellationToken, TWebApi, Task<TResult>>>, CancellationToken)
  nameWithType: ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<CancellationToken, TWebApi, Task<TResult>>>, CancellationToken)
  fullName: Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TResult>>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Extending/ApizrRegistryExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ClearCacheAsync
    path: ../../Src/Apizr/Extending/ApizrRegistryExtensions.cs
    startLine: 548
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nClear the cache of a specific request\n"
  example: []
  syntax:
    content: public static Task<bool> ClearCacheAsync<TWebApi, TResult>(this IApizrEnumerableRegistry registry, Expression<Func<CancellationToken, TWebApi, Task<TResult>>> executeApiMethod, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TResult}}}}
      description: The specific <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task to clear cache for
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token
    typeParameters:
    - id: TWebApi
      description: The web api to manage
    - id: TResult
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code>&apos;s task result
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ClearCacheAsync(Of TWebApi, TResult)(registry As IApizrEnumerableRegistry, executeApiMethod As Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TResult))), cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
  overload: Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync*
  nameWithType.vb: ApizrRegistryExtensions.ClearCacheAsync(Of TWebApi, TResult)(IApizrEnumerableRegistry, Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TResult))), CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync(Of TWebApi, TResult)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TResult))), System.Threading.CancellationToken)
  name.vb: ClearCacheAsync(Of TWebApi, TResult)(IApizrEnumerableRegistry, Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TResult))), CancellationToken)
references:
- uid: Apizr.Extending
  commentId: N:Apizr.Extending
  name: Apizr.Extending
  nameWithType: Apizr.Extending
  fullName: Apizr.Extending
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync*
  commentId: Overload:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync
  name: ExecuteAsync
  nameWithType: ApizrRegistryExtensions.ExecuteAsync
  fullName: Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync
- uid: Apizr.Configuring.Registry.IApizrEnumerableRegistry
  commentId: T:Apizr.Configuring.Registry.IApizrEnumerableRegistry
  parent: Apizr.Configuring.Registry
  name: IApizrEnumerableRegistry
  nameWithType: IApizrEnumerableRegistry
  fullName: Apizr.Configuring.Registry.IApizrEnumerableRegistry
- uid: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TWebApi, Task>>
  nameWithType: Expression<Func<TWebApi, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of TWebApi, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of TWebApi, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
  commentId: T:System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
  parent: System
  definition: System.Action`1
  name: Action<IApizrRequestOptionsBuilder>
  nameWithType: Action<IApizrRequestOptionsBuilder>
  fullName: System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>
  nameWithType.vb: Action(Of IApizrRequestOptionsBuilder)
  fullName.vb: System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder)
  name.vb: Action(Of IApizrRequestOptionsBuilder)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Apizr.Configuring.Request.IApizrRequestOptionsBuilder
    name: IApizrRequestOptionsBuilder
    nameWithType: IApizrRequestOptionsBuilder
    fullName: Apizr.Configuring.Request.IApizrRequestOptionsBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Apizr.Configuring.Request.IApizrRequestOptionsBuilder
    name: IApizrRequestOptionsBuilder
    nameWithType: IApizrRequestOptionsBuilder
    fullName: Apizr.Configuring.Request.IApizrRequestOptionsBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Apizr.Configuring.Registry
  commentId: N:Apizr.Configuring.Registry
  name: Apizr.Configuring.Registry
  nameWithType: Apizr.Configuring.Registry
  fullName: Apizr.Configuring.Registry
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,{TWebApi},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<IApizrRequestOptions, TWebApi, Task>>
  nameWithType: Expression<Func<IApizrRequestOptions, TWebApi, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of IApizrRequestOptions, TWebApi, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of IApizrRequestOptions, TWebApi, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Apizr.Configuring.Request.IApizrRequestOptions
    name: IApizrRequestOptions
    nameWithType: IApizrRequestOptions
    fullName: Apizr.Configuring.Request.IApizrRequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Apizr.Configuring.Request.IApizrRequestOptions
    name: IApizrRequestOptions
    nameWithType: IApizrRequestOptions
    fullName: Apizr.Configuring.Request.IApizrRequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiData},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TWebApi, TApiData, Task>>
  nameWithType: Expression<Func<TWebApi, TApiData, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<TWebApi, TApiData, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of TWebApi, TApiData, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiData, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of TWebApi, TApiData, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TModelData}'
  commentId: '!:TModelData'
  definition: TModelData
  name: TModelData
  nameWithType: TModelData
  fullName: TModelData
- uid: TModelData
  name: TModelData
  nameWithType: TModelData
  fullName: TModelData
- uid: System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,{TWebApi},{TApiData},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``1,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>
  nameWithType: Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, TApiData, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of IApizrRequestOptions, TWebApi, TApiData, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, TApiData, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of IApizrRequestOptions, TWebApi, TApiData, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Apizr.Configuring.Request.IApizrRequestOptions
    name: IApizrRequestOptions
    nameWithType: IApizrRequestOptions
    fullName: Apizr.Configuring.Request.IApizrRequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Apizr.Configuring.Request.IApizrRequestOptions
    name: IApizrRequestOptions
    nameWithType: IApizrRequestOptions
    fullName: Apizr.Configuring.Request.IApizrRequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TWebApi, Task<TApiData>>>
  nameWithType: Expression<Func<TWebApi, Task<TApiData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task<TApiData>>>
  nameWithType.vb: Expression(Of Func(Of TWebApi, Task(Of TApiData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task(Of TApiData)))
  name.vb: Expression(Of Func(Of TWebApi, Task(Of TApiData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TApiData}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TApiData>
  nameWithType: Task<TApiData>
  fullName: System.Threading.Tasks.Task<TApiData>
  nameWithType.vb: Task(Of TApiData)
  fullName.vb: System.Threading.Tasks.Task(Of TApiData)
  name.vb: Task(Of TApiData)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``2,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>
  nameWithType: Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>
  nameWithType.vb: Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData)))
  name.vb: Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TModelRequestData}'
  commentId: '!:TModelRequestData'
  definition: TModelRequestData
  name: TModelRequestData
  nameWithType: TModelRequestData
  fullName: TModelRequestData
- uid: System.Threading.Tasks.Task{{TModelResultData}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TModelResultData>
  nameWithType: Task<TModelResultData>
  fullName: System.Threading.Tasks.Task<TModelResultData>
  nameWithType.vb: Task(Of TModelResultData)
  fullName.vb: System.Threading.Tasks.Task(Of TModelResultData)
  name.vb: Task(Of TModelResultData)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: TModelRequestData
  name: TModelRequestData
  nameWithType: TModelRequestData
  fullName: TModelRequestData
- uid: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TWebApi, TApiData, Task<TApiData>>>
  nameWithType: Expression<Func<TWebApi, TApiData, Task<TApiData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>
  nameWithType.vb: Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData)))
  name.vb: Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TModelData}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TModelData>
  nameWithType: Task<TModelData>
  fullName: System.Threading.Tasks.Task<TModelData>
  nameWithType.vb: Task(Of TModelData)
  fullName.vb: System.Threading.Tasks.Task(Of TModelData)
  name.vb: Task(Of TModelData)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{``0}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>
  nameWithType: Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, System.Threading.Tasks.Task<TApiData>>>
  nameWithType.vb: Expression(Of Func(Of IApizrRequestOptions, TWebApi, Task(Of TApiData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, System.Threading.Tasks.Task(Of TApiData)))
  name.vb: Expression(Of Func(Of IApizrRequestOptions, TWebApi, Task(Of TApiData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Apizr.Configuring.Request.IApizrRequestOptions
    name: IApizrRequestOptions
    nameWithType: IApizrRequestOptions
    fullName: Apizr.Configuring.Request.IApizrRequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Apizr.Configuring.Request.IApizrRequestOptions
    name: IApizrRequestOptions
    nameWithType: IApizrRequestOptions
    fullName: Apizr.Configuring.Request.IApizrRequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``2,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>
  nameWithType: Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>
  nameWithType.vb: Expression(Of Func(Of IApizrRequestOptions, TWebApi, TApiRequestData, Task(Of TApiResultData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData)))
  name.vb: Expression(Of Func(Of IApizrRequestOptions, TWebApi, TApiRequestData, Task(Of TApiResultData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Apizr.Configuring.Request.IApizrRequestOptions
    name: IApizrRequestOptions
    nameWithType: IApizrRequestOptions
    fullName: Apizr.Configuring.Request.IApizrRequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Apizr.Configuring.Request.IApizrRequestOptions
    name: IApizrRequestOptions
    nameWithType: IApizrRequestOptions
    fullName: Apizr.Configuring.Request.IApizrRequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``1,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>
  nameWithType: Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>
  nameWithType.vb: Expression(Of Func(Of IApizrRequestOptions, TWebApi, TApiData, Task(Of TApiData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Apizr.Configuring.Request.IApizrRequestOptions, TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData)))
  name.vb: Expression(Of Func(Of IApizrRequestOptions, TWebApi, TApiData, Task(Of TApiData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Apizr.Configuring.Request.IApizrRequestOptions
    name: IApizrRequestOptions
    nameWithType: IApizrRequestOptions
    fullName: Apizr.Configuring.Request.IApizrRequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Apizr.Configuring.Request.IApizrRequestOptions
    name: IApizrRequestOptions
    nameWithType: IApizrRequestOptions
    fullName: Apizr.Configuring.Request.IApizrRequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Extending.ApizrRegistryExtensions.CreateAsync*
  commentId: Overload:Apizr.Extending.ApizrRegistryExtensions.CreateAsync
  name: CreateAsync
  nameWithType: ApizrRegistryExtensions.CreateAsync
  fullName: Apizr.Extending.ApizrRegistryExtensions.CreateAsync
- uid: '{TApiEntity}'
  commentId: '!:TApiEntity'
  definition: TApiEntity
  name: TApiEntity
  nameWithType: TApiEntity
  fullName: TApiEntity
- uid: System.Threading.Tasks.Task{{TApiEntity}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TApiEntity>
  nameWithType: Task<TApiEntity>
  fullName: System.Threading.Tasks.Task<TApiEntity>
  nameWithType.vb: Task(Of TApiEntity)
  fullName.vb: System.Threading.Tasks.Task(Of TApiEntity)
  name.vb: Task(Of TApiEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: TApiEntity
  name: TApiEntity
  nameWithType: TApiEntity
  fullName: TApiEntity
- uid: '{TModelEntity}'
  commentId: '!:TModelEntity'
  definition: TModelEntity
  name: TModelEntity
  nameWithType: TModelEntity
  fullName: TModelEntity
- uid: System.Threading.Tasks.Task{{TModelEntity}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TModelEntity>
  nameWithType: Task<TModelEntity>
  fullName: System.Threading.Tasks.Task<TModelEntity>
  nameWithType.vb: Task(Of TModelEntity)
  fullName.vb: System.Threading.Tasks.Task(Of TModelEntity)
  name.vb: Task(Of TModelEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: TModelEntity
  name: TModelEntity
  nameWithType: TModelEntity
  fullName: TModelEntity
- uid: Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync*
  commentId: Overload:Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync
  name: ReadAllAsync
  nameWithType: ApizrRegistryExtensions.ReadAllAsync
  fullName: Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync
- uid: System.Threading.Tasks.Task{{TReadAllResult}}
  commentId: T:System.Threading.Tasks.Task{``2}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TReadAllResult>
  nameWithType: Task<TReadAllResult>
  fullName: System.Threading.Tasks.Task<TReadAllResult>
  nameWithType.vb: Task(Of TReadAllResult)
  fullName.vb: System.Threading.Tasks.Task(Of TReadAllResult)
  name.vb: Task(Of TReadAllResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TModelReadAllResult}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TModelReadAllResult>
  nameWithType: Task<TModelReadAllResult>
  fullName: System.Threading.Tasks.Task<TModelReadAllResult>
  nameWithType.vb: Task(Of TModelReadAllResult)
  fullName.vb: System.Threading.Tasks.Task(Of TModelReadAllResult)
  name.vb: Task(Of TModelReadAllResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelReadAllResult
    nameWithType: TModelReadAllResult
    fullName: TModelReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelReadAllResult
    nameWithType: TModelReadAllResult
    fullName: TModelReadAllResult
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TReadAllParams}'
  commentId: '!:TReadAllParams'
  definition: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: Apizr.Extending.ApizrRegistryExtensions.ReadAsync*
  commentId: Overload:Apizr.Extending.ApizrRegistryExtensions.ReadAsync
  name: ReadAsync
  nameWithType: ApizrRegistryExtensions.ReadAsync
  fullName: Apizr.Extending.ApizrRegistryExtensions.ReadAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{TApiEntityKey}'
  commentId: '!:TApiEntityKey'
  definition: TApiEntityKey
  name: TApiEntityKey
  nameWithType: TApiEntityKey
  fullName: TApiEntityKey
- uid: TApiEntityKey
  name: TApiEntityKey
  nameWithType: TApiEntityKey
  fullName: TApiEntityKey
- uid: Apizr.Extending.ApizrRegistryExtensions.UpdateAsync*
  commentId: Overload:Apizr.Extending.ApizrRegistryExtensions.UpdateAsync
  name: UpdateAsync
  nameWithType: ApizrRegistryExtensions.UpdateAsync
  fullName: Apizr.Extending.ApizrRegistryExtensions.UpdateAsync
- uid: Apizr.Extending.ApizrRegistryExtensions.DeleteAsync*
  commentId: Overload:Apizr.Extending.ApizrRegistryExtensions.DeleteAsync
  name: DeleteAsync
  nameWithType: ApizrRegistryExtensions.DeleteAsync
  fullName: Apizr.Extending.ApizrRegistryExtensions.DeleteAsync
- uid: Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync*
  commentId: Overload:Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync
  name: ClearCacheAsync
  nameWithType: ApizrRegistryExtensions.ClearCacheAsync
  fullName: Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task{{TResult}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TWebApi, Task<TResult>>>
  nameWithType: Expression<Func<TWebApi, Task<TResult>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task<TResult>>>
  nameWithType.vb: Expression(Of Func(Of TWebApi, Task(Of TResult)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task(Of TResult)))
  name.vb: Expression(Of Func(Of TWebApi, Task(Of TResult)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TResult}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{``0}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<CancellationToken, TWebApi, Task<TResult>>>
  nameWithType: Expression<Func<CancellationToken, TWebApi, Task<TResult>>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TResult>>>
  nameWithType.vb: Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TResult)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TResult)))
  name.vb: Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TResult)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
