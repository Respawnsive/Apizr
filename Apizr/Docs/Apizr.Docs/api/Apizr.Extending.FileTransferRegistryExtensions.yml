### YamlMime:ManagedReference
items:
- uid: Apizr.Extending.FileTransferRegistryExtensions
  commentId: T:Apizr.Extending.FileTransferRegistryExtensions
  id: FileTransferRegistryExtensions
  parent: Apizr.Extending
  children:
  - Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  - Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  - Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  - Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  - Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  - Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  - Apizr.Extending.FileTransferRegistryExtensions.ContainsUploadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  - Apizr.Extending.FileTransferRegistryExtensions.ContainsUploadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  - Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  - Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  - Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  - Apizr.Extending.FileTransferRegistryExtensions.GetTransferManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  - Apizr.Extending.FileTransferRegistryExtensions.GetTransferManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  - Apizr.Extending.FileTransferRegistryExtensions.GetTransferManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  - Apizr.Extending.FileTransferRegistryExtensions.GetUploadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  - Apizr.Extending.FileTransferRegistryExtensions.GetUploadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  - Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrDownloadManager@)
  - Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrDownloadManager{``0}@)
  - Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrDownloadManager{``0,``1}@)
  - Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrTransferManager@)
  - Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrTransferManager{``0}@)
  - Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrTransferManager{``0,``1}@)
  - Apizr.Extending.FileTransferRegistryExtensions.TryGetUploadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrUploadManager@)
  - Apizr.Extending.FileTransferRegistryExtensions.TryGetUploadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrUploadManager{``0}@)
  - Apizr.Extending.FileTransferRegistryExtensions.UploadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.ByteArrayPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.FileTransferRegistryExtensions.UploadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.FileInfoPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.FileTransferRegistryExtensions.UploadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.StreamPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.FileTransferRegistryExtensions.UploadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.ByteArrayPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.FileTransferRegistryExtensions.UploadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.FileInfoPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Extending.FileTransferRegistryExtensions.UploadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.StreamPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  langs:
  - csharp
  - vb
  name: FileTransferRegistryExtensions
  nameWithType: FileTransferRegistryExtensions
  fullName: Apizr.Extending.FileTransferRegistryExtensions
  type: Class
  source:
    id: FileTransferRegistryExtensions
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 15
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  syntax:
    content: public static class FileTransferRegistryExtensions
    content.vb: Public Module FileTransferRegistryExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Apizr.Extending.FileTransferRegistryExtensions.GetUploadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.GetUploadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  id: GetUploadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: GetUploadManager(IApizrEnumerableRegistry)
  nameWithType: FileTransferRegistryExtensions.GetUploadManager(IApizrEnumerableRegistry)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.GetUploadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  type: Method
  source:
    id: GetUploadManager
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 24
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nGet an upload manager instance\n"
  example: []
  syntax:
    content: public static IApizrUploadManager GetUploadManager(this IApizrEnumerableRegistry registry)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    return:
      type: Apizr.Transferring.Managing.IApizrUploadManager
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetUploadManager(registry As IApizrEnumerableRegistry) As IApizrUploadManager
  overload: Apizr.Extending.FileTransferRegistryExtensions.GetUploadManager*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Apizr.Extending.FileTransferRegistryExtensions.GetUploadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.GetUploadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  id: GetUploadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: GetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry)
  nameWithType: FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi>(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  type: Method
  source:
    id: GetUploadManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 34
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nGet an upload manager instance\n"
  example: []
  syntax:
    content: >-
      public static IApizrUploadManager<TUploadApi> GetUploadManagerFor<TUploadApi>(this IApizrEnumerableRegistry registry)
          where TUploadApi : IUploadApi
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    typeParameters:
    - id: TUploadApi
      description: The upload api interface to manage
    return:
      type: Apizr.Transferring.Managing.IApizrUploadManager{{TUploadApi}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetUploadManagerFor(Of TUploadApi As IUploadApi)(registry As IApizrEnumerableRegistry) As IApizrUploadManager(Of TUploadApi)
  overload: Apizr.Extending.FileTransferRegistryExtensions.GetUploadManagerFor*
  nameWithType.vb: FileTransferRegistryExtensions.GetUploadManagerFor(Of TUploadApi)(IApizrEnumerableRegistry)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.GetUploadManagerFor(Of TUploadApi)(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  name.vb: GetUploadManagerFor(Of TUploadApi)(IApizrEnumerableRegistry)
- uid: Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  id: GetDownloadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: GetDownloadManager(IApizrEnumerableRegistry)
  nameWithType: FileTransferRegistryExtensions.GetDownloadManager(IApizrEnumerableRegistry)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  type: Method
  source:
    id: GetDownloadManager
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 44
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nGet a download manager instance\n"
  example: []
  syntax:
    content: public static IApizrDownloadManager GetDownloadManager(this IApizrEnumerableRegistry registry)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    return:
      type: Apizr.Transferring.Managing.IApizrDownloadManager
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDownloadManager(registry As IApizrEnumerableRegistry) As IApizrDownloadManager
  overload: Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManager*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  id: GetDownloadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: GetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry)
  nameWithType: FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi>(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  type: Method
  source:
    id: GetDownloadManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 53
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nGet a download manager instance\n"
  example: []
  syntax:
    content: >-
      public static IApizrDownloadManager<TDownloadApi> GetDownloadManagerFor<TDownloadApi>(this IApizrEnumerableRegistry registry)
          where TDownloadApi : IDownloadApi
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    typeParameters:
    - id: TDownloadApi
      description: The download api interface to manage
    return:
      type: Apizr.Transferring.Managing.IApizrDownloadManager{{TDownloadApi}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDownloadManagerFor(Of TDownloadApi As IDownloadApi)(registry As IApizrEnumerableRegistry) As IApizrDownloadManager(Of TDownloadApi)
  overload: Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManagerFor*
  nameWithType.vb: FileTransferRegistryExtensions.GetDownloadManagerFor(Of TDownloadApi)(IApizrEnumerableRegistry)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManagerFor(Of TDownloadApi)(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  name.vb: GetDownloadManagerFor(Of TDownloadApi)(IApizrEnumerableRegistry)
- uid: Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  id: GetDownloadManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: GetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry)
  nameWithType: FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi, TDownloadParams>(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  type: Method
  source:
    id: GetDownloadManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 64
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nGet a download manager instance\n"
  example: []
  syntax:
    content: >-
      public static IApizrDownloadManager<TDownloadApi, TDownloadParams> GetDownloadManagerFor<TDownloadApi, TDownloadParams>(this IApizrEnumerableRegistry registry)
          where TDownloadApi : IDownloadApi<TDownloadParams>
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    typeParameters:
    - id: TDownloadApi
      description: The download api interface to manage
    - id: TDownloadParams
      description: The download query parameters type
    return:
      type: Apizr.Transferring.Managing.IApizrDownloadManager{{TDownloadApi},{TDownloadParams}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDownloadManagerFor(Of TDownloadApi As IDownloadApi(Of TDownloadParams), TDownloadParams)(registry As IApizrEnumerableRegistry) As IApizrDownloadManager(Of TDownloadApi, TDownloadParams)
  overload: Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManagerFor*
  nameWithType.vb: FileTransferRegistryExtensions.GetDownloadManagerFor(Of TDownloadApi, TDownloadParams)(IApizrEnumerableRegistry)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManagerFor(Of TDownloadApi, TDownloadParams)(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  name.vb: GetDownloadManagerFor(Of TDownloadApi, TDownloadParams)(IApizrEnumerableRegistry)
- uid: Apizr.Extending.FileTransferRegistryExtensions.GetTransferManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.GetTransferManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  id: GetTransferManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: GetTransferManager(IApizrEnumerableRegistry)
  nameWithType: FileTransferRegistryExtensions.GetTransferManager(IApizrEnumerableRegistry)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.GetTransferManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  type: Method
  source:
    id: GetTransferManager
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 73
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nGet a transfer manager instance\n"
  example: []
  syntax:
    content: public static IApizrTransferManager GetTransferManager(this IApizrEnumerableRegistry registry)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    return:
      type: Apizr.Transferring.Managing.IApizrTransferManager
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetTransferManager(registry As IApizrEnumerableRegistry) As IApizrTransferManager
  overload: Apizr.Extending.FileTransferRegistryExtensions.GetTransferManager*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Apizr.Extending.FileTransferRegistryExtensions.GetTransferManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.GetTransferManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  id: GetTransferManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: GetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry)
  nameWithType: FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi>(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  type: Method
  source:
    id: GetTransferManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 82
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nGet a transfer manager instance\n"
  example: []
  syntax:
    content: >-
      public static IApizrTransferManager<TTransferApi> GetTransferManagerFor<TTransferApi>(this IApizrEnumerableRegistry registry)
          where TTransferApi : ITransferApi<IDictionary<string, object>>
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    typeParameters:
    - id: TTransferApi
      description: The Transfer api interface to manage
    return:
      type: Apizr.Transferring.Managing.IApizrTransferManager{{TTransferApi}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetTransferManagerFor(Of TTransferApi As ITransferApi(Of IDictionary(Of String, Object)))(registry As IApizrEnumerableRegistry) As IApizrTransferManager(Of TTransferApi)
  overload: Apizr.Extending.FileTransferRegistryExtensions.GetTransferManagerFor*
  nameWithType.vb: FileTransferRegistryExtensions.GetTransferManagerFor(Of TTransferApi)(IApizrEnumerableRegistry)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.GetTransferManagerFor(Of TTransferApi)(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  name.vb: GetTransferManagerFor(Of TTransferApi)(IApizrEnumerableRegistry)
- uid: Apizr.Extending.FileTransferRegistryExtensions.GetTransferManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.GetTransferManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  id: GetTransferManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: GetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry)
  nameWithType: FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams>(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  type: Method
  source:
    id: GetTransferManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 93
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nGet a transfer manager instance\n"
  example: []
  syntax:
    content: >-
      public static IApizrTransferManager<TTransferApi, TDownloadParams> GetTransferManagerFor<TTransferApi, TDownloadParams>(this IApizrEnumerableRegistry registry)
          where TTransferApi : ITransferApi<TDownloadParams>
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    typeParameters:
    - id: TTransferApi
      description: The Transfer api interface to manage
    - id: TDownloadParams
      description: The download query parameters type
    return:
      type: Apizr.Transferring.Managing.IApizrTransferManager{{TTransferApi},{TDownloadParams}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetTransferManagerFor(Of TTransferApi As ITransferApi(Of TDownloadParams), TDownloadParams)(registry As IApizrEnumerableRegistry) As IApizrTransferManager(Of TTransferApi, TDownloadParams)
  overload: Apizr.Extending.FileTransferRegistryExtensions.GetTransferManagerFor*
  nameWithType.vb: FileTransferRegistryExtensions.GetTransferManagerFor(Of TTransferApi, TDownloadParams)(IApizrEnumerableRegistry)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.GetTransferManagerFor(Of TTransferApi, TDownloadParams)(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  name.vb: GetTransferManagerFor(Of TTransferApi, TDownloadParams)(IApizrEnumerableRegistry)
- uid: Apizr.Extending.FileTransferRegistryExtensions.TryGetUploadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrUploadManager@)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.TryGetUploadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrUploadManager@)
  id: TryGetUploadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrUploadManager@)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: TryGetUploadManager(IApizrEnumerableRegistry, out IApizrUploadManager)
  nameWithType: FileTransferRegistryExtensions.TryGetUploadManager(IApizrEnumerableRegistry, out IApizrUploadManager)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.TryGetUploadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry, out Apizr.Transferring.Managing.IApizrUploadManager)
  type: Method
  source:
    id: TryGetUploadManager
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 108
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nGet an upload manager instance\n"
  example: []
  syntax:
    content: public static bool TryGetUploadManager(this IApizrEnumerableRegistry registry, out IApizrUploadManager manager)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    - id: manager
      type: Apizr.Transferring.Managing.IApizrUploadManager
      description: The upload manager instance
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryGetUploadManager(registry As IApizrEnumerableRegistry, ByRef manager As IApizrUploadManager) As Boolean
  overload: Apizr.Extending.FileTransferRegistryExtensions.TryGetUploadManager*
  nameWithType.vb: FileTransferRegistryExtensions.TryGetUploadManager(IApizrEnumerableRegistry, ByRef IApizrUploadManager)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.TryGetUploadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry, ByRef Apizr.Transferring.Managing.IApizrUploadManager)
  name.vb: TryGetUploadManager(IApizrEnumerableRegistry, ByRef IApizrUploadManager)
- uid: Apizr.Extending.FileTransferRegistryExtensions.TryGetUploadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrUploadManager{``0}@)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.TryGetUploadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrUploadManager{``0}@)
  id: TryGetUploadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrUploadManager{``0}@)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: TryGetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi>)
  nameWithType: FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi>)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, out Apizr.Transferring.Managing.IApizrUploadManager<TUploadApi>)
  type: Method
  source:
    id: TryGetUploadManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 119
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nGet an upload manager instance\n"
  example: []
  syntax:
    content: >-
      public static bool TryGetUploadManagerFor<TUploadApi>(this IApizrEnumerableRegistry registry, out IApizrUploadManager<TUploadApi> manager)
          where TUploadApi : IUploadApi
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    - id: manager
      type: Apizr.Transferring.Managing.IApizrUploadManager{{TUploadApi}}
      description: The upload manager instance
    typeParameters:
    - id: TUploadApi
      description: The upload api interface to manage
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryGetUploadManagerFor(Of TUploadApi As IUploadApi)(registry As IApizrEnumerableRegistry, ByRef manager As IApizrUploadManager(Of TUploadApi)) As Boolean
  overload: Apizr.Extending.FileTransferRegistryExtensions.TryGetUploadManagerFor*
  nameWithType.vb: FileTransferRegistryExtensions.TryGetUploadManagerFor(Of TUploadApi)(IApizrEnumerableRegistry, ByRef IApizrUploadManager(Of TUploadApi))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.TryGetUploadManagerFor(Of TUploadApi)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, ByRef Apizr.Transferring.Managing.IApizrUploadManager(Of TUploadApi))
  name.vb: TryGetUploadManagerFor(Of TUploadApi)(IApizrEnumerableRegistry, ByRef IApizrUploadManager(Of TUploadApi))
- uid: Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrDownloadManager@)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrDownloadManager@)
  id: TryGetDownloadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrDownloadManager@)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: TryGetDownloadManager(IApizrEnumerableRegistry, out IApizrDownloadManager)
  nameWithType: FileTransferRegistryExtensions.TryGetDownloadManager(IApizrEnumerableRegistry, out IApizrDownloadManager)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry, out Apizr.Transferring.Managing.IApizrDownloadManager)
  type: Method
  source:
    id: TryGetDownloadManager
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 130
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nGet a download manager instance\n"
  example: []
  syntax:
    content: public static bool TryGetDownloadManager(this IApizrEnumerableRegistry registry, out IApizrDownloadManager manager)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    - id: manager
      type: Apizr.Transferring.Managing.IApizrDownloadManager
      description: The download manager instance
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryGetDownloadManager(registry As IApizrEnumerableRegistry, ByRef manager As IApizrDownloadManager) As Boolean
  overload: Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManager*
  nameWithType.vb: FileTransferRegistryExtensions.TryGetDownloadManager(IApizrEnumerableRegistry, ByRef IApizrDownloadManager)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry, ByRef Apizr.Transferring.Managing.IApizrDownloadManager)
  name.vb: TryGetDownloadManager(IApizrEnumerableRegistry, ByRef IApizrDownloadManager)
- uid: Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrDownloadManager{``0}@)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrDownloadManager{``0}@)
  id: TryGetDownloadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrDownloadManager{``0}@)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: TryGetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi>)
  nameWithType: FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi>)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, out Apizr.Transferring.Managing.IApizrDownloadManager<TDownloadApi>)
  type: Method
  source:
    id: TryGetDownloadManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 140
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nGet a download manager instance\n"
  example: []
  syntax:
    content: >-
      public static bool TryGetDownloadManagerFor<TDownloadApi>(this IApizrEnumerableRegistry registry, out IApizrDownloadManager<TDownloadApi> manager)
          where TDownloadApi : IDownloadApi
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    - id: manager
      type: Apizr.Transferring.Managing.IApizrDownloadManager{{TDownloadApi}}
      description: The download manager instance
    typeParameters:
    - id: TDownloadApi
      description: The download api interface to manage
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryGetDownloadManagerFor(Of TDownloadApi As IDownloadApi)(registry As IApizrEnumerableRegistry, ByRef manager As IApizrDownloadManager(Of TDownloadApi)) As Boolean
  overload: Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManagerFor*
  nameWithType.vb: FileTransferRegistryExtensions.TryGetDownloadManagerFor(Of TDownloadApi)(IApizrEnumerableRegistry, ByRef IApizrDownloadManager(Of TDownloadApi))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManagerFor(Of TDownloadApi)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, ByRef Apizr.Transferring.Managing.IApizrDownloadManager(Of TDownloadApi))
  name.vb: TryGetDownloadManagerFor(Of TDownloadApi)(IApizrEnumerableRegistry, ByRef IApizrDownloadManager(Of TDownloadApi))
- uid: Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrDownloadManager{``0,``1}@)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrDownloadManager{``0,``1}@)
  id: TryGetDownloadManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrDownloadManager{``0,``1}@)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi, TDownloadParams>)
  nameWithType: FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi, TDownloadParams>)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, out Apizr.Transferring.Managing.IApizrDownloadManager<TDownloadApi, TDownloadParams>)
  type: Method
  source:
    id: TryGetDownloadManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 152
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nGet a download manager instance\n"
  example: []
  syntax:
    content: >-
      public static bool TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(this IApizrEnumerableRegistry registry, out IApizrDownloadManager<TDownloadApi, TDownloadParams> manager)
          where TDownloadApi : IDownloadApi<TDownloadParams>
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    - id: manager
      type: Apizr.Transferring.Managing.IApizrDownloadManager{{TDownloadApi},{TDownloadParams}}
      description: The download manager instance
    typeParameters:
    - id: TDownloadApi
      description: The download api interface to manage
    - id: TDownloadParams
      description: The download query parameters type
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryGetDownloadManagerFor(Of TDownloadApi As IDownloadApi(Of TDownloadParams), TDownloadParams)(registry As IApizrEnumerableRegistry, ByRef manager As IApizrDownloadManager(Of TDownloadApi, TDownloadParams)) As Boolean
  overload: Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManagerFor*
  nameWithType.vb: FileTransferRegistryExtensions.TryGetDownloadManagerFor(Of TDownloadApi, TDownloadParams)(IApizrEnumerableRegistry, ByRef IApizrDownloadManager(Of TDownloadApi, TDownloadParams))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManagerFor(Of TDownloadApi, TDownloadParams)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, ByRef Apizr.Transferring.Managing.IApizrDownloadManager(Of TDownloadApi, TDownloadParams))
  name.vb: TryGetDownloadManagerFor(Of TDownloadApi, TDownloadParams)(IApizrEnumerableRegistry, ByRef IApizrDownloadManager(Of TDownloadApi, TDownloadParams))
- uid: Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrTransferManager@)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrTransferManager@)
  id: TryGetTransferManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrTransferManager@)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: TryGetTransferManager(IApizrEnumerableRegistry, out IApizrTransferManager)
  nameWithType: FileTransferRegistryExtensions.TryGetTransferManager(IApizrEnumerableRegistry, out IApizrTransferManager)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry, out Apizr.Transferring.Managing.IApizrTransferManager)
  type: Method
  source:
    id: TryGetTransferManager
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 162
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nGet a transfer manager instance\n"
  example: []
  syntax:
    content: public static bool TryGetTransferManager(this IApizrEnumerableRegistry registry, out IApizrTransferManager manager)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    - id: manager
      type: Apizr.Transferring.Managing.IApizrTransferManager
      description: The transfer manager instance
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryGetTransferManager(registry As IApizrEnumerableRegistry, ByRef manager As IApizrTransferManager) As Boolean
  overload: Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManager*
  nameWithType.vb: FileTransferRegistryExtensions.TryGetTransferManager(IApizrEnumerableRegistry, ByRef IApizrTransferManager)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry, ByRef Apizr.Transferring.Managing.IApizrTransferManager)
  name.vb: TryGetTransferManager(IApizrEnumerableRegistry, ByRef IApizrTransferManager)
- uid: Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrTransferManager{``0}@)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrTransferManager{``0}@)
  id: TryGetTransferManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrTransferManager{``0}@)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: TryGetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi>)
  nameWithType: FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi>)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, out Apizr.Transferring.Managing.IApizrTransferManager<TTransferApi>)
  type: Method
  source:
    id: TryGetTransferManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 172
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nGet a transfer manager instance\n"
  example: []
  syntax:
    content: >-
      public static bool TryGetTransferManagerFor<TTransferApi>(this IApizrEnumerableRegistry registry, out IApizrTransferManager<TTransferApi> manager)
          where TTransferApi : ITransferApi
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    - id: manager
      type: Apizr.Transferring.Managing.IApizrTransferManager{{TTransferApi}}
      description: The transfer manager instance
    typeParameters:
    - id: TTransferApi
      description: The Transfer api interface to manage
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryGetTransferManagerFor(Of TTransferApi As ITransferApi)(registry As IApizrEnumerableRegistry, ByRef manager As IApizrTransferManager(Of TTransferApi)) As Boolean
  overload: Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManagerFor*
  nameWithType.vb: FileTransferRegistryExtensions.TryGetTransferManagerFor(Of TTransferApi)(IApizrEnumerableRegistry, ByRef IApizrTransferManager(Of TTransferApi))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManagerFor(Of TTransferApi)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, ByRef Apizr.Transferring.Managing.IApizrTransferManager(Of TTransferApi))
  name.vb: TryGetTransferManagerFor(Of TTransferApi)(IApizrEnumerableRegistry, ByRef IApizrTransferManager(Of TTransferApi))
- uid: Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrTransferManager{``0,``1}@)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrTransferManager{``0,``1}@)
  id: TryGetTransferManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Apizr.Transferring.Managing.IApizrTransferManager{``0,``1}@)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: TryGetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams>)
  nameWithType: FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams>)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, out Apizr.Transferring.Managing.IApizrTransferManager<TTransferApi, TDownloadParams>)
  type: Method
  source:
    id: TryGetTransferManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 184
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nGet a transfer manager instance\n"
  example: []
  syntax:
    content: >-
      public static bool TryGetTransferManagerFor<TTransferApi, TDownloadParams>(this IApizrEnumerableRegistry registry, out IApizrTransferManager<TTransferApi, TDownloadParams> manager)
          where TTransferApi : ITransferApi<TDownloadParams>
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    - id: manager
      type: Apizr.Transferring.Managing.IApizrTransferManager{{TTransferApi},{TDownloadParams}}
      description: The transfer manager instance
    typeParameters:
    - id: TTransferApi
      description: The Transfer api interface to manage
    - id: TDownloadParams
      description: The download query parameters type
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryGetTransferManagerFor(Of TTransferApi As ITransferApi(Of TDownloadParams), TDownloadParams)(registry As IApizrEnumerableRegistry, ByRef manager As IApizrTransferManager(Of TTransferApi, TDownloadParams)) As Boolean
  overload: Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManagerFor*
  nameWithType.vb: FileTransferRegistryExtensions.TryGetTransferManagerFor(Of TTransferApi, TDownloadParams)(IApizrEnumerableRegistry, ByRef IApizrTransferManager(Of TTransferApi, TDownloadParams))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManagerFor(Of TTransferApi, TDownloadParams)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, ByRef Apizr.Transferring.Managing.IApizrTransferManager(Of TTransferApi, TDownloadParams))
  name.vb: TryGetTransferManagerFor(Of TTransferApi, TDownloadParams)(IApizrEnumerableRegistry, ByRef IApizrTransferManager(Of TTransferApi, TDownloadParams))
- uid: Apizr.Extending.FileTransferRegistryExtensions.ContainsUploadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.ContainsUploadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  id: ContainsUploadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: ContainsUploadManager(IApizrEnumerableRegistry)
  nameWithType: FileTransferRegistryExtensions.ContainsUploadManager(IApizrEnumerableRegistry)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.ContainsUploadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  type: Method
  source:
    id: ContainsUploadManager
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 198
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nCheck if registry contains a manager for the default <xref href=\"Apizr.Transferring.Requesting.IUploadApi\" data-throw-if-not-resolved=\"false\"></xref> api type\n"
  example: []
  syntax:
    content: public static bool ContainsUploadManager(this IApizrEnumerableRegistry registry)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContainsUploadManager(registry As IApizrEnumerableRegistry) As Boolean
  overload: Apizr.Extending.FileTransferRegistryExtensions.ContainsUploadManager*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Apizr.Extending.FileTransferRegistryExtensions.ContainsUploadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.ContainsUploadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  id: ContainsUploadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: ContainsUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry)
  nameWithType: FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi>(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  type: Method
  source:
    id: ContainsUploadManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 208
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nCheck if registry contains a manager for <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TUploadApi</code> api type\n"
  example: []
  syntax:
    content: >-
      public static bool ContainsUploadManagerFor<TUploadApi>(this IApizrEnumerableRegistry registry)
          where TUploadApi : IUploadApi
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    typeParameters:
    - id: TUploadApi
      description: The upload api interface to manage
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContainsUploadManagerFor(Of TUploadApi As IUploadApi)(registry As IApizrEnumerableRegistry) As Boolean
  overload: Apizr.Extending.FileTransferRegistryExtensions.ContainsUploadManagerFor*
  nameWithType.vb: FileTransferRegistryExtensions.ContainsUploadManagerFor(Of TUploadApi)(IApizrEnumerableRegistry)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.ContainsUploadManagerFor(Of TUploadApi)(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  name.vb: ContainsUploadManagerFor(Of TUploadApi)(IApizrEnumerableRegistry)
- uid: Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  id: ContainsDownloadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: ContainsDownloadManager(IApizrEnumerableRegistry)
  nameWithType: FileTransferRegistryExtensions.ContainsDownloadManager(IApizrEnumerableRegistry)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  type: Method
  source:
    id: ContainsDownloadManager
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 218
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nCheck if registry contains a manager for the default <xref href=\"Apizr.Transferring.Requesting.IDownloadApi\" data-throw-if-not-resolved=\"false\"></xref> api type\n"
  example: []
  syntax:
    content: public static bool ContainsDownloadManager(this IApizrEnumerableRegistry registry)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContainsDownloadManager(registry As IApizrEnumerableRegistry) As Boolean
  overload: Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManager*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  id: ContainsDownloadManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: ContainsDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry)
  nameWithType: FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi>(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  type: Method
  source:
    id: ContainsDownloadManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 228
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nCheck if registry contains a manager for <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TDownloadApi</code> api type\n"
  example: []
  syntax:
    content: >-
      public static bool ContainsDownloadManagerFor<TDownloadApi>(this IApizrEnumerableRegistry registry)
          where TDownloadApi : IDownloadApi
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    typeParameters:
    - id: TDownloadApi
      description: The download api interface to manage
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContainsDownloadManagerFor(Of TDownloadApi As IDownloadApi)(registry As IApizrEnumerableRegistry) As Boolean
  overload: Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManagerFor*
  nameWithType.vb: FileTransferRegistryExtensions.ContainsDownloadManagerFor(Of TDownloadApi)(IApizrEnumerableRegistry)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManagerFor(Of TDownloadApi)(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  name.vb: ContainsDownloadManagerFor(Of TDownloadApi)(IApizrEnumerableRegistry)
- uid: Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  id: ContainsDownloadManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry)
  nameWithType: FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  type: Method
  source:
    id: ContainsDownloadManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 239
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nCheck if registry contains a manager for <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TDownloadApi</code> api type\n"
  example: []
  syntax:
    content: >-
      public static bool ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(this IApizrEnumerableRegistry registry)
          where TDownloadApi : IDownloadApi<TDownloadParams>
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    typeParameters:
    - id: TDownloadApi
      description: The download api interface to manage
    - id: TDownloadParams
      description: The download query parameters type
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContainsDownloadManagerFor(Of TDownloadApi As IDownloadApi(Of TDownloadParams), TDownloadParams)(registry As IApizrEnumerableRegistry) As Boolean
  overload: Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManagerFor*
  nameWithType.vb: FileTransferRegistryExtensions.ContainsDownloadManagerFor(Of TDownloadApi, TDownloadParams)(IApizrEnumerableRegistry)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManagerFor(Of TDownloadApi, TDownloadParams)(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  name.vb: ContainsDownloadManagerFor(Of TDownloadApi, TDownloadParams)(IApizrEnumerableRegistry)
- uid: Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  id: ContainsTransferManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: ContainsTransferManager(IApizrEnumerableRegistry)
  nameWithType: FileTransferRegistryExtensions.ContainsTransferManager(IApizrEnumerableRegistry)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManager(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  type: Method
  source:
    id: ContainsTransferManager
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 248
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nCheck if registry contains a manager for the default <xref href=\"Apizr.Transferring.Requesting.ITransferApi\" data-throw-if-not-resolved=\"false\"></xref> api type\n"
  example: []
  syntax:
    content: public static bool ContainsTransferManager(this IApizrEnumerableRegistry registry)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContainsTransferManager(registry As IApizrEnumerableRegistry) As Boolean
  overload: Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManager*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  id: ContainsTransferManagerFor``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: ContainsTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry)
  nameWithType: FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi>(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  type: Method
  source:
    id: ContainsTransferManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 258
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nCheck if registry contains a manager for <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TTransferApi</code> api type\n"
  example: []
  syntax:
    content: >-
      public static bool ContainsTransferManagerFor<TTransferApi>(this IApizrEnumerableRegistry registry)
          where TTransferApi : ITransferApi
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    typeParameters:
    - id: TTransferApi
      description: The Transfer api interface to manage
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContainsTransferManagerFor(Of TTransferApi As ITransferApi)(registry As IApizrEnumerableRegistry) As Boolean
  overload: Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManagerFor*
  nameWithType.vb: FileTransferRegistryExtensions.ContainsTransferManagerFor(Of TTransferApi)(IApizrEnumerableRegistry)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManagerFor(Of TTransferApi)(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  name.vb: ContainsTransferManagerFor(Of TTransferApi)(IApizrEnumerableRegistry)
- uid: Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  id: ContainsTransferManagerFor``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: ContainsTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry)
  nameWithType: FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams>(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  type: Method
  source:
    id: ContainsTransferManagerFor
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 269
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nCheck if registry contains a manager for <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TTransferApi</code> api type\n"
  example: []
  syntax:
    content: >-
      public static bool ContainsTransferManagerFor<TTransferApi, TDownloadParams>(this IApizrEnumerableRegistry registry)
          where TTransferApi : ITransferApi<TDownloadParams>
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry to get the manager from
    typeParameters:
    - id: TTransferApi
      description: The Transfer api interface to manage
    - id: TDownloadParams
      description: The download query parameters type
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ContainsTransferManagerFor(Of TTransferApi As ITransferApi(Of TDownloadParams), TDownloadParams)(registry As IApizrEnumerableRegistry) As Boolean
  overload: Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManagerFor*
  nameWithType.vb: FileTransferRegistryExtensions.ContainsTransferManagerFor(Of TTransferApi, TDownloadParams)(IApizrEnumerableRegistry)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManagerFor(Of TTransferApi, TDownloadParams)(Apizr.Configuring.Registry.IApizrEnumerableRegistry)
  name.vb: ContainsTransferManagerFor(Of TTransferApi, TDownloadParams)(IApizrEnumerableRegistry)
- uid: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.ByteArrayPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.UploadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.ByteArrayPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: UploadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.ByteArrayPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: UploadAsync(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>)
  nameWithType: FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry, Refit.ByteArrayPart, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    id: UploadAsync
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 285
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nUpload a file from its bytes data\n"
  example: []
  syntax:
    content: public static Task UploadAsync(this IApizrEnumerableRegistry registry, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: byteArrayPart
      type: Refit.ByteArrayPart
      description: The file bytes data
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Some request options
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UploadAsync(registry As IApizrEnumerableRegistry, byteArrayPart As ByteArrayPart, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task
  overload: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync*
  nameWithType.vb: FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, ByteArrayPart, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry, Refit.ByteArrayPart, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: UploadAsync(IApizrEnumerableRegistry, ByteArrayPart, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.ByteArrayPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.UploadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.ByteArrayPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: UploadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.ByteArrayPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: UploadAsync<TUploadApi>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>)
  nameWithType: FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync<TUploadApi>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, Refit.ByteArrayPart, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    id: UploadAsync
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 300
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nUpload a file from its bytes data\n"
  example: []
  syntax:
    content: >-
      public static Task UploadAsync<TUploadApi>(this IApizrEnumerableRegistry registry, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TUploadApi : IUploadApi
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: byteArrayPart
      type: Refit.ByteArrayPart
      description: The file bytes data
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Some request options
    typeParameters:
    - id: TUploadApi
      description: The upload api type to manage
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UploadAsync(Of TUploadApi As IUploadApi)(registry As IApizrEnumerableRegistry, byteArrayPart As ByteArrayPart, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task
  overload: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync*
  nameWithType.vb: FileTransferRegistryExtensions.UploadAsync(Of TUploadApi)(IApizrEnumerableRegistry, ByteArrayPart, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync(Of TUploadApi)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, Refit.ByteArrayPart, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: UploadAsync(Of TUploadApi)(IApizrEnumerableRegistry, ByteArrayPart, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.StreamPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.UploadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.StreamPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: UploadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.StreamPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: UploadAsync(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>)
  nameWithType: FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry, Refit.StreamPart, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    id: UploadAsync
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 312
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nUpload a file from its stream data\n"
  example: []
  syntax:
    content: public static Task UploadAsync(this IApizrEnumerableRegistry registry, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: streamPart
      type: Refit.StreamPart
      description: The file stream data
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Some request options
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UploadAsync(registry As IApizrEnumerableRegistry, streamPart As StreamPart, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task
  overload: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync*
  nameWithType.vb: FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, StreamPart, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry, Refit.StreamPart, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: UploadAsync(IApizrEnumerableRegistry, StreamPart, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.StreamPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.UploadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.StreamPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: UploadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.StreamPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: UploadAsync<TUploadApi>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>)
  nameWithType: FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync<TUploadApi>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, Refit.StreamPart, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    id: UploadAsync
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 326
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nUpload a file from its stream data\n"
  example: []
  syntax:
    content: >-
      public static Task UploadAsync<TUploadApi>(this IApizrEnumerableRegistry registry, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TUploadApi : IUploadApi
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: streamPart
      type: Refit.StreamPart
      description: The file stream data
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Some request options
    typeParameters:
    - id: TUploadApi
      description: The upload api type to manage
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UploadAsync(Of TUploadApi As IUploadApi)(registry As IApizrEnumerableRegistry, streamPart As StreamPart, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task
  overload: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync*
  nameWithType.vb: FileTransferRegistryExtensions.UploadAsync(Of TUploadApi)(IApizrEnumerableRegistry, StreamPart, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync(Of TUploadApi)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, Refit.StreamPart, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: UploadAsync(Of TUploadApi)(IApizrEnumerableRegistry, StreamPart, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.FileInfoPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.UploadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.FileInfoPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: UploadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.FileInfoPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: UploadAsync(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>)
  nameWithType: FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry, Refit.FileInfoPart, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    id: UploadAsync
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 337
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nUpload a file from its file info data\n"
  example: []
  syntax:
    content: public static Task UploadAsync(this IApizrEnumerableRegistry registry, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: fileInfoPart
      type: Refit.FileInfoPart
      description: The file info data
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Some request options
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UploadAsync(registry As IApizrEnumerableRegistry, fileInfoPart As FileInfoPart, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task
  overload: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync*
  nameWithType.vb: FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, FileInfoPart, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry, Refit.FileInfoPart, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: UploadAsync(IApizrEnumerableRegistry, FileInfoPart, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.FileInfoPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.UploadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.FileInfoPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: UploadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,Refit.FileInfoPart,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: UploadAsync<TUploadApi>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>)
  nameWithType: FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync<TUploadApi>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, Refit.FileInfoPart, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    id: UploadAsync
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 351
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nUpload a file from its file info data\n"
  example: []
  syntax:
    content: >-
      public static Task UploadAsync<TUploadApi>(this IApizrEnumerableRegistry registry, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TUploadApi : IUploadApi
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: fileInfoPart
      type: Refit.FileInfoPart
      description: The file info data
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Some request options
    typeParameters:
    - id: TUploadApi
      description: The upload api type to manage
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UploadAsync(Of TUploadApi As IUploadApi)(registry As IApizrEnumerableRegistry, fileInfoPart As FileInfoPart, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task
  overload: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync*
  nameWithType.vb: FileTransferRegistryExtensions.UploadAsync(Of TUploadApi)(IApizrEnumerableRegistry, FileInfoPart, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync(Of TUploadApi)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, Refit.FileInfoPart, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: UploadAsync(Of TUploadApi)(IApizrEnumerableRegistry, FileInfoPart, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: DownloadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: DownloadAsync(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>)
  nameWithType: FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.IO.FileInfo, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    id: DownloadAsync
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 366
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nDownload a file\n"
  example: []
  syntax:
    content: public static Task<FileInfo> DownloadAsync(this IApizrEnumerableRegistry registry, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: fileInfo
      type: System.IO.FileInfo
      description: Some information about the file to download
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Some request options
    return:
      type: System.Threading.Tasks.Task{System.IO.FileInfo}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DownloadAsync(registry As IApizrEnumerableRegistry, fileInfo As FileInfo, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of FileInfo)
  overload: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync*
  nameWithType.vb: FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.IO.FileInfo, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: DownloadAsync(IApizrEnumerableRegistry, FileInfo, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: DownloadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: DownloadAsync(IApizrEnumerableRegistry, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>)
  nameWithType: FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.IO.FileInfo, System.Collections.Generic.IDictionary<System.String, System.Object>, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    id: DownloadAsync
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 380
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nDownload a file with custom query parameters\n"
  example: []
  syntax:
    content: public static Task<FileInfo> DownloadAsync(this IApizrEnumerableRegistry registry, FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: fileInfo
      type: System.IO.FileInfo
      description: Some information about the file to download
    - id: downloadParams
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: Some custom query parameters
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Some request options
    return:
      type: System.Threading.Tasks.Task{System.IO.FileInfo}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DownloadAsync(registry As IApizrEnumerableRegistry, fileInfo As FileInfo, downloadParams As IDictionary(Of String, Object), optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of FileInfo)
  overload: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync*
  nameWithType.vb: FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, IDictionary(Of String, Object), Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.IO.FileInfo, System.Collections.Generic.IDictionary(Of System.String, System.Object), System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: DownloadAsync(IApizrEnumerableRegistry, FileInfo, IDictionary(Of String, Object), Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: DownloadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>)
  nameWithType: FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.IO.FileInfo, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    id: DownloadAsync
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 394
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nDownload a file\n"
  example: []
  syntax:
    content: >-
      public static Task<FileInfo> DownloadAsync<TDownloadApi>(this IApizrEnumerableRegistry registry, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TDownloadApi : IDownloadApi
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: fileInfo
      type: System.IO.FileInfo
      description: Some information about the file to download
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Some request options
    typeParameters:
    - id: TDownloadApi
      description: The download api type to manage
    return:
      type: System.Threading.Tasks.Task{System.IO.FileInfo}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DownloadAsync(Of TDownloadApi As IDownloadApi)(registry As IApizrEnumerableRegistry, fileInfo As FileInfo, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of FileInfo)
  overload: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync*
  nameWithType.vb: FileTransferRegistryExtensions.DownloadAsync(Of TDownloadApi)(IApizrEnumerableRegistry, FileInfo, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync(Of TDownloadApi)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.IO.FileInfo, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: DownloadAsync(Of TDownloadApi)(IApizrEnumerableRegistry, FileInfo, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: DownloadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>)
  nameWithType: FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.IO.FileInfo, System.Collections.Generic.IDictionary<System.String, System.Object>, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    id: DownloadAsync
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 408
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nDownload a file with custom query parameters\n"
  example: []
  syntax:
    content: >-
      public static Task<FileInfo> DownloadAsync<TDownloadApi>(this IApizrEnumerableRegistry registry, FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TDownloadApi : IDownloadApi
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: fileInfo
      type: System.IO.FileInfo
      description: Some information about the file to download
    - id: downloadParams
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: Some custom query parameters
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Some request options
    typeParameters:
    - id: TDownloadApi
      description: The download api type to manage
    return:
      type: System.Threading.Tasks.Task{System.IO.FileInfo}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DownloadAsync(Of TDownloadApi As IDownloadApi)(registry As IApizrEnumerableRegistry, fileInfo As FileInfo, downloadParams As IDictionary(Of String, Object), optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of FileInfo)
  overload: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync*
  nameWithType.vb: FileTransferRegistryExtensions.DownloadAsync(Of TDownloadApi)(IApizrEnumerableRegistry, FileInfo, IDictionary(Of String, Object), Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync(Of TDownloadApi)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.IO.FileInfo, System.Collections.Generic.IDictionary(Of System.String, System.Object), System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: DownloadAsync(Of TDownloadApi)(IApizrEnumerableRegistry, FileInfo, IDictionary(Of String, Object), Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: DownloadAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>)
  nameWithType: FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.IO.FileInfo, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    id: DownloadAsync
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 422
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nDownload a file\n"
  example: []
  syntax:
    content: >-
      public static Task<FileInfo> DownloadAsync<TDownloadApi, TDownloadParams>(this IApizrEnumerableRegistry registry, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TDownloadApi : IDownloadApi<TDownloadParams>
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: fileInfo
      type: System.IO.FileInfo
      description: Some information about the file to download
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Some request options
    typeParameters:
    - id: TDownloadApi
      description: The download api type to manage
    - id: TDownloadParams
      description: The query parameters type
    return:
      type: System.Threading.Tasks.Task{System.IO.FileInfo}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DownloadAsync(Of TDownloadApi As IDownloadApi(Of TDownloadParams), TDownloadParams)(registry As IApizrEnumerableRegistry, fileInfo As FileInfo, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of FileInfo)
  overload: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync*
  nameWithType.vb: FileTransferRegistryExtensions.DownloadAsync(Of TDownloadApi, TDownloadParams)(IApizrEnumerableRegistry, FileInfo, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync(Of TDownloadApi, TDownloadParams)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.IO.FileInfo, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: DownloadAsync(Of TDownloadApi, TDownloadParams)(IApizrEnumerableRegistry, FileInfo, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: DownloadAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.IO.FileInfo,``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.Extending.FileTransferRegistryExtensions
  langs:
  - csharp
  - vb
  name: DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>)
  nameWithType: FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.IO.FileInfo, TDownloadParams, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    id: DownloadAsync
    path: C:\Dev\Community\Apizr\Apizr\Src\Transferring\Apizr.Integrations.FileTransfer\Extending\FileTransferRegistryExtensions.cs
    startLine: 437
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Extending
  summary: "\nDownload a file with custom query parameters\n"
  example: []
  syntax:
    content: >-
      public static Task<FileInfo> DownloadAsync<TDownloadApi, TDownloadParams>(this IApizrEnumerableRegistry registry, FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
          where TDownloadApi : IDownloadApi<TDownloadParams>
    parameters:
    - id: registry
      type: Apizr.Configuring.Registry.IApizrEnumerableRegistry
      description: The registry
    - id: fileInfo
      type: System.IO.FileInfo
      description: Some information about the file to download
    - id: downloadParams
      type: '{TDownloadParams}'
      description: Some custom query parameters
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Some request options
    typeParameters:
    - id: TDownloadApi
      description: The download api type to manage
    - id: TDownloadParams
      description: The query parameters type
    return:
      type: System.Threading.Tasks.Task{System.IO.FileInfo}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DownloadAsync(Of TDownloadApi As IDownloadApi(Of TDownloadParams), TDownloadParams)(registry As IApizrEnumerableRegistry, fileInfo As FileInfo, downloadParams As TDownloadParams, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of FileInfo)
  overload: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync*
  nameWithType.vb: FileTransferRegistryExtensions.DownloadAsync(Of TDownloadApi, TDownloadParams)(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action(Of IApizrRequestOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync(Of TDownloadApi, TDownloadParams)(Apizr.Configuring.Registry.IApizrEnumerableRegistry, System.IO.FileInfo, TDownloadParams, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: DownloadAsync(Of TDownloadApi, TDownloadParams)(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action(Of IApizrRequestOptionsBuilder))
references:
- uid: Apizr.Extending
  commentId: N:Apizr.Extending
  name: Apizr.Extending
  nameWithType: Apizr.Extending
  fullName: Apizr.Extending
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Apizr.Extending.FileTransferRegistryExtensions.GetUploadManager*
  commentId: Overload:Apizr.Extending.FileTransferRegistryExtensions.GetUploadManager
  name: GetUploadManager
  nameWithType: FileTransferRegistryExtensions.GetUploadManager
  fullName: Apizr.Extending.FileTransferRegistryExtensions.GetUploadManager
- uid: Apizr.Configuring.Registry.IApizrEnumerableRegistry
  commentId: T:Apizr.Configuring.Registry.IApizrEnumerableRegistry
  parent: Apizr.Configuring.Registry
  name: IApizrEnumerableRegistry
  nameWithType: IApizrEnumerableRegistry
  fullName: Apizr.Configuring.Registry.IApizrEnumerableRegistry
- uid: Apizr.Transferring.Managing.IApizrUploadManager
  commentId: T:Apizr.Transferring.Managing.IApizrUploadManager
  parent: Apizr.Transferring.Managing
  name: IApizrUploadManager
  nameWithType: IApizrUploadManager
  fullName: Apizr.Transferring.Managing.IApizrUploadManager
- uid: Apizr.Configuring.Registry
  commentId: N:Apizr.Configuring.Registry
  name: Apizr.Configuring.Registry
  nameWithType: Apizr.Configuring.Registry
  fullName: Apizr.Configuring.Registry
- uid: Apizr.Transferring.Managing
  commentId: N:Apizr.Transferring.Managing
  name: Apizr.Transferring.Managing
  nameWithType: Apizr.Transferring.Managing
  fullName: Apizr.Transferring.Managing
- uid: Apizr.Extending.FileTransferRegistryExtensions.GetUploadManagerFor*
  commentId: Overload:Apizr.Extending.FileTransferRegistryExtensions.GetUploadManagerFor
  name: GetUploadManagerFor
  nameWithType: FileTransferRegistryExtensions.GetUploadManagerFor
  fullName: Apizr.Extending.FileTransferRegistryExtensions.GetUploadManagerFor
- uid: Apizr.Transferring.Managing.IApizrUploadManager{{TUploadApi}}
  commentId: T:Apizr.Transferring.Managing.IApizrUploadManager{``0}
  parent: Apizr.Transferring.Managing
  definition: Apizr.Transferring.Managing.IApizrUploadManager`1
  name: IApizrUploadManager<TUploadApi>
  nameWithType: IApizrUploadManager<TUploadApi>
  fullName: Apizr.Transferring.Managing.IApizrUploadManager<TUploadApi>
  nameWithType.vb: IApizrUploadManager(Of TUploadApi)
  fullName.vb: Apizr.Transferring.Managing.IApizrUploadManager(Of TUploadApi)
  name.vb: IApizrUploadManager(Of TUploadApi)
  spec.csharp:
  - uid: Apizr.Transferring.Managing.IApizrUploadManager`1
    name: IApizrUploadManager
    nameWithType: IApizrUploadManager
    fullName: Apizr.Transferring.Managing.IApizrUploadManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUploadApi
    nameWithType: TUploadApi
    fullName: TUploadApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Transferring.Managing.IApizrUploadManager`1
    name: IApizrUploadManager
    nameWithType: IApizrUploadManager
    fullName: Apizr.Transferring.Managing.IApizrUploadManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUploadApi
    nameWithType: TUploadApi
    fullName: TUploadApi
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Transferring.Managing.IApizrUploadManager`1
  commentId: T:Apizr.Transferring.Managing.IApizrUploadManager`1
  name: IApizrUploadManager<TUploadApi>
  nameWithType: IApizrUploadManager<TUploadApi>
  fullName: Apizr.Transferring.Managing.IApizrUploadManager<TUploadApi>
  nameWithType.vb: IApizrUploadManager(Of TUploadApi)
  fullName.vb: Apizr.Transferring.Managing.IApizrUploadManager(Of TUploadApi)
  name.vb: IApizrUploadManager(Of TUploadApi)
  spec.csharp:
  - uid: Apizr.Transferring.Managing.IApizrUploadManager`1
    name: IApizrUploadManager
    nameWithType: IApizrUploadManager
    fullName: Apizr.Transferring.Managing.IApizrUploadManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUploadApi
    nameWithType: TUploadApi
    fullName: TUploadApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Transferring.Managing.IApizrUploadManager`1
    name: IApizrUploadManager
    nameWithType: IApizrUploadManager
    fullName: Apizr.Transferring.Managing.IApizrUploadManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUploadApi
    nameWithType: TUploadApi
    fullName: TUploadApi
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManager*
  commentId: Overload:Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManager
  name: GetDownloadManager
  nameWithType: FileTransferRegistryExtensions.GetDownloadManager
  fullName: Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManager
- uid: Apizr.Transferring.Managing.IApizrDownloadManager
  commentId: T:Apizr.Transferring.Managing.IApizrDownloadManager
  parent: Apizr.Transferring.Managing
  name: IApizrDownloadManager
  nameWithType: IApizrDownloadManager
  fullName: Apizr.Transferring.Managing.IApizrDownloadManager
- uid: Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManagerFor*
  commentId: Overload:Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManagerFor
  name: GetDownloadManagerFor
  nameWithType: FileTransferRegistryExtensions.GetDownloadManagerFor
  fullName: Apizr.Extending.FileTransferRegistryExtensions.GetDownloadManagerFor
- uid: Apizr.Transferring.Managing.IApizrDownloadManager{{TDownloadApi}}
  commentId: T:Apizr.Transferring.Managing.IApizrDownloadManager{``0}
  parent: Apizr.Transferring.Managing
  definition: Apizr.Transferring.Managing.IApizrDownloadManager`1
  name: IApizrDownloadManager<TDownloadApi>
  nameWithType: IApizrDownloadManager<TDownloadApi>
  fullName: Apizr.Transferring.Managing.IApizrDownloadManager<TDownloadApi>
  nameWithType.vb: IApizrDownloadManager(Of TDownloadApi)
  fullName.vb: Apizr.Transferring.Managing.IApizrDownloadManager(Of TDownloadApi)
  name.vb: IApizrDownloadManager(Of TDownloadApi)
  spec.csharp:
  - uid: Apizr.Transferring.Managing.IApizrDownloadManager`1
    name: IApizrDownloadManager
    nameWithType: IApizrDownloadManager
    fullName: Apizr.Transferring.Managing.IApizrDownloadManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TDownloadApi
    nameWithType: TDownloadApi
    fullName: TDownloadApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Transferring.Managing.IApizrDownloadManager`1
    name: IApizrDownloadManager
    nameWithType: IApizrDownloadManager
    fullName: Apizr.Transferring.Managing.IApizrDownloadManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDownloadApi
    nameWithType: TDownloadApi
    fullName: TDownloadApi
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Transferring.Managing.IApizrDownloadManager`1
  commentId: T:Apizr.Transferring.Managing.IApizrDownloadManager`1
  name: IApizrDownloadManager<TDownloadApi>
  nameWithType: IApizrDownloadManager<TDownloadApi>
  fullName: Apizr.Transferring.Managing.IApizrDownloadManager<TDownloadApi>
  nameWithType.vb: IApizrDownloadManager(Of TDownloadApi)
  fullName.vb: Apizr.Transferring.Managing.IApizrDownloadManager(Of TDownloadApi)
  name.vb: IApizrDownloadManager(Of TDownloadApi)
  spec.csharp:
  - uid: Apizr.Transferring.Managing.IApizrDownloadManager`1
    name: IApizrDownloadManager
    nameWithType: IApizrDownloadManager
    fullName: Apizr.Transferring.Managing.IApizrDownloadManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TDownloadApi
    nameWithType: TDownloadApi
    fullName: TDownloadApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Transferring.Managing.IApizrDownloadManager`1
    name: IApizrDownloadManager
    nameWithType: IApizrDownloadManager
    fullName: Apizr.Transferring.Managing.IApizrDownloadManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDownloadApi
    nameWithType: TDownloadApi
    fullName: TDownloadApi
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Transferring.Managing.IApizrDownloadManager{{TDownloadApi},{TDownloadParams}}
  commentId: T:Apizr.Transferring.Managing.IApizrDownloadManager{``0,``1}
  parent: Apizr.Transferring.Managing
  definition: Apizr.Transferring.Managing.IApizrDownloadManager`2
  name: IApizrDownloadManager<TDownloadApi, TDownloadParams>
  nameWithType: IApizrDownloadManager<TDownloadApi, TDownloadParams>
  fullName: Apizr.Transferring.Managing.IApizrDownloadManager<TDownloadApi, TDownloadParams>
  nameWithType.vb: IApizrDownloadManager(Of TDownloadApi, TDownloadParams)
  fullName.vb: Apizr.Transferring.Managing.IApizrDownloadManager(Of TDownloadApi, TDownloadParams)
  name.vb: IApizrDownloadManager(Of TDownloadApi, TDownloadParams)
  spec.csharp:
  - uid: Apizr.Transferring.Managing.IApizrDownloadManager`2
    name: IApizrDownloadManager
    nameWithType: IApizrDownloadManager
    fullName: Apizr.Transferring.Managing.IApizrDownloadManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TDownloadApi
    nameWithType: TDownloadApi
    fullName: TDownloadApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDownloadParams
    nameWithType: TDownloadParams
    fullName: TDownloadParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Transferring.Managing.IApizrDownloadManager`2
    name: IApizrDownloadManager
    nameWithType: IApizrDownloadManager
    fullName: Apizr.Transferring.Managing.IApizrDownloadManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDownloadApi
    nameWithType: TDownloadApi
    fullName: TDownloadApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDownloadParams
    nameWithType: TDownloadParams
    fullName: TDownloadParams
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Transferring.Managing.IApizrDownloadManager`2
  commentId: T:Apizr.Transferring.Managing.IApizrDownloadManager`2
  name: IApizrDownloadManager<TDownloadApi, TDownloadParams>
  nameWithType: IApizrDownloadManager<TDownloadApi, TDownloadParams>
  fullName: Apizr.Transferring.Managing.IApizrDownloadManager<TDownloadApi, TDownloadParams>
  nameWithType.vb: IApizrDownloadManager(Of TDownloadApi, TDownloadParams)
  fullName.vb: Apizr.Transferring.Managing.IApizrDownloadManager(Of TDownloadApi, TDownloadParams)
  name.vb: IApizrDownloadManager(Of TDownloadApi, TDownloadParams)
  spec.csharp:
  - uid: Apizr.Transferring.Managing.IApizrDownloadManager`2
    name: IApizrDownloadManager
    nameWithType: IApizrDownloadManager
    fullName: Apizr.Transferring.Managing.IApizrDownloadManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TDownloadApi
    nameWithType: TDownloadApi
    fullName: TDownloadApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDownloadParams
    nameWithType: TDownloadParams
    fullName: TDownloadParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Transferring.Managing.IApizrDownloadManager`2
    name: IApizrDownloadManager
    nameWithType: IApizrDownloadManager
    fullName: Apizr.Transferring.Managing.IApizrDownloadManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDownloadApi
    nameWithType: TDownloadApi
    fullName: TDownloadApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDownloadParams
    nameWithType: TDownloadParams
    fullName: TDownloadParams
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Extending.FileTransferRegistryExtensions.GetTransferManager*
  commentId: Overload:Apizr.Extending.FileTransferRegistryExtensions.GetTransferManager
  name: GetTransferManager
  nameWithType: FileTransferRegistryExtensions.GetTransferManager
  fullName: Apizr.Extending.FileTransferRegistryExtensions.GetTransferManager
- uid: Apizr.Transferring.Managing.IApizrTransferManager
  commentId: T:Apizr.Transferring.Managing.IApizrTransferManager
  parent: Apizr.Transferring.Managing
  name: IApizrTransferManager
  nameWithType: IApizrTransferManager
  fullName: Apizr.Transferring.Managing.IApizrTransferManager
- uid: Apizr.Extending.FileTransferRegistryExtensions.GetTransferManagerFor*
  commentId: Overload:Apizr.Extending.FileTransferRegistryExtensions.GetTransferManagerFor
  name: GetTransferManagerFor
  nameWithType: FileTransferRegistryExtensions.GetTransferManagerFor
  fullName: Apizr.Extending.FileTransferRegistryExtensions.GetTransferManagerFor
- uid: Apizr.Transferring.Managing.IApizrTransferManager{{TTransferApi}}
  commentId: T:Apizr.Transferring.Managing.IApizrTransferManager{``0}
  parent: Apizr.Transferring.Managing
  definition: Apizr.Transferring.Managing.IApizrTransferManager`1
  name: IApizrTransferManager<TTransferApi>
  nameWithType: IApizrTransferManager<TTransferApi>
  fullName: Apizr.Transferring.Managing.IApizrTransferManager<TTransferApi>
  nameWithType.vb: IApizrTransferManager(Of TTransferApi)
  fullName.vb: Apizr.Transferring.Managing.IApizrTransferManager(Of TTransferApi)
  name.vb: IApizrTransferManager(Of TTransferApi)
  spec.csharp:
  - uid: Apizr.Transferring.Managing.IApizrTransferManager`1
    name: IApizrTransferManager
    nameWithType: IApizrTransferManager
    fullName: Apizr.Transferring.Managing.IApizrTransferManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TTransferApi
    nameWithType: TTransferApi
    fullName: TTransferApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Transferring.Managing.IApizrTransferManager`1
    name: IApizrTransferManager
    nameWithType: IApizrTransferManager
    fullName: Apizr.Transferring.Managing.IApizrTransferManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTransferApi
    nameWithType: TTransferApi
    fullName: TTransferApi
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Transferring.Managing.IApizrTransferManager`1
  commentId: T:Apizr.Transferring.Managing.IApizrTransferManager`1
  name: IApizrTransferManager<TTransferApi>
  nameWithType: IApizrTransferManager<TTransferApi>
  fullName: Apizr.Transferring.Managing.IApizrTransferManager<TTransferApi>
  nameWithType.vb: IApizrTransferManager(Of TTransferApi)
  fullName.vb: Apizr.Transferring.Managing.IApizrTransferManager(Of TTransferApi)
  name.vb: IApizrTransferManager(Of TTransferApi)
  spec.csharp:
  - uid: Apizr.Transferring.Managing.IApizrTransferManager`1
    name: IApizrTransferManager
    nameWithType: IApizrTransferManager
    fullName: Apizr.Transferring.Managing.IApizrTransferManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TTransferApi
    nameWithType: TTransferApi
    fullName: TTransferApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Transferring.Managing.IApizrTransferManager`1
    name: IApizrTransferManager
    nameWithType: IApizrTransferManager
    fullName: Apizr.Transferring.Managing.IApizrTransferManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTransferApi
    nameWithType: TTransferApi
    fullName: TTransferApi
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Transferring.Managing.IApizrTransferManager{{TTransferApi},{TDownloadParams}}
  commentId: T:Apizr.Transferring.Managing.IApizrTransferManager{``0,``1}
  parent: Apizr.Transferring.Managing
  definition: Apizr.Transferring.Managing.IApizrTransferManager`2
  name: IApizrTransferManager<TTransferApi, TDownloadParams>
  nameWithType: IApizrTransferManager<TTransferApi, TDownloadParams>
  fullName: Apizr.Transferring.Managing.IApizrTransferManager<TTransferApi, TDownloadParams>
  nameWithType.vb: IApizrTransferManager(Of TTransferApi, TDownloadParams)
  fullName.vb: Apizr.Transferring.Managing.IApizrTransferManager(Of TTransferApi, TDownloadParams)
  name.vb: IApizrTransferManager(Of TTransferApi, TDownloadParams)
  spec.csharp:
  - uid: Apizr.Transferring.Managing.IApizrTransferManager`2
    name: IApizrTransferManager
    nameWithType: IApizrTransferManager
    fullName: Apizr.Transferring.Managing.IApizrTransferManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TTransferApi
    nameWithType: TTransferApi
    fullName: TTransferApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDownloadParams
    nameWithType: TDownloadParams
    fullName: TDownloadParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Transferring.Managing.IApizrTransferManager`2
    name: IApizrTransferManager
    nameWithType: IApizrTransferManager
    fullName: Apizr.Transferring.Managing.IApizrTransferManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTransferApi
    nameWithType: TTransferApi
    fullName: TTransferApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDownloadParams
    nameWithType: TDownloadParams
    fullName: TDownloadParams
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Transferring.Managing.IApizrTransferManager`2
  commentId: T:Apizr.Transferring.Managing.IApizrTransferManager`2
  name: IApizrTransferManager<TTransferApi, TDownloadParams>
  nameWithType: IApizrTransferManager<TTransferApi, TDownloadParams>
  fullName: Apizr.Transferring.Managing.IApizrTransferManager<TTransferApi, TDownloadParams>
  nameWithType.vb: IApizrTransferManager(Of TTransferApi, TDownloadParams)
  fullName.vb: Apizr.Transferring.Managing.IApizrTransferManager(Of TTransferApi, TDownloadParams)
  name.vb: IApizrTransferManager(Of TTransferApi, TDownloadParams)
  spec.csharp:
  - uid: Apizr.Transferring.Managing.IApizrTransferManager`2
    name: IApizrTransferManager
    nameWithType: IApizrTransferManager
    fullName: Apizr.Transferring.Managing.IApizrTransferManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TTransferApi
    nameWithType: TTransferApi
    fullName: TTransferApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDownloadParams
    nameWithType: TDownloadParams
    fullName: TDownloadParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Transferring.Managing.IApizrTransferManager`2
    name: IApizrTransferManager
    nameWithType: IApizrTransferManager
    fullName: Apizr.Transferring.Managing.IApizrTransferManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTransferApi
    nameWithType: TTransferApi
    fullName: TTransferApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDownloadParams
    nameWithType: TDownloadParams
    fullName: TDownloadParams
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Extending.FileTransferRegistryExtensions.TryGetUploadManager*
  commentId: Overload:Apizr.Extending.FileTransferRegistryExtensions.TryGetUploadManager
  name: TryGetUploadManager
  nameWithType: FileTransferRegistryExtensions.TryGetUploadManager
  fullName: Apizr.Extending.FileTransferRegistryExtensions.TryGetUploadManager
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Apizr.Extending.FileTransferRegistryExtensions.TryGetUploadManagerFor*
  commentId: Overload:Apizr.Extending.FileTransferRegistryExtensions.TryGetUploadManagerFor
  name: TryGetUploadManagerFor
  nameWithType: FileTransferRegistryExtensions.TryGetUploadManagerFor
  fullName: Apizr.Extending.FileTransferRegistryExtensions.TryGetUploadManagerFor
- uid: Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManager*
  commentId: Overload:Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManager
  name: TryGetDownloadManager
  nameWithType: FileTransferRegistryExtensions.TryGetDownloadManager
  fullName: Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManager
- uid: Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManagerFor*
  commentId: Overload:Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManagerFor
  name: TryGetDownloadManagerFor
  nameWithType: FileTransferRegistryExtensions.TryGetDownloadManagerFor
  fullName: Apizr.Extending.FileTransferRegistryExtensions.TryGetDownloadManagerFor
- uid: Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManager*
  commentId: Overload:Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManager
  name: TryGetTransferManager
  nameWithType: FileTransferRegistryExtensions.TryGetTransferManager
  fullName: Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManager
- uid: Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManagerFor*
  commentId: Overload:Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManagerFor
  name: TryGetTransferManagerFor
  nameWithType: FileTransferRegistryExtensions.TryGetTransferManagerFor
  fullName: Apizr.Extending.FileTransferRegistryExtensions.TryGetTransferManagerFor
- uid: Apizr.Transferring.Requesting.IUploadApi
  commentId: T:Apizr.Transferring.Requesting.IUploadApi
  parent: Apizr.Transferring.Requesting
  name: IUploadApi
  nameWithType: IUploadApi
  fullName: Apizr.Transferring.Requesting.IUploadApi
- uid: Apizr.Extending.FileTransferRegistryExtensions.ContainsUploadManager*
  commentId: Overload:Apizr.Extending.FileTransferRegistryExtensions.ContainsUploadManager
  name: ContainsUploadManager
  nameWithType: FileTransferRegistryExtensions.ContainsUploadManager
  fullName: Apizr.Extending.FileTransferRegistryExtensions.ContainsUploadManager
- uid: Apizr.Transferring.Requesting
  commentId: N:Apizr.Transferring.Requesting
  name: Apizr.Transferring.Requesting
  nameWithType: Apizr.Transferring.Requesting
  fullName: Apizr.Transferring.Requesting
- uid: Apizr.Extending.FileTransferRegistryExtensions.ContainsUploadManagerFor*
  commentId: Overload:Apizr.Extending.FileTransferRegistryExtensions.ContainsUploadManagerFor
  name: ContainsUploadManagerFor
  nameWithType: FileTransferRegistryExtensions.ContainsUploadManagerFor
  fullName: Apizr.Extending.FileTransferRegistryExtensions.ContainsUploadManagerFor
- uid: Apizr.Transferring.Requesting.IDownloadApi
  commentId: T:Apizr.Transferring.Requesting.IDownloadApi
  name: IDownloadApi
  nameWithType: IDownloadApi
  fullName: Apizr.Transferring.Requesting.IDownloadApi
- uid: Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManager*
  commentId: Overload:Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManager
  name: ContainsDownloadManager
  nameWithType: FileTransferRegistryExtensions.ContainsDownloadManager
  fullName: Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManager
- uid: Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManagerFor*
  commentId: Overload:Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManagerFor
  name: ContainsDownloadManagerFor
  nameWithType: FileTransferRegistryExtensions.ContainsDownloadManagerFor
  fullName: Apizr.Extending.FileTransferRegistryExtensions.ContainsDownloadManagerFor
- uid: Apizr.Transferring.Requesting.ITransferApi
  commentId: T:Apizr.Transferring.Requesting.ITransferApi
  name: ITransferApi
  nameWithType: ITransferApi
  fullName: Apizr.Transferring.Requesting.ITransferApi
- uid: Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManager*
  commentId: Overload:Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManager
  name: ContainsTransferManager
  nameWithType: FileTransferRegistryExtensions.ContainsTransferManager
  fullName: Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManager
- uid: Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManagerFor*
  commentId: Overload:Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManagerFor
  name: ContainsTransferManagerFor
  nameWithType: FileTransferRegistryExtensions.ContainsTransferManagerFor
  fullName: Apizr.Extending.FileTransferRegistryExtensions.ContainsTransferManagerFor
- uid: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync*
  commentId: Overload:Apizr.Extending.FileTransferRegistryExtensions.UploadAsync
  name: UploadAsync
  nameWithType: FileTransferRegistryExtensions.UploadAsync
  fullName: Apizr.Extending.FileTransferRegistryExtensions.UploadAsync
- uid: Refit.ByteArrayPart
  commentId: T:Refit.ByteArrayPart
  parent: Refit
  isExternal: true
  name: ByteArrayPart
  nameWithType: ByteArrayPart
  fullName: Refit.ByteArrayPart
- uid: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
  commentId: T:System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
  parent: System
  definition: System.Action`1
  name: Action<IApizrRequestOptionsBuilder>
  nameWithType: Action<IApizrRequestOptionsBuilder>
  fullName: System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>
  nameWithType.vb: Action(Of IApizrRequestOptionsBuilder)
  fullName.vb: System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder)
  name.vb: Action(Of IApizrRequestOptionsBuilder)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Apizr.Configuring.Request.IApizrRequestOptionsBuilder
    name: IApizrRequestOptionsBuilder
    nameWithType: IApizrRequestOptionsBuilder
    fullName: Apizr.Configuring.Request.IApizrRequestOptionsBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Apizr.Configuring.Request.IApizrRequestOptionsBuilder
    name: IApizrRequestOptionsBuilder
    nameWithType: IApizrRequestOptionsBuilder
    fullName: Apizr.Configuring.Request.IApizrRequestOptionsBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Refit
  commentId: N:Refit
  isExternal: true
  name: Refit
  nameWithType: Refit
  fullName: Refit
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Refit.StreamPart
  commentId: T:Refit.StreamPart
  parent: Refit
  isExternal: true
  name: StreamPart
  nameWithType: StreamPart
  fullName: Refit.StreamPart
- uid: Refit.FileInfoPart
  commentId: T:Refit.FileInfoPart
  parent: Refit
  isExternal: true
  name: FileInfoPart
  nameWithType: FileInfoPart
  fullName: Refit.FileInfoPart
- uid: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync*
  commentId: Overload:Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync
  name: DownloadAsync
  nameWithType: FileTransferRegistryExtensions.DownloadAsync
  fullName: Apizr.Extending.FileTransferRegistryExtensions.DownloadAsync
- uid: System.IO.FileInfo
  commentId: T:System.IO.FileInfo
  parent: System.IO
  isExternal: true
  name: FileInfo
  nameWithType: FileInfo
  fullName: System.IO.FileInfo
- uid: System.Threading.Tasks.Task{System.IO.FileInfo}
  commentId: T:System.Threading.Tasks.Task{System.IO.FileInfo}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<FileInfo>
  nameWithType: Task<FileInfo>
  fullName: System.Threading.Tasks.Task<System.IO.FileInfo>
  nameWithType.vb: Task(Of FileInfo)
  fullName.vb: System.Threading.Tasks.Task(Of System.IO.FileInfo)
  name.vb: Task(Of FileInfo)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.FileInfo
    name: FileInfo
    nameWithType: FileInfo
    fullName: System.IO.FileInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IO.FileInfo
    name: FileInfo
    nameWithType: FileInfo
    fullName: System.IO.FileInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: '{TDownloadParams}'
  commentId: '!:TDownloadParams'
  definition: TDownloadParams
  name: TDownloadParams
  nameWithType: TDownloadParams
  fullName: TDownloadParams
- uid: TDownloadParams
  name: TDownloadParams
  nameWithType: TDownloadParams
  fullName: TDownloadParams
