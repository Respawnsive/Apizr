### YamlMime:ManagedReference
items:
- uid: Apizr.Extending.TypeExtensions
  commentId: T:Apizr.Extending.TypeExtensions
  id: TypeExtensions
  parent: Apizr.Extending
  children:
  - Apizr.Extending.TypeExtensions.GetFriendlyName(System.Type)
  - Apizr.Extending.TypeExtensions.IsAssignableFromGenericType(System.Type,System.Type)
  - Apizr.Extending.TypeExtensions.IsOpenGeneric(System.Type)
  - Apizr.Extending.TypeExtensions.MakeGenericTypeIfNeeded(System.Type,System.Type[])
  langs:
  - csharp
  - vb
  name: TypeExtensions
  nameWithType: TypeExtensions
  fullName: Apizr.Extending.TypeExtensions
  type: Class
  source:
    id: TypeExtensions
    path: C:\Dev\Community\Apizr\Apizr\Src\Apizr\Extending\TypeExtensions.cs
    startLine: 9
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nSome Type extensions\n"
  example: []
  syntax:
    content: public static class TypeExtensions
    content.vb: Public Module TypeExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Apizr.Extending.TypeExtensions.IsAssignableFromGenericType(System.Type,System.Type)
  commentId: M:Apizr.Extending.TypeExtensions.IsAssignableFromGenericType(System.Type,System.Type)
  id: IsAssignableFromGenericType(System.Type,System.Type)
  isExtensionMethod: true
  parent: Apizr.Extending.TypeExtensions
  langs:
  - csharp
  - vb
  name: IsAssignableFromGenericType(Type, Type)
  nameWithType: TypeExtensions.IsAssignableFromGenericType(Type, Type)
  fullName: Apizr.Extending.TypeExtensions.IsAssignableFromGenericType(System.Type, System.Type)
  type: Method
  source:
    id: IsAssignableFromGenericType
    path: C:\Dev\Community\Apizr\Apizr\Src\Apizr\Extending\TypeExtensions.cs
    startLine: 17
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nChecks if the generic type is assignable from the given type\n"
  example: []
  syntax:
    content: public static bool IsAssignableFromGenericType(this Type genericType, Type givenType)
    parameters:
    - id: genericType
      type: System.Type
      description: The generic type
    - id: givenType
      type: System.Type
      description: The given type
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsAssignableFromGenericType(genericType As Type, givenType As Type) As Boolean
  overload: Apizr.Extending.TypeExtensions.IsAssignableFromGenericType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Apizr.Extending.TypeExtensions.MakeGenericTypeIfNeeded(System.Type,System.Type[])
  commentId: M:Apizr.Extending.TypeExtensions.MakeGenericTypeIfNeeded(System.Type,System.Type[])
  id: MakeGenericTypeIfNeeded(System.Type,System.Type[])
  isExtensionMethod: true
  parent: Apizr.Extending.TypeExtensions
  langs:
  - csharp
  - vb
  name: MakeGenericTypeIfNeeded(Type, Type[])
  nameWithType: TypeExtensions.MakeGenericTypeIfNeeded(Type, Type[])
  fullName: Apizr.Extending.TypeExtensions.MakeGenericTypeIfNeeded(System.Type, System.Type[])
  type: Method
  source:
    id: MakeGenericTypeIfNeeded
    path: C:\Dev\Community\Apizr\Apizr\Src\Apizr\Extending\TypeExtensions.cs
    startLine: 36
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nReturns a closed generic type based on provided type arguments\n"
  example: []
  syntax:
    content: public static Type MakeGenericTypeIfNeeded(this Type type, params Type[] typeArguments)
    parameters:
    - id: type
      type: System.Type
      description: The open generic type
    - id: typeArguments
      type: System.Type[]
      description: The type arguments
    return:
      type: System.Type
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MakeGenericTypeIfNeeded(type As Type, ParamArray typeArguments As Type()) As Type
  overload: Apizr.Extending.TypeExtensions.MakeGenericTypeIfNeeded*
  nameWithType.vb: TypeExtensions.MakeGenericTypeIfNeeded(Type, Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Extending.TypeExtensions.MakeGenericTypeIfNeeded(System.Type, System.Type())
  name.vb: MakeGenericTypeIfNeeded(Type, Type())
- uid: Apizr.Extending.TypeExtensions.IsOpenGeneric(System.Type)
  commentId: M:Apizr.Extending.TypeExtensions.IsOpenGeneric(System.Type)
  id: IsOpenGeneric(System.Type)
  isExtensionMethod: true
  parent: Apizr.Extending.TypeExtensions
  langs:
  - csharp
  - vb
  name: IsOpenGeneric(Type)
  nameWithType: TypeExtensions.IsOpenGeneric(Type)
  fullName: Apizr.Extending.TypeExtensions.IsOpenGeneric(System.Type)
  type: Method
  source:
    id: IsOpenGeneric
    path: C:\Dev\Community\Apizr\Apizr\Src\Apizr\Extending\TypeExtensions.cs
    startLine: 49
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nChecks if the type is open generic\n"
  example: []
  syntax:
    content: public static bool IsOpenGeneric(this Type type)
    parameters:
    - id: type
      type: System.Type
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsOpenGeneric(type As Type) As Boolean
  overload: Apizr.Extending.TypeExtensions.IsOpenGeneric*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Apizr.Extending.TypeExtensions.GetFriendlyName(System.Type)
  commentId: M:Apizr.Extending.TypeExtensions.GetFriendlyName(System.Type)
  id: GetFriendlyName(System.Type)
  isExtensionMethod: true
  parent: Apizr.Extending.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetFriendlyName(Type)
  nameWithType: TypeExtensions.GetFriendlyName(Type)
  fullName: Apizr.Extending.TypeExtensions.GetFriendlyName(System.Type)
  type: Method
  source:
    id: GetFriendlyName
    path: C:\Dev\Community\Apizr\Apizr\Src\Apizr\Extending\TypeExtensions.cs
    startLine: 59
  assemblies:
  - Apizr
  namespace: Apizr.Extending
  summary: "\nReturns a more friendly readable type name\n"
  example: []
  syntax:
    content: public static string GetFriendlyName(this Type type)
    parameters:
    - id: type
      type: System.Type
      description: The type to get friendly name of
    return:
      type: System.String
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFriendlyName(type As Type) As String
  overload: Apizr.Extending.TypeExtensions.GetFriendlyName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Apizr.Extending
  commentId: N:Apizr.Extending
  name: Apizr.Extending
  nameWithType: Apizr.Extending
  fullName: Apizr.Extending
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Apizr.Extending.TypeExtensions.IsAssignableFromGenericType*
  commentId: Overload:Apizr.Extending.TypeExtensions.IsAssignableFromGenericType
  name: IsAssignableFromGenericType
  nameWithType: TypeExtensions.IsAssignableFromGenericType
  fullName: Apizr.Extending.TypeExtensions.IsAssignableFromGenericType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Apizr.Extending.TypeExtensions.MakeGenericTypeIfNeeded*
  commentId: Overload:Apizr.Extending.TypeExtensions.MakeGenericTypeIfNeeded
  name: MakeGenericTypeIfNeeded
  nameWithType: TypeExtensions.MakeGenericTypeIfNeeded
  fullName: Apizr.Extending.TypeExtensions.MakeGenericTypeIfNeeded
- uid: System.Type[]
  isExternal: true
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Apizr.Extending.TypeExtensions.IsOpenGeneric*
  commentId: Overload:Apizr.Extending.TypeExtensions.IsOpenGeneric
  name: IsOpenGeneric
  nameWithType: TypeExtensions.IsOpenGeneric
  fullName: Apizr.Extending.TypeExtensions.IsOpenGeneric
- uid: Apizr.Extending.TypeExtensions.GetFriendlyName*
  commentId: Overload:Apizr.Extending.TypeExtensions.GetFriendlyName
  name: GetFriendlyName
  nameWithType: TypeExtensions.GetFriendlyName
  fullName: Apizr.Extending.TypeExtensions.GetFriendlyName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
