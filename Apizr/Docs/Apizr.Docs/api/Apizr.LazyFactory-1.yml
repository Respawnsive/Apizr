### YamlMime:ManagedReference
items:
- uid: Apizr.LazyFactory`1
  commentId: T:Apizr.LazyFactory`1
  id: LazyFactory`1
  parent: Apizr
  children:
  - Apizr.LazyFactory`1.#ctor(System.Func{`0})
  - Apizr.LazyFactory`1.#ctor(System.Func{System.Object})
  langs:
  - csharp
  - vb
  name: LazyFactory<TInstance>
  nameWithType: LazyFactory<TInstance>
  fullName: Apizr.LazyFactory<TInstance>
  type: Class
  source:
    id: LazyFactory
    path: C:\Dev\Community\Apizr\Apizr\Src\Apizr\LazyFactory.cs
    startLine: 5
  assemblies:
  - Apizr
  namespace: Apizr
  summary: "\nA lazy instance\n"
  example: []
  syntax:
    content: 'public class LazyFactory<TInstance> : Lazy<TInstance>, ILazyFactory<TInstance>'
    typeParameters:
    - id: TInstance
      description: Type of your instance
    content.vb: >-
      Public Class LazyFactory(Of TInstance)
          Inherits Lazy(Of TInstance)
          Implements ILazyFactory(Of TInstance)
  inheritance:
  - System.Object
  - System.Lazy{{TInstance}}
  implements:
  - Apizr.ILazyFactory{{TInstance}}
  inheritedMembers:
  - System.Lazy{{TInstance}}.ToString
  - System.Lazy{{TInstance}}.IsValueCreated
  - System.Lazy{{TInstance}}.Value
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType.vb: LazyFactory(Of TInstance)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Apizr.LazyFactory(Of TInstance)
  name.vb: LazyFactory(Of TInstance)
- uid: Apizr.LazyFactory`1.#ctor(System.Func{`0})
  commentId: M:Apizr.LazyFactory`1.#ctor(System.Func{`0})
  id: '#ctor(System.Func{`0})'
  parent: Apizr.LazyFactory`1
  langs:
  - csharp
  - vb
  name: LazyFactory(Func<TInstance>)
  nameWithType: LazyFactory<TInstance>.LazyFactory(Func<TInstance>)
  fullName: Apizr.LazyFactory<TInstance>.LazyFactory(System.Func<TInstance>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Src\Apizr\LazyFactory.cs
    startLine: 11
  assemblies:
  - Apizr
  namespace: Apizr
  summary: "\nLazy factory constructor\n"
  example: []
  syntax:
    content: public LazyFactory(Func<TInstance> instanceFactory)
    parameters:
    - id: instanceFactory
      type: System.Func{{TInstance}}
      description: The factory to be lazy
    content.vb: Public Sub New(instanceFactory As Func(Of TInstance))
  overload: Apizr.LazyFactory`1.#ctor*
  nameWithType.vb: LazyFactory(Of TInstance).LazyFactory(Func(Of TInstance))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.LazyFactory(Of TInstance).LazyFactory(System.Func(Of TInstance))
  name.vb: LazyFactory(Func(Of TInstance))
- uid: Apizr.LazyFactory`1.#ctor(System.Func{System.Object})
  commentId: M:Apizr.LazyFactory`1.#ctor(System.Func{System.Object})
  id: '#ctor(System.Func{System.Object})'
  parent: Apizr.LazyFactory`1
  langs:
  - csharp
  - vb
  name: LazyFactory(Func<Object>)
  nameWithType: LazyFactory<TInstance>.LazyFactory(Func<Object>)
  fullName: Apizr.LazyFactory<TInstance>.LazyFactory(System.Func<System.Object>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Src\Apizr\LazyFactory.cs
    startLine: 19
  assemblies:
  - Apizr
  namespace: Apizr
  summary: "\nLazy factory constructor\n"
  example: []
  syntax:
    content: public LazyFactory(Func<object> instanceFactory)
    parameters:
    - id: instanceFactory
      type: System.Func{System.Object}
      description: The factory to be lazy
    content.vb: Public Sub New(instanceFactory As Func(Of Object))
  overload: Apizr.LazyFactory`1.#ctor*
  nameWithType.vb: LazyFactory(Of TInstance).LazyFactory(Func(Of Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.LazyFactory(Of TInstance).LazyFactory(System.Func(Of System.Object))
  name.vb: LazyFactory(Func(Of Object))
references:
- uid: Apizr.ILazyFactory`1
  commentId: T:Apizr.ILazyFactory`1
  name: ILazyFactory<TInstance>
  nameWithType: ILazyFactory<TInstance>
  fullName: Apizr.ILazyFactory<TInstance>
  nameWithType.vb: ILazyFactory(Of TInstance)
  fullName.vb: Apizr.ILazyFactory(Of TInstance)
  name.vb: ILazyFactory(Of TInstance)
  spec.csharp:
  - uid: Apizr.ILazyFactory`1
    name: ILazyFactory
    nameWithType: ILazyFactory
    fullName: Apizr.ILazyFactory
  - name: <
    nameWithType: <
    fullName: <
  - name: TInstance
    nameWithType: TInstance
    fullName: TInstance
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.ILazyFactory`1
    name: ILazyFactory
    nameWithType: ILazyFactory
    fullName: Apizr.ILazyFactory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInstance
    nameWithType: TInstance
    fullName: TInstance
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr
  commentId: N:Apizr
  name: Apizr
  nameWithType: Apizr
  fullName: Apizr
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Lazy{{TInstance}}
  commentId: T:System.Lazy{`0}
  parent: System
  definition: System.Lazy`1
  name: Lazy<TInstance>
  nameWithType: Lazy<TInstance>
  fullName: System.Lazy<TInstance>
  nameWithType.vb: Lazy(Of TInstance)
  fullName.vb: System.Lazy(Of TInstance)
  name.vb: Lazy(Of TInstance)
  spec.csharp:
  - uid: System.Lazy`1
    name: Lazy
    nameWithType: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInstance
    nameWithType: TInstance
    fullName: TInstance
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Lazy`1
    name: Lazy
    nameWithType: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInstance
    nameWithType: TInstance
    fullName: TInstance
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.ILazyFactory{{TInstance}}
  commentId: T:Apizr.ILazyFactory{`0}
  parent: Apizr
  definition: Apizr.ILazyFactory`1
  name: ILazyFactory<TInstance>
  nameWithType: ILazyFactory<TInstance>
  fullName: Apizr.ILazyFactory<TInstance>
  nameWithType.vb: ILazyFactory(Of TInstance)
  fullName.vb: Apizr.ILazyFactory(Of TInstance)
  name.vb: ILazyFactory(Of TInstance)
  spec.csharp:
  - uid: Apizr.ILazyFactory`1
    name: ILazyFactory
    nameWithType: ILazyFactory
    fullName: Apizr.ILazyFactory
  - name: <
    nameWithType: <
    fullName: <
  - name: TInstance
    nameWithType: TInstance
    fullName: TInstance
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.ILazyFactory`1
    name: ILazyFactory
    nameWithType: ILazyFactory
    fullName: Apizr.ILazyFactory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInstance
    nameWithType: TInstance
    fullName: TInstance
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Lazy{{TInstance}}.ToString
  commentId: M:System.Lazy{`0}.ToString
  parent: System.Lazy{{TInstance}}
  definition: System.Lazy`1.ToString
  name: ToString()
  nameWithType: Lazy<TInstance>.ToString()
  fullName: System.Lazy<TInstance>.ToString()
  nameWithType.vb: Lazy(Of TInstance).ToString()
  fullName.vb: System.Lazy(Of TInstance).ToString()
  spec.csharp:
  - uid: System.Lazy`1.ToString
    name: ToString
    nameWithType: Lazy<TInstance>.ToString
    fullName: System.Lazy<TInstance>.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Lazy`1.ToString
    name: ToString
    nameWithType: Lazy(Of TInstance).ToString
    fullName: System.Lazy(Of TInstance).ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Lazy{{TInstance}}.IsValueCreated
  commentId: P:System.Lazy{`0}.IsValueCreated
  parent: System.Lazy{{TInstance}}
  definition: System.Lazy`1.IsValueCreated
  name: IsValueCreated
  nameWithType: Lazy<TInstance>.IsValueCreated
  fullName: System.Lazy<TInstance>.IsValueCreated
  nameWithType.vb: Lazy(Of TInstance).IsValueCreated
  fullName.vb: System.Lazy(Of TInstance).IsValueCreated
- uid: System.Lazy{{TInstance}}.Value
  commentId: P:System.Lazy{`0}.Value
  parent: System.Lazy{{TInstance}}
  definition: System.Lazy`1.Value
  name: Value
  nameWithType: Lazy<TInstance>.Value
  fullName: System.Lazy<TInstance>.Value
  nameWithType.vb: Lazy(Of TInstance).Value
  fullName.vb: System.Lazy(Of TInstance).Value
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Lazy`1
  commentId: T:System.Lazy`1
  isExternal: true
  name: Lazy<T>
  nameWithType: Lazy<T>
  fullName: System.Lazy<T>
  nameWithType.vb: Lazy(Of T)
  fullName.vb: System.Lazy(Of T)
  name.vb: Lazy(Of T)
  spec.csharp:
  - uid: System.Lazy`1
    name: Lazy
    nameWithType: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Lazy`1
    name: Lazy
    nameWithType: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Lazy`1.ToString
  commentId: M:System.Lazy`1.ToString
  isExternal: true
  name: ToString()
  nameWithType: Lazy<T>.ToString()
  fullName: System.Lazy<T>.ToString()
  nameWithType.vb: Lazy(Of T).ToString()
  fullName.vb: System.Lazy(Of T).ToString()
  spec.csharp:
  - uid: System.Lazy`1.ToString
    name: ToString
    nameWithType: Lazy<T>.ToString
    fullName: System.Lazy<T>.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Lazy`1.ToString
    name: ToString
    nameWithType: Lazy(Of T).ToString
    fullName: System.Lazy(Of T).ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Lazy`1.IsValueCreated
  commentId: P:System.Lazy`1.IsValueCreated
  isExternal: true
  name: IsValueCreated
  nameWithType: Lazy<T>.IsValueCreated
  fullName: System.Lazy<T>.IsValueCreated
  nameWithType.vb: Lazy(Of T).IsValueCreated
  fullName.vb: System.Lazy(Of T).IsValueCreated
- uid: System.Lazy`1.Value
  commentId: P:System.Lazy`1.Value
  isExternal: true
  name: Value
  nameWithType: Lazy<T>.Value
  fullName: System.Lazy<T>.Value
  nameWithType.vb: Lazy(Of T).Value
  fullName.vb: System.Lazy(Of T).Value
- uid: Apizr.LazyFactory`1.#ctor*
  commentId: Overload:Apizr.LazyFactory`1.#ctor
  name: LazyFactory
  nameWithType: LazyFactory<TInstance>.LazyFactory
  fullName: Apizr.LazyFactory<TInstance>.LazyFactory
  nameWithType.vb: LazyFactory(Of TInstance).LazyFactory
  fullName.vb: Apizr.LazyFactory(Of TInstance).LazyFactory
- uid: System.Func{{TInstance}}
  commentId: T:System.Func{`0}
  parent: System
  definition: System.Func`1
  name: Func<TInstance>
  nameWithType: Func<TInstance>
  fullName: System.Func<TInstance>
  nameWithType.vb: Func(Of TInstance)
  fullName.vb: System.Func(Of TInstance)
  name.vb: Func(Of TInstance)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInstance
    nameWithType: TInstance
    fullName: TInstance
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInstance
    nameWithType: TInstance
    fullName: TInstance
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Object}
  commentId: T:System.Func{System.Object}
  parent: System
  definition: System.Func`1
  name: Func<Object>
  nameWithType: Func<Object>
  fullName: System.Func<System.Object>
  nameWithType.vb: Func(Of Object)
  fullName.vb: System.Func(Of System.Object)
  name.vb: Func(Of Object)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
