### YamlMime:ManagedReference
items:
- uid: Apizr.Mediation.Cruding.Base.UpdateCommandBase`3
  commentId: T:Apizr.Mediation.Cruding.Base.UpdateCommandBase`3
  id: UpdateCommandBase`3
  parent: Apizr.Mediation.Cruding.Base
  children:
  - Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.#ctor(`0,`1,Polly.Context,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.#ctor(`0,`1,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.Key
  - Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.RequestData
  langs:
  - csharp
  - vb
  name: UpdateCommandBase<TKey, TRequestData, TResultData>
  nameWithType: UpdateCommandBase<TKey, TRequestData, TResultData>
  fullName: Apizr.Mediation.Cruding.Base.UpdateCommandBase<TKey, TRequestData, TResultData>
  type: Class
  source:
    remote:
      path: Apizr/Apizr.Integrations.MediatR/Mediation/Cruding/Base/UpdateCommandBase.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: UpdateCommandBase
    path: ../../Apizr.Integrations.MediatR/Mediation/Cruding/Base/UpdateCommandBase.cs
    startLine: 7
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Base
  syntax:
    content: 'public abstract class UpdateCommandBase<TKey, TRequestData, TResultData> : MediationCommandBase<TRequestData, TResultData>, IMediationCommand<TRequestData, TResultData>, IRequest<TResultData>, IBaseRequest'
    typeParameters:
    - id: TKey
    - id: TRequestData
    - id: TResultData
    content.vb: >-
      Public MustInherit Class UpdateCommandBase(Of TKey, TRequestData, TResultData)
          Inherits MediationCommandBase(Of TRequestData, TResultData)
          Implements IMediationCommand(Of TRequestData, TResultData), IRequest(Of TResultData), IBaseRequest
  inheritance:
  - System.Object
  - Apizr.Mediation.Requesting.Base.RequestBase{{TResultData}}
  - Apizr.Mediation.Commanding.MediationCommandBase{{TRequestData},{TResultData}}
  derivedClasses:
  - Apizr.Mediation.Cruding.Base.UpdateCommandBase`2
  - Apizr.Mediation.Cruding.UpdateCommand`2
  - Apizr.Optional.Cruding.UpdateOptionalCommand`2
  implements:
  - Apizr.Mediation.Commanding.IMediationCommand{{TRequestData},{TResultData}}
  - MediatR.IRequest{{TResultData}}
  - MediatR.IBaseRequest
  inheritedMembers:
  - Apizr.Mediation.Requesting.Base.RequestBase{{TResultData}}.Context
  - Apizr.Mediation.Requesting.Base.RequestBase{{TResultData}}.OnException
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
  nameWithType.vb: UpdateCommandBase(Of TKey, TRequestData, TResultData)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Apizr.Mediation.Cruding.Base.UpdateCommandBase(Of TKey, TRequestData, TResultData)
  name.vb: UpdateCommandBase(Of TKey, TRequestData, TResultData)
- uid: Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.#ctor(`0,`1,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.#ctor(`0,`1,System.Action{System.Exception})
  id: '#ctor(`0,`1,System.Action{System.Exception})'
  parent: Apizr.Mediation.Cruding.Base.UpdateCommandBase`3
  langs:
  - csharp
  - vb
  name: UpdateCommandBase(TKey, TRequestData, Action<Exception>)
  nameWithType: UpdateCommandBase<TKey, TRequestData, TResultData>.UpdateCommandBase(TKey, TRequestData, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Base.UpdateCommandBase<TKey, TRequestData, TResultData>.UpdateCommandBase(TKey, TRequestData, System.Action<System.Exception>)
  type: Constructor
  source:
    remote:
      path: Apizr/Apizr.Integrations.MediatR/Mediation/Cruding/Base/UpdateCommandBase.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: .ctor
    path: ../../Apizr.Integrations.MediatR/Mediation/Cruding/Base/UpdateCommandBase.cs
    startLine: 9
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Base
  syntax:
    content: protected UpdateCommandBase(TKey key, TRequestData requestData, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TKey}'
    - id: requestData
      type: '{TRequestData}'
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Protected Sub New(key As TKey, requestData As TRequestData, onException As Action(Of Exception) = Nothing)
  overload: Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.#ctor*
  nameWithType.vb: UpdateCommandBase(Of TKey, TRequestData, TResultData).UpdateCommandBase(TKey, TRequestData, Action(Of Exception))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Apizr.Mediation.Cruding.Base.UpdateCommandBase(Of TKey, TRequestData, TResultData).UpdateCommandBase(TKey, TRequestData, System.Action(Of System.Exception))
  name.vb: UpdateCommandBase(TKey, TRequestData, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.#ctor(`0,`1,Polly.Context,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.#ctor(`0,`1,Polly.Context,System.Action{System.Exception})
  id: '#ctor(`0,`1,Polly.Context,System.Action{System.Exception})'
  parent: Apizr.Mediation.Cruding.Base.UpdateCommandBase`3
  langs:
  - csharp
  - vb
  name: UpdateCommandBase(TKey, TRequestData, Context, Action<Exception>)
  nameWithType: UpdateCommandBase<TKey, TRequestData, TResultData>.UpdateCommandBase(TKey, TRequestData, Context, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Base.UpdateCommandBase<TKey, TRequestData, TResultData>.UpdateCommandBase(TKey, TRequestData, Polly.Context, System.Action<System.Exception>)
  type: Constructor
  source:
    remote:
      path: Apizr/Apizr.Integrations.MediatR/Mediation/Cruding/Base/UpdateCommandBase.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: .ctor
    path: ../../Apizr.Integrations.MediatR/Mediation/Cruding/Base/UpdateCommandBase.cs
    startLine: 15
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Base
  syntax:
    content: protected UpdateCommandBase(TKey key, TRequestData requestData, Context context, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TKey}'
    - id: requestData
      type: '{TRequestData}'
    - id: context
      type: Polly.Context
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Protected Sub New(key As TKey, requestData As TRequestData, context As Context, onException As Action(Of Exception) = Nothing)
  overload: Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.#ctor*
  nameWithType.vb: UpdateCommandBase(Of TKey, TRequestData, TResultData).UpdateCommandBase(TKey, TRequestData, Context, Action(Of Exception))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Apizr.Mediation.Cruding.Base.UpdateCommandBase(Of TKey, TRequestData, TResultData).UpdateCommandBase(TKey, TRequestData, Polly.Context, System.Action(Of System.Exception))
  name.vb: UpdateCommandBase(TKey, TRequestData, Context, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.Key
  commentId: P:Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.Key
  id: Key
  parent: Apizr.Mediation.Cruding.Base.UpdateCommandBase`3
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: UpdateCommandBase<TKey, TRequestData, TResultData>.Key
  fullName: Apizr.Mediation.Cruding.Base.UpdateCommandBase<TKey, TRequestData, TResultData>.Key
  type: Property
  source:
    remote:
      path: Apizr/Apizr.Integrations.MediatR/Mediation/Cruding/Base/UpdateCommandBase.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: Key
    path: ../../Apizr.Integrations.MediatR/Mediation/Cruding/Base/UpdateCommandBase.cs
    startLine: 21
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Base
  syntax:
    content: public TKey Key { get; }
    parameters: []
    return:
      type: '{TKey}'
    content.vb: Public ReadOnly Property Key As TKey
  overload: Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.Key*
  nameWithType.vb: UpdateCommandBase(Of TKey, TRequestData, TResultData).Key
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Apizr.Mediation.Cruding.Base.UpdateCommandBase(Of TKey, TRequestData, TResultData).Key
- uid: Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.RequestData
  commentId: P:Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.RequestData
  id: RequestData
  parent: Apizr.Mediation.Cruding.Base.UpdateCommandBase`3
  langs:
  - csharp
  - vb
  name: RequestData
  nameWithType: UpdateCommandBase<TKey, TRequestData, TResultData>.RequestData
  fullName: Apizr.Mediation.Cruding.Base.UpdateCommandBase<TKey, TRequestData, TResultData>.RequestData
  type: Property
  source:
    remote:
      path: Apizr/Apizr.Integrations.MediatR/Mediation/Cruding/Base/UpdateCommandBase.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: RequestData
    path: ../../Apizr.Integrations.MediatR/Mediation/Cruding/Base/UpdateCommandBase.cs
    startLine: 22
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Base
  syntax:
    content: public TRequestData RequestData { get; }
    parameters: []
    return:
      type: '{TRequestData}'
    content.vb: Public ReadOnly Property RequestData As TRequestData
  overload: Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.RequestData*
  nameWithType.vb: UpdateCommandBase(Of TKey, TRequestData, TResultData).RequestData
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Apizr.Mediation.Cruding.Base.UpdateCommandBase(Of TKey, TRequestData, TResultData).RequestData
references:
- uid: Apizr.Mediation.Cruding.Base
  commentId: N:Apizr.Mediation.Cruding.Base
  name: Apizr.Mediation.Cruding.Base
  nameWithType: Apizr.Mediation.Cruding.Base
  fullName: Apizr.Mediation.Cruding.Base
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Apizr.Mediation.Requesting.Base.RequestBase{{TResultData}}
  commentId: T:Apizr.Mediation.Requesting.Base.RequestBase{`1}
  parent: Apizr.Mediation.Requesting.Base
  definition: Apizr.Mediation.Requesting.Base.RequestBase`1
  name: RequestBase<TResultData>
  nameWithType: RequestBase<TResultData>
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<TResultData>
  nameWithType.vb: RequestBase(Of TResultData)
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of TResultData)
  name.vb: RequestBase(Of TResultData)
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Base.RequestBase`1
    name: RequestBase
    nameWithType: RequestBase
    fullName: Apizr.Mediation.Requesting.Base.RequestBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Base.RequestBase`1
    name: RequestBase
    nameWithType: RequestBase
    fullName: Apizr.Mediation.Requesting.Base.RequestBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Commanding.MediationCommandBase{{TRequestData},{TResultData}}
  commentId: T:Apizr.Mediation.Commanding.MediationCommandBase{`0,`1}
  parent: Apizr.Mediation.Commanding
  definition: Apizr.Mediation.Commanding.MediationCommandBase`2
  name: MediationCommandBase<TRequestData, TResultData>
  nameWithType: MediationCommandBase<TRequestData, TResultData>
  fullName: Apizr.Mediation.Commanding.MediationCommandBase<TRequestData, TResultData>
  nameWithType.vb: MediationCommandBase(Of TRequestData, TResultData)
  fullName.vb: Apizr.Mediation.Commanding.MediationCommandBase(Of TRequestData, TResultData)
  name.vb: MediationCommandBase(Of TRequestData, TResultData)
  spec.csharp:
  - uid: Apizr.Mediation.Commanding.MediationCommandBase`2
    name: MediationCommandBase
    nameWithType: MediationCommandBase
    fullName: Apizr.Mediation.Commanding.MediationCommandBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Commanding.MediationCommandBase`2
    name: MediationCommandBase
    nameWithType: MediationCommandBase
    fullName: Apizr.Mediation.Commanding.MediationCommandBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Commanding.IMediationCommand{{TRequestData},{TResultData}}
  commentId: T:Apizr.Mediation.Commanding.IMediationCommand{`0,`1}
  parent: Apizr.Mediation.Commanding
  definition: Apizr.Mediation.Commanding.IMediationCommand`2
  name: IMediationCommand<TRequestData, TResultData>
  nameWithType: IMediationCommand<TRequestData, TResultData>
  fullName: Apizr.Mediation.Commanding.IMediationCommand<TRequestData, TResultData>
  nameWithType.vb: IMediationCommand(Of TRequestData, TResultData)
  fullName.vb: Apizr.Mediation.Commanding.IMediationCommand(Of TRequestData, TResultData)
  name.vb: IMediationCommand(Of TRequestData, TResultData)
  spec.csharp:
  - uid: Apizr.Mediation.Commanding.IMediationCommand`2
    name: IMediationCommand
    nameWithType: IMediationCommand
    fullName: Apizr.Mediation.Commanding.IMediationCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Commanding.IMediationCommand`2
    name: IMediationCommand
    nameWithType: IMediationCommand
    fullName: Apizr.Mediation.Commanding.IMediationCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR.IRequest{{TResultData}}
  commentId: T:MediatR.IRequest{`1}
  parent: MediatR
  definition: MediatR.IRequest`1
  name: IRequest<TResultData>
  nameWithType: IRequest<TResultData>
  fullName: MediatR.IRequest<TResultData>
  nameWithType.vb: IRequest(Of TResultData)
  fullName.vb: MediatR.IRequest(Of TResultData)
  name.vb: IRequest(Of TResultData)
  spec.csharp:
  - uid: MediatR.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: MediatR.IRequest
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatR.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: MediatR.IRequest
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR.IBaseRequest
  commentId: T:MediatR.IBaseRequest
  parent: MediatR
  isExternal: true
  name: IBaseRequest
  nameWithType: IBaseRequest
  fullName: MediatR.IBaseRequest
- uid: Apizr.Mediation.Requesting.Base.RequestBase{{TResultData}}.Context
  commentId: P:Apizr.Mediation.Requesting.Base.RequestBase{`1}.Context
  parent: Apizr.Mediation.Requesting.Base.RequestBase{{TResultData}}
  definition: Apizr.Mediation.Requesting.Base.RequestBase`1.Context
  name: Context
  nameWithType: RequestBase<TResultData>.Context
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<TResultData>.Context
  nameWithType.vb: RequestBase(Of TResultData).Context
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of TResultData).Context
- uid: Apizr.Mediation.Requesting.Base.RequestBase{{TResultData}}.OnException
  commentId: P:Apizr.Mediation.Requesting.Base.RequestBase{`1}.OnException
  parent: Apizr.Mediation.Requesting.Base.RequestBase{{TResultData}}
  definition: Apizr.Mediation.Requesting.Base.RequestBase`1.OnException
  name: OnException
  nameWithType: RequestBase<TResultData>.OnException
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<TResultData>.OnException
  nameWithType.vb: RequestBase(Of TResultData).OnException
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of TResultData).OnException
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
  commentId: M:Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  parent: Apizr.Extending.ObjectExtensions
  definition: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  name: ToString(String, String)
  nameWithType: ObjectExtensions.ToString(String, String)
  fullName: Apizr.Extending.ObjectExtensions.ToString(System.String, System.String)
  spec.csharp:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Apizr.Mediation.Requesting.Base.RequestBase`1
  commentId: T:Apizr.Mediation.Requesting.Base.RequestBase`1
  name: RequestBase<TFormattedModelResultData>
  nameWithType: RequestBase<TFormattedModelResultData>
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<TFormattedModelResultData>
  nameWithType.vb: RequestBase(Of TFormattedModelResultData)
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of TFormattedModelResultData)
  name.vb: RequestBase(Of TFormattedModelResultData)
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Base.RequestBase`1
    name: RequestBase
    nameWithType: RequestBase
    fullName: Apizr.Mediation.Requesting.Base.RequestBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFormattedModelResultData
    nameWithType: TFormattedModelResultData
    fullName: TFormattedModelResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Base.RequestBase`1
    name: RequestBase
    nameWithType: RequestBase
    fullName: Apizr.Mediation.Requesting.Base.RequestBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFormattedModelResultData
    nameWithType: TFormattedModelResultData
    fullName: TFormattedModelResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Requesting.Base
  commentId: N:Apizr.Mediation.Requesting.Base
  name: Apizr.Mediation.Requesting.Base
  nameWithType: Apizr.Mediation.Requesting.Base
  fullName: Apizr.Mediation.Requesting.Base
- uid: Apizr.Mediation.Commanding.MediationCommandBase`2
  commentId: T:Apizr.Mediation.Commanding.MediationCommandBase`2
  name: MediationCommandBase<TRequestData, TResultData>
  nameWithType: MediationCommandBase<TRequestData, TResultData>
  fullName: Apizr.Mediation.Commanding.MediationCommandBase<TRequestData, TResultData>
  nameWithType.vb: MediationCommandBase(Of TRequestData, TResultData)
  fullName.vb: Apizr.Mediation.Commanding.MediationCommandBase(Of TRequestData, TResultData)
  name.vb: MediationCommandBase(Of TRequestData, TResultData)
  spec.csharp:
  - uid: Apizr.Mediation.Commanding.MediationCommandBase`2
    name: MediationCommandBase
    nameWithType: MediationCommandBase
    fullName: Apizr.Mediation.Commanding.MediationCommandBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Commanding.MediationCommandBase`2
    name: MediationCommandBase
    nameWithType: MediationCommandBase
    fullName: Apizr.Mediation.Commanding.MediationCommandBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Commanding
  commentId: N:Apizr.Mediation.Commanding
  name: Apizr.Mediation.Commanding
  nameWithType: Apizr.Mediation.Commanding
  fullName: Apizr.Mediation.Commanding
- uid: Apizr.Mediation.Commanding.IMediationCommand`2
  commentId: T:Apizr.Mediation.Commanding.IMediationCommand`2
  name: IMediationCommand<TRequestData, TResultData>
  nameWithType: IMediationCommand<TRequestData, TResultData>
  fullName: Apizr.Mediation.Commanding.IMediationCommand<TRequestData, TResultData>
  nameWithType.vb: IMediationCommand(Of TRequestData, TResultData)
  fullName.vb: Apizr.Mediation.Commanding.IMediationCommand(Of TRequestData, TResultData)
  name.vb: IMediationCommand(Of TRequestData, TResultData)
  spec.csharp:
  - uid: Apizr.Mediation.Commanding.IMediationCommand`2
    name: IMediationCommand
    nameWithType: IMediationCommand
    fullName: Apizr.Mediation.Commanding.IMediationCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Commanding.IMediationCommand`2
    name: IMediationCommand
    nameWithType: IMediationCommand
    fullName: Apizr.Mediation.Commanding.IMediationCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR.IRequest`1
  commentId: T:MediatR.IRequest`1
  isExternal: true
  name: IRequest<TResponse>
  nameWithType: IRequest<TResponse>
  fullName: MediatR.IRequest<TResponse>
  nameWithType.vb: IRequest(Of TResponse)
  fullName.vb: MediatR.IRequest(Of TResponse)
  name.vb: IRequest(Of TResponse)
  spec.csharp:
  - uid: MediatR.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: MediatR.IRequest
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatR.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: MediatR.IRequest
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR
  commentId: N:MediatR
  isExternal: true
  name: MediatR
  nameWithType: MediatR
  fullName: MediatR
- uid: Apizr.Mediation.Requesting.Base.RequestBase`1.Context
  commentId: P:Apizr.Mediation.Requesting.Base.RequestBase`1.Context
  name: Context
  nameWithType: RequestBase<TFormattedModelResultData>.Context
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<TFormattedModelResultData>.Context
  nameWithType.vb: RequestBase(Of TFormattedModelResultData).Context
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of TFormattedModelResultData).Context
- uid: Apizr.Mediation.Requesting.Base.RequestBase`1.OnException
  commentId: P:Apizr.Mediation.Requesting.Base.RequestBase`1.OnException
  name: OnException
  nameWithType: RequestBase<TFormattedModelResultData>.OnException
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<TFormattedModelResultData>.OnException
  nameWithType.vb: RequestBase(Of TFormattedModelResultData).OnException
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of TFormattedModelResultData).OnException
- uid: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  commentId: M:Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  isExternal: true
  name: ToString(Object, String, String)
  nameWithType: ObjectExtensions.ToString(Object, String, String)
  fullName: Apizr.Extending.ObjectExtensions.ToString(System.Object, System.String, System.String)
  spec.csharp:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Extending.ObjectExtensions
  commentId: T:Apizr.Extending.ObjectExtensions
  parent: Apizr.Extending
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Apizr.Extending.ObjectExtensions
- uid: Apizr.Extending
  commentId: N:Apizr.Extending
  name: Apizr.Extending
  nameWithType: Apizr.Extending
  fullName: Apizr.Extending
- uid: Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.#ctor*
  commentId: Overload:Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.#ctor
  name: UpdateCommandBase
  nameWithType: UpdateCommandBase<TKey, TRequestData, TResultData>.UpdateCommandBase
  fullName: Apizr.Mediation.Cruding.Base.UpdateCommandBase<TKey, TRequestData, TResultData>.UpdateCommandBase
  nameWithType.vb: UpdateCommandBase(Of TKey, TRequestData, TResultData).UpdateCommandBase
  fullName.vb: Apizr.Mediation.Cruding.Base.UpdateCommandBase(Of TKey, TRequestData, TResultData).UpdateCommandBase
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TRequestData}'
  commentId: '!:TRequestData'
  definition: TRequestData
  name: TRequestData
  nameWithType: TRequestData
  fullName: TRequestData
- uid: System.Action{System.Exception}
  commentId: T:System.Action{System.Exception}
  parent: System
  definition: System.Action`1
  name: Action<Exception>
  nameWithType: Action<Exception>
  fullName: System.Action<System.Exception>
  nameWithType.vb: Action(Of Exception)
  fullName.vb: System.Action(Of System.Exception)
  name.vb: Action(Of Exception)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TRequestData
  name: TRequestData
  nameWithType: TRequestData
  fullName: TRequestData
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Polly.Context
  commentId: T:Polly.Context
  parent: Polly
  isExternal: true
  name: Context
  nameWithType: Context
  fullName: Polly.Context
- uid: Polly
  commentId: N:Polly
  isExternal: true
  name: Polly
  nameWithType: Polly
  fullName: Polly
- uid: Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.Key*
  commentId: Overload:Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.Key
  name: Key
  nameWithType: UpdateCommandBase<TKey, TRequestData, TResultData>.Key
  fullName: Apizr.Mediation.Cruding.Base.UpdateCommandBase<TKey, TRequestData, TResultData>.Key
  nameWithType.vb: UpdateCommandBase(Of TKey, TRequestData, TResultData).Key
  fullName.vb: Apizr.Mediation.Cruding.Base.UpdateCommandBase(Of TKey, TRequestData, TResultData).Key
- uid: Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.RequestData*
  commentId: Overload:Apizr.Mediation.Cruding.Base.UpdateCommandBase`3.RequestData
  name: RequestData
  nameWithType: UpdateCommandBase<TKey, TRequestData, TResultData>.RequestData
  fullName: Apizr.Mediation.Cruding.Base.UpdateCommandBase<TKey, TRequestData, TResultData>.RequestData
  nameWithType.vb: UpdateCommandBase(Of TKey, TRequestData, TResultData).RequestData
  fullName.vb: Apizr.Mediation.Cruding.Base.UpdateCommandBase(Of TKey, TRequestData, TResultData).RequestData
