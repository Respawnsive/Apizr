### YamlMime:ManagedReference
items:
- uid: Apizr.Mediation.Cruding.DeleteCommand`2
  commentId: T:Apizr.Mediation.Cruding.DeleteCommand`2
  id: DeleteCommand`2
  parent: Apizr.Mediation.Cruding
  children:
  - Apizr.Mediation.Cruding.DeleteCommand`2.#ctor(`1,Polly.Context,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.DeleteCommand`2.#ctor(`1,System.Action{System.Exception})
  langs:
  - csharp
  - vb
  name: DeleteCommand<T, TKey>
  nameWithType: DeleteCommand<T, TKey>
  fullName: Apizr.Mediation.Cruding.DeleteCommand<T, TKey>
  type: Class
  source:
    id: DeleteCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\DeleteCommand.cs
    startLine: 7
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding
  syntax:
    content: 'public class DeleteCommand<T, TKey> : DeleteCommandBase<T, TKey, Unit>, IMediationCommand<TKey, Unit>, IRequest<Unit>, IBaseRequest'
    typeParameters:
    - id: T
    - id: TKey
    content.vb: >-
      Public Class DeleteCommand(Of T, TKey)
          Inherits DeleteCommandBase(Of T, TKey, Unit)
          Implements IMediationCommand(Of TKey, Unit), IRequest(Of Unit), IBaseRequest
  inheritance:
  - System.Object
  - Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}
  - Apizr.Mediation.Commanding.MediationCommandBase{{TKey},MediatR.Unit}
  - Apizr.Mediation.Cruding.Base.DeleteCommandBase{{T},{TKey},MediatR.Unit}
  implements:
  - Apizr.Mediation.Commanding.IMediationCommand{{TKey},MediatR.Unit}
  - MediatR.IRequest{MediatR.Unit}
  - MediatR.IBaseRequest
  inheritedMembers:
  - Apizr.Mediation.Cruding.Base.DeleteCommandBase{{T},{TKey},MediatR.Unit}.Key
  - Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}.Context
  - Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}.OnException
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: DeleteCommand(Of T, TKey)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Apizr.Mediation.Cruding.DeleteCommand(Of T, TKey)
  name.vb: DeleteCommand(Of T, TKey)
- uid: Apizr.Mediation.Cruding.DeleteCommand`2.#ctor(`1,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.DeleteCommand`2.#ctor(`1,System.Action{System.Exception})
  id: '#ctor(`1,System.Action{System.Exception})'
  parent: Apizr.Mediation.Cruding.DeleteCommand`2
  langs:
  - csharp
  - vb
  name: DeleteCommand(TKey, Action<Exception>)
  nameWithType: DeleteCommand<T, TKey>.DeleteCommand(TKey, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.DeleteCommand<T, TKey>.DeleteCommand(TKey, System.Action<System.Exception>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\DeleteCommand.cs
    startLine: 9
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding
  syntax:
    content: public DeleteCommand(TKey key, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TKey}'
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Public Sub New(key As TKey, onException As Action(Of Exception) = Nothing)
  overload: Apizr.Mediation.Cruding.DeleteCommand`2.#ctor*
  nameWithType.vb: DeleteCommand(Of T, TKey).DeleteCommand(TKey, Action(Of Exception))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Mediation.Cruding.DeleteCommand(Of T, TKey).DeleteCommand(TKey, System.Action(Of System.Exception))
  name.vb: DeleteCommand(TKey, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.DeleteCommand`2.#ctor(`1,Polly.Context,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.DeleteCommand`2.#ctor(`1,Polly.Context,System.Action{System.Exception})
  id: '#ctor(`1,Polly.Context,System.Action{System.Exception})'
  parent: Apizr.Mediation.Cruding.DeleteCommand`2
  langs:
  - csharp
  - vb
  name: DeleteCommand(TKey, Context, Action<Exception>)
  nameWithType: DeleteCommand<T, TKey>.DeleteCommand(TKey, Context, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.DeleteCommand<T, TKey>.DeleteCommand(TKey, Polly.Context, System.Action<System.Exception>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\DeleteCommand.cs
    startLine: 13
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding
  syntax:
    content: public DeleteCommand(TKey key, Context context, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TKey}'
    - id: context
      type: Polly.Context
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Public Sub New(key As TKey, context As Context, onException As Action(Of Exception) = Nothing)
  overload: Apizr.Mediation.Cruding.DeleteCommand`2.#ctor*
  nameWithType.vb: DeleteCommand(Of T, TKey).DeleteCommand(TKey, Context, Action(Of Exception))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Mediation.Cruding.DeleteCommand(Of T, TKey).DeleteCommand(TKey, Polly.Context, System.Action(Of System.Exception))
  name.vb: DeleteCommand(TKey, Context, Action(Of Exception))
references:
- uid: Apizr.Mediation.Cruding
  commentId: N:Apizr.Mediation.Cruding
  name: Apizr.Mediation.Cruding
  nameWithType: Apizr.Mediation.Cruding
  fullName: Apizr.Mediation.Cruding
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}
  commentId: T:Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}
  parent: Apizr.Mediation.Requesting.Base
  definition: Apizr.Mediation.Requesting.Base.RequestBase`1
  name: RequestBase<Unit>
  nameWithType: RequestBase<Unit>
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<MediatR.Unit>
  nameWithType.vb: RequestBase(Of Unit)
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of MediatR.Unit)
  name.vb: RequestBase(Of Unit)
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Base.RequestBase`1
    name: RequestBase
    nameWithType: RequestBase
    fullName: Apizr.Mediation.Requesting.Base.RequestBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Base.RequestBase`1
    name: RequestBase
    nameWithType: RequestBase
    fullName: Apizr.Mediation.Requesting.Base.RequestBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Commanding.MediationCommandBase{{TKey},MediatR.Unit}
  commentId: T:Apizr.Mediation.Commanding.MediationCommandBase{`1,MediatR.Unit}
  parent: Apizr.Mediation.Commanding
  definition: Apizr.Mediation.Commanding.MediationCommandBase`2
  name: MediationCommandBase<TKey, Unit>
  nameWithType: MediationCommandBase<TKey, Unit>
  fullName: Apizr.Mediation.Commanding.MediationCommandBase<TKey, MediatR.Unit>
  nameWithType.vb: MediationCommandBase(Of TKey, Unit)
  fullName.vb: Apizr.Mediation.Commanding.MediationCommandBase(Of TKey, MediatR.Unit)
  name.vb: MediationCommandBase(Of TKey, Unit)
  spec.csharp:
  - uid: Apizr.Mediation.Commanding.MediationCommandBase`2
    name: MediationCommandBase
    nameWithType: MediationCommandBase
    fullName: Apizr.Mediation.Commanding.MediationCommandBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Commanding.MediationCommandBase`2
    name: MediationCommandBase
    nameWithType: MediationCommandBase
    fullName: Apizr.Mediation.Commanding.MediationCommandBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Cruding.Base.DeleteCommandBase{{T},{TKey},MediatR.Unit}
  commentId: T:Apizr.Mediation.Cruding.Base.DeleteCommandBase{`0,`1,MediatR.Unit}
  parent: Apizr.Mediation.Cruding.Base
  definition: Apizr.Mediation.Cruding.Base.DeleteCommandBase`3
  name: DeleteCommandBase<T, TKey, Unit>
  nameWithType: DeleteCommandBase<T, TKey, Unit>
  fullName: Apizr.Mediation.Cruding.Base.DeleteCommandBase<T, TKey, MediatR.Unit>
  nameWithType.vb: DeleteCommandBase(Of T, TKey, Unit)
  fullName.vb: Apizr.Mediation.Cruding.Base.DeleteCommandBase(Of T, TKey, MediatR.Unit)
  name.vb: DeleteCommandBase(Of T, TKey, Unit)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.Base.DeleteCommandBase`3
    name: DeleteCommandBase
    nameWithType: DeleteCommandBase
    fullName: Apizr.Mediation.Cruding.Base.DeleteCommandBase
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.Base.DeleteCommandBase`3
    name: DeleteCommandBase
    nameWithType: DeleteCommandBase
    fullName: Apizr.Mediation.Cruding.Base.DeleteCommandBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Commanding.IMediationCommand{{TKey},MediatR.Unit}
  commentId: T:Apizr.Mediation.Commanding.IMediationCommand{`1,MediatR.Unit}
  parent: Apizr.Mediation.Commanding
  definition: Apizr.Mediation.Commanding.IMediationCommand`2
  name: IMediationCommand<TKey, Unit>
  nameWithType: IMediationCommand<TKey, Unit>
  fullName: Apizr.Mediation.Commanding.IMediationCommand<TKey, MediatR.Unit>
  nameWithType.vb: IMediationCommand(Of TKey, Unit)
  fullName.vb: Apizr.Mediation.Commanding.IMediationCommand(Of TKey, MediatR.Unit)
  name.vb: IMediationCommand(Of TKey, Unit)
  spec.csharp:
  - uid: Apizr.Mediation.Commanding.IMediationCommand`2
    name: IMediationCommand
    nameWithType: IMediationCommand
    fullName: Apizr.Mediation.Commanding.IMediationCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Commanding.IMediationCommand`2
    name: IMediationCommand
    nameWithType: IMediationCommand
    fullName: Apizr.Mediation.Commanding.IMediationCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR.IRequest{MediatR.Unit}
  commentId: T:MediatR.IRequest{MediatR.Unit}
  parent: MediatR
  definition: MediatR.IRequest`1
  name: IRequest<Unit>
  nameWithType: IRequest<Unit>
  fullName: MediatR.IRequest<MediatR.Unit>
  nameWithType.vb: IRequest(Of Unit)
  fullName.vb: MediatR.IRequest(Of MediatR.Unit)
  name.vb: IRequest(Of Unit)
  spec.csharp:
  - uid: MediatR.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: MediatR.IRequest
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatR.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: MediatR.IRequest
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR.IBaseRequest
  commentId: T:MediatR.IBaseRequest
  parent: MediatR
  isExternal: true
  name: IBaseRequest
  nameWithType: IBaseRequest
  fullName: MediatR.IBaseRequest
- uid: Apizr.Mediation.Cruding.Base.DeleteCommandBase{{T},{TKey},MediatR.Unit}.Key
  commentId: P:Apizr.Mediation.Cruding.Base.DeleteCommandBase{`0,`1,MediatR.Unit}.Key
  parent: Apizr.Mediation.Cruding.Base.DeleteCommandBase{{T},{TKey},MediatR.Unit}
  definition: Apizr.Mediation.Cruding.Base.DeleteCommandBase`3.Key
  name: Key
  nameWithType: DeleteCommandBase<T, TKey, Unit>.Key
  fullName: Apizr.Mediation.Cruding.Base.DeleteCommandBase<T, TKey, MediatR.Unit>.Key
  nameWithType.vb: DeleteCommandBase(Of T, TKey, Unit).Key
  fullName.vb: Apizr.Mediation.Cruding.Base.DeleteCommandBase(Of T, TKey, MediatR.Unit).Key
- uid: Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}.Context
  commentId: P:Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}.Context
  parent: Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}
  definition: Apizr.Mediation.Requesting.Base.RequestBase`1.Context
  name: Context
  nameWithType: RequestBase<Unit>.Context
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<MediatR.Unit>.Context
  nameWithType.vb: RequestBase(Of Unit).Context
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of MediatR.Unit).Context
- uid: Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}.OnException
  commentId: P:Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}.OnException
  parent: Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}
  definition: Apizr.Mediation.Requesting.Base.RequestBase`1.OnException
  name: OnException
  nameWithType: RequestBase<Unit>.OnException
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<MediatR.Unit>.OnException
  nameWithType.vb: RequestBase(Of Unit).OnException
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of MediatR.Unit).OnException
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Apizr.Mediation.Requesting.Base.RequestBase`1
  commentId: T:Apizr.Mediation.Requesting.Base.RequestBase`1
  name: RequestBase<TFormattedModelResultData>
  nameWithType: RequestBase<TFormattedModelResultData>
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<TFormattedModelResultData>
  nameWithType.vb: RequestBase(Of TFormattedModelResultData)
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of TFormattedModelResultData)
  name.vb: RequestBase(Of TFormattedModelResultData)
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Base.RequestBase`1
    name: RequestBase
    nameWithType: RequestBase
    fullName: Apizr.Mediation.Requesting.Base.RequestBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFormattedModelResultData
    nameWithType: TFormattedModelResultData
    fullName: TFormattedModelResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Base.RequestBase`1
    name: RequestBase
    nameWithType: RequestBase
    fullName: Apizr.Mediation.Requesting.Base.RequestBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFormattedModelResultData
    nameWithType: TFormattedModelResultData
    fullName: TFormattedModelResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Requesting.Base
  commentId: N:Apizr.Mediation.Requesting.Base
  name: Apizr.Mediation.Requesting.Base
  nameWithType: Apizr.Mediation.Requesting.Base
  fullName: Apizr.Mediation.Requesting.Base
- uid: Apizr.Mediation.Commanding.MediationCommandBase`2
  commentId: T:Apizr.Mediation.Commanding.MediationCommandBase`2
  name: MediationCommandBase<TRequestData, TResultData>
  nameWithType: MediationCommandBase<TRequestData, TResultData>
  fullName: Apizr.Mediation.Commanding.MediationCommandBase<TRequestData, TResultData>
  nameWithType.vb: MediationCommandBase(Of TRequestData, TResultData)
  fullName.vb: Apizr.Mediation.Commanding.MediationCommandBase(Of TRequestData, TResultData)
  name.vb: MediationCommandBase(Of TRequestData, TResultData)
  spec.csharp:
  - uid: Apizr.Mediation.Commanding.MediationCommandBase`2
    name: MediationCommandBase
    nameWithType: MediationCommandBase
    fullName: Apizr.Mediation.Commanding.MediationCommandBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Commanding.MediationCommandBase`2
    name: MediationCommandBase
    nameWithType: MediationCommandBase
    fullName: Apizr.Mediation.Commanding.MediationCommandBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Commanding
  commentId: N:Apizr.Mediation.Commanding
  name: Apizr.Mediation.Commanding
  nameWithType: Apizr.Mediation.Commanding
  fullName: Apizr.Mediation.Commanding
- uid: Apizr.Mediation.Cruding.Base.DeleteCommandBase`3
  commentId: T:Apizr.Mediation.Cruding.Base.DeleteCommandBase`3
  name: DeleteCommandBase<T, TKey, TResultData>
  nameWithType: DeleteCommandBase<T, TKey, TResultData>
  fullName: Apizr.Mediation.Cruding.Base.DeleteCommandBase<T, TKey, TResultData>
  nameWithType.vb: DeleteCommandBase(Of T, TKey, TResultData)
  fullName.vb: Apizr.Mediation.Cruding.Base.DeleteCommandBase(Of T, TKey, TResultData)
  name.vb: DeleteCommandBase(Of T, TKey, TResultData)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.Base.DeleteCommandBase`3
    name: DeleteCommandBase
    nameWithType: DeleteCommandBase
    fullName: Apizr.Mediation.Cruding.Base.DeleteCommandBase
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.Base.DeleteCommandBase`3
    name: DeleteCommandBase
    nameWithType: DeleteCommandBase
    fullName: Apizr.Mediation.Cruding.Base.DeleteCommandBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Cruding.Base
  commentId: N:Apizr.Mediation.Cruding.Base
  name: Apizr.Mediation.Cruding.Base
  nameWithType: Apizr.Mediation.Cruding.Base
  fullName: Apizr.Mediation.Cruding.Base
- uid: Apizr.Mediation.Commanding.IMediationCommand`2
  commentId: T:Apizr.Mediation.Commanding.IMediationCommand`2
  name: IMediationCommand<TRequestData, TResultData>
  nameWithType: IMediationCommand<TRequestData, TResultData>
  fullName: Apizr.Mediation.Commanding.IMediationCommand<TRequestData, TResultData>
  nameWithType.vb: IMediationCommand(Of TRequestData, TResultData)
  fullName.vb: Apizr.Mediation.Commanding.IMediationCommand(Of TRequestData, TResultData)
  name.vb: IMediationCommand(Of TRequestData, TResultData)
  spec.csharp:
  - uid: Apizr.Mediation.Commanding.IMediationCommand`2
    name: IMediationCommand
    nameWithType: IMediationCommand
    fullName: Apizr.Mediation.Commanding.IMediationCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Commanding.IMediationCommand`2
    name: IMediationCommand
    nameWithType: IMediationCommand
    fullName: Apizr.Mediation.Commanding.IMediationCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR.IRequest`1
  commentId: T:MediatR.IRequest`1
  isExternal: true
  name: IRequest<TResponse>
  nameWithType: IRequest<TResponse>
  fullName: MediatR.IRequest<TResponse>
  nameWithType.vb: IRequest(Of TResponse)
  fullName.vb: MediatR.IRequest(Of TResponse)
  name.vb: IRequest(Of TResponse)
  spec.csharp:
  - uid: MediatR.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: MediatR.IRequest
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatR.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: MediatR.IRequest
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR
  commentId: N:MediatR
  isExternal: true
  name: MediatR
  nameWithType: MediatR
  fullName: MediatR
- uid: Apizr.Mediation.Cruding.Base.DeleteCommandBase`3.Key
  commentId: P:Apizr.Mediation.Cruding.Base.DeleteCommandBase`3.Key
  name: Key
  nameWithType: DeleteCommandBase<T, TKey, TResultData>.Key
  fullName: Apizr.Mediation.Cruding.Base.DeleteCommandBase<T, TKey, TResultData>.Key
  nameWithType.vb: DeleteCommandBase(Of T, TKey, TResultData).Key
  fullName.vb: Apizr.Mediation.Cruding.Base.DeleteCommandBase(Of T, TKey, TResultData).Key
- uid: Apizr.Mediation.Requesting.Base.RequestBase`1.Context
  commentId: P:Apizr.Mediation.Requesting.Base.RequestBase`1.Context
  name: Context
  nameWithType: RequestBase<TFormattedModelResultData>.Context
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<TFormattedModelResultData>.Context
  nameWithType.vb: RequestBase(Of TFormattedModelResultData).Context
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of TFormattedModelResultData).Context
- uid: Apizr.Mediation.Requesting.Base.RequestBase`1.OnException
  commentId: P:Apizr.Mediation.Requesting.Base.RequestBase`1.OnException
  name: OnException
  nameWithType: RequestBase<TFormattedModelResultData>.OnException
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<TFormattedModelResultData>.OnException
  nameWithType.vb: RequestBase(Of TFormattedModelResultData).OnException
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of TFormattedModelResultData).OnException
- uid: Apizr.Mediation.Cruding.DeleteCommand`2.#ctor*
  commentId: Overload:Apizr.Mediation.Cruding.DeleteCommand`2.#ctor
  name: DeleteCommand
  nameWithType: DeleteCommand<T, TKey>.DeleteCommand
  fullName: Apizr.Mediation.Cruding.DeleteCommand<T, TKey>.DeleteCommand
  nameWithType.vb: DeleteCommand(Of T, TKey).DeleteCommand
  fullName.vb: Apizr.Mediation.Cruding.DeleteCommand(Of T, TKey).DeleteCommand
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Action{System.Exception}
  commentId: T:System.Action{System.Exception}
  parent: System
  definition: System.Action`1
  name: Action<Exception>
  nameWithType: Action<Exception>
  fullName: System.Action<System.Exception>
  nameWithType.vb: Action(Of Exception)
  fullName.vb: System.Action(Of System.Exception)
  name.vb: Action(Of Exception)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Polly.Context
  commentId: T:Polly.Context
  parent: Polly
  isExternal: true
  name: Context
  nameWithType: Context
  fullName: Polly.Context
- uid: Polly
  commentId: N:Polly
  isExternal: true
  name: Polly
  nameWithType: Polly
  fullName: Polly
