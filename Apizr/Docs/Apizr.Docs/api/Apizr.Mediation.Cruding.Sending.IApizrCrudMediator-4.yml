### YamlMime:ManagedReference
items:
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  commentId: T:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  id: IApizrCrudMediator`4
  parent: Apizr.Mediation.Cruding.Sending
  children:
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand(`0,Polly.Context,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand(`0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand(`0,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand(`0,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand``1(``0,Polly.Context,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand``1(``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand``1(``0,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand``1(``0,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand(`1,Polly.Context,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand(`1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand(`1,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand(`1,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Int32,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Int32,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Int32,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Int32,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Int32,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Int32,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand(`1,`0,Polly.Context,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand(`1,`0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand(`1,`0,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand(`1,`0,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand``1(`1,``0,Polly.Context,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand``1(`1,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand``1(`1,``0,System.Action{System.Exception})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand``1(`1,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  langs:
  - csharp
  - vb
  name: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>
  type: Interface
  source:
    id: IApizrCrudMediator
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 944
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nApizr mediator dedicated to <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TApiEntity</code> cruding, getting all shorter\n"
  example: []
  syntax:
    content: 'public interface IApizrCrudMediator<TApiEntity, in TApiEntityKey, TReadAllResult, in TReadAllParams> : IApizrCrudMediatorBase, IApizrMediatorBase where TApiEntity : class'
    typeParameters:
    - id: TApiEntity
    - id: TApiEntityKey
    - id: TReadAllResult
    - id: TReadAllParams
    content.vb: >-
      Public Interface IApizrCrudMediator(Of TApiEntity As Class, In TApiEntityKey, TReadAllResult, In TReadAllParams)
          Inherits IApizrCrudMediatorBase
  extensionMethods:
  - System.Object.Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)
  name.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand(`0,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand(`0,System.Action{System.Exception})
  id: SendCreateCommand(`0,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendCreateCommand(TApiEntity, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand(TApiEntity, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand(TApiEntity, System.Action<System.Exception>)
  type: Method
  source:
    id: SendCreateCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 957
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task<TApiEntity> SendCreateCommand(TApiEntity entity, Action<Exception> onException = null)
    parameters:
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: Function SendCreateCommand(entity As TApiEntity, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand(TApiEntity, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand(TApiEntity, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(TApiEntity, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand(`0,Polly.Context,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand(`0,Polly.Context,System.Action{System.Exception})
  id: SendCreateCommand(`0,Polly.Context,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendCreateCommand(TApiEntity, Context, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand(TApiEntity, Context, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand(TApiEntity, Polly.Context, System.Action<System.Exception>)
  type: Method
  source:
    id: SendCreateCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 966
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task<TApiEntity> SendCreateCommand(TApiEntity entity, Context context, Action<Exception> onException = null)
    parameters:
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: Function SendCreateCommand(entity As TApiEntity, context As Context, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand(TApiEntity, Context, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand(TApiEntity, Polly.Context, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(TApiEntity, Context, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand(`0,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand(`0,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendCreateCommand(`0,System.Threading.CancellationToken,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendCreateCommand(TApiEntity, CancellationToken, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand(TApiEntity, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand(TApiEntity, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    id: SendCreateCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 975
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task<TApiEntity> SendCreateCommand(TApiEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null)
    parameters:
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: Function SendCreateCommand(entity As TApiEntity, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand(TApiEntity, CancellationToken, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand(TApiEntity, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(TApiEntity, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand(`0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand(`0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendCreateCommand(`0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendCreateCommand(TApiEntity, Context, CancellationToken, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand(TApiEntity, Context, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand(TApiEntity, Polly.Context, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    id: SendCreateCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 985
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task<TApiEntity> SendCreateCommand(TApiEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null)
    parameters:
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: Function SendCreateCommand(entity As TApiEntity, context As Context, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand(TApiEntity, Context, CancellationToken, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand(TApiEntity, Polly.Context, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(TApiEntity, Context, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand``1(``0,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand``1(``0,System.Action{System.Exception})
  id: SendCreateCommand``1(``0,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendCreateCommand<TModelEntity>(TModelEntity, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand<TModelEntity>(TModelEntity, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand<TModelEntity>(TModelEntity, System.Action<System.Exception>)
  type: Method
  source:
    id: SendCreateCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 998
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntity> SendCreateCommand<TModelEntity>(TModelEntity entity, Action<Exception> onException = null)
    parameters:
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: Function SendCreateCommand(Of TModelEntity)(entity As TModelEntity, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand(Of TModelEntity)(TModelEntity, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand(Of TModelEntity)(TModelEntity, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(Of TModelEntity)(TModelEntity, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand``1(``0,Polly.Context,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand``1(``0,Polly.Context,System.Action{System.Exception})
  id: SendCreateCommand``1(``0,Polly.Context,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendCreateCommand<TModelEntity>(TModelEntity, Context, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand<TModelEntity>(TModelEntity, Context, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand<TModelEntity>(TModelEntity, Polly.Context, System.Action<System.Exception>)
  type: Method
  source:
    id: SendCreateCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1008
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntity> SendCreateCommand<TModelEntity>(TModelEntity entity, Context context, Action<Exception> onException = null)
    parameters:
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: Function SendCreateCommand(Of TModelEntity)(entity As TModelEntity, context As Context, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand(Of TModelEntity)(TModelEntity, Context, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand(Of TModelEntity)(TModelEntity, Polly.Context, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(Of TModelEntity)(TModelEntity, Context, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand``1(``0,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand``1(``0,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendCreateCommand``1(``0,System.Threading.CancellationToken,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendCreateCommand<TModelEntity>(TModelEntity, CancellationToken, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand<TModelEntity>(TModelEntity, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand<TModelEntity>(TModelEntity, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    id: SendCreateCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1018
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntity> SendCreateCommand<TModelEntity>(TModelEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null)
    parameters:
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: Function SendCreateCommand(Of TModelEntity)(entity As TModelEntity, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand(Of TModelEntity)(TModelEntity, CancellationToken, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand(Of TModelEntity)(TModelEntity, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(Of TModelEntity)(TModelEntity, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand``1(``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand``1(``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendCreateCommand``1(``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendCreateCommand<TModelEntity>(TModelEntity, Context, CancellationToken, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand<TModelEntity>(TModelEntity, Context, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand<TModelEntity>(TModelEntity, Polly.Context, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    id: SendCreateCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1029
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntity> SendCreateCommand<TModelEntity>(TModelEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null)
    parameters:
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: Function SendCreateCommand(Of TModelEntity)(entity As TModelEntity, context As Context, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand(Of TModelEntity)(TModelEntity, Context, CancellationToken, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand(Of TModelEntity)(TModelEntity, Polly.Context, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(Of TModelEntity)(TModelEntity, Context, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery(System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery(Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1045
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task<TReadAllResult> SendReadAllQuery(bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery(Polly.Context,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery(Context, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1054
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task<TReadAllResult> SendReadAllQuery(Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Context, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery(System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery(CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1063
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task<TReadAllResult> SendReadAllQuery(CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Int32,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Int32,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery(System.Int32,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery(Int32, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(Int32, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(System.Int32, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1072
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: Task<TReadAllResult> SendReadAllQuery(int priority, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(priority As Integer, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Int32, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(System.Int32, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Int32, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery(System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery(Int32, Context, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(Int32, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(System.Int32, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1082
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: Task<TReadAllResult> SendReadAllQuery(int priority, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(priority As Integer, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Int32, Context, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(System.Int32, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Int32, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery(System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery(Int32, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(Int32, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1092
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: Task<TReadAllResult> SendReadAllQuery(int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Int32, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Int32, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery(Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery(Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1102
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: Task<TReadAllResult> SendReadAllQuery(Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Context, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery(Int32, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(Int32, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1113
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: Task<TReadAllResult> SendReadAllQuery(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Int32, Context, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Int32, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelEntityReadAllResult>(Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1126
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: The mapped result
    return:
      type: System.Threading.Tasks.Task{{TModelEntityReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(Of TModelEntityReadAllResult)(clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntityReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelEntityReadAllResult)(Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(Polly.Context,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelEntityReadAllResult>(Context, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1136
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: The mapped result
    return:
      type: System.Threading.Tasks.Task{{TModelEntityReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(Of TModelEntityReadAllResult)(context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntityReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(Context, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelEntityReadAllResult)(Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelEntityReadAllResult>(CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1146
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: The mapped result
    return:
      type: System.Threading.Tasks.Task{{TModelEntityReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(Of TModelEntityReadAllResult)(cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntityReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelEntityReadAllResult)(CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Int32,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Int32,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(System.Int32,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelEntityReadAllResult>(Int32, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(Int32, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(System.Int32, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1156
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(int priority, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: The mapped result
    return:
      type: System.Threading.Tasks.Task{{TModelEntityReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(Of TModelEntityReadAllResult)(priority As Integer, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntityReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(Int32, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(System.Int32, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelEntityReadAllResult)(Int32, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelEntityReadAllResult>(Int32, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(Int32, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1167
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: The mapped result
    return:
      type: System.Threading.Tasks.Task{{TModelEntityReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(Of TModelEntityReadAllResult)(priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntityReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(Int32, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelEntityReadAllResult)(Int32, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelEntityReadAllResult>(Int32, Context, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(Int32, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(System.Int32, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1179
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(int priority, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: The mapped result
    return:
      type: System.Threading.Tasks.Task{{TModelEntityReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(Of TModelEntityReadAllResult)(priority As Integer, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntityReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(Int32, Context, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(System.Int32, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelEntityReadAllResult)(Int32, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelEntityReadAllResult>(Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1190
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: The mapped result
    return:
      type: System.Threading.Tasks.Task{{TModelEntityReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(Of TModelEntityReadAllResult)(context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntityReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(Context, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelEntityReadAllResult)(Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelEntityReadAllResult>(Int32, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(Int32, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1203
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: The mapped result
    return:
      type: System.Threading.Tasks.Task{{TModelEntityReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(Of TModelEntityReadAllResult)(priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntityReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(Int32, Context, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelEntityReadAllResult)(Int32, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery(`3,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery(TReadAllParams, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(TReadAllParams, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(TReadAllParams, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1217
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(readAllParams As TReadAllParams, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(TReadAllParams, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(TReadAllParams, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(TReadAllParams, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery(`3,Polly.Context,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery(TReadAllParams, Context, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(TReadAllParams, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(TReadAllParams, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1227
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(readAllParams As TReadAllParams, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(TReadAllParams, Context, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(TReadAllParams, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(TReadAllParams, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery(`3,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery(TReadAllParams, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(TReadAllParams, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(TReadAllParams, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1237
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(readAllParams As TReadAllParams, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(TReadAllParams, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(TReadAllParams, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(TReadAllParams, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Int32,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Int32,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery(`3,System.Int32,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery(TReadAllParams, Int32, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(TReadAllParams, Int32, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(TReadAllParams, System.Int32, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1248
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, int priority, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(readAllParams As TReadAllParams, priority As Integer, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(TReadAllParams, Int32, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(TReadAllParams, System.Int32, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(TReadAllParams, Int32, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery(`3,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery(TReadAllParams, Int32, Context, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(TReadAllParams, Int32, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(TReadAllParams, System.Int32, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1260
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(readAllParams As TReadAllParams, priority As Integer, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(TReadAllParams, Int32, Context, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(TReadAllParams, System.Int32, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(TReadAllParams, Int32, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery(`3,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery(TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1272
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(readAllParams As TReadAllParams, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(TReadAllParams, Int32, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(TReadAllParams, Int32, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery(`3,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery(TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1285
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(readAllParams As TReadAllParams, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(TReadAllParams, Context, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(TReadAllParams, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery(`3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery(TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1298
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(readAllParams As TReadAllParams, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(TReadAllParams, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(TReadAllParams, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(`3,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1314
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntityReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(Of TModelEntityReadAllResult)(readAllParams As TReadAllParams, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntityReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(`3,Polly.Context,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Context, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1325
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntityReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(Of TModelEntityReadAllResult)(readAllParams As TReadAllParams, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntityReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, Context, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(`3,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1336
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntityReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(Of TModelEntityReadAllResult)(readAllParams As TReadAllParams, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntityReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Int32,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Int32,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(`3,System.Int32,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, System.Int32, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1348
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, int priority, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntityReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(Of TModelEntityReadAllResult)(readAllParams As TReadAllParams, priority As Integer, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntityReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, Int32, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, System.Int32, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, Int32, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(`3,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, Context, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, System.Int32, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1361
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntityReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(Of TModelEntityReadAllResult)(readAllParams As TReadAllParams, priority As Integer, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntityReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, Int32, Context, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, System.Int32, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, Int32, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(`3,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1374
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntityReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(Of TModelEntityReadAllResult)(readAllParams As TReadAllParams, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntityReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, Int32, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, Int32, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(`3,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1388
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntityReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(Of TModelEntityReadAllResult)(readAllParams As TReadAllParams, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntityReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, Context, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(`3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1402
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntityReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(Of TModelEntityReadAllResult)(readAllParams As TReadAllParams, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntityReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery(`1,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadQuery(TApiEntityKey, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery(TApiEntityKey, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery(TApiEntityKey, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1421
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task<TApiEntity> SendReadQuery(TApiEntityKey key, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: Function SendReadQuery(key As TApiEntityKey, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(TApiEntityKey, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(TApiEntityKey, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(TApiEntityKey, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery(`1,Polly.Context,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadQuery(TApiEntityKey, Context, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery(TApiEntityKey, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery(TApiEntityKey, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1431
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task<TApiEntity> SendReadQuery(TApiEntityKey key, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: Function SendReadQuery(key As TApiEntityKey, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(TApiEntityKey, Context, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(TApiEntityKey, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(TApiEntityKey, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery(`1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadQuery(TApiEntityKey, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery(TApiEntityKey, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery(TApiEntityKey, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1441
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task<TApiEntity> SendReadQuery(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: Function SendReadQuery(key As TApiEntityKey, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(TApiEntityKey, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(TApiEntityKey, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(TApiEntityKey, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Int32,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Int32,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery(`1,System.Int32,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadQuery(TApiEntityKey, Int32, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery(TApiEntityKey, Int32, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery(TApiEntityKey, System.Int32, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1452
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: Task<TApiEntity> SendReadQuery(TApiEntityKey key, int priority, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: Function SendReadQuery(key As TApiEntityKey, priority As Integer, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(TApiEntityKey, Int32, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(TApiEntityKey, System.Int32, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(TApiEntityKey, Int32, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery(`1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadQuery(TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery(TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery(TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1464
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task<TApiEntity> SendReadQuery(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: Function SendReadQuery(key As TApiEntityKey, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(TApiEntityKey, Context, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(TApiEntityKey, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery(`1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadQuery(TApiEntityKey, Int32, Context, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery(TApiEntityKey, Int32, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery(TApiEntityKey, System.Int32, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1476
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: Task<TApiEntity> SendReadQuery(TApiEntityKey key, int priority, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: Function SendReadQuery(key As TApiEntityKey, priority As Integer, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(TApiEntityKey, Int32, Context, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(TApiEntityKey, System.Int32, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(TApiEntityKey, Int32, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery(`1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadQuery(TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery(TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery(TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1488
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: Task<TApiEntity> SendReadQuery(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: Function SendReadQuery(key As TApiEntityKey, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(TApiEntityKey, Int32, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(TApiEntityKey, Int32, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery(`1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadQuery(TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery(TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery(TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1502
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: Task<TApiEntity> SendReadQuery(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: Function SendReadQuery(key As TApiEntityKey, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``1(`1,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity>(TApiEntityKey, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery<TModelEntity>(TApiEntityKey, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery<TModelEntity>(TApiEntityKey, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1518
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: Function SendReadQuery(Of TModelEntity)(key As TApiEntityKey, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(Of TModelEntity)(TApiEntityKey, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(Of TModelEntity)(TApiEntityKey, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity)(TApiEntityKey, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``1(`1,Polly.Context,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity>(TApiEntityKey, Context, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery<TModelEntity>(TApiEntityKey, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery<TModelEntity>(TApiEntityKey, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1529
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: Function SendReadQuery(Of TModelEntity)(key As TApiEntityKey, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(Of TModelEntity)(TApiEntityKey, Context, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(Of TModelEntity)(TApiEntityKey, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity)(TApiEntityKey, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``1(`1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity>(TApiEntityKey, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery<TModelEntity>(TApiEntityKey, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery<TModelEntity>(TApiEntityKey, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1540
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: Function SendReadQuery(Of TModelEntity)(key As TApiEntityKey, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(Of TModelEntity)(TApiEntityKey, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(Of TModelEntity)(TApiEntityKey, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity)(TApiEntityKey, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Int32,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Int32,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``1(`1,System.Int32,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity>(TApiEntityKey, Int32, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery<TModelEntity>(TApiEntityKey, Int32, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery<TModelEntity>(TApiEntityKey, System.Int32, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1552
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, int priority, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: Function SendReadQuery(Of TModelEntity)(key As TApiEntityKey, priority As Integer, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(Of TModelEntity)(TApiEntityKey, Int32, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(Of TModelEntity)(TApiEntityKey, System.Int32, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity)(TApiEntityKey, Int32, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``1(`1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity>(TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery<TModelEntity>(TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery<TModelEntity>(TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1565
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: Function SendReadQuery(Of TModelEntity)(key As TApiEntityKey, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(Of TModelEntity)(TApiEntityKey, Context, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(Of TModelEntity)(TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity)(TApiEntityKey, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``1(`1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity>(TApiEntityKey, Int32, Context, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery<TModelEntity>(TApiEntityKey, Int32, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery<TModelEntity>(TApiEntityKey, System.Int32, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1578
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, int priority, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: Function SendReadQuery(Of TModelEntity)(key As TApiEntityKey, priority As Integer, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(Of TModelEntity)(TApiEntityKey, Int32, Context, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(Of TModelEntity)(TApiEntityKey, System.Int32, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity)(TApiEntityKey, Int32, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``1(`1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity>(TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery<TModelEntity>(TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery<TModelEntity>(TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1591
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: Function SendReadQuery(Of TModelEntity)(key As TApiEntityKey, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(Of TModelEntity)(TApiEntityKey, Int32, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(Of TModelEntity)(TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity)(TApiEntityKey, Int32, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``1(`1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity>(TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery<TModelEntity>(TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery<TModelEntity>(TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1606
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: Function SendReadQuery(Of TModelEntity)(key As TApiEntityKey, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(Of TModelEntity)(TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(Of TModelEntity)(TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity)(TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand(`1,`0,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand(`1,`0,System.Action{System.Exception})
  id: SendUpdateCommand(`1,`0,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendUpdateCommand(TApiEntityKey, TApiEntity, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand(TApiEntityKey, TApiEntity, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand(TApiEntityKey, TApiEntity, System.Action<System.Exception>)
  type: Method
  source:
    id: SendUpdateCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1625
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task SendUpdateCommand(TApiEntityKey key, TApiEntity entity, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SendUpdateCommand(key As TApiEntityKey, entity As TApiEntity, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand(TApiEntityKey, TApiEntity, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand(TApiEntityKey, TApiEntity, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(TApiEntityKey, TApiEntity, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand(`1,`0,Polly.Context,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand(`1,`0,Polly.Context,System.Action{System.Exception})
  id: SendUpdateCommand(`1,`0,Polly.Context,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendUpdateCommand(TApiEntityKey, TApiEntity, Context, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand(TApiEntityKey, TApiEntity, Context, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand(TApiEntityKey, TApiEntity, Polly.Context, System.Action<System.Exception>)
  type: Method
  source:
    id: SendUpdateCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1636
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task SendUpdateCommand(TApiEntityKey key, TApiEntity entity, Context context, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SendUpdateCommand(key As TApiEntityKey, entity As TApiEntity, context As Context, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand(TApiEntityKey, TApiEntity, Context, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand(TApiEntityKey, TApiEntity, Polly.Context, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(TApiEntityKey, TApiEntity, Context, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand(`1,`0,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand(`1,`0,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendUpdateCommand(`1,`0,System.Threading.CancellationToken,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendUpdateCommand(TApiEntityKey, TApiEntity, CancellationToken, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand(TApiEntityKey, TApiEntity, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand(TApiEntityKey, TApiEntity, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    id: SendUpdateCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1647
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task SendUpdateCommand(TApiEntityKey key, TApiEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SendUpdateCommand(key As TApiEntityKey, entity As TApiEntity, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand(TApiEntityKey, TApiEntity, CancellationToken, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand(TApiEntityKey, TApiEntity, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(TApiEntityKey, TApiEntity, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand(`1,`0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand(`1,`0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendUpdateCommand(`1,`0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendUpdateCommand(TApiEntityKey, TApiEntity, Context, CancellationToken, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand(TApiEntityKey, TApiEntity, Context, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand(TApiEntityKey, TApiEntity, Polly.Context, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    id: SendUpdateCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1660
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task SendUpdateCommand(TApiEntityKey key, TApiEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SendUpdateCommand(key As TApiEntityKey, entity As TApiEntity, context As Context, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand(TApiEntityKey, TApiEntity, Context, CancellationToken, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand(TApiEntityKey, TApiEntity, Polly.Context, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(TApiEntityKey, TApiEntity, Context, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand``1(`1,``0,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand``1(`1,``0,System.Action{System.Exception})
  id: SendUpdateCommand``1(`1,``0,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, System.Action<System.Exception>)
  type: Method
  source:
    id: SendUpdateCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1676
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task SendUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SendUpdateCommand(Of TModelEntity)(key As TApiEntityKey, entity As TModelEntity, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand``1(`1,``0,Polly.Context,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand``1(`1,``0,Polly.Context,System.Action{System.Exception})
  id: SendUpdateCommand``1(`1,``0,Polly.Context,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Context, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Context, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Polly.Context, System.Action<System.Exception>)
  type: Method
  source:
    id: SendUpdateCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1688
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task SendUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, Context context, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SendUpdateCommand(Of TModelEntity)(key As TApiEntityKey, entity As TModelEntity, context As Context, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, Context, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, Polly.Context, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, Context, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand``1(`1,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand``1(`1,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendUpdateCommand``1(`1,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, CancellationToken, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    id: SendUpdateCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1700
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task SendUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SendUpdateCommand(Of TModelEntity)(key As TApiEntityKey, entity As TModelEntity, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, CancellationToken, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand``1(`1,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand``1(`1,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendUpdateCommand``1(`1,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Context, CancellationToken, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Context, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Polly.Context, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    id: SendUpdateCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1714
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task SendUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SendUpdateCommand(Of TModelEntity)(key As TApiEntityKey, entity As TModelEntity, context As Context, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, Context, CancellationToken, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, Polly.Context, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, Context, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand(`1,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand(`1,System.Action{System.Exception})
  id: SendDeleteCommand(`1,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendDeleteCommand(TApiEntityKey, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteCommand(TApiEntityKey, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteCommand(TApiEntityKey, System.Action<System.Exception>)
  type: Method
  source:
    id: SendDeleteCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1730
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task SendDeleteCommand(TApiEntityKey key, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SendDeleteCommand(key As TApiEntityKey, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteCommand(TApiEntityKey, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteCommand(TApiEntityKey, System.Action(Of System.Exception))
  name.vb: SendDeleteCommand(TApiEntityKey, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand(`1,Polly.Context,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand(`1,Polly.Context,System.Action{System.Exception})
  id: SendDeleteCommand(`1,Polly.Context,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendDeleteCommand(TApiEntityKey, Context, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteCommand(TApiEntityKey, Context, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteCommand(TApiEntityKey, Polly.Context, System.Action<System.Exception>)
  type: Method
  source:
    id: SendDeleteCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1739
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task SendDeleteCommand(TApiEntityKey key, Context context, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SendDeleteCommand(key As TApiEntityKey, context As Context, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteCommand(TApiEntityKey, Context, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteCommand(TApiEntityKey, Polly.Context, System.Action(Of System.Exception))
  name.vb: SendDeleteCommand(TApiEntityKey, Context, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand(`1,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand(`1,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendDeleteCommand(`1,System.Threading.CancellationToken,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendDeleteCommand(TApiEntityKey, CancellationToken, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteCommand(TApiEntityKey, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteCommand(TApiEntityKey, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    id: SendDeleteCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1748
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task SendDeleteCommand(TApiEntityKey key, CancellationToken cancellationToken, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SendDeleteCommand(key As TApiEntityKey, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteCommand(TApiEntityKey, CancellationToken, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteCommand(TApiEntityKey, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendDeleteCommand(TApiEntityKey, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand(`1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand(`1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendDeleteCommand(`1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendDeleteCommand(TApiEntityKey, Context, CancellationToken, Action<Exception>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteCommand(TApiEntityKey, Context, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteCommand(TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    id: SendDeleteCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Cruding\Sending\IApizrCrudMediator.cs
    startLine: 1759
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: Task SendDeleteCommand(TApiEntityKey key, Context context, CancellationToken cancellationToken, Action<Exception> onException = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SendDeleteCommand(key As TApiEntityKey, context As Context, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteCommand(TApiEntityKey, Context, CancellationToken, Action(Of Exception))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteCommand(TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendDeleteCommand(TApiEntityKey, Context, CancellationToken, Action(Of Exception))
references:
- uid: Apizr.Mediation.Cruding.Sending
  commentId: N:Apizr.Mediation.Cruding.Sending
  name: Apizr.Mediation.Cruding.Sending
  nameWithType: Apizr.Mediation.Cruding.Sending
  fullName: Apizr.Mediation.Cruding.Sending
- uid: System.Object.Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
  commentId: M:Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  parent: Apizr.Extending.ObjectExtensions
  definition: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  name: ToString(String, String)
  nameWithType: ObjectExtensions.ToString(String, String)
  fullName: Apizr.Extending.ObjectExtensions.ToString(System.String, System.String)
  spec.csharp:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  commentId: M:Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  isExternal: true
  name: ToString(Object, String, String)
  nameWithType: ObjectExtensions.ToString(Object, String, String)
  fullName: Apizr.Extending.ObjectExtensions.ToString(System.Object, System.String, System.String)
  spec.csharp:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Extending.ObjectExtensions
  commentId: T:Apizr.Extending.ObjectExtensions
  parent: Apizr.Extending
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Apizr.Extending.ObjectExtensions
- uid: Apizr.Extending
  commentId: N:Apizr.Extending
  name: Apizr.Extending
  nameWithType: Apizr.Extending
  fullName: Apizr.Extending
- uid: Apizr.Mediation.Cruding.CreateCommand`1
  commentId: T:Apizr.Mediation.Cruding.CreateCommand`1
  name: CreateCommand<TModelData>
  nameWithType: CreateCommand<TModelData>
  fullName: Apizr.Mediation.Cruding.CreateCommand<TModelData>
  nameWithType.vb: CreateCommand(Of TModelData)
  fullName.vb: Apizr.Mediation.Cruding.CreateCommand(Of TModelData)
  name.vb: CreateCommand(Of TModelData)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.CreateCommand`1
    name: CreateCommand
    nameWithType: CreateCommand
    fullName: Apizr.Mediation.Cruding.CreateCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.CreateCommand`1
    name: CreateCommand
    nameWithType: CreateCommand
    fullName: Apizr.Mediation.Cruding.CreateCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand*
  commentId: Overload:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand
  name: SendCreateCommand
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand
- uid: '{TApiEntity}'
  commentId: '!:TApiEntity'
  definition: TApiEntity
  name: TApiEntity
  nameWithType: TApiEntity
  fullName: TApiEntity
- uid: System.Action{System.Exception}
  commentId: T:System.Action{System.Exception}
  parent: System
  definition: System.Action`1
  name: Action<Exception>
  nameWithType: Action<Exception>
  fullName: System.Action<System.Exception>
  nameWithType.vb: Action(Of Exception)
  fullName.vb: System.Action(Of System.Exception)
  name.vb: Action(Of Exception)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TApiEntity}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TApiEntity>
  nameWithType: Task<TApiEntity>
  fullName: System.Threading.Tasks.Task<TApiEntity>
  nameWithType.vb: Task(Of TApiEntity)
  fullName.vb: System.Threading.Tasks.Task(Of TApiEntity)
  name.vb: Task(Of TApiEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: TApiEntity
  name: TApiEntity
  nameWithType: TApiEntity
  fullName: TApiEntity
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Polly.Context
  commentId: T:Polly.Context
  parent: Polly
  isExternal: true
  name: Context
  nameWithType: Context
  fullName: Polly.Context
- uid: Polly
  commentId: N:Polly
  isExternal: true
  name: Polly
  nameWithType: Polly
  fullName: Polly
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: '{TModelEntity}'
  commentId: '!:TModelEntity'
  definition: TModelEntity
  name: TModelEntity
  nameWithType: TModelEntity
  fullName: TModelEntity
- uid: System.Threading.Tasks.Task{{TModelEntity}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TModelEntity>
  nameWithType: Task<TModelEntity>
  fullName: System.Threading.Tasks.Task<TModelEntity>
  nameWithType.vb: Task(Of TModelEntity)
  fullName.vb: System.Threading.Tasks.Task(Of TModelEntity)
  name.vb: Task(Of TModelEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: TModelEntity
  name: TModelEntity
  nameWithType: TModelEntity
  fullName: TModelEntity
- uid: Apizr.Mediation.Cruding.ReadAllQuery`1
  commentId: T:Apizr.Mediation.Cruding.ReadAllQuery`1
  name: ReadAllQuery<TReadAllResult>
  nameWithType: ReadAllQuery<TReadAllResult>
  fullName: Apizr.Mediation.Cruding.ReadAllQuery<TReadAllResult>
  nameWithType.vb: ReadAllQuery(Of TReadAllResult)
  fullName.vb: Apizr.Mediation.Cruding.ReadAllQuery(Of TReadAllResult)
  name.vb: ReadAllQuery(Of TReadAllResult)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.ReadAllQuery`1
    name: ReadAllQuery
    nameWithType: ReadAllQuery
    fullName: Apizr.Mediation.Cruding.ReadAllQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.ReadAllQuery`1
    name: ReadAllQuery
    nameWithType: ReadAllQuery
    fullName: Apizr.Mediation.Cruding.ReadAllQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  commentId: Overload:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery
  name: SendReadAllQuery
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{{TReadAllResult}}
  commentId: T:System.Threading.Tasks.Task{`2}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TReadAllResult>
  nameWithType: Task<TReadAllResult>
  fullName: System.Threading.Tasks.Task<TReadAllResult>
  nameWithType.vb: Task(Of TReadAllResult)
  fullName.vb: System.Threading.Tasks.Task(Of TReadAllResult)
  name.vb: Task(Of TReadAllResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{{TModelEntityReadAllResult}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TModelEntityReadAllResult>
  nameWithType: Task<TModelEntityReadAllResult>
  fullName: System.Threading.Tasks.Task<TModelEntityReadAllResult>
  nameWithType.vb: Task(Of TModelEntityReadAllResult)
  fullName.vb: System.Threading.Tasks.Task(Of TModelEntityReadAllResult)
  name.vb: Task(Of TModelEntityReadAllResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelEntityReadAllResult
    nameWithType: TModelEntityReadAllResult
    fullName: TModelEntityReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelEntityReadAllResult
    nameWithType: TModelEntityReadAllResult
    fullName: TModelEntityReadAllResult
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TReadAllParams}'
  commentId: '!:TReadAllParams'
  definition: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: Apizr.Mediation.Cruding.ReadQuery`2
  commentId: T:Apizr.Mediation.Cruding.ReadQuery`2
  name: ReadQuery<TResultData, TKey>
  nameWithType: ReadQuery<TResultData, TKey>
  fullName: Apizr.Mediation.Cruding.ReadQuery<TResultData, TKey>
  nameWithType.vb: ReadQuery(Of TResultData, TKey)
  fullName.vb: Apizr.Mediation.Cruding.ReadQuery(Of TResultData, TKey)
  name.vb: ReadQuery(Of TResultData, TKey)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.ReadQuery`2
    name: ReadQuery
    nameWithType: ReadQuery
    fullName: Apizr.Mediation.Cruding.ReadQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.ReadQuery`2
    name: ReadQuery
    nameWithType: ReadQuery
    fullName: Apizr.Mediation.Cruding.ReadQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery*
  commentId: Overload:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery
  name: SendReadQuery
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery
- uid: '{TApiEntityKey}'
  commentId: '!:TApiEntityKey'
  definition: TApiEntityKey
  name: TApiEntityKey
  nameWithType: TApiEntityKey
  fullName: TApiEntityKey
- uid: TApiEntityKey
  name: TApiEntityKey
  nameWithType: TApiEntityKey
  fullName: TApiEntityKey
- uid: Apizr.Mediation.Cruding.UpdateCommand`2
  commentId: T:Apizr.Mediation.Cruding.UpdateCommand`2
  name: UpdateCommand<TKey, TRequestData>
  nameWithType: UpdateCommand<TKey, TRequestData>
  fullName: Apizr.Mediation.Cruding.UpdateCommand<TKey, TRequestData>
  nameWithType.vb: UpdateCommand(Of TKey, TRequestData)
  fullName.vb: Apizr.Mediation.Cruding.UpdateCommand(Of TKey, TRequestData)
  name.vb: UpdateCommand(Of TKey, TRequestData)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.UpdateCommand`2
    name: UpdateCommand
    nameWithType: UpdateCommand
    fullName: Apizr.Mediation.Cruding.UpdateCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.UpdateCommand`2
    name: UpdateCommand
    nameWithType: UpdateCommand
    fullName: Apizr.Mediation.Cruding.UpdateCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand*
  commentId: Overload:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand
  name: SendUpdateCommand
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Apizr.Mediation.Cruding.DeleteCommand`2
  commentId: T:Apizr.Mediation.Cruding.DeleteCommand`2
  name: DeleteCommand<T, TKey>
  nameWithType: DeleteCommand<T, TKey>
  fullName: Apizr.Mediation.Cruding.DeleteCommand<T, TKey>
  nameWithType.vb: DeleteCommand(Of T, TKey)
  fullName.vb: Apizr.Mediation.Cruding.DeleteCommand(Of T, TKey)
  name.vb: DeleteCommand(Of T, TKey)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.DeleteCommand`2
    name: DeleteCommand
    nameWithType: DeleteCommand
    fullName: Apizr.Mediation.Cruding.DeleteCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.DeleteCommand`2
    name: DeleteCommand
    nameWithType: DeleteCommand
    fullName: Apizr.Mediation.Cruding.DeleteCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand*
  commentId: Overload:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand
  name: SendDeleteCommand
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteCommand
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteCommand
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteCommand
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteCommand
