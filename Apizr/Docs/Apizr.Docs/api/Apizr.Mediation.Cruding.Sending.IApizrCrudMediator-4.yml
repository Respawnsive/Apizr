### YamlMime:ManagedReference
items:
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  commentId: T:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  id: IApizrCrudMediator`4
  parent: Apizr.Mediation.Cruding.Sending
  children:
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand(`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand``1(``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand(`1,`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  - Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand``1(`1,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  langs:
  - csharp
  - vb
  name: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>
  type: Interface
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: IApizrCrudMediator
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
    startLine: 149
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: Apizr mediator dedicated to <code class="typeparamref">TApiEntity</code> cruding, getting all shorter
  example: []
  syntax:
    content: 'public interface IApizrCrudMediator<TApiEntity, in TApiEntityKey, TReadAllResult, in TReadAllParams> : IApizrCrudMediatorBase, IApizrMediatorBase where TApiEntity : class'
    typeParameters:
    - id: TApiEntity
    - id: TApiEntityKey
    - id: TReadAllResult
    - id: TReadAllParams
    content.vb: Public Interface IApizrCrudMediator(Of TApiEntity As Class, In TApiEntityKey, TReadAllResult, In TReadAllParams) Inherits IApizrCrudMediatorBase, IApizrMediatorBase
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)
  name.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand(`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand(`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: SendCreateCommand(`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendCreateCommand(TApiEntity, Action<IApizrRequestOptionsBuilder>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand(TApiEntity, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand(TApiEntity, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
    startLine: 160
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: Send a <xref href="Apizr.Mediation.Cruding.CreateCommand%601" data-throw-if-not-resolved="false"></xref> to Apizr using MediatR
  example: []
  syntax:
    content: Task<TApiEntity> SendCreateCommand(TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: Function SendCreateCommand(entity As TApiEntity, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand(TApiEntity, Action(Of IApizrRequestOptionsBuilder))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand(TApiEntity, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: SendCreateCommand(TApiEntity, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand``1(``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand``1(``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: SendCreateCommand``1(``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendCreateCommand<TModelEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand<TModelEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand<TModelEntity>(TModelEntity, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
    startLine: 169
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: Send a mapped <xref href="Apizr.Mediation.Cruding.CreateCommand%601" data-throw-if-not-resolved="false"></xref> to Apizr using MediatR returning a mapped result
  example: []
  syntax:
    content: Task<TModelEntity> SendCreateCommand<TModelEntity>(TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: Function SendCreateCommand(Of TModelEntity)(entity As TModelEntity, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand(Of TModelEntity)(TModelEntity, Action(Of IApizrRequestOptionsBuilder))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand(Of TModelEntity)(TModelEntity, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: SendCreateCommand(Of TModelEntity)(TModelEntity, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: SendReadAllQuery(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery(Action<IApizrRequestOptionsBuilder>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
    startLine: 180
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: Send a <xref href="Apizr.Mediation.Cruding.ReadAllQuery%601" data-throw-if-not-resolved="false"></xref> to Apizr using MediatR
  example: []
  syntax:
    content: Task<TReadAllResult> SendReadAllQuery(Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Action(Of IApizrRequestOptionsBuilder))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: SendReadAllQuery(Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: SendReadAllQuery``1(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelEntityReadAllResult>(Action<IApizrRequestOptionsBuilder>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
    startLine: 188
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: Send a mapped <xref href="Apizr.Mediation.Cruding.ReadAllQuery%601" data-throw-if-not-resolved="false"></xref> to Apizr using MediatR returning mapped result
  example: []
  syntax:
    content: Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TModelEntityReadAllResult
      description: The mapped result
    return:
      type: System.Threading.Tasks.Task{{TModelEntityReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(Of TModelEntityReadAllResult)(optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TModelEntityReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(Action(Of IApizrRequestOptionsBuilder))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: SendReadAllQuery(Of TModelEntityReadAllResult)(Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery(`3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: SendReadAllQuery(`3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery(TReadAllParams, Action<IApizrRequestOptionsBuilder>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(TReadAllParams, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery(TReadAllParams, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
    startLine: 196
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: Send a <xref href="Apizr.Mediation.Cruding.ReadAllQuery%601" data-throw-if-not-resolved="false"></xref> to Apizr using MediatR
  example: []
  syntax:
    content: Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(readAllParams As TReadAllParams, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(TReadAllParams, Action(Of IApizrRequestOptionsBuilder))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(TReadAllParams, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: SendReadAllQuery(TReadAllParams, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery``1(`3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: SendReadAllQuery``1(`3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Action<IApizrRequestOptionsBuilder>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
    startLine: 205
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: Send a mapped <xref href="Apizr.Mediation.Cruding.ReadAllQuery%601" data-throw-if-not-resolved="false"></xref> to Apizr using MediatR returning a mapped result
  example: []
  syntax:
    content: Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TModelEntityReadAllResult
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntityReadAllResult}}
      description: ''
    content.vb: Function SendReadAllQuery(Of TModelEntityReadAllResult)(readAllParams As TReadAllParams, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TModelEntityReadAllResult)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, Action(Of IApizrRequestOptionsBuilder))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: SendReadAllQuery(Of TModelEntityReadAllResult)(TReadAllParams, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: SendReadQuery(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadQuery(TApiEntityKey, Action<IApizrRequestOptionsBuilder>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery(TApiEntityKey, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery(TApiEntityKey, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
    startLine: 217
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: Send a <xref href="Apizr.Mediation.Cruding.ReadQuery%602" data-throw-if-not-resolved="false"></xref> to Apizr using MediatR
  example: []
  syntax:
    content: Task<TApiEntity> SendReadQuery(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: Function SendReadQuery(key As TApiEntityKey, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(TApiEntityKey, Action(Of IApizrRequestOptionsBuilder))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(TApiEntityKey, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: SendReadQuery(TApiEntityKey, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery``1(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: SendReadQuery``1(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery<TModelEntity>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery<TModelEntity>(TApiEntityKey, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
    startLine: 226
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: Send a <xref href="Apizr.Mediation.Cruding.ReadQuery%602" data-throw-if-not-resolved="false"></xref> to Apizr using MediatR returning a mapped result
  example: []
  syntax:
    content: Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: Function SendReadQuery(Of TModelEntity)(key As TApiEntityKey, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(Of TModelEntity)(TApiEntityKey, Action(Of IApizrRequestOptionsBuilder))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery(Of TModelEntity)(TApiEntityKey, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: SendReadQuery(Of TModelEntity)(TApiEntityKey, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand(`1,`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand(`1,`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: SendUpdateCommand(`1,`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendUpdateCommand(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand(TApiEntityKey, TApiEntity, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
    startLine: 239
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: Send a <xref href="Apizr.Mediation.Cruding.UpdateCommand%602" data-throw-if-not-resolved="false"></xref> to Apizr using MediatR
  example: []
  syntax:
    content: Task SendUpdateCommand(TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SendUpdateCommand(key As TApiEntityKey, entity As TApiEntity, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand(TApiEntityKey, TApiEntity, Action(Of IApizrRequestOptionsBuilder))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand(TApiEntityKey, TApiEntity, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: SendUpdateCommand(TApiEntityKey, TApiEntity, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand``1(`1,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand``1(`1,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: SendUpdateCommand``1(`1,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
    startLine: 250
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: Send a mapped <xref href="Apizr.Mediation.Cruding.UpdateCommand%602" data-throw-if-not-resolved="false"></xref> to Apizr using MediatR
  example: []
  syntax:
    content: Task SendUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SendUpdateCommand(Of TModelEntity)(key As TApiEntityKey, entity As TModelEntity, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, Action(Of IApizrRequestOptionsBuilder))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: SendUpdateCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, Action(Of IApizrRequestOptionsBuilder))
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  commentId: M:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  id: SendDeleteCommand(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})
  parent: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  langs:
  - csharp
  - vb
  name: SendDeleteCommand(TApiEntityKey, Action<IApizrRequestOptionsBuilder>)
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteCommand(TApiEntityKey, Action<IApizrRequestOptionsBuilder>)
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteCommand(TApiEntityKey, System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendDeleteCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Cruding/Sending/IApizrCrudMediator.cs
    startLine: 263
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Cruding.Sending
  summary: Send a <xref href="Apizr.Mediation.Cruding.DeleteCommand%602" data-throw-if-not-resolved="false"></xref> to Apizr using MediatR
  example: []
  syntax:
    content: Task SendDeleteCommand(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: optionsBuilder
      type: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
      description: Options provided to the request
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function SendDeleteCommand(key As TApiEntityKey, optionsBuilder As Action(Of IApizrRequestOptionsBuilder) = Nothing) As Task
  overload: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand*
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteCommand(TApiEntityKey, Action(Of IApizrRequestOptionsBuilder))
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteCommand(TApiEntityKey, System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder))
  name.vb: SendDeleteCommand(TApiEntityKey, Action(Of IApizrRequestOptionsBuilder))
references:
- uid: Apizr.Mediation.Cruding.Sending
  commentId: N:Apizr.Mediation.Cruding.Sending
  href: Apizr.html
  name: Apizr.Mediation.Cruding.Sending
  nameWithType: Apizr.Mediation.Cruding.Sending
  fullName: Apizr.Mediation.Cruding.Sending
  spec.csharp:
  - uid: Apizr
    name: Apizr
    href: Apizr.html
  - name: .
  - uid: Apizr.Mediation
    name: Mediation
    href: Apizr.Mediation.html
  - name: .
  - uid: Apizr.Mediation.Cruding
    name: Cruding
    href: Apizr.Mediation.Cruding.html
  - name: .
  - uid: Apizr.Mediation.Cruding.Sending
    name: Sending
    href: Apizr.Mediation.Cruding.Sending.html
  spec.vb:
  - uid: Apizr
    name: Apizr
    href: Apizr.html
  - name: .
  - uid: Apizr.Mediation
    name: Mediation
    href: Apizr.Mediation.html
  - name: .
  - uid: Apizr.Mediation.Cruding
    name: Cruding
    href: Apizr.Mediation.Cruding.html
  - name: .
  - uid: Apizr.Mediation.Cruding.Sending
    name: Sending
    href: Apizr.Mediation.Cruding.Sending.html
- uid: Apizr.Mediation.Cruding.CreateCommand`1
  commentId: T:Apizr.Mediation.Cruding.CreateCommand`1
  href: Apizr.Mediation.Cruding.CreateCommand-1.html
  name: CreateCommand<TModelData>
  nameWithType: CreateCommand<TModelData>
  fullName: Apizr.Mediation.Cruding.CreateCommand<TModelData>
  nameWithType.vb: CreateCommand(Of TModelData)
  fullName.vb: Apizr.Mediation.Cruding.CreateCommand(Of TModelData)
  name.vb: CreateCommand(Of TModelData)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.CreateCommand`1
    name: CreateCommand
    href: Apizr.Mediation.Cruding.CreateCommand-1.html
  - name: <
  - name: TModelData
  - name: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.CreateCommand`1
    name: CreateCommand
    href: Apizr.Mediation.Cruding.CreateCommand-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TModelData
  - name: )
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand*
  commentId: Overload:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendCreateCommand
  href: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator-4.html#Apizr_Mediation_Cruding_Sending_IApizrCrudMediator_4_SendCreateCommand__0_System_Action_Apizr_Configuring_Request_IApizrRequestOptionsBuilder__
  name: SendCreateCommand
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateCommand
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateCommand
- uid: '{TApiEntity}'
  commentId: '!:TApiEntity'
  definition: TApiEntity
  name: TApiEntity
  nameWithType: TApiEntity
  fullName: TApiEntity
- uid: System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
  commentId: T:System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<IApizrRequestOptionsBuilder>
  nameWithType: Action<IApizrRequestOptionsBuilder>
  fullName: System.Action<Apizr.Configuring.Request.IApizrRequestOptionsBuilder>
  nameWithType.vb: Action(Of IApizrRequestOptionsBuilder)
  fullName.vb: System.Action(Of Apizr.Configuring.Request.IApizrRequestOptionsBuilder)
  name.vb: Action(Of IApizrRequestOptionsBuilder)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: Apizr.Configuring.Request.IApizrRequestOptionsBuilder
    name: IApizrRequestOptionsBuilder
    href: Apizr.Configuring.Request.IApizrRequestOptionsBuilder.html
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: Apizr.Configuring.Request.IApizrRequestOptionsBuilder
    name: IApizrRequestOptionsBuilder
    href: Apizr.Configuring.Request.IApizrRequestOptionsBuilder.html
  - name: )
- uid: System.Threading.Tasks.Task{{TApiEntity}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TApiEntity>
  nameWithType: Task<TApiEntity>
  fullName: System.Threading.Tasks.Task<TApiEntity>
  nameWithType.vb: Task(Of TApiEntity)
  fullName.vb: System.Threading.Tasks.Task(Of TApiEntity)
  name.vb: Task(Of TApiEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TApiEntity
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TApiEntity
  - name: )
- uid: TApiEntity
  name: TApiEntity
  nameWithType: TApiEntity
  fullName: TApiEntity
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: '{TModelEntity}'
  commentId: '!:TModelEntity'
  definition: TModelEntity
  name: TModelEntity
  nameWithType: TModelEntity
  fullName: TModelEntity
- uid: System.Threading.Tasks.Task{{TModelEntity}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TModelEntity>
  nameWithType: Task<TModelEntity>
  fullName: System.Threading.Tasks.Task<TModelEntity>
  nameWithType.vb: Task(Of TModelEntity)
  fullName.vb: System.Threading.Tasks.Task(Of TModelEntity)
  name.vb: Task(Of TModelEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TModelEntity
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TModelEntity
  - name: )
- uid: TModelEntity
  name: TModelEntity
  nameWithType: TModelEntity
  fullName: TModelEntity
- uid: Apizr.Mediation.Cruding.ReadAllQuery`1
  commentId: T:Apizr.Mediation.Cruding.ReadAllQuery`1
  href: Apizr.Mediation.Cruding.ReadAllQuery-1.html
  name: ReadAllQuery<TReadAllResult>
  nameWithType: ReadAllQuery<TReadAllResult>
  fullName: Apizr.Mediation.Cruding.ReadAllQuery<TReadAllResult>
  nameWithType.vb: ReadAllQuery(Of TReadAllResult)
  fullName.vb: Apizr.Mediation.Cruding.ReadAllQuery(Of TReadAllResult)
  name.vb: ReadAllQuery(Of TReadAllResult)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.ReadAllQuery`1
    name: ReadAllQuery
    href: Apizr.Mediation.Cruding.ReadAllQuery-1.html
  - name: <
  - name: TReadAllResult
  - name: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.ReadAllQuery`1
    name: ReadAllQuery
    href: Apizr.Mediation.Cruding.ReadAllQuery-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TReadAllResult
  - name: )
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery*
  commentId: Overload:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadAllQuery
  href: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator-4.html#Apizr_Mediation_Cruding_Sending_IApizrCrudMediator_4_SendReadAllQuery_System_Action_Apizr_Configuring_Request_IApizrRequestOptionsBuilder__
  name: SendReadAllQuery
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllQuery
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllQuery
- uid: System.Threading.Tasks.Task{{TReadAllResult}}
  commentId: T:System.Threading.Tasks.Task{``2}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TReadAllResult>
  nameWithType: Task<TReadAllResult>
  fullName: System.Threading.Tasks.Task<TReadAllResult>
  nameWithType.vb: Task(Of TReadAllResult)
  fullName.vb: System.Threading.Tasks.Task(Of TReadAllResult)
  name.vb: Task(Of TReadAllResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TReadAllResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TReadAllResult
  - name: )
- uid: System.Threading.Tasks.Task{{TModelEntityReadAllResult}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TModelEntityReadAllResult>
  nameWithType: Task<TModelEntityReadAllResult>
  fullName: System.Threading.Tasks.Task<TModelEntityReadAllResult>
  nameWithType.vb: Task(Of TModelEntityReadAllResult)
  fullName.vb: System.Threading.Tasks.Task(Of TModelEntityReadAllResult)
  name.vb: Task(Of TModelEntityReadAllResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TModelEntityReadAllResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TModelEntityReadAllResult
  - name: )
- uid: '{TReadAllParams}'
  commentId: '!:TReadAllParams'
  definition: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: Apizr.Mediation.Cruding.ReadQuery`2
  commentId: T:Apizr.Mediation.Cruding.ReadQuery`2
  href: Apizr.Mediation.Cruding.ReadQuery-2.html
  name: ReadQuery<TResultData, TKey>
  nameWithType: ReadQuery<TResultData, TKey>
  fullName: Apizr.Mediation.Cruding.ReadQuery<TResultData, TKey>
  nameWithType.vb: ReadQuery(Of TResultData, TKey)
  fullName.vb: Apizr.Mediation.Cruding.ReadQuery(Of TResultData, TKey)
  name.vb: ReadQuery(Of TResultData, TKey)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.ReadQuery`2
    name: ReadQuery
    href: Apizr.Mediation.Cruding.ReadQuery-2.html
  - name: <
  - name: TResultData
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.ReadQuery`2
    name: ReadQuery
    href: Apizr.Mediation.Cruding.ReadQuery-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TResultData
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery*
  commentId: Overload:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendReadQuery
  href: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator-4.html#Apizr_Mediation_Cruding_Sending_IApizrCrudMediator_4_SendReadQuery__1_System_Action_Apizr_Configuring_Request_IApizrRequestOptionsBuilder__
  name: SendReadQuery
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadQuery
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadQuery
- uid: '{TApiEntityKey}'
  commentId: '!:TApiEntityKey'
  definition: TApiEntityKey
  name: TApiEntityKey
  nameWithType: TApiEntityKey
  fullName: TApiEntityKey
- uid: TApiEntityKey
  name: TApiEntityKey
  nameWithType: TApiEntityKey
  fullName: TApiEntityKey
- uid: Apizr.Mediation.Cruding.UpdateCommand`2
  commentId: T:Apizr.Mediation.Cruding.UpdateCommand`2
  href: Apizr.Mediation.Cruding.UpdateCommand-2.html
  name: UpdateCommand<TKey, TRequestData>
  nameWithType: UpdateCommand<TKey, TRequestData>
  fullName: Apizr.Mediation.Cruding.UpdateCommand<TKey, TRequestData>
  nameWithType.vb: UpdateCommand(Of TKey, TRequestData)
  fullName.vb: Apizr.Mediation.Cruding.UpdateCommand(Of TKey, TRequestData)
  name.vb: UpdateCommand(Of TKey, TRequestData)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.UpdateCommand`2
    name: UpdateCommand
    href: Apizr.Mediation.Cruding.UpdateCommand-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TRequestData
  - name: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.UpdateCommand`2
    name: UpdateCommand
    href: Apizr.Mediation.Cruding.UpdateCommand-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TRequestData
  - name: )
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand*
  commentId: Overload:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendUpdateCommand
  href: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator-4.html#Apizr_Mediation_Cruding_Sending_IApizrCrudMediator_4_SendUpdateCommand__1__0_System_Action_Apizr_Configuring_Request_IApizrRequestOptionsBuilder__
  name: SendUpdateCommand
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateCommand
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateCommand
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Apizr.Mediation.Cruding.DeleteCommand`2
  commentId: T:Apizr.Mediation.Cruding.DeleteCommand`2
  href: Apizr.Mediation.Cruding.DeleteCommand-2.html
  name: DeleteCommand<T, TKey>
  nameWithType: DeleteCommand<T, TKey>
  fullName: Apizr.Mediation.Cruding.DeleteCommand<T, TKey>
  nameWithType.vb: DeleteCommand(Of T, TKey)
  fullName.vb: Apizr.Mediation.Cruding.DeleteCommand(Of T, TKey)
  name.vb: DeleteCommand(Of T, TKey)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.DeleteCommand`2
    name: DeleteCommand
    href: Apizr.Mediation.Cruding.DeleteCommand-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.DeleteCommand`2
    name: DeleteCommand
    href: Apizr.Mediation.Cruding.DeleteCommand-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand*
  commentId: Overload:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4.SendDeleteCommand
  href: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator-4.html#Apizr_Mediation_Cruding_Sending_IApizrCrudMediator_4_SendDeleteCommand__1_System_Action_Apizr_Configuring_Request_IApizrRequestOptionsBuilder__
  name: SendDeleteCommand
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteCommand
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteCommand
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteCommand
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteCommand
