### YamlMime:ManagedReference
items:
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  commentId: T:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  id: ApizrCrudMediatorExtensions
  parent: Apizr.Mediation.Extending
  children:
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,Polly.Context,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,Polly.Context,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,``0,Polly.Context,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,``0,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,``0,Polly.Context,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,``0,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  langs:
  - csharp
  - vb
  name: ApizrCrudMediatorExtensions
  nameWithType: ApizrCrudMediatorExtensions
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  type: Class
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ApizrCrudMediatorExtensions
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 12
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nApizr mediator dedicated to cruding\n"
  example: []
  syntax:
    content: public static class ApizrCrudMediatorExtensions
    content.vb: Public Module ApizrCrudMediatorExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,System.Action{System.Exception})
  id: SendCreateCommand``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateCommand<TApiEntity>(IApizrCrudMediator, TApiEntity, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendCreateCommand<TApiEntity>(IApizrCrudMediator, TApiEntity, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand<TApiEntity>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntity, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 25
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendCreateCommand<TApiEntity>(this IApizrCrudMediator mediator, TApiEntity entity, Action<Exception> onException)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateCommand(Of TApiEntity)(mediator As IApizrCrudMediator, entity As TApiEntity, onException As Action(Of Exception)) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendCreateCommand(Of TApiEntity)(IApizrCrudMediator, TApiEntity, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand(Of TApiEntity)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntity, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(Of TApiEntity)(IApizrCrudMediator, TApiEntity, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,Polly.Context,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,Polly.Context,System.Action{System.Exception})
  id: SendCreateCommand``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,Polly.Context,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateCommand<TApiEntity>(IApizrCrudMediator, TApiEntity, Context, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendCreateCommand<TApiEntity>(IApizrCrudMediator, TApiEntity, Context, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand<TApiEntity>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntity, Polly.Context, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 38
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendCreateCommand<TApiEntity>(this IApizrCrudMediator mediator, TApiEntity entity, Context context, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateCommand(Of TApiEntity)(mediator As IApizrCrudMediator, entity As TApiEntity, context As Context, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendCreateCommand(Of TApiEntity)(IApizrCrudMediator, TApiEntity, Context, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand(Of TApiEntity)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntity, Polly.Context, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(Of TApiEntity)(IApizrCrudMediator, TApiEntity, Context, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendCreateCommand``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateCommand<TApiEntity>(IApizrCrudMediator, TApiEntity, CancellationToken, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendCreateCommand<TApiEntity>(IApizrCrudMediator, TApiEntity, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand<TApiEntity>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntity, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 53
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendCreateCommand<TApiEntity>(this IApizrCrudMediator mediator, TApiEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateCommand(Of TApiEntity)(mediator As IApizrCrudMediator, entity As TApiEntity, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendCreateCommand(Of TApiEntity)(IApizrCrudMediator, TApiEntity, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand(Of TApiEntity)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntity, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(Of TApiEntity)(IApizrCrudMediator, TApiEntity, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendCreateCommand``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateCommand<TApiEntity>(IApizrCrudMediator, TApiEntity, Context, CancellationToken, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendCreateCommand<TApiEntity>(IApizrCrudMediator, TApiEntity, Context, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand<TApiEntity>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntity, Polly.Context, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 69
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendCreateCommand<TApiEntity>(this IApizrCrudMediator mediator, TApiEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateCommand(Of TApiEntity)(mediator As IApizrCrudMediator, entity As TApiEntity, context As Context, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendCreateCommand(Of TApiEntity)(IApizrCrudMediator, TApiEntity, Context, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand(Of TApiEntity)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntity, Polly.Context, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(Of TApiEntity)(IApizrCrudMediator, TApiEntity, Context, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,System.Action{System.Exception})
  id: SendCreateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateCommand<TModelEntity, TApiEntity>(IApizrCrudMediator, TModelEntity, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity>(IApizrCrudMediator, TModelEntity, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TModelEntity, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 90
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity>(this IApizrCrudMediator mediator, TModelEntity entity, Action<Exception> onException)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateCommand(Of TModelEntity, TApiEntity)(mediator As IApizrCrudMediator, entity As TModelEntity, onException As Action(Of Exception)) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendCreateCommand(Of TModelEntity, TApiEntity)(IApizrCrudMediator, TModelEntity, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand(Of TModelEntity, TApiEntity)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TModelEntity, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(Of TModelEntity, TApiEntity)(IApizrCrudMediator, TModelEntity, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,Polly.Context,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,Polly.Context,System.Action{System.Exception})
  id: SendCreateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,Polly.Context,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateCommand<TModelEntity, TApiEntity>(IApizrCrudMediator, TModelEntity, Context, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity>(IApizrCrudMediator, TModelEntity, Context, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TModelEntity, Polly.Context, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 105
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity>(this IApizrCrudMediator mediator, TModelEntity entity, Context context, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateCommand(Of TModelEntity, TApiEntity)(mediator As IApizrCrudMediator, entity As TModelEntity, context As Context, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendCreateCommand(Of TModelEntity, TApiEntity)(IApizrCrudMediator, TModelEntity, Context, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand(Of TModelEntity, TApiEntity)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TModelEntity, Polly.Context, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(Of TModelEntity, TApiEntity)(IApizrCrudMediator, TModelEntity, Context, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendCreateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateCommand<TModelEntity, TApiEntity>(IApizrCrudMediator, TModelEntity, CancellationToken, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity>(IApizrCrudMediator, TModelEntity, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TModelEntity, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 121
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity>(this IApizrCrudMediator mediator, TModelEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateCommand(Of TModelEntity, TApiEntity)(mediator As IApizrCrudMediator, entity As TModelEntity, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendCreateCommand(Of TModelEntity, TApiEntity)(IApizrCrudMediator, TModelEntity, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand(Of TModelEntity, TApiEntity)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TModelEntity, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(Of TModelEntity, TApiEntity)(IApizrCrudMediator, TModelEntity, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendCreateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateCommand<TModelEntity, TApiEntity>(IApizrCrudMediator, TModelEntity, Context, CancellationToken, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity>(IApizrCrudMediator, TModelEntity, Context, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TModelEntity, Polly.Context, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 138
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity>(this IApizrCrudMediator mediator, TModelEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateCommand(Of TModelEntity, TApiEntity)(mediator As IApizrCrudMediator, entity As TModelEntity, context As Context, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendCreateCommand(Of TModelEntity, TApiEntity)(IApizrCrudMediator, TModelEntity, Context, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand(Of TModelEntity, TApiEntity)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TModelEntity, Polly.Context, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(Of TModelEntity, TApiEntity)(IApizrCrudMediator, TModelEntity, Context, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Action{System.Exception})
  id: SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 161
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(this IApizrCrudMediator mediator, Action<Exception> onException)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception and return cached result
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TReadAllResult)(mediator As IApizrCrudMediator, onException As Action(Of Exception)) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult)(IApizrCrudMediator, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TReadAllResult)(IApizrCrudMediator, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 172
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(this IApizrCrudMediator mediator, bool clearCache, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: clearCache
      type: System.Boolean
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TReadAllResult)(mediator As IApizrCrudMediator, clearCache As Boolean, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult)(IApizrCrudMediator, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TReadAllResult)(IApizrCrudMediator, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Context, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 186
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(this IApizrCrudMediator mediator, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TReadAllResult)(mediator As IApizrCrudMediator, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult)(IApizrCrudMediator, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TReadAllResult)(IApizrCrudMediator, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 201
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(this IApizrCrudMediator mediator, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TReadAllResult)(mediator As IApizrCrudMediator, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult)(IApizrCrudMediator, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TReadAllResult)(IApizrCrudMediator, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Int32, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Int32, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Int32, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 216
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(this IApizrCrudMediator mediator, int priority, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TReadAllResult)(mediator As IApizrCrudMediator, priority As Integer, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult)(IApizrCrudMediator, Int32, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Int32, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TReadAllResult)(IApizrCrudMediator, Int32, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Int32, Context, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Int32, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Int32, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 233
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(this IApizrCrudMediator mediator, int priority, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TReadAllResult)(mediator As IApizrCrudMediator, priority As Integer, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult)(IApizrCrudMediator, Int32, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Int32, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TReadAllResult)(IApizrCrudMediator, Int32, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Int32, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Int32, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 251
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(this IApizrCrudMediator mediator, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TReadAllResult)(mediator As IApizrCrudMediator, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult)(IApizrCrudMediator, Int32, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TReadAllResult)(IApizrCrudMediator, Int32, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 270
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(this IApizrCrudMediator mediator, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TReadAllResult)(mediator As IApizrCrudMediator, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult)(IApizrCrudMediator, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TReadAllResult)(IApizrCrudMediator, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``1(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 287
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(this IApizrCrudMediator mediator, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TReadAllResult)(mediator As IApizrCrudMediator, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult)(IApizrCrudMediator, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TReadAllResult)(IApizrCrudMediator, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Action{System.Exception})
  id: SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 309
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudMediator mediator, Action<Exception> onException)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception and return cached result
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(mediator As IApizrCrudMediator, onException As Action(Of Exception)) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudMediator, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudMediator, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 323
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudMediator mediator, bool clearCache, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(mediator As IApizrCrudMediator, clearCache As Boolean, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudMediator, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudMediator, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Context, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 339
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudMediator mediator, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(mediator As IApizrCrudMediator, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudMediator, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudMediator, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 356
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudMediator mediator, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(mediator As IApizrCrudMediator, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudMediator, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudMediator, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Int32, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Int32, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Int32, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 374
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudMediator mediator, int priority, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(mediator As IApizrCrudMediator, priority As Integer, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudMediator, Int32, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Int32, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudMediator, Int32, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Int32, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Int32, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 393
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudMediator mediator, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(mediator As IApizrCrudMediator, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudMediator, Int32, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudMediator, Int32, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Int32, Context, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Int32, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Int32, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 413
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudMediator mediator, int priority, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(mediator As IApizrCrudMediator, priority As Integer, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudMediator, Int32, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Int32, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudMediator, Int32, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 433
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudMediator mediator, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(mediator As IApizrCrudMediator, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudMediator, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudMediator, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 453
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudMediator mediator, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(mediator As IApizrCrudMediator, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudMediator, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudMediator, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Action{System.Exception})
  id: SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 476
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, Action<Exception> onException)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception and return cached result
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator, readAllParams As TReadAllParams, onException As Action(Of Exception)) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 491
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, bool clearCache, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator, readAllParams As TReadAllParams, clearCache As Boolean, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Context, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 509
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator, readAllParams As TReadAllParams, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 528
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator, readAllParams As TReadAllParams, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Int32, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 547
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, int priority, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator, readAllParams As TReadAllParams, priority As Integer, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Int32, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Int32, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Int32, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Context, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Int32, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 567
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, int priority, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator, readAllParams As TReadAllParams, priority As Integer, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Int32, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Int32, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Int32, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 588
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator, readAllParams As TReadAllParams, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Int32, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Int32, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 610
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator, readAllParams As TReadAllParams, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 632
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator, readAllParams As TReadAllParams, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Action{System.Exception})
  id: SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 657
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, Action<Exception> onException)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception and return cached result
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator, readAllParams As TReadAllParams, onException As Action(Of Exception)) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 675
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, bool clearCache, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator, readAllParams As TReadAllParams, clearCache As Boolean, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Context, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 695
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator, readAllParams As TReadAllParams, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 717
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator, readAllParams As TReadAllParams, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Int32, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 739
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, int priority, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator, readAllParams As TReadAllParams, priority As Integer, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Int32, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Int32, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Int32, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Context, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Int32, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 762
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, int priority, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator, readAllParams As TReadAllParams, priority As Integer, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Int32, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Int32, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Int32, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 786
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator, readAllParams As TReadAllParams, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Int32, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Int32, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 811
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator, readAllParams As TReadAllParams, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 836
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator, readAllParams As TReadAllParams, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Action{System.Exception})
  id: SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 866
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, Action<Exception> onException)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception and return cached result
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, onException As Action(Of Exception)) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 881
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, bool clearCache, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, clearCache As Boolean, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 898
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 916
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Int32, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 935
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, int priority, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, priority As Integer, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Int32, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Int32, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Int32, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 956
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Context, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Int32, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 977
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, int priority, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, priority As Integer, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Int32, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Int32, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Int32, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 999
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Int32, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Int32, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1023
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Action{System.Exception})
  id: SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1049
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, Action<Exception> onException)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception and return cached result
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, onException As Action(Of Exception)) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1066
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, bool clearCache, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, clearCache As Boolean, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1086
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1107
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Int32, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1127
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, int priority, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, priority As Integer, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Int32, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Int32, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Int32, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1149
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Context, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Int32, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1172
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, int priority, Context context, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, priority As Integer, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Int32, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Int32, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Int32, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1195
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Int32, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Int32, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadQuery
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1220
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,``0,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,``0,System.Action{System.Exception})
  id: SendUpdateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,``0,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TApiEntity, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TApiEntity, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, TApiEntity, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1250
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendUpdateCommand<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, TApiEntity entity, Action<Exception> onException)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateCommand(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, entity As TApiEntity, onException As Action(Of Exception)) As Task
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendUpdateCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, TApiEntity, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand(Of TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, TApiEntity, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, TApiEntity, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,``0,Polly.Context,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,``0,Polly.Context,System.Action{System.Exception})
  id: SendUpdateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,``0,Polly.Context,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TApiEntity, Context, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TApiEntity, Context, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, TApiEntity, Polly.Context, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1268
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendUpdateCommand<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, TApiEntity entity, Context context, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateCommand(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, entity As TApiEntity, context As Context, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendUpdateCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, TApiEntity, Context, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand(Of TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, TApiEntity, Polly.Context, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, TApiEntity, Context, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendUpdateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TApiEntity, CancellationToken, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TApiEntity, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, TApiEntity, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1287
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendUpdateCommand<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, TApiEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateCommand(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, entity As TApiEntity, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendUpdateCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, TApiEntity, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand(Of TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, TApiEntity, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, TApiEntity, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendUpdateCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TApiEntity, Context, CancellationToken, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TApiEntity, Context, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, TApiEntity, Polly.Context, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1308
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendUpdateCommand<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, TApiEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateCommand(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, entity As TApiEntity, context As Context, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendUpdateCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, TApiEntity, Context, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand(Of TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, TApiEntity, Polly.Context, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, TApiEntity, Context, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,``0,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,``0,System.Action{System.Exception})
  id: SendUpdateCommand``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,``0,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TModelEntity, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TModelEntity, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, TModelEntity, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1333
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, TModelEntity entity, Action<Exception> onException)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, entity As TModelEntity, onException As Action(Of Exception)) As Task
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, TModelEntity, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, TModelEntity, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, TModelEntity, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,``0,Polly.Context,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,``0,Polly.Context,System.Action{System.Exception})
  id: SendUpdateCommand``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,``0,Polly.Context,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TModelEntity, Context, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TModelEntity, Context, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, TModelEntity, Polly.Context, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1352
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, TModelEntity entity, Context context, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, entity As TModelEntity, context As Context, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, TModelEntity, Context, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, TModelEntity, Polly.Context, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, TModelEntity, Context, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendUpdateCommand``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TModelEntity, CancellationToken, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TModelEntity, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, TModelEntity, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1372
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, TModelEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, entity As TModelEntity, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, TModelEntity, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, TModelEntity, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, TModelEntity, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendUpdateCommand``3(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``2,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TModelEntity, Context, CancellationToken, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TModelEntity, Context, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, TModelEntity, Polly.Context, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1394
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, TModelEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, entity As TModelEntity, context As Context, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, TModelEntity, Context, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, TModelEntity, Polly.Context, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, TModelEntity, Context, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Action{System.Exception})
  id: SendDeleteCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendDeleteCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendDeleteCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1419
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendDeleteCommand<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, Action<Exception> onException)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendDeleteCommand(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, onException As Action(Of Exception)) As Task
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendDeleteCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand(Of TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Action(Of System.Exception))
  name.vb: SendDeleteCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Action{System.Exception})
  id: SendDeleteCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendDeleteCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, Polly.Context, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendDeleteCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1435
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendDeleteCommand<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, Context context, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendDeleteCommand(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, context As Context, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendDeleteCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Context, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand(Of TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, Polly.Context, System.Action(Of System.Exception))
  name.vb: SendDeleteCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Context, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendDeleteCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendDeleteCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, CancellationToken, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendDeleteCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1452
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendDeleteCommand<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, CancellationToken cancellationToken, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendDeleteCommand(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendDeleteCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand(Of TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendDeleteCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendDeleteCommand``2(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendDeleteCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, CancellationToken, Action<Exception>)
  nameWithType: ApizrCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendDeleteCommand
    path: ../../Src/Handling/Apizr.Integrations.MediatR/Mediation/Extending/ApizrCrudMediatorExtensions.cs
    startLine: 1471
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendDeleteCommand<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken, Action<Exception> onException = null)
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendDeleteCommand(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudMediator, key As TApiEntityKey, context As Context, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudMediatorExtensions.SendDeleteCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Context, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand(Of TApiEntity, TApiEntityKey)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator, TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendDeleteCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudMediator, TApiEntityKey, Context, CancellationToken, Action(Of Exception))
references:
- uid: Apizr.Mediation.Extending
  commentId: N:Apizr.Mediation.Extending
  name: Apizr.Mediation.Extending
  nameWithType: Apizr.Mediation.Extending
  fullName: Apizr.Mediation.Extending
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Apizr.Mediation.Cruding.CreateCommand`1
  commentId: T:Apizr.Mediation.Cruding.CreateCommand`1
  name: CreateCommand<TModelData>
  nameWithType: CreateCommand<TModelData>
  fullName: Apizr.Mediation.Cruding.CreateCommand<TModelData>
  nameWithType.vb: CreateCommand(Of TModelData)
  fullName.vb: Apizr.Mediation.Cruding.CreateCommand(Of TModelData)
  name.vb: CreateCommand(Of TModelData)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.CreateCommand`1
    name: CreateCommand
    nameWithType: CreateCommand
    fullName: Apizr.Mediation.Cruding.CreateCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.CreateCommand`1
    name: CreateCommand
    nameWithType: CreateCommand
    fullName: Apizr.Mediation.Cruding.CreateCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand*
  commentId: Overload:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand
  name: SendCreateCommand
  nameWithType: ApizrCrudMediatorExtensions.SendCreateCommand
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendCreateCommand
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
  commentId: T:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
  parent: Apizr.Mediation.Cruding.Sending
  name: IApizrCrudMediator
  nameWithType: IApizrCrudMediator
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
- uid: '{TApiEntity}'
  commentId: '!:TApiEntity'
  definition: TApiEntity
  name: TApiEntity
  nameWithType: TApiEntity
  fullName: TApiEntity
- uid: System.Action{System.Exception}
  commentId: T:System.Action{System.Exception}
  parent: System
  definition: System.Action`1
  name: Action<Exception>
  nameWithType: Action<Exception>
  fullName: System.Action<System.Exception>
  nameWithType.vb: Action(Of Exception)
  fullName.vb: System.Action(Of System.Exception)
  name.vb: Action(Of Exception)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TApiEntity}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TApiEntity>
  nameWithType: Task<TApiEntity>
  fullName: System.Threading.Tasks.Task<TApiEntity>
  nameWithType.vb: Task(Of TApiEntity)
  fullName.vb: System.Threading.Tasks.Task(Of TApiEntity)
  name.vb: Task(Of TApiEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Cruding.Sending
  commentId: N:Apizr.Mediation.Cruding.Sending
  name: Apizr.Mediation.Cruding.Sending
  nameWithType: Apizr.Mediation.Cruding.Sending
  fullName: Apizr.Mediation.Cruding.Sending
- uid: TApiEntity
  name: TApiEntity
  nameWithType: TApiEntity
  fullName: TApiEntity
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Polly.Context
  commentId: T:Polly.Context
  parent: Polly
  isExternal: true
  name: Context
  nameWithType: Context
  fullName: Polly.Context
- uid: Polly
  commentId: N:Polly
  isExternal: true
  name: Polly
  nameWithType: Polly
  fullName: Polly
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: '{TModelEntity}'
  commentId: '!:TModelEntity'
  definition: TModelEntity
  name: TModelEntity
  nameWithType: TModelEntity
  fullName: TModelEntity
- uid: System.Threading.Tasks.Task{{TModelEntity}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TModelEntity>
  nameWithType: Task<TModelEntity>
  fullName: System.Threading.Tasks.Task<TModelEntity>
  nameWithType.vb: Task(Of TModelEntity)
  fullName.vb: System.Threading.Tasks.Task(Of TModelEntity)
  name.vb: Task(Of TModelEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: TModelEntity
  name: TModelEntity
  nameWithType: TModelEntity
  fullName: TModelEntity
- uid: Apizr.Mediation.Cruding.ReadAllQuery`1
  commentId: T:Apizr.Mediation.Cruding.ReadAllQuery`1
  name: ReadAllQuery<TReadAllResult>
  nameWithType: ReadAllQuery<TReadAllResult>
  fullName: Apizr.Mediation.Cruding.ReadAllQuery<TReadAllResult>
  nameWithType.vb: ReadAllQuery(Of TReadAllResult)
  fullName.vb: Apizr.Mediation.Cruding.ReadAllQuery(Of TReadAllResult)
  name.vb: ReadAllQuery(Of TReadAllResult)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.ReadAllQuery`1
    name: ReadAllQuery
    nameWithType: ReadAllQuery
    fullName: Apizr.Mediation.Cruding.ReadAllQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.ReadAllQuery`1
    name: ReadAllQuery
    nameWithType: ReadAllQuery
    fullName: Apizr.Mediation.Cruding.ReadAllQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery*
  commentId: Overload:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery
  name: SendReadAllQuery
  nameWithType: ApizrCrudMediatorExtensions.SendReadAllQuery
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadAllQuery
- uid: System.Threading.Tasks.Task{{TReadAllResult}}
  commentId: T:System.Threading.Tasks.Task{``2}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TReadAllResult>
  nameWithType: Task<TReadAllResult>
  fullName: System.Threading.Tasks.Task<TReadAllResult>
  nameWithType.vb: Task(Of TReadAllResult)
  fullName.vb: System.Threading.Tasks.Task(Of TReadAllResult)
  name.vb: Task(Of TReadAllResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{{TModelReadAllResult}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TModelReadAllResult>
  nameWithType: Task<TModelReadAllResult>
  fullName: System.Threading.Tasks.Task<TModelReadAllResult>
  nameWithType.vb: Task(Of TModelReadAllResult)
  fullName.vb: System.Threading.Tasks.Task(Of TModelReadAllResult)
  name.vb: Task(Of TModelReadAllResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelReadAllResult
    nameWithType: TModelReadAllResult
    fullName: TModelReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelReadAllResult
    nameWithType: TModelReadAllResult
    fullName: TModelReadAllResult
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TReadAllParams}'
  commentId: '!:TReadAllParams'
  definition: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: Apizr.Mediation.Cruding.ReadQuery`2
  commentId: T:Apizr.Mediation.Cruding.ReadQuery`2
  name: ReadQuery<TResultData, TKey>
  nameWithType: ReadQuery<TResultData, TKey>
  fullName: Apizr.Mediation.Cruding.ReadQuery<TResultData, TKey>
  nameWithType.vb: ReadQuery(Of TResultData, TKey)
  fullName.vb: Apizr.Mediation.Cruding.ReadQuery(Of TResultData, TKey)
  name.vb: ReadQuery(Of TResultData, TKey)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.ReadQuery`2
    name: ReadQuery
    nameWithType: ReadQuery
    fullName: Apizr.Mediation.Cruding.ReadQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.ReadQuery`2
    name: ReadQuery
    nameWithType: ReadQuery
    fullName: Apizr.Mediation.Cruding.ReadQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery*
  commentId: Overload:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery
  name: SendReadQuery
  nameWithType: ApizrCrudMediatorExtensions.SendReadQuery
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendReadQuery
- uid: '{TApiEntityKey}'
  commentId: '!:TApiEntityKey'
  definition: TApiEntityKey
  name: TApiEntityKey
  nameWithType: TApiEntityKey
  fullName: TApiEntityKey
- uid: TApiEntityKey
  name: TApiEntityKey
  nameWithType: TApiEntityKey
  fullName: TApiEntityKey
- uid: Apizr.Mediation.Cruding.UpdateCommand`2
  commentId: T:Apizr.Mediation.Cruding.UpdateCommand`2
  name: UpdateCommand<TKey, TRequestData>
  nameWithType: UpdateCommand<TKey, TRequestData>
  fullName: Apizr.Mediation.Cruding.UpdateCommand<TKey, TRequestData>
  nameWithType.vb: UpdateCommand(Of TKey, TRequestData)
  fullName.vb: Apizr.Mediation.Cruding.UpdateCommand(Of TKey, TRequestData)
  name.vb: UpdateCommand(Of TKey, TRequestData)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.UpdateCommand`2
    name: UpdateCommand
    nameWithType: UpdateCommand
    fullName: Apizr.Mediation.Cruding.UpdateCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.UpdateCommand`2
    name: UpdateCommand
    nameWithType: UpdateCommand
    fullName: Apizr.Mediation.Cruding.UpdateCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand*
  commentId: Overload:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand
  name: SendUpdateCommand
  nameWithType: ApizrCrudMediatorExtensions.SendUpdateCommand
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendUpdateCommand
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Apizr.Mediation.Cruding.DeleteCommand`2
  commentId: T:Apizr.Mediation.Cruding.DeleteCommand`2
  name: DeleteCommand<T, TKey>
  nameWithType: DeleteCommand<T, TKey>
  fullName: Apizr.Mediation.Cruding.DeleteCommand<T, TKey>
  nameWithType.vb: DeleteCommand(Of T, TKey)
  fullName.vb: Apizr.Mediation.Cruding.DeleteCommand(Of T, TKey)
  name.vb: DeleteCommand(Of T, TKey)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.DeleteCommand`2
    name: DeleteCommand
    nameWithType: DeleteCommand
    fullName: Apizr.Mediation.Cruding.DeleteCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.DeleteCommand`2
    name: DeleteCommand
    nameWithType: DeleteCommand
    fullName: Apizr.Mediation.Cruding.DeleteCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand*
  commentId: Overload:Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand
  name: SendDeleteCommand
  nameWithType: ApizrCrudMediatorExtensions.SendDeleteCommand
  fullName: Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.SendDeleteCommand
