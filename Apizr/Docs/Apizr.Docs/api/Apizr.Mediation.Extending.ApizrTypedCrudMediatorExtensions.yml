### YamlMime:ManagedReference
items:
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  commentId: T:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  id: ApizrTypedCrudMediatorExtensions
  parent: Apizr.Mediation.Extending
  children:
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``0,Polly.Context,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``0,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``0,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``0,Polly.Context,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``0,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``0,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,Polly.Context,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Int32,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Int32,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Int32,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Int32,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Int32,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Int32,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,``0,Polly.Context,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,``0,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,``0,Polly.Context,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,``0,System.Action{System.Exception})
  - Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  langs:
  - csharp
  - vb
  name: ApizrTypedCrudMediatorExtensions
  nameWithType: ApizrTypedCrudMediatorExtensions
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  type: Class
  source:
    id: ApizrTypedCrudMediatorExtensions
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 11
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  syntax:
    content: public static class ApizrTypedCrudMediatorExtensions
    content.vb: Public Module ApizrTypedCrudMediatorExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``0,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``0,System.Action{System.Exception})
  id: SendCreateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``0,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, System.Action<System.Exception>)
  type: Method
  source:
    id: SendCreateCommand
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 27
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntity entity, Action<Exception> onException)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateCommand(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), entity As TApiEntity, onException As Action(Of Exception)) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendCreateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntity, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntity, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntity, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``0,Polly.Context,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``0,Polly.Context,System.Action{System.Exception})
  id: SendCreateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``0,Polly.Context,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Context, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Context, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Polly.Context, System.Action<System.Exception>)
  type: Method
  source:
    id: SendCreateCommand
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 43
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntity entity, Context context, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateCommand(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), entity As TApiEntity, context As Context, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendCreateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntity, Context, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntity, Polly.Context, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntity, Context, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``0,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``0,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendCreateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``0,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, CancellationToken, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    id: SendCreateCommand
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 61
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateCommand(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), entity As TApiEntity, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendCreateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntity, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntity, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntity, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendCreateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Context, CancellationToken, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Context, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Polly.Context, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    id: SendCreateCommand
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 80
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateCommand(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), entity As TApiEntity, context As Context, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendCreateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntity, Context, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntity, Polly.Context, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntity, Context, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``0,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``0,System.Action{System.Exception})
  id: SendCreateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``0,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, System.Action<System.Exception>)
  type: Method
  source:
    id: SendCreateCommand
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 104
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TModelEntity entity, Action<Exception> onException)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateCommand(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), entity As TModelEntity, onException As Action(Of Exception)) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendCreateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TModelEntity, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TModelEntity, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TModelEntity, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``0,Polly.Context,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``0,Polly.Context,System.Action{System.Exception})
  id: SendCreateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``0,Polly.Context,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Context, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Context, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Polly.Context, System.Action<System.Exception>)
  type: Method
  source:
    id: SendCreateCommand
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 122
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TModelEntity entity, Context context, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateCommand(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), entity As TModelEntity, context As Context, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendCreateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TModelEntity, Context, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TModelEntity, Polly.Context, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TModelEntity, Context, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``0,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``0,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendCreateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``0,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, CancellationToken, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    id: SendCreateCommand
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 141
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TModelEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateCommand(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), entity As TModelEntity, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendCreateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TModelEntity, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TModelEntity, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TModelEntity, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendCreateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Context, CancellationToken, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Context, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Polly.Context, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    id: SendCreateCommand
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 161
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TModelEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateCommand(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), entity As TModelEntity, context As Context, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendCreateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TModelEntity, Context, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TModelEntity, Polly.Context, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendCreateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TModelEntity, Context, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Action{System.Exception})
  id: SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 187
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, Action<Exception> onException)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception and return cached result
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), onException As Action(Of Exception)) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 201
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, bool clearCache, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: clearCache
      type: System.Boolean
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), clearCache As Boolean, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 218
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, Context context, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 236
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Int32,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Int32,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Int32,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Int32, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 254
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), priority As Integer, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Int32, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Int32, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 274
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, Context context, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), priority As Integer, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Int32, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 295
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 317
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 337
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Action{System.Exception})
  id: SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 362
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, Action<Exception> onException)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception and return cached result
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), onException As Action(Of Exception)) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 379
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, bool clearCache, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), clearCache As Boolean, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 398
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, Context context, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 418
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Int32,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Int32,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Int32,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Int32, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 439
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), priority As Integer, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Int32, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 461
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Int32, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 484
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, Context context, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), priority As Integer, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Int32, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 507
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 530
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Action{System.Exception})
  id: SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 555
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, Action<Exception> onException)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception and return cached result
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, onException As Action(Of Exception)) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 572
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, bool clearCache, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, clearCache As Boolean, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 592
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, Context context, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 613
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Int32,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Int32,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Int32,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Int32, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 634
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, priority As Integer, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Int32, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Int32, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 656
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, Context context, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, priority As Integer, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Int32, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 679
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 703
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 727
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Action{System.Exception})
  id: SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 754
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, Action<Exception> onException)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception and return cached result
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, onException As Action(Of Exception)) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 774
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, bool clearCache, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, clearCache As Boolean, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 796
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, Context context, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 820
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Int32,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Int32,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Int32,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Int32, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 844
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, priority As Integer, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Int32, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Int32, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 869
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, Context context, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, priority As Integer, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Int32, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 895
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 922
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadAllQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``4,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadAllQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 949
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelReadAllResult}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelReadAllResult)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadAllQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Action{System.Exception})
  id: SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 981
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Action<Exception> onException)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception and return cached result
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, onException As Action(Of Exception)) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 998
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, bool clearCache, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, clearCache As Boolean, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1017
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1037
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Int32,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Int32,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Int32,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Int32, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1058
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, priority As Integer, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Int32, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1081
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Int32, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1104
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, Context context, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, priority As Integer, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Int32, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1128
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1154
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TApiEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TApiEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Action{System.Exception})
  id: SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1182
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Action<Exception> onException)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception and return cached result
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, onException As Action(Of Exception)) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1201
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, bool clearCache, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, clearCache As Boolean, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1223
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1246
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Int32,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Int32,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Int32,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Int32, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1268
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, priority As Integer, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Int32, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1292
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Int32,Polly.Context,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Int32, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1317
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, Context context, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, priority As Integer, context As Context, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Int32, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Int32,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1342
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  id: SendReadQuery``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action<System.Exception>)
  type: Method
  source:
    id: SendReadQuery
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1369
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority returning a mapped result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: Clear request cache before executing
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception and return cached result (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{{TModelEntity}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadQuery(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False, onException As Action(Of Exception) = Nothing) As Task(Of TModelEntity)
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean, System.Action(Of System.Exception))
  name.vb: SendReadQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,``0,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,``0,System.Action{System.Exception})
  id: SendUpdateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,``0,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, System.Action<System.Exception>)
  type: Method
  source:
    id: SendUpdateCommand
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1401
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TApiEntity entity, Action<Exception> onException)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateCommand(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, entity As TApiEntity, onException As Action(Of Exception)) As Task
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendUpdateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TApiEntity, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TApiEntity, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TApiEntity, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,``0,Polly.Context,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,``0,Polly.Context,System.Action{System.Exception})
  id: SendUpdateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,``0,Polly.Context,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Context, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Context, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Polly.Context, System.Action<System.Exception>)
  type: Method
  source:
    id: SendUpdateCommand
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1421
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TApiEntity entity, Context context, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateCommand(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, entity As TApiEntity, context As Context, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendUpdateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TApiEntity, Context, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TApiEntity, Polly.Context, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TApiEntity, Context, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendUpdateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, CancellationToken, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    id: SendUpdateCommand
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1442
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TApiEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateCommand(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, entity As TApiEntity, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendUpdateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TApiEntity, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TApiEntity, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TApiEntity, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendUpdateCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Context, CancellationToken, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Context, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Polly.Context, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    id: SendUpdateCommand
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1465
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TApiEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateCommand(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, entity As TApiEntity, context As Context, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendUpdateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TApiEntity, Context, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TApiEntity, Polly.Context, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TApiEntity, Context, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,``0,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,``0,System.Action{System.Exception})
  id: SendUpdateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,``0,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, System.Action<System.Exception>)
  type: Method
  source:
    id: SendUpdateCommand
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1492
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TModelEntity entity, Action<Exception> onException)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateCommand(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, entity As TModelEntity, onException As Action(Of Exception)) As Task
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TModelEntity, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TModelEntity, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TModelEntity, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,``0,Polly.Context,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,``0,Polly.Context,System.Action{System.Exception})
  id: SendUpdateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,``0,Polly.Context,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Context, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Context, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Polly.Context, System.Action<System.Exception>)
  type: Method
  source:
    id: SendUpdateCommand
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1513
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TModelEntity entity, Context context, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateCommand(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, entity As TModelEntity, context As Context, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TModelEntity, Context, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TModelEntity, Polly.Context, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TModelEntity, Context, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendUpdateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,``0,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, CancellationToken, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    id: SendUpdateCommand
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1535
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TModelEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateCommand(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, entity As TModelEntity, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TModelEntity, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TModelEntity, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TModelEntity, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendUpdateCommand``5(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``1,``2,``3,``4},``2,``0,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Context, CancellationToken, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Context, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Polly.Context, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    id: SendUpdateCommand
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1559
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TModelEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateCommand(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, entity As TModelEntity, context As Context, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TModelEntity, Context, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TModelEntity, Polly.Context, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendUpdateCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TModelEntity, Context, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Action{System.Exception})
  id: SendDeleteCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Action<System.Exception>)
  type: Method
  source:
    id: SendDeleteCommand
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1586
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Action<Exception> onException)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: onException
      type: System.Action{System.Exception}
      description: Handle exception
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendDeleteCommand(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, onException As Action(Of Exception)) As Task
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendDeleteCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Action(Of System.Exception))
  name.vb: SendDeleteCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,Polly.Context,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,Polly.Context,System.Action{System.Exception})
  id: SendDeleteCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,Polly.Context,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Polly.Context, System.Action<System.Exception>)
  type: Method
  source:
    id: SendDeleteCommand
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1604
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendDeleteCommand(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, context As Context, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendDeleteCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Polly.Context, System.Action(Of System.Exception))
  name.vb: SendDeleteCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendDeleteCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    id: SendDeleteCommand
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1623
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, CancellationToken cancellationToken, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendDeleteCommand(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendDeleteCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendDeleteCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, CancellationToken, Action(Of Exception))
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  id: SendDeleteCommand``4(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{``0,``1,``2,``3},``1,Polly.Context,System.Threading.CancellationToken,System.Action{System.Exception})
  isExtensionMethod: true
  parent: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Action<Exception>)
  nameWithType: ApizrTypedCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Action<Exception>)
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Action<System.Exception>)
  type: Method
  source:
    id: SendDeleteCommand
    path: C:\Dev\Community\Apizr\Apizr\Src\Handling\Apizr.Integrations.MediatR\Mediation\Extending\ApizrTypedCrudMediatorExtensions.cs
    startLine: 1644
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken, Action<Exception> onException = null)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: onException
      type: System.Action{System.Exception}
      description: 'Handle exception (default: null = throwing)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendDeleteCommand(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, context As Context, cancellationToken As CancellationToken, onException As Action(Of Exception) = Nothing) As Task
  overload: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudMediatorExtensions.SendDeleteCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, CancellationToken, Action(Of Exception))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Action(Of System.Exception))
  name.vb: SendDeleteCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, CancellationToken, Action(Of Exception))
references:
- uid: Apizr.Mediation.Extending
  commentId: N:Apizr.Mediation.Extending
  name: Apizr.Mediation.Extending
  nameWithType: Apizr.Mediation.Extending
  fullName: Apizr.Mediation.Extending
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Apizr.Mediation.Cruding.CreateCommand`1
  commentId: T:Apizr.Mediation.Cruding.CreateCommand`1
  name: CreateCommand<TModelData>
  nameWithType: CreateCommand<TModelData>
  fullName: Apizr.Mediation.Cruding.CreateCommand<TModelData>
  nameWithType.vb: CreateCommand(Of TModelData)
  fullName.vb: Apizr.Mediation.Cruding.CreateCommand(Of TModelData)
  name.vb: CreateCommand(Of TModelData)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.CreateCommand`1
    name: CreateCommand
    nameWithType: CreateCommand
    fullName: Apizr.Mediation.Cruding.CreateCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.CreateCommand`1
    name: CreateCommand
    nameWithType: CreateCommand
    fullName: Apizr.Mediation.Cruding.CreateCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand*
  commentId: Overload:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand
  name: SendCreateCommand
  nameWithType: ApizrTypedCrudMediatorExtensions.SendCreateCommand
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendCreateCommand
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
  commentId: T:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator{`0,`1,`2,`3}
  parent: Apizr.Mediation.Cruding.Sending
  definition: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  name: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)
  name.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
    name: IApizrCrudMediator
    nameWithType: IApizrCrudMediator
    fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiEntityKey
    nameWithType: TApiEntityKey
    fullName: TApiEntityKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllParams
    nameWithType: TReadAllParams
    fullName: TReadAllParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
    name: IApizrCrudMediator
    nameWithType: IApizrCrudMediator
    fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiEntityKey
    nameWithType: TApiEntityKey
    fullName: TApiEntityKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllParams
    nameWithType: TReadAllParams
    fullName: TReadAllParams
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TApiEntity}'
  commentId: '!:TApiEntity'
  definition: TApiEntity
  name: TApiEntity
  nameWithType: TApiEntity
  fullName: TApiEntity
- uid: System.Action{System.Exception}
  commentId: T:System.Action{System.Exception}
  parent: System
  definition: System.Action`1
  name: Action<Exception>
  nameWithType: Action<Exception>
  fullName: System.Action<System.Exception>
  nameWithType.vb: Action(Of Exception)
  fullName.vb: System.Action(Of System.Exception)
  name.vb: Action(Of Exception)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TApiEntity}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TApiEntity>
  nameWithType: Task<TApiEntity>
  fullName: System.Threading.Tasks.Task<TApiEntity>
  nameWithType.vb: Task(Of TApiEntity)
  fullName.vb: System.Threading.Tasks.Task(Of TApiEntity)
  name.vb: Task(Of TApiEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  commentId: T:Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
  name: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>
  nameWithType: IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>
  fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>
  nameWithType.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)
  fullName.vb: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)
  name.vb: IApizrCrudMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
    name: IApizrCrudMediator
    nameWithType: IApizrCrudMediator
    fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiEntityKey
    nameWithType: TApiEntityKey
    fullName: TApiEntityKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllParams
    nameWithType: TReadAllParams
    fullName: TReadAllParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator`4
    name: IApizrCrudMediator
    nameWithType: IApizrCrudMediator
    fullName: Apizr.Mediation.Cruding.Sending.IApizrCrudMediator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiEntityKey
    nameWithType: TApiEntityKey
    fullName: TApiEntityKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllParams
    nameWithType: TReadAllParams
    fullName: TReadAllParams
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Cruding.Sending
  commentId: N:Apizr.Mediation.Cruding.Sending
  name: Apizr.Mediation.Cruding.Sending
  nameWithType: Apizr.Mediation.Cruding.Sending
  fullName: Apizr.Mediation.Cruding.Sending
- uid: TApiEntity
  name: TApiEntity
  nameWithType: TApiEntity
  fullName: TApiEntity
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Polly.Context
  commentId: T:Polly.Context
  parent: Polly
  isExternal: true
  name: Context
  nameWithType: Context
  fullName: Polly.Context
- uid: Polly
  commentId: N:Polly
  isExternal: true
  name: Polly
  nameWithType: Polly
  fullName: Polly
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: '{TModelEntity}'
  commentId: '!:TModelEntity'
  definition: TModelEntity
  name: TModelEntity
  nameWithType: TModelEntity
  fullName: TModelEntity
- uid: System.Threading.Tasks.Task{{TModelEntity}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TModelEntity>
  nameWithType: Task<TModelEntity>
  fullName: System.Threading.Tasks.Task<TModelEntity>
  nameWithType.vb: Task(Of TModelEntity)
  fullName.vb: System.Threading.Tasks.Task(Of TModelEntity)
  name.vb: Task(Of TModelEntity)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: TModelEntity
  name: TModelEntity
  nameWithType: TModelEntity
  fullName: TModelEntity
- uid: Apizr.Mediation.Cruding.ReadAllQuery`1
  commentId: T:Apizr.Mediation.Cruding.ReadAllQuery`1
  name: ReadAllQuery<TReadAllResult>
  nameWithType: ReadAllQuery<TReadAllResult>
  fullName: Apizr.Mediation.Cruding.ReadAllQuery<TReadAllResult>
  nameWithType.vb: ReadAllQuery(Of TReadAllResult)
  fullName.vb: Apizr.Mediation.Cruding.ReadAllQuery(Of TReadAllResult)
  name.vb: ReadAllQuery(Of TReadAllResult)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.ReadAllQuery`1
    name: ReadAllQuery
    nameWithType: ReadAllQuery
    fullName: Apizr.Mediation.Cruding.ReadAllQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.ReadAllQuery`1
    name: ReadAllQuery
    nameWithType: ReadAllQuery
    fullName: Apizr.Mediation.Cruding.ReadAllQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery*
  commentId: Overload:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery
  name: SendReadAllQuery
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadAllQuery
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadAllQuery
- uid: System.Threading.Tasks.Task{{TReadAllResult}}
  commentId: T:System.Threading.Tasks.Task{`2}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TReadAllResult>
  nameWithType: Task<TReadAllResult>
  fullName: System.Threading.Tasks.Task<TReadAllResult>
  nameWithType.vb: Task(Of TReadAllResult)
  fullName.vb: System.Threading.Tasks.Task(Of TReadAllResult)
  name.vb: Task(Of TReadAllResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{{TModelReadAllResult}}
  commentId: T:System.Threading.Tasks.Task{`2}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TModelReadAllResult>
  nameWithType: Task<TModelReadAllResult>
  fullName: System.Threading.Tasks.Task<TModelReadAllResult>
  nameWithType.vb: Task(Of TModelReadAllResult)
  fullName.vb: System.Threading.Tasks.Task(Of TModelReadAllResult)
  name.vb: Task(Of TModelReadAllResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelReadAllResult
    nameWithType: TModelReadAllResult
    fullName: TModelReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelReadAllResult
    nameWithType: TModelReadAllResult
    fullName: TModelReadAllResult
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TReadAllParams}'
  commentId: '!:TReadAllParams'
  definition: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: Apizr.Mediation.Cruding.ReadQuery`2
  commentId: T:Apizr.Mediation.Cruding.ReadQuery`2
  name: ReadQuery<TResultData, TKey>
  nameWithType: ReadQuery<TResultData, TKey>
  fullName: Apizr.Mediation.Cruding.ReadQuery<TResultData, TKey>
  nameWithType.vb: ReadQuery(Of TResultData, TKey)
  fullName.vb: Apizr.Mediation.Cruding.ReadQuery(Of TResultData, TKey)
  name.vb: ReadQuery(Of TResultData, TKey)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.ReadQuery`2
    name: ReadQuery
    nameWithType: ReadQuery
    fullName: Apizr.Mediation.Cruding.ReadQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.ReadQuery`2
    name: ReadQuery
    nameWithType: ReadQuery
    fullName: Apizr.Mediation.Cruding.ReadQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery*
  commentId: Overload:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery
  name: SendReadQuery
  nameWithType: ApizrTypedCrudMediatorExtensions.SendReadQuery
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendReadQuery
- uid: '{TApiEntityKey}'
  commentId: '!:TApiEntityKey'
  definition: TApiEntityKey
  name: TApiEntityKey
  nameWithType: TApiEntityKey
  fullName: TApiEntityKey
- uid: TApiEntityKey
  name: TApiEntityKey
  nameWithType: TApiEntityKey
  fullName: TApiEntityKey
- uid: Apizr.Mediation.Cruding.UpdateCommand`2
  commentId: T:Apizr.Mediation.Cruding.UpdateCommand`2
  name: UpdateCommand<TKey, TRequestData>
  nameWithType: UpdateCommand<TKey, TRequestData>
  fullName: Apizr.Mediation.Cruding.UpdateCommand<TKey, TRequestData>
  nameWithType.vb: UpdateCommand(Of TKey, TRequestData)
  fullName.vb: Apizr.Mediation.Cruding.UpdateCommand(Of TKey, TRequestData)
  name.vb: UpdateCommand(Of TKey, TRequestData)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.UpdateCommand`2
    name: UpdateCommand
    nameWithType: UpdateCommand
    fullName: Apizr.Mediation.Cruding.UpdateCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.UpdateCommand`2
    name: UpdateCommand
    nameWithType: UpdateCommand
    fullName: Apizr.Mediation.Cruding.UpdateCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand*
  commentId: Overload:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand
  name: SendUpdateCommand
  nameWithType: ApizrTypedCrudMediatorExtensions.SendUpdateCommand
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendUpdateCommand
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Apizr.Mediation.Cruding.DeleteCommand`2
  commentId: T:Apizr.Mediation.Cruding.DeleteCommand`2
  name: DeleteCommand<T, TKey>
  nameWithType: DeleteCommand<T, TKey>
  fullName: Apizr.Mediation.Cruding.DeleteCommand<T, TKey>
  nameWithType.vb: DeleteCommand(Of T, TKey)
  fullName.vb: Apizr.Mediation.Cruding.DeleteCommand(Of T, TKey)
  name.vb: DeleteCommand(Of T, TKey)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.DeleteCommand`2
    name: DeleteCommand
    nameWithType: DeleteCommand
    fullName: Apizr.Mediation.Cruding.DeleteCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.DeleteCommand`2
    name: DeleteCommand
    nameWithType: DeleteCommand
    fullName: Apizr.Mediation.Cruding.DeleteCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand*
  commentId: Overload:Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand
  name: SendDeleteCommand
  nameWithType: ApizrTypedCrudMediatorExtensions.SendDeleteCommand
  fullName: Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.SendDeleteCommand
