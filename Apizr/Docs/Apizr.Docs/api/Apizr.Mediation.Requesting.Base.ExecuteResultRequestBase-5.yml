### YamlMime:ManagedReference
items:
- uid: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5
  commentId: T:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5
  id: ExecuteResultRequestBase`5
  parent: Apizr.Mediation.Requesting.Base
  children:
  - Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`3,System.Threading.Tasks.Task{`2}}},`4,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`2}}},System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,`3,System.Threading.Tasks.Task{`2}}},`4,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,System.Threading.Tasks.Task{`2}}},Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,`3,System.Threading.Tasks.Task{`2}}},`4,Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{`2}}},Polly.Context,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,`3,System.Threading.Tasks.Task{`2}}},`4,System.Boolean,System.Action{System.Exception})
  - Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{`2}}},System.Boolean,System.Action{System.Exception})
  langs:
  - csharp
  - vb
  name: ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
  nameWithType: ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
  fullName: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
  type: Class
  source:
    id: ExecuteResultRequestBase
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Requesting\Base\ExecuteResultRequestBase.cs
    startLine: 70
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Requesting.Base
  syntax:
    content: 'public abstract class ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData>, IRequest<TModelResultData>, IBaseRequest'
    typeParameters:
    - id: TWebApi
    - id: TModelResultData
    - id: TApiResultData
    - id: TApiRequestData
    - id: TModelRequestData
    content.vb: >-
      Public MustInherit Class ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)

          Inherits ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData)

          Implements IRequest(Of TModelResultData), IBaseRequest
  inheritance:
  - System.Object
  - Apizr.Mediation.Requesting.Base.RequestBase{{TModelResultData}}
  - Apizr.Mediation.Requesting.Base.ExecuteRequestBase{{TModelResultData}}
  - Apizr.Mediation.Requesting.Base.ExecuteRequestBase{{TModelResultData},{TModelRequestData}}
  - Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase{{TWebApi},{TModelResultData},{TApiResultData},{TModelResultData},{TApiRequestData},{TModelRequestData}}
  derivedClasses:
  - Apizr.Mediation.Requesting.ExecuteResultRequest`5
  implements:
  - MediatR.IRequest{{TModelResultData}}
  - MediatR.IBaseRequest
  inheritedMembers:
  - Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase{{TWebApi},{TModelResultData},{TApiResultData},{TModelResultData},{TApiRequestData},{TModelRequestData}}.ClearCache
  - Apizr.Mediation.Requesting.Base.ExecuteRequestBase{{TModelResultData},{TModelRequestData}}.ModelRequestData
  - Apizr.Mediation.Requesting.Base.ExecuteRequestBase{{TModelResultData}}.ExecuteApiMethod
  - Apizr.Mediation.Requesting.Base.RequestBase{{TModelResultData}}.Context
  - Apizr.Mediation.Requesting.Base.RequestBase{{TModelResultData}}.OnException
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
  nameWithType.vb: ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
  name.vb: ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
- uid: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`2}}},System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`2}}},System.Boolean,System.Action{System.Exception})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`2}}},System.Boolean,System.Action{System.Exception})'
  parent: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5
  langs:
  - csharp
  - vb
  name: ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiResultData>>>, Boolean, Action<Exception>)
  nameWithType: ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>.ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiResultData>>>, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>.ExecuteResultRequestBase(System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task<TApiResultData>>>, System.Boolean, System.Action<System.Exception>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Requesting\Base\ExecuteResultRequestBase.cs
    startLine: 75
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Requesting.Base
  syntax:
    content: protected ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiResultData>>> executeApiMethod, bool clearCache, Action<Exception> onException = null)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task{{TApiResultData}}}}
    - id: clearCache
      type: System.Boolean
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Protected Sub New(executeApiMethod As Expression(Of Func(Of TWebApi, Task(Of TApiResultData))), clearCache As Boolean, onException As Action(Of Exception) = Nothing)
  overload: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor*
  nameWithType.vb: ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData).ExecuteResultRequestBase(Expression(Of Func(Of TWebApi, Task(Of TApiResultData))), Boolean, Action(Of Exception))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData).ExecuteResultRequestBase(System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task(Of TApiResultData))), System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteResultRequestBase(Expression(Of Func(Of TWebApi, Task(Of TApiResultData))), Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{`2}}},System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{`2}}},System.Boolean,System.Action{System.Exception})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{`2}}},System.Boolean,System.Action{System.Exception})'
  parent: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5
  langs:
  - csharp
  - vb
  name: ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, Task<TApiResultData>>>, Boolean, Action<Exception>)
  nameWithType: ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>.ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, Task<TApiResultData>>>, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>.ExecuteResultRequestBase(System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiResultData>>>, System.Boolean, System.Action<System.Exception>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Requesting\Base\ExecuteResultRequestBase.cs
    startLine: 80
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Requesting.Base
  syntax:
    content: protected ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, Task<TApiResultData>>> executeApiMethod, bool clearCache, Action<Exception> onException = null)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiResultData}}}}
    - id: clearCache
      type: System.Boolean
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Protected Sub New(executeApiMethod As Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiResultData))), clearCache As Boolean, onException As Action(Of Exception) = Nothing)
  overload: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor*
  nameWithType.vb: ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData).ExecuteResultRequestBase(Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiResultData))), Boolean, Action(Of Exception))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData).ExecuteResultRequestBase(System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiResultData))), System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteResultRequestBase(Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiResultData))), Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,System.Threading.Tasks.Task{`2}}},Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,System.Threading.Tasks.Task{`2}}},Polly.Context,System.Boolean,System.Action{System.Exception})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,System.Threading.Tasks.Task{`2}}},Polly.Context,System.Boolean,System.Action{System.Exception})'
  parent: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5
  langs:
  - csharp
  - vb
  name: ExecuteResultRequestBase(Expression<Func<Context, TWebApi, Task<TApiResultData>>>, Context, Boolean, Action<Exception>)
  nameWithType: ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>.ExecuteResultRequestBase(Expression<Func<Context, TWebApi, Task<TApiResultData>>>, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>.ExecuteResultRequestBase(System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, System.Threading.Tasks.Task<TApiResultData>>>, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Requesting\Base\ExecuteResultRequestBase.cs
    startLine: 86
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Requesting.Base
  syntax:
    content: protected ExecuteResultRequestBase(Expression<Func<Context, TWebApi, Task<TApiResultData>>> executeApiMethod, Context context, bool clearCache, Action<Exception> onException = null)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},System.Threading.Tasks.Task{{TApiResultData}}}}
    - id: context
      type: Polly.Context
    - id: clearCache
      type: System.Boolean
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Protected Sub New(executeApiMethod As Expression(Of Func(Of Context, TWebApi, Task(Of TApiResultData))), context As Context, clearCache As Boolean, onException As Action(Of Exception) = Nothing)
  overload: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor*
  nameWithType.vb: ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData).ExecuteResultRequestBase(Expression(Of Func(Of Context, TWebApi, Task(Of TApiResultData))), Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData).ExecuteResultRequestBase(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, System.Threading.Tasks.Task(Of TApiResultData))), Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteResultRequestBase(Expression(Of Func(Of Context, TWebApi, Task(Of TApiResultData))), Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{`2}}},Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{`2}}},Polly.Context,System.Boolean,System.Action{System.Exception})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{`2}}},Polly.Context,System.Boolean,System.Action{System.Exception})'
  parent: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5
  langs:
  - csharp
  - vb
  name: ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiResultData>>>, Context, Boolean, Action<Exception>)
  nameWithType: ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>.ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiResultData>>>, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>.ExecuteResultRequestBase(System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiResultData>>>, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Requesting\Base\ExecuteResultRequestBase.cs
    startLine: 91
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Requesting.Base
  syntax:
    content: protected ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiResultData>>> executeApiMethod, Context context, bool clearCache, Action<Exception> onException = null)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiResultData}}}}
    - id: context
      type: Polly.Context
    - id: clearCache
      type: System.Boolean
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Protected Sub New(executeApiMethod As Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiResultData))), context As Context, clearCache As Boolean, onException As Action(Of Exception) = Nothing)
  overload: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor*
  nameWithType.vb: ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData).ExecuteResultRequestBase(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiResultData))), Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData).ExecuteResultRequestBase(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiResultData))), Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteResultRequestBase(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiResultData))), Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`3,System.Threading.Tasks.Task{`2}}},`4,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`3,System.Threading.Tasks.Task{`2}}},`4,System.Boolean,System.Action{System.Exception})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{`0,`3,System.Threading.Tasks.Task{`2}}},`4,System.Boolean,System.Action{System.Exception})'
  parent: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5
  langs:
  - csharp
  - vb
  name: ExecuteResultRequestBase(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>)
  nameWithType: ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>.ExecuteResultRequestBase(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>.ExecuteResultRequestBase(System.Linq.Expressions.Expression<System.Func<TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, System.Boolean, System.Action<System.Exception>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Requesting\Base\ExecuteResultRequestBase.cs
    startLine: 97
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Requesting.Base
  syntax:
    content: protected ExecuteResultRequestBase(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache, Action<Exception> onException = null)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
    - id: modelRequestData
      type: '{TModelRequestData}'
    - id: clearCache
      type: System.Boolean
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Protected Sub New(executeApiMethod As Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), modelRequestData As TModelRequestData, clearCache As Boolean, onException As Action(Of Exception) = Nothing)
  overload: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor*
  nameWithType.vb: ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData).ExecuteResultRequestBase(Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Boolean, Action(Of Exception))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData).ExecuteResultRequestBase(System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteResultRequestBase(Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,`3,System.Threading.Tasks.Task{`2}}},`4,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,`3,System.Threading.Tasks.Task{`2}}},`4,System.Boolean,System.Action{System.Exception})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,`3,System.Threading.Tasks.Task{`2}}},`4,System.Boolean,System.Action{System.Exception})'
  parent: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5
  langs:
  - csharp
  - vb
  name: ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>)
  nameWithType: ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>.ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>.ExecuteResultRequestBase(System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, System.Boolean, System.Action<System.Exception>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Requesting\Base\ExecuteResultRequestBase.cs
    startLine: 103
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Requesting.Base
  syntax:
    content: protected ExecuteResultRequestBase(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache, Action<Exception> onException = null)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
    - id: modelRequestData
      type: '{TModelRequestData}'
    - id: clearCache
      type: System.Boolean
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Protected Sub New(executeApiMethod As Expression(Of Func(Of CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), modelRequestData As TModelRequestData, clearCache As Boolean, onException As Action(Of Exception) = Nothing)
  overload: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor*
  nameWithType.vb: ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData).ExecuteResultRequestBase(Expression(Of Func(Of CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Boolean, Action(Of Exception))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData).ExecuteResultRequestBase(System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteResultRequestBase(Expression(Of Func(Of CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,`3,System.Threading.Tasks.Task{`2}}},`4,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,`3,System.Threading.Tasks.Task{`2}}},`4,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,`3,System.Threading.Tasks.Task{`2}}},`4,Polly.Context,System.Boolean,System.Action{System.Exception})'
  parent: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5
  langs:
  - csharp
  - vb
  name: ExecuteResultRequestBase(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>)
  nameWithType: ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>.ExecuteResultRequestBase(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>.ExecuteResultRequestBase(System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Requesting\Base\ExecuteResultRequestBase.cs
    startLine: 109
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Requesting.Base
  syntax:
    content: protected ExecuteResultRequestBase(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context, bool clearCache, Action<Exception> onException = null)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
    - id: modelRequestData
      type: '{TModelRequestData}'
    - id: context
      type: Polly.Context
    - id: clearCache
      type: System.Boolean
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Protected Sub New(executeApiMethod As Expression(Of Func(Of Context, TWebApi, TApiRequestData, Task(Of TApiResultData))), modelRequestData As TModelRequestData, context As Context, clearCache As Boolean, onException As Action(Of Exception) = Nothing)
  overload: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor*
  nameWithType.vb: ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData).ExecuteResultRequestBase(Expression(Of Func(Of Context, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData).ExecuteResultRequestBase(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteResultRequestBase(Expression(Of Func(Of Context, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Context, Boolean, Action(Of Exception))
- uid: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,`3,System.Threading.Tasks.Task{`2}}},`4,Polly.Context,System.Boolean,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,`3,System.Threading.Tasks.Task{`2}}},`4,Polly.Context,System.Boolean,System.Action{System.Exception})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,`3,System.Threading.Tasks.Task{`2}}},`4,Polly.Context,System.Boolean,System.Action{System.Exception})'
  parent: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5
  langs:
  - csharp
  - vb
  name: ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>)
  nameWithType: ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>.ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>)
  fullName: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>.ExecuteResultRequestBase(System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, Polly.Context, System.Boolean, System.Action<System.Exception>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Requesting\Base\ExecuteResultRequestBase.cs
    startLine: 115
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Requesting.Base
  syntax:
    content: protected ExecuteResultRequestBase(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context, bool clearCache, Action<Exception> onException = null)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
    - id: modelRequestData
      type: '{TModelRequestData}'
    - id: context
      type: Polly.Context
    - id: clearCache
      type: System.Boolean
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Protected Sub New(executeApiMethod As Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), modelRequestData As TModelRequestData, context As Context, clearCache As Boolean, onException As Action(Of Exception) = Nothing)
  overload: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor*
  nameWithType.vb: ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData).ExecuteResultRequestBase(Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Context, Boolean, Action(Of Exception))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData).ExecuteResultRequestBase(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, Polly.Context, System.Boolean, System.Action(Of System.Exception))
  name.vb: ExecuteResultRequestBase(Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Context, Boolean, Action(Of Exception))
references:
- uid: Apizr.Mediation.Requesting.Base
  commentId: N:Apizr.Mediation.Requesting.Base
  name: Apizr.Mediation.Requesting.Base
  nameWithType: Apizr.Mediation.Requesting.Base
  fullName: Apizr.Mediation.Requesting.Base
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Apizr.Mediation.Requesting.Base.RequestBase{{TModelResultData}}
  commentId: T:Apizr.Mediation.Requesting.Base.RequestBase{`0}
  parent: Apizr.Mediation.Requesting.Base
  definition: Apizr.Mediation.Requesting.Base.RequestBase`1
  name: RequestBase<TModelResultData>
  nameWithType: RequestBase<TModelResultData>
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<TModelResultData>
  nameWithType.vb: RequestBase(Of TModelResultData)
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of TModelResultData)
  name.vb: RequestBase(Of TModelResultData)
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Base.RequestBase`1
    name: RequestBase
    nameWithType: RequestBase
    fullName: Apizr.Mediation.Requesting.Base.RequestBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Base.RequestBase`1
    name: RequestBase
    nameWithType: RequestBase
    fullName: Apizr.Mediation.Requesting.Base.RequestBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase{{TModelResultData}}
  commentId: T:Apizr.Mediation.Requesting.Base.ExecuteRequestBase{`1}
  parent: Apizr.Mediation.Requesting.Base
  definition: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`1
  name: ExecuteRequestBase<TModelResultData>
  nameWithType: ExecuteRequestBase<TModelResultData>
  fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase<TModelResultData>
  nameWithType.vb: ExecuteRequestBase(Of TModelResultData)
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteRequestBase(Of TModelResultData)
  name.vb: ExecuteRequestBase(Of TModelResultData)
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`1
    name: ExecuteRequestBase
    nameWithType: ExecuteRequestBase
    fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`1
    name: ExecuteRequestBase
    nameWithType: ExecuteRequestBase
    fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase{{TModelResultData},{TModelRequestData}}
  commentId: T:Apizr.Mediation.Requesting.Base.ExecuteRequestBase{`1,`4}
  parent: Apizr.Mediation.Requesting.Base
  definition: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`2
  name: ExecuteRequestBase<TModelResultData, TModelRequestData>
  nameWithType: ExecuteRequestBase<TModelResultData, TModelRequestData>
  fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase<TModelResultData, TModelRequestData>
  nameWithType.vb: ExecuteRequestBase(Of TModelResultData, TModelRequestData)
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteRequestBase(Of TModelResultData, TModelRequestData)
  name.vb: ExecuteRequestBase(Of TModelResultData, TModelRequestData)
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`2
    name: ExecuteRequestBase
    nameWithType: ExecuteRequestBase
    fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`2
    name: ExecuteRequestBase
    nameWithType: ExecuteRequestBase
    fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase{{TWebApi},{TModelResultData},{TApiResultData},{TModelResultData},{TApiRequestData},{TModelRequestData}}
  commentId: T:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase{`0,`1,`2,`1,`3,`4}
  parent: Apizr.Mediation.Requesting.Base
  definition: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`6
  name: ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData>
  nameWithType: ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData>
  fullName: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData>
  nameWithType.vb: ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData)
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData)
  name.vb: ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData)
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`6
    name: ExecuteResultRequestBase
    nameWithType: ExecuteResultRequestBase
    fullName: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`6
    name: ExecuteResultRequestBase
    nameWithType: ExecuteResultRequestBase
    fullName: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR.IRequest{{TModelResultData}}
  commentId: T:MediatR.IRequest{`0}
  parent: MediatR
  definition: MediatR.IRequest`1
  name: IRequest<TModelResultData>
  nameWithType: IRequest<TModelResultData>
  fullName: MediatR.IRequest<TModelResultData>
  nameWithType.vb: IRequest(Of TModelResultData)
  fullName.vb: MediatR.IRequest(Of TModelResultData)
  name.vb: IRequest(Of TModelResultData)
  spec.csharp:
  - uid: MediatR.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: MediatR.IRequest
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatR.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: MediatR.IRequest
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR.IBaseRequest
  commentId: T:MediatR.IBaseRequest
  parent: MediatR
  isExternal: true
  name: IBaseRequest
  nameWithType: IBaseRequest
  fullName: MediatR.IBaseRequest
- uid: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase{{TWebApi},{TModelResultData},{TApiResultData},{TModelResultData},{TApiRequestData},{TModelRequestData}}.ClearCache
  commentId: P:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase{`0,`1,`2,`1,`3,`4}.ClearCache
  parent: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase{{TWebApi},{TModelResultData},{TApiResultData},{TModelResultData},{TApiRequestData},{TModelRequestData}}
  definition: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`6.ClearCache
  name: ClearCache
  nameWithType: ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData>.ClearCache
  fullName: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData>.ClearCache
  nameWithType.vb: ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData).ClearCache
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData).ClearCache
- uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase{{TModelResultData},{TModelRequestData}}.ModelRequestData
  commentId: P:Apizr.Mediation.Requesting.Base.ExecuteRequestBase{`1,`4}.ModelRequestData
  parent: Apizr.Mediation.Requesting.Base.ExecuteRequestBase{{TModelResultData},{TModelRequestData}}
  definition: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`2.ModelRequestData
  name: ModelRequestData
  nameWithType: ExecuteRequestBase<TModelResultData, TModelRequestData>.ModelRequestData
  fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase<TModelResultData, TModelRequestData>.ModelRequestData
  nameWithType.vb: ExecuteRequestBase(Of TModelResultData, TModelRequestData).ModelRequestData
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteRequestBase(Of TModelResultData, TModelRequestData).ModelRequestData
- uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase{{TModelResultData}}.ExecuteApiMethod
  commentId: P:Apizr.Mediation.Requesting.Base.ExecuteRequestBase{`1}.ExecuteApiMethod
  parent: Apizr.Mediation.Requesting.Base.ExecuteRequestBase{{TModelResultData}}
  definition: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`1.ExecuteApiMethod
  name: ExecuteApiMethod
  nameWithType: ExecuteRequestBase<TModelResultData>.ExecuteApiMethod
  fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase<TModelResultData>.ExecuteApiMethod
  nameWithType.vb: ExecuteRequestBase(Of TModelResultData).ExecuteApiMethod
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteRequestBase(Of TModelResultData).ExecuteApiMethod
- uid: Apizr.Mediation.Requesting.Base.RequestBase{{TModelResultData}}.Context
  commentId: P:Apizr.Mediation.Requesting.Base.RequestBase{`0}.Context
  parent: Apizr.Mediation.Requesting.Base.RequestBase{{TModelResultData}}
  definition: Apizr.Mediation.Requesting.Base.RequestBase`1.Context
  name: Context
  nameWithType: RequestBase<TModelResultData>.Context
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<TModelResultData>.Context
  nameWithType.vb: RequestBase(Of TModelResultData).Context
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of TModelResultData).Context
- uid: Apizr.Mediation.Requesting.Base.RequestBase{{TModelResultData}}.OnException
  commentId: P:Apizr.Mediation.Requesting.Base.RequestBase{`0}.OnException
  parent: Apizr.Mediation.Requesting.Base.RequestBase{{TModelResultData}}
  definition: Apizr.Mediation.Requesting.Base.RequestBase`1.OnException
  name: OnException
  nameWithType: RequestBase<TModelResultData>.OnException
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<TModelResultData>.OnException
  nameWithType.vb: RequestBase(Of TModelResultData).OnException
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of TModelResultData).OnException
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
  commentId: M:Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  parent: Apizr.Extending.ObjectExtensions
  definition: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  name: ToString(String, String)
  nameWithType: ObjectExtensions.ToString(String, String)
  fullName: Apizr.Extending.ObjectExtensions.ToString(System.String, System.String)
  spec.csharp:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Apizr.Mediation.Requesting.Base.RequestBase`1
  commentId: T:Apizr.Mediation.Requesting.Base.RequestBase`1
  name: RequestBase<TFormattedModelResultData>
  nameWithType: RequestBase<TFormattedModelResultData>
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<TFormattedModelResultData>
  nameWithType.vb: RequestBase(Of TFormattedModelResultData)
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of TFormattedModelResultData)
  name.vb: RequestBase(Of TFormattedModelResultData)
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Base.RequestBase`1
    name: RequestBase
    nameWithType: RequestBase
    fullName: Apizr.Mediation.Requesting.Base.RequestBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFormattedModelResultData
    nameWithType: TFormattedModelResultData
    fullName: TFormattedModelResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Base.RequestBase`1
    name: RequestBase
    nameWithType: RequestBase
    fullName: Apizr.Mediation.Requesting.Base.RequestBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFormattedModelResultData
    nameWithType: TFormattedModelResultData
    fullName: TFormattedModelResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`1
  commentId: T:Apizr.Mediation.Requesting.Base.ExecuteRequestBase`1
  name: ExecuteRequestBase<TFormattedModelResultData>
  nameWithType: ExecuteRequestBase<TFormattedModelResultData>
  fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase<TFormattedModelResultData>
  nameWithType.vb: ExecuteRequestBase(Of TFormattedModelResultData)
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteRequestBase(Of TFormattedModelResultData)
  name.vb: ExecuteRequestBase(Of TFormattedModelResultData)
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`1
    name: ExecuteRequestBase
    nameWithType: ExecuteRequestBase
    fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFormattedModelResultData
    nameWithType: TFormattedModelResultData
    fullName: TFormattedModelResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`1
    name: ExecuteRequestBase
    nameWithType: ExecuteRequestBase
    fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFormattedModelResultData
    nameWithType: TFormattedModelResultData
    fullName: TFormattedModelResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`2
  commentId: T:Apizr.Mediation.Requesting.Base.ExecuteRequestBase`2
  name: ExecuteRequestBase<TFormattedModelResultData, TModelRequestData>
  nameWithType: ExecuteRequestBase<TFormattedModelResultData, TModelRequestData>
  fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase<TFormattedModelResultData, TModelRequestData>
  nameWithType.vb: ExecuteRequestBase(Of TFormattedModelResultData, TModelRequestData)
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteRequestBase(Of TFormattedModelResultData, TModelRequestData)
  name.vb: ExecuteRequestBase(Of TFormattedModelResultData, TModelRequestData)
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`2
    name: ExecuteRequestBase
    nameWithType: ExecuteRequestBase
    fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFormattedModelResultData
    nameWithType: TFormattedModelResultData
    fullName: TFormattedModelResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`2
    name: ExecuteRequestBase
    nameWithType: ExecuteRequestBase
    fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFormattedModelResultData
    nameWithType: TFormattedModelResultData
    fullName: TFormattedModelResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`6
  commentId: T:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`6
  name: ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData>
  nameWithType: ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData>
  fullName: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData>
  nameWithType.vb: ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData)
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData)
  name.vb: ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData)
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`6
    name: ExecuteResultRequestBase
    nameWithType: ExecuteResultRequestBase
    fullName: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFormattedModelResultData
    nameWithType: TFormattedModelResultData
    fullName: TFormattedModelResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`6
    name: ExecuteResultRequestBase
    nameWithType: ExecuteResultRequestBase
    fullName: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFormattedModelResultData
    nameWithType: TFormattedModelResultData
    fullName: TFormattedModelResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR.IRequest`1
  commentId: T:MediatR.IRequest`1
  isExternal: true
  name: IRequest<TResponse>
  nameWithType: IRequest<TResponse>
  fullName: MediatR.IRequest<TResponse>
  nameWithType.vb: IRequest(Of TResponse)
  fullName.vb: MediatR.IRequest(Of TResponse)
  name.vb: IRequest(Of TResponse)
  spec.csharp:
  - uid: MediatR.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: MediatR.IRequest
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatR.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: MediatR.IRequest
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR
  commentId: N:MediatR
  isExternal: true
  name: MediatR
  nameWithType: MediatR
  fullName: MediatR
- uid: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`6.ClearCache
  commentId: P:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`6.ClearCache
  name: ClearCache
  nameWithType: ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData>.ClearCache
  fullName: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData>.ClearCache
  nameWithType.vb: ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData).ClearCache
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData).ClearCache
- uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`2.ModelRequestData
  commentId: P:Apizr.Mediation.Requesting.Base.ExecuteRequestBase`2.ModelRequestData
  name: ModelRequestData
  nameWithType: ExecuteRequestBase<TFormattedModelResultData, TModelRequestData>.ModelRequestData
  fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase<TFormattedModelResultData, TModelRequestData>.ModelRequestData
  nameWithType.vb: ExecuteRequestBase(Of TFormattedModelResultData, TModelRequestData).ModelRequestData
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteRequestBase(Of TFormattedModelResultData, TModelRequestData).ModelRequestData
- uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`1.ExecuteApiMethod
  commentId: P:Apizr.Mediation.Requesting.Base.ExecuteRequestBase`1.ExecuteApiMethod
  name: ExecuteApiMethod
  nameWithType: ExecuteRequestBase<TFormattedModelResultData>.ExecuteApiMethod
  fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase<TFormattedModelResultData>.ExecuteApiMethod
  nameWithType.vb: ExecuteRequestBase(Of TFormattedModelResultData).ExecuteApiMethod
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteRequestBase(Of TFormattedModelResultData).ExecuteApiMethod
- uid: Apizr.Mediation.Requesting.Base.RequestBase`1.Context
  commentId: P:Apizr.Mediation.Requesting.Base.RequestBase`1.Context
  name: Context
  nameWithType: RequestBase<TFormattedModelResultData>.Context
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<TFormattedModelResultData>.Context
  nameWithType.vb: RequestBase(Of TFormattedModelResultData).Context
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of TFormattedModelResultData).Context
- uid: Apizr.Mediation.Requesting.Base.RequestBase`1.OnException
  commentId: P:Apizr.Mediation.Requesting.Base.RequestBase`1.OnException
  name: OnException
  nameWithType: RequestBase<TFormattedModelResultData>.OnException
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<TFormattedModelResultData>.OnException
  nameWithType.vb: RequestBase(Of TFormattedModelResultData).OnException
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of TFormattedModelResultData).OnException
- uid: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  commentId: M:Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  isExternal: true
  name: ToString(Object, String, String)
  nameWithType: ObjectExtensions.ToString(Object, String, String)
  fullName: Apizr.Extending.ObjectExtensions.ToString(System.Object, System.String, System.String)
  spec.csharp:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Extending.ObjectExtensions
  commentId: T:Apizr.Extending.ObjectExtensions
  parent: Apizr.Extending
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Apizr.Extending.ObjectExtensions
- uid: Apizr.Extending
  commentId: N:Apizr.Extending
  name: Apizr.Extending
  nameWithType: Apizr.Extending
  fullName: Apizr.Extending
- uid: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor*
  commentId: Overload:Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase`5.#ctor
  name: ExecuteResultRequestBase
  nameWithType: ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>.ExecuteResultRequestBase
  fullName: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>.ExecuteResultRequestBase
  nameWithType.vb: ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData).ExecuteResultRequestBase
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData).ExecuteResultRequestBase
- uid: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task{{TApiResultData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`2}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TWebApi, Task<TApiResultData>>>
  nameWithType: Expression<Func<TWebApi, Task<TApiResultData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task<TApiResultData>>>
  nameWithType.vb: Expression(Of Func(Of TWebApi, Task(Of TApiResultData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task(Of TApiResultData)))
  name.vb: Expression(Of Func(Of TWebApi, Task(Of TApiResultData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Action{System.Exception}
  commentId: T:System.Action{System.Exception}
  parent: System
  definition: System.Action`1
  name: Action<Exception>
  nameWithType: Action<Exception>
  fullName: System.Action<System.Exception>
  nameWithType.vb: Action(Of Exception)
  fullName.vb: System.Action(Of System.Exception)
  name.vb: Action(Of Exception)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiResultData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{`2}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<CancellationToken, TWebApi, Task<TApiResultData>>>
  nameWithType: Expression<Func<CancellationToken, TWebApi, Task<TApiResultData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiResultData>>>
  nameWithType.vb: Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiResultData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiResultData)))
  name.vb: Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiResultData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},System.Threading.Tasks.Task{{TApiResultData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,System.Threading.Tasks.Task{`2}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, TWebApi, Task<TApiResultData>>>
  nameWithType: Expression<Func<Context, TWebApi, Task<TApiResultData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, System.Threading.Tasks.Task<TApiResultData>>>
  nameWithType.vb: Expression(Of Func(Of Context, TWebApi, Task(Of TApiResultData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, System.Threading.Tasks.Task(Of TApiResultData)))
  name.vb: Expression(Of Func(Of Context, TWebApi, Task(Of TApiResultData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Polly.Context
  commentId: T:Polly.Context
  parent: Polly
  isExternal: true
  name: Context
  nameWithType: Context
  fullName: Polly.Context
- uid: Polly
  commentId: N:Polly
  isExternal: true
  name: Polly
  nameWithType: Polly
  fullName: Polly
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiResultData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{`2}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, CancellationToken, TWebApi, Task<TApiResultData>>>
  nameWithType: Expression<Func<Context, CancellationToken, TWebApi, Task<TApiResultData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiResultData>>>
  nameWithType.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiResultData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiResultData)))
  name.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiResultData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``2,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>
  nameWithType: Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>
  nameWithType.vb: Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData)))
  name.vb: Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TModelRequestData}'
  commentId: '!:TModelRequestData'
  definition: TModelRequestData
  name: TModelRequestData
  nameWithType: TModelRequestData
  fullName: TModelRequestData
- uid: TModelRequestData
  name: TModelRequestData
  nameWithType: TModelRequestData
  fullName: TModelRequestData
- uid: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,``2,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>
  nameWithType: Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>
  nameWithType.vb: Expression(Of Func(Of CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData)))
  name.vb: Expression(Of Func(Of CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,``2,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>
  nameWithType: Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>
  nameWithType.vb: Expression(Of Func(Of Context, TWebApi, TApiRequestData, Task(Of TApiResultData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData)))
  name.vb: Expression(Of Func(Of Context, TWebApi, TApiRequestData, Task(Of TApiResultData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,``2,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>
  nameWithType: Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>
  nameWithType.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData)))
  name.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
