### YamlMime:ManagedReference
items:
- uid: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1
  commentId: T:Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1
  id: ExecuteUnitRequestBase`1
  parent: Apizr.Mediation.Requesting.Base
  children:
  - Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Action{System.Exception})
  - Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1.#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,System.Threading.Tasks.Task}},Polly.Context,System.Action{System.Exception})
  - Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1.#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,System.Threading.Tasks.Task}},Polly.Context,System.Action{System.Exception})
  - Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task}},System.Action{System.Exception})
  langs:
  - csharp
  - vb
  name: ExecuteUnitRequestBase<TWebApi>
  nameWithType: ExecuteUnitRequestBase<TWebApi>
  fullName: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase<TWebApi>
  type: Class
  source:
    id: ExecuteUnitRequestBase
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Requesting\Base\ExecuteUnitRequestBase.cs
    startLine: 66
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Requesting.Base
  syntax:
    content: 'public abstract class ExecuteUnitRequestBase<TWebApi> : ExecuteRequestBase, IRequest<Unit>, IBaseRequest'
    typeParameters:
    - id: TWebApi
    content.vb: >-
      Public MustInherit Class ExecuteUnitRequestBase(Of TWebApi)
          Inherits ExecuteRequestBase
          Implements IRequest(Of Unit), IBaseRequest
  inheritance:
  - System.Object
  - Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}
  - Apizr.Mediation.Requesting.Base.ExecuteRequestBase{MediatR.Unit}
  - Apizr.Mediation.Requesting.Base.ExecuteRequestBase
  derivedClasses:
  - Apizr.Mediation.Requesting.ExecuteUnitRequest`1
  implements:
  - MediatR.IRequest{MediatR.Unit}
  - MediatR.IBaseRequest
  inheritedMembers:
  - Apizr.Mediation.Requesting.Base.ExecuteRequestBase{MediatR.Unit}.ExecuteApiMethod
  - Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}.Context
  - Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}.OnException
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: ExecuteUnitRequestBase(Of TWebApi)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase(Of TWebApi)
  name.vb: ExecuteUnitRequestBase(Of TWebApi)
- uid: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Action{System.Exception})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Action{System.Exception})'
  parent: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1
  langs:
  - csharp
  - vb
  name: ExecuteUnitRequestBase(Expression<Func<TWebApi, Task>>, Action<Exception>)
  nameWithType: ExecuteUnitRequestBase<TWebApi>.ExecuteUnitRequestBase(Expression<Func<TWebApi, Task>>, Action<Exception>)
  fullName: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase<TWebApi>.ExecuteUnitRequestBase(System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task>>, System.Action<System.Exception>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Requesting\Base\ExecuteUnitRequestBase.cs
    startLine: 68
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Requesting.Base
  syntax:
    content: protected ExecuteUnitRequestBase(Expression<Func<TWebApi, Task>> executeApiMethod, Action<Exception> onException = null)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task}}
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Protected Sub New(executeApiMethod As Expression(Of Func(Of TWebApi, Task)), onException As Action(Of Exception) = Nothing)
  overload: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1.#ctor*
  nameWithType.vb: ExecuteUnitRequestBase(Of TWebApi).ExecuteUnitRequestBase(Expression(Of Func(Of TWebApi, Task)), Action(Of Exception))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase(Of TWebApi).ExecuteUnitRequestBase(System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task)), System.Action(Of System.Exception))
  name.vb: ExecuteUnitRequestBase(Expression(Of Func(Of TWebApi, Task)), Action(Of Exception))
- uid: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task}},System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1.#ctor(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task}},System.Action{System.Exception})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task}},System.Action{System.Exception})'
  parent: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1
  langs:
  - csharp
  - vb
  name: ExecuteUnitRequestBase(Expression<Func<CancellationToken, TWebApi, Task>>, Action<Exception>)
  nameWithType: ExecuteUnitRequestBase<TWebApi>.ExecuteUnitRequestBase(Expression<Func<CancellationToken, TWebApi, Task>>, Action<Exception>)
  fullName: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase<TWebApi>.ExecuteUnitRequestBase(System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task>>, System.Action<System.Exception>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Requesting\Base\ExecuteUnitRequestBase.cs
    startLine: 72
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Requesting.Base
  syntax:
    content: protected ExecuteUnitRequestBase(Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod, Action<Exception> onException = null)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task}}
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Protected Sub New(executeApiMethod As Expression(Of Func(Of CancellationToken, TWebApi, Task)), onException As Action(Of Exception) = Nothing)
  overload: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1.#ctor*
  nameWithType.vb: ExecuteUnitRequestBase(Of TWebApi).ExecuteUnitRequestBase(Expression(Of Func(Of CancellationToken, TWebApi, Task)), Action(Of Exception))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase(Of TWebApi).ExecuteUnitRequestBase(System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task)), System.Action(Of System.Exception))
  name.vb: ExecuteUnitRequestBase(Expression(Of Func(Of CancellationToken, TWebApi, Task)), Action(Of Exception))
- uid: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1.#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,System.Threading.Tasks.Task}},Polly.Context,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1.#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,System.Threading.Tasks.Task}},Polly.Context,System.Action{System.Exception})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,System.Threading.Tasks.Task}},Polly.Context,System.Action{System.Exception})'
  parent: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1
  langs:
  - csharp
  - vb
  name: ExecuteUnitRequestBase(Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>)
  nameWithType: ExecuteUnitRequestBase<TWebApi>.ExecuteUnitRequestBase(Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>)
  fullName: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase<TWebApi>.ExecuteUnitRequestBase(System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, System.Threading.Tasks.Task>>, Polly.Context, System.Action<System.Exception>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Requesting\Base\ExecuteUnitRequestBase.cs
    startLine: 76
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Requesting.Base
  syntax:
    content: protected ExecuteUnitRequestBase(Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context, Action<Exception> onException = null)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},System.Threading.Tasks.Task}}
    - id: context
      type: Polly.Context
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Protected Sub New(executeApiMethod As Expression(Of Func(Of Context, TWebApi, Task)), context As Context, onException As Action(Of Exception) = Nothing)
  overload: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1.#ctor*
  nameWithType.vb: ExecuteUnitRequestBase(Of TWebApi).ExecuteUnitRequestBase(Expression(Of Func(Of Context, TWebApi, Task)), Context, Action(Of Exception))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase(Of TWebApi).ExecuteUnitRequestBase(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, System.Threading.Tasks.Task)), Polly.Context, System.Action(Of System.Exception))
  name.vb: ExecuteUnitRequestBase(Expression(Of Func(Of Context, TWebApi, Task)), Context, Action(Of Exception))
- uid: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1.#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,System.Threading.Tasks.Task}},Polly.Context,System.Action{System.Exception})
  commentId: M:Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1.#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,System.Threading.Tasks.Task}},Polly.Context,System.Action{System.Exception})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,System.Threading.Tasks.Task}},Polly.Context,System.Action{System.Exception})'
  parent: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1
  langs:
  - csharp
  - vb
  name: ExecuteUnitRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, Action<Exception>)
  nameWithType: ExecuteUnitRequestBase<TWebApi>.ExecuteUnitRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, Action<Exception>)
  fullName: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase<TWebApi>.ExecuteUnitRequestBase(System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task>>, Polly.Context, System.Action<System.Exception>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.MediatR\Mediation\Requesting\Base\ExecuteUnitRequestBase.cs
    startLine: 80
  assemblies:
  - Apizr.Integrations.MediatR
  namespace: Apizr.Mediation.Requesting.Base
  syntax:
    content: protected ExecuteUnitRequestBase(Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context, Action<Exception> onException = null)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task}}
    - id: context
      type: Polly.Context
    - id: onException
      type: System.Action{System.Exception}
    content.vb: Protected Sub New(executeApiMethod As Expression(Of Func(Of Context, CancellationToken, TWebApi, Task)), context As Context, onException As Action(Of Exception) = Nothing)
  overload: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1.#ctor*
  nameWithType.vb: ExecuteUnitRequestBase(Of TWebApi).ExecuteUnitRequestBase(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task)), Context, Action(Of Exception))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase(Of TWebApi).ExecuteUnitRequestBase(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task)), Polly.Context, System.Action(Of System.Exception))
  name.vb: ExecuteUnitRequestBase(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task)), Context, Action(Of Exception))
references:
- uid: Apizr.Mediation.Requesting.Base
  commentId: N:Apizr.Mediation.Requesting.Base
  name: Apizr.Mediation.Requesting.Base
  nameWithType: Apizr.Mediation.Requesting.Base
  fullName: Apizr.Mediation.Requesting.Base
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}
  commentId: T:Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}
  parent: Apizr.Mediation.Requesting.Base
  definition: Apizr.Mediation.Requesting.Base.RequestBase`1
  name: RequestBase<Unit>
  nameWithType: RequestBase<Unit>
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<MediatR.Unit>
  nameWithType.vb: RequestBase(Of Unit)
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of MediatR.Unit)
  name.vb: RequestBase(Of Unit)
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Base.RequestBase`1
    name: RequestBase
    nameWithType: RequestBase
    fullName: Apizr.Mediation.Requesting.Base.RequestBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Base.RequestBase`1
    name: RequestBase
    nameWithType: RequestBase
    fullName: Apizr.Mediation.Requesting.Base.RequestBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase{MediatR.Unit}
  commentId: T:Apizr.Mediation.Requesting.Base.ExecuteRequestBase{MediatR.Unit}
  parent: Apizr.Mediation.Requesting.Base
  definition: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`1
  name: ExecuteRequestBase<Unit>
  nameWithType: ExecuteRequestBase<Unit>
  fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase<MediatR.Unit>
  nameWithType.vb: ExecuteRequestBase(Of Unit)
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteRequestBase(Of MediatR.Unit)
  name.vb: ExecuteRequestBase(Of Unit)
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`1
    name: ExecuteRequestBase
    nameWithType: ExecuteRequestBase
    fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`1
    name: ExecuteRequestBase
    nameWithType: ExecuteRequestBase
    fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase
  commentId: T:Apizr.Mediation.Requesting.Base.ExecuteRequestBase
  parent: Apizr.Mediation.Requesting.Base
  name: ExecuteRequestBase
  nameWithType: ExecuteRequestBase
  fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase
- uid: MediatR.IRequest{MediatR.Unit}
  commentId: T:MediatR.IRequest{MediatR.Unit}
  parent: MediatR
  definition: MediatR.IRequest`1
  name: IRequest<Unit>
  nameWithType: IRequest<Unit>
  fullName: MediatR.IRequest<MediatR.Unit>
  nameWithType.vb: IRequest(Of Unit)
  fullName.vb: MediatR.IRequest(Of MediatR.Unit)
  name.vb: IRequest(Of Unit)
  spec.csharp:
  - uid: MediatR.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: MediatR.IRequest
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatR.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: MediatR.IRequest
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR.IBaseRequest
  commentId: T:MediatR.IBaseRequest
  parent: MediatR
  isExternal: true
  name: IBaseRequest
  nameWithType: IBaseRequest
  fullName: MediatR.IBaseRequest
- uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase{MediatR.Unit}.ExecuteApiMethod
  commentId: P:Apizr.Mediation.Requesting.Base.ExecuteRequestBase{MediatR.Unit}.ExecuteApiMethod
  parent: Apizr.Mediation.Requesting.Base.ExecuteRequestBase{MediatR.Unit}
  definition: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`1.ExecuteApiMethod
  name: ExecuteApiMethod
  nameWithType: ExecuteRequestBase<Unit>.ExecuteApiMethod
  fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase<MediatR.Unit>.ExecuteApiMethod
  nameWithType.vb: ExecuteRequestBase(Of Unit).ExecuteApiMethod
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteRequestBase(Of MediatR.Unit).ExecuteApiMethod
- uid: Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}.Context
  commentId: P:Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}.Context
  parent: Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}
  definition: Apizr.Mediation.Requesting.Base.RequestBase`1.Context
  name: Context
  nameWithType: RequestBase<Unit>.Context
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<MediatR.Unit>.Context
  nameWithType.vb: RequestBase(Of Unit).Context
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of MediatR.Unit).Context
- uid: Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}.OnException
  commentId: P:Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}.OnException
  parent: Apizr.Mediation.Requesting.Base.RequestBase{MediatR.Unit}
  definition: Apizr.Mediation.Requesting.Base.RequestBase`1.OnException
  name: OnException
  nameWithType: RequestBase<Unit>.OnException
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<MediatR.Unit>.OnException
  nameWithType.vb: RequestBase(Of Unit).OnException
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of MediatR.Unit).OnException
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Apizr.Mediation.Requesting.Base.RequestBase`1
  commentId: T:Apizr.Mediation.Requesting.Base.RequestBase`1
  name: RequestBase<TFormattedModelResultData>
  nameWithType: RequestBase<TFormattedModelResultData>
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<TFormattedModelResultData>
  nameWithType.vb: RequestBase(Of TFormattedModelResultData)
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of TFormattedModelResultData)
  name.vb: RequestBase(Of TFormattedModelResultData)
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Base.RequestBase`1
    name: RequestBase
    nameWithType: RequestBase
    fullName: Apizr.Mediation.Requesting.Base.RequestBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFormattedModelResultData
    nameWithType: TFormattedModelResultData
    fullName: TFormattedModelResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Base.RequestBase`1
    name: RequestBase
    nameWithType: RequestBase
    fullName: Apizr.Mediation.Requesting.Base.RequestBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFormattedModelResultData
    nameWithType: TFormattedModelResultData
    fullName: TFormattedModelResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`1
  commentId: T:Apizr.Mediation.Requesting.Base.ExecuteRequestBase`1
  name: ExecuteRequestBase<TFormattedModelResultData>
  nameWithType: ExecuteRequestBase<TFormattedModelResultData>
  fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase<TFormattedModelResultData>
  nameWithType.vb: ExecuteRequestBase(Of TFormattedModelResultData)
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteRequestBase(Of TFormattedModelResultData)
  name.vb: ExecuteRequestBase(Of TFormattedModelResultData)
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`1
    name: ExecuteRequestBase
    nameWithType: ExecuteRequestBase
    fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFormattedModelResultData
    nameWithType: TFormattedModelResultData
    fullName: TFormattedModelResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`1
    name: ExecuteRequestBase
    nameWithType: ExecuteRequestBase
    fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFormattedModelResultData
    nameWithType: TFormattedModelResultData
    fullName: TFormattedModelResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR.IRequest`1
  commentId: T:MediatR.IRequest`1
  isExternal: true
  name: IRequest<TResponse>
  nameWithType: IRequest<TResponse>
  fullName: MediatR.IRequest<TResponse>
  nameWithType.vb: IRequest(Of TResponse)
  fullName.vb: MediatR.IRequest(Of TResponse)
  name.vb: IRequest(Of TResponse)
  spec.csharp:
  - uid: MediatR.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: MediatR.IRequest
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatR.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: MediatR.IRequest
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR
  commentId: N:MediatR
  isExternal: true
  name: MediatR
  nameWithType: MediatR
  fullName: MediatR
- uid: Apizr.Mediation.Requesting.Base.ExecuteRequestBase`1.ExecuteApiMethod
  commentId: P:Apizr.Mediation.Requesting.Base.ExecuteRequestBase`1.ExecuteApiMethod
  name: ExecuteApiMethod
  nameWithType: ExecuteRequestBase<TFormattedModelResultData>.ExecuteApiMethod
  fullName: Apizr.Mediation.Requesting.Base.ExecuteRequestBase<TFormattedModelResultData>.ExecuteApiMethod
  nameWithType.vb: ExecuteRequestBase(Of TFormattedModelResultData).ExecuteApiMethod
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteRequestBase(Of TFormattedModelResultData).ExecuteApiMethod
- uid: Apizr.Mediation.Requesting.Base.RequestBase`1.Context
  commentId: P:Apizr.Mediation.Requesting.Base.RequestBase`1.Context
  name: Context
  nameWithType: RequestBase<TFormattedModelResultData>.Context
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<TFormattedModelResultData>.Context
  nameWithType.vb: RequestBase(Of TFormattedModelResultData).Context
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of TFormattedModelResultData).Context
- uid: Apizr.Mediation.Requesting.Base.RequestBase`1.OnException
  commentId: P:Apizr.Mediation.Requesting.Base.RequestBase`1.OnException
  name: OnException
  nameWithType: RequestBase<TFormattedModelResultData>.OnException
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<TFormattedModelResultData>.OnException
  nameWithType.vb: RequestBase(Of TFormattedModelResultData).OnException
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of TFormattedModelResultData).OnException
- uid: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1.#ctor*
  commentId: Overload:Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase`1.#ctor
  name: ExecuteUnitRequestBase
  nameWithType: ExecuteUnitRequestBase<TWebApi>.ExecuteUnitRequestBase
  fullName: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase<TWebApi>.ExecuteUnitRequestBase
  nameWithType.vb: ExecuteUnitRequestBase(Of TWebApi).ExecuteUnitRequestBase
  fullName.vb: Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase(Of TWebApi).ExecuteUnitRequestBase
- uid: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TWebApi, Task>>
  nameWithType: Expression<Func<TWebApi, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of TWebApi, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of TWebApi, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.Exception}
  commentId: T:System.Action{System.Exception}
  parent: System
  definition: System.Action`1
  name: Action<Exception>
  nameWithType: Action<Exception>
  fullName: System.Action<System.Exception>
  nameWithType.vb: Action(Of Exception)
  fullName.vb: System.Action(Of System.Exception)
  name.vb: Action(Of Exception)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<CancellationToken, TWebApi, Task>>
  nameWithType: Expression<Func<CancellationToken, TWebApi, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of CancellationToken, TWebApi, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of CancellationToken, TWebApi, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, TWebApi, Task>>
  nameWithType: Expression<Func<Context, TWebApi, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of Context, TWebApi, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of Context, TWebApi, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Polly.Context
  commentId: T:Polly.Context
  parent: Polly
  isExternal: true
  name: Context
  nameWithType: Context
  fullName: Polly.Context
- uid: Polly
  commentId: N:Polly
  isExternal: true
  name: Polly
  nameWithType: Polly
  fullName: Polly
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, CancellationToken, TWebApi, Task>>
  nameWithType: Expression<Func<Context, CancellationToken, TWebApi, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
