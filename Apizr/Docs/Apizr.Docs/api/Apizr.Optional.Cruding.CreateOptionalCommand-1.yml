### YamlMime:ManagedReference
items:
- uid: Apizr.Optional.Cruding.CreateOptionalCommand`1
  commentId: T:Apizr.Optional.Cruding.CreateOptionalCommand`1
  id: CreateOptionalCommand`1
  parent: Apizr.Optional.Cruding
  children:
  - Apizr.Optional.Cruding.CreateOptionalCommand`1.#ctor(`0)
  - Apizr.Optional.Cruding.CreateOptionalCommand`1.#ctor(`0,Polly.Context)
  langs:
  - csharp
  - vb
  name: CreateOptionalCommand<TModelData>
  nameWithType: CreateOptionalCommand<TModelData>
  fullName: Apizr.Optional.Cruding.CreateOptionalCommand<TModelData>
  type: Class
  source:
    id: CreateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\CreateOptionalCommand.cs
    startLine: 6
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding
  syntax:
    content: 'public class CreateOptionalCommand<TModelData> : CreateCommandBase<TModelData, Option<TModelData, ApizrException>>, IMediationCommand<TModelData, Option<TModelData, ApizrException>>, IRequest<Option<TModelData, ApizrException>>, IBaseRequest'
    typeParameters:
    - id: TModelData
    content.vb: "Public Class CreateOptionalCommand(Of TModelData)\n    Inherits CreateCommandBase(Of TModelData,  Option(Of TModelData, ApizrException) ) \n    Implements IMediationCommand(Of TModelData,  Option(Of TModelData, ApizrException) ), IRequest(Of  Option(Of TModelData, ApizrException) ), IBaseRequest"
  inheritance:
  - System.Object
  - Apizr.Mediation.Requesting.Base.RequestBase{Optional.Option{{TModelData},Apizr.ApizrException}}
  - Apizr.Mediation.Commanding.MediationCommandBase{{TModelData},Optional.Option{{TModelData},Apizr.ApizrException}}
  - Apizr.Mediation.Cruding.Base.CreateCommandBase{{TModelData},Optional.Option{{TModelData},Apizr.ApizrException}}
  implements:
  - Apizr.Mediation.Commanding.IMediationCommand{{TModelData},Optional.Option{{TModelData},Apizr.ApizrException}}
  - MediatR.IRequest{Optional.Option{{TModelData},Apizr.ApizrException}}
  - MediatR.IBaseRequest
  inheritedMembers:
  - Apizr.Mediation.Cruding.Base.CreateCommandBase{{TModelData},Optional.Option{{TModelData},Apizr.ApizrException}}.RequestData
  - Apizr.Mediation.Requesting.Base.RequestBase{Optional.Option{{TModelData},Apizr.ApizrException}}.Context
  - Apizr.Mediation.Requesting.Base.RequestBase{Optional.Option{{TModelData},Apizr.ApizrException}}.OnException
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
  nameWithType.vb: CreateOptionalCommand(Of TModelData)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Apizr.Optional.Cruding.CreateOptionalCommand(Of TModelData)
  name.vb: CreateOptionalCommand(Of TModelData)
- uid: Apizr.Optional.Cruding.CreateOptionalCommand`1.#ctor(`0)
  commentId: M:Apizr.Optional.Cruding.CreateOptionalCommand`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: Apizr.Optional.Cruding.CreateOptionalCommand`1
  langs:
  - csharp
  - vb
  name: CreateOptionalCommand(TModelData)
  nameWithType: CreateOptionalCommand<TModelData>.CreateOptionalCommand(TModelData)
  fullName: Apizr.Optional.Cruding.CreateOptionalCommand<TModelData>.CreateOptionalCommand(TModelData)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\CreateOptionalCommand.cs
    startLine: 8
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding
  syntax:
    content: public CreateOptionalCommand(TModelData modelData)
    parameters:
    - id: modelData
      type: '{TModelData}'
    content.vb: Public Sub New(modelData As TModelData)
  overload: Apizr.Optional.Cruding.CreateOptionalCommand`1.#ctor*
  nameWithType.vb: CreateOptionalCommand(Of TModelData).CreateOptionalCommand(TModelData)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Cruding.CreateOptionalCommand(Of TModelData).CreateOptionalCommand(TModelData)
- uid: Apizr.Optional.Cruding.CreateOptionalCommand`1.#ctor(`0,Polly.Context)
  commentId: M:Apizr.Optional.Cruding.CreateOptionalCommand`1.#ctor(`0,Polly.Context)
  id: '#ctor(`0,Polly.Context)'
  parent: Apizr.Optional.Cruding.CreateOptionalCommand`1
  langs:
  - csharp
  - vb
  name: CreateOptionalCommand(TModelData, Context)
  nameWithType: CreateOptionalCommand<TModelData>.CreateOptionalCommand(TModelData, Context)
  fullName: Apizr.Optional.Cruding.CreateOptionalCommand<TModelData>.CreateOptionalCommand(TModelData, Polly.Context)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\CreateOptionalCommand.cs
    startLine: 12
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding
  syntax:
    content: public CreateOptionalCommand(TModelData modelData, Context context)
    parameters:
    - id: modelData
      type: '{TModelData}'
    - id: context
      type: Polly.Context
    content.vb: Public Sub New(modelData As TModelData, context As Context)
  overload: Apizr.Optional.Cruding.CreateOptionalCommand`1.#ctor*
  nameWithType.vb: CreateOptionalCommand(Of TModelData).CreateOptionalCommand(TModelData, Context)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Cruding.CreateOptionalCommand(Of TModelData).CreateOptionalCommand(TModelData, Polly.Context)
references:
- uid: Apizr.Optional.Cruding
  commentId: N:Apizr.Optional.Cruding
  name: Apizr.Optional.Cruding
  nameWithType: Apizr.Optional.Cruding
  fullName: Apizr.Optional.Cruding
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Apizr.Mediation.Requesting.Base.RequestBase{Optional.Option{{TModelData},Apizr.ApizrException}}
  commentId: T:Apizr.Mediation.Requesting.Base.RequestBase{Optional.Option{`0,Apizr.ApizrException}}
  parent: Apizr.Mediation.Requesting.Base
  definition: Apizr.Mediation.Requesting.Base.RequestBase`1
  name: RequestBase<Option<TModelData, ApizrException>>
  nameWithType: RequestBase<Option<TModelData, ApizrException>>
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<Optional.Option<TModelData, Apizr.ApizrException>>
  nameWithType.vb: RequestBase(Of Option(Of TModelData, ApizrException))
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of Optional.Option(Of TModelData, Apizr.ApizrException))
  name.vb: RequestBase(Of Option(Of TModelData, ApizrException))
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Base.RequestBase`1
    name: RequestBase
    nameWithType: RequestBase
    fullName: Apizr.Mediation.Requesting.Base.RequestBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Base.RequestBase`1
    name: RequestBase
    nameWithType: RequestBase
    fullName: Apizr.Mediation.Requesting.Base.RequestBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Commanding.MediationCommandBase{{TModelData},Optional.Option{{TModelData},Apizr.ApizrException}}
  commentId: T:Apizr.Mediation.Commanding.MediationCommandBase{`0,Optional.Option{`0,Apizr.ApizrException}}
  parent: Apizr.Mediation.Commanding
  definition: Apizr.Mediation.Commanding.MediationCommandBase`2
  name: MediationCommandBase<TModelData, Option<TModelData, ApizrException>>
  nameWithType: MediationCommandBase<TModelData, Option<TModelData, ApizrException>>
  fullName: Apizr.Mediation.Commanding.MediationCommandBase<TModelData, Optional.Option<TModelData, Apizr.ApizrException>>
  nameWithType.vb: MediationCommandBase(Of TModelData, Option(Of TModelData, ApizrException))
  fullName.vb: Apizr.Mediation.Commanding.MediationCommandBase(Of TModelData, Optional.Option(Of TModelData, Apizr.ApizrException))
  name.vb: MediationCommandBase(Of TModelData, Option(Of TModelData, ApizrException))
  spec.csharp:
  - uid: Apizr.Mediation.Commanding.MediationCommandBase`2
    name: MediationCommandBase
    nameWithType: MediationCommandBase
    fullName: Apizr.Mediation.Commanding.MediationCommandBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Commanding.MediationCommandBase`2
    name: MediationCommandBase
    nameWithType: MediationCommandBase
    fullName: Apizr.Mediation.Commanding.MediationCommandBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Cruding.Base.CreateCommandBase{{TModelData},Optional.Option{{TModelData},Apizr.ApizrException}}
  commentId: T:Apizr.Mediation.Cruding.Base.CreateCommandBase{`0,Optional.Option{`0,Apizr.ApizrException}}
  parent: Apizr.Mediation.Cruding.Base
  definition: Apizr.Mediation.Cruding.Base.CreateCommandBase`2
  name: CreateCommandBase<TModelData, Option<TModelData, ApizrException>>
  nameWithType: CreateCommandBase<TModelData, Option<TModelData, ApizrException>>
  fullName: Apizr.Mediation.Cruding.Base.CreateCommandBase<TModelData, Optional.Option<TModelData, Apizr.ApizrException>>
  nameWithType.vb: CreateCommandBase(Of TModelData, Option(Of TModelData, ApizrException))
  fullName.vb: Apizr.Mediation.Cruding.Base.CreateCommandBase(Of TModelData, Optional.Option(Of TModelData, Apizr.ApizrException))
  name.vb: CreateCommandBase(Of TModelData, Option(Of TModelData, ApizrException))
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.Base.CreateCommandBase`2
    name: CreateCommandBase
    nameWithType: CreateCommandBase
    fullName: Apizr.Mediation.Cruding.Base.CreateCommandBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.Base.CreateCommandBase`2
    name: CreateCommandBase
    nameWithType: CreateCommandBase
    fullName: Apizr.Mediation.Cruding.Base.CreateCommandBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Commanding.IMediationCommand{{TModelData},Optional.Option{{TModelData},Apizr.ApizrException}}
  commentId: T:Apizr.Mediation.Commanding.IMediationCommand{`0,Optional.Option{`0,Apizr.ApizrException}}
  parent: Apizr.Mediation.Commanding
  definition: Apizr.Mediation.Commanding.IMediationCommand`2
  name: IMediationCommand<TModelData, Option<TModelData, ApizrException>>
  nameWithType: IMediationCommand<TModelData, Option<TModelData, ApizrException>>
  fullName: Apizr.Mediation.Commanding.IMediationCommand<TModelData, Optional.Option<TModelData, Apizr.ApizrException>>
  nameWithType.vb: IMediationCommand(Of TModelData, Option(Of TModelData, ApizrException))
  fullName.vb: Apizr.Mediation.Commanding.IMediationCommand(Of TModelData, Optional.Option(Of TModelData, Apizr.ApizrException))
  name.vb: IMediationCommand(Of TModelData, Option(Of TModelData, ApizrException))
  spec.csharp:
  - uid: Apizr.Mediation.Commanding.IMediationCommand`2
    name: IMediationCommand
    nameWithType: IMediationCommand
    fullName: Apizr.Mediation.Commanding.IMediationCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Commanding.IMediationCommand`2
    name: IMediationCommand
    nameWithType: IMediationCommand
    fullName: Apizr.Mediation.Commanding.IMediationCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR.IRequest{Optional.Option{{TModelData},Apizr.ApizrException}}
  commentId: T:MediatR.IRequest{Optional.Option{`0,Apizr.ApizrException}}
  parent: MediatR
  definition: MediatR.IRequest`1
  name: IRequest<Option<TModelData, ApizrException>>
  nameWithType: IRequest<Option<TModelData, ApizrException>>
  fullName: MediatR.IRequest<Optional.Option<TModelData, Apizr.ApizrException>>
  nameWithType.vb: IRequest(Of Option(Of TModelData, ApizrException))
  fullName.vb: MediatR.IRequest(Of Optional.Option(Of TModelData, Apizr.ApizrException))
  name.vb: IRequest(Of Option(Of TModelData, ApizrException))
  spec.csharp:
  - uid: MediatR.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: MediatR.IRequest
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatR.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: MediatR.IRequest
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR.IBaseRequest
  commentId: T:MediatR.IBaseRequest
  parent: MediatR
  isExternal: true
  name: IBaseRequest
  nameWithType: IBaseRequest
  fullName: MediatR.IBaseRequest
- uid: Apizr.Mediation.Cruding.Base.CreateCommandBase{{TModelData},Optional.Option{{TModelData},Apizr.ApizrException}}.RequestData
  commentId: P:Apizr.Mediation.Cruding.Base.CreateCommandBase{`0,Optional.Option{`0,Apizr.ApizrException}}.RequestData
  parent: Apizr.Mediation.Cruding.Base.CreateCommandBase{{TModelData},Optional.Option{{TModelData},Apizr.ApizrException}}
  definition: Apizr.Mediation.Cruding.Base.CreateCommandBase`2.RequestData
  name: RequestData
  nameWithType: CreateCommandBase<TModelData, Option<TModelData, ApizrException>>.RequestData
  fullName: Apizr.Mediation.Cruding.Base.CreateCommandBase<TModelData, Optional.Option<TModelData, Apizr.ApizrException>>.RequestData
  nameWithType.vb: CreateCommandBase(Of TModelData, Option(Of TModelData, ApizrException)).RequestData
  fullName.vb: Apizr.Mediation.Cruding.Base.CreateCommandBase(Of TModelData, Optional.Option(Of TModelData, Apizr.ApizrException)).RequestData
- uid: Apizr.Mediation.Requesting.Base.RequestBase{Optional.Option{{TModelData},Apizr.ApizrException}}.Context
  commentId: P:Apizr.Mediation.Requesting.Base.RequestBase{Optional.Option{`0,Apizr.ApizrException}}.Context
  parent: Apizr.Mediation.Requesting.Base.RequestBase{Optional.Option{{TModelData},Apizr.ApizrException}}
  definition: Apizr.Mediation.Requesting.Base.RequestBase`1.Context
  name: Context
  nameWithType: RequestBase<Option<TModelData, ApizrException>>.Context
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<Optional.Option<TModelData, Apizr.ApizrException>>.Context
  nameWithType.vb: RequestBase(Of Option(Of TModelData, ApizrException)).Context
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of Optional.Option(Of TModelData, Apizr.ApizrException)).Context
- uid: Apizr.Mediation.Requesting.Base.RequestBase{Optional.Option{{TModelData},Apizr.ApizrException}}.OnException
  commentId: P:Apizr.Mediation.Requesting.Base.RequestBase{Optional.Option{`0,Apizr.ApizrException}}.OnException
  parent: Apizr.Mediation.Requesting.Base.RequestBase{Optional.Option{{TModelData},Apizr.ApizrException}}
  definition: Apizr.Mediation.Requesting.Base.RequestBase`1.OnException
  name: OnException
  nameWithType: RequestBase<Option<TModelData, ApizrException>>.OnException
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<Optional.Option<TModelData, Apizr.ApizrException>>.OnException
  nameWithType.vb: RequestBase(Of Option(Of TModelData, ApizrException)).OnException
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of Optional.Option(Of TModelData, Apizr.ApizrException)).OnException
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
  commentId: M:Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  parent: Apizr.Extending.ObjectExtensions
  definition: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  name: ToString(String, String)
  nameWithType: ObjectExtensions.ToString(String, String)
  fullName: Apizr.Extending.ObjectExtensions.ToString(System.String, System.String)
  spec.csharp:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Apizr.Mediation.Requesting.Base.RequestBase`1
  commentId: T:Apizr.Mediation.Requesting.Base.RequestBase`1
  name: RequestBase<TFormattedModelResultData>
  nameWithType: RequestBase<TFormattedModelResultData>
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<TFormattedModelResultData>
  nameWithType.vb: RequestBase(Of TFormattedModelResultData)
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of TFormattedModelResultData)
  name.vb: RequestBase(Of TFormattedModelResultData)
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Base.RequestBase`1
    name: RequestBase
    nameWithType: RequestBase
    fullName: Apizr.Mediation.Requesting.Base.RequestBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TFormattedModelResultData
    nameWithType: TFormattedModelResultData
    fullName: TFormattedModelResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Base.RequestBase`1
    name: RequestBase
    nameWithType: RequestBase
    fullName: Apizr.Mediation.Requesting.Base.RequestBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFormattedModelResultData
    nameWithType: TFormattedModelResultData
    fullName: TFormattedModelResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Requesting.Base
  commentId: N:Apizr.Mediation.Requesting.Base
  name: Apizr.Mediation.Requesting.Base
  nameWithType: Apizr.Mediation.Requesting.Base
  fullName: Apizr.Mediation.Requesting.Base
- uid: Apizr.Mediation.Commanding.MediationCommandBase`2
  commentId: T:Apizr.Mediation.Commanding.MediationCommandBase`2
  name: MediationCommandBase<TRequestData, TResultData>
  nameWithType: MediationCommandBase<TRequestData, TResultData>
  fullName: Apizr.Mediation.Commanding.MediationCommandBase<TRequestData, TResultData>
  nameWithType.vb: MediationCommandBase(Of TRequestData, TResultData)
  fullName.vb: Apizr.Mediation.Commanding.MediationCommandBase(Of TRequestData, TResultData)
  name.vb: MediationCommandBase(Of TRequestData, TResultData)
  spec.csharp:
  - uid: Apizr.Mediation.Commanding.MediationCommandBase`2
    name: MediationCommandBase
    nameWithType: MediationCommandBase
    fullName: Apizr.Mediation.Commanding.MediationCommandBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Commanding.MediationCommandBase`2
    name: MediationCommandBase
    nameWithType: MediationCommandBase
    fullName: Apizr.Mediation.Commanding.MediationCommandBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Commanding
  commentId: N:Apizr.Mediation.Commanding
  name: Apizr.Mediation.Commanding
  nameWithType: Apizr.Mediation.Commanding
  fullName: Apizr.Mediation.Commanding
- uid: Apizr.Mediation.Cruding.Base.CreateCommandBase`2
  commentId: T:Apizr.Mediation.Cruding.Base.CreateCommandBase`2
  name: CreateCommandBase<TRequestData, TResultData>
  nameWithType: CreateCommandBase<TRequestData, TResultData>
  fullName: Apizr.Mediation.Cruding.Base.CreateCommandBase<TRequestData, TResultData>
  nameWithType.vb: CreateCommandBase(Of TRequestData, TResultData)
  fullName.vb: Apizr.Mediation.Cruding.Base.CreateCommandBase(Of TRequestData, TResultData)
  name.vb: CreateCommandBase(Of TRequestData, TResultData)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.Base.CreateCommandBase`2
    name: CreateCommandBase
    nameWithType: CreateCommandBase
    fullName: Apizr.Mediation.Cruding.Base.CreateCommandBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.Base.CreateCommandBase`2
    name: CreateCommandBase
    nameWithType: CreateCommandBase
    fullName: Apizr.Mediation.Cruding.Base.CreateCommandBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Cruding.Base
  commentId: N:Apizr.Mediation.Cruding.Base
  name: Apizr.Mediation.Cruding.Base
  nameWithType: Apizr.Mediation.Cruding.Base
  fullName: Apizr.Mediation.Cruding.Base
- uid: Apizr.Mediation.Commanding.IMediationCommand`2
  commentId: T:Apizr.Mediation.Commanding.IMediationCommand`2
  name: IMediationCommand<TRequestData, TResultData>
  nameWithType: IMediationCommand<TRequestData, TResultData>
  fullName: Apizr.Mediation.Commanding.IMediationCommand<TRequestData, TResultData>
  nameWithType.vb: IMediationCommand(Of TRequestData, TResultData)
  fullName.vb: Apizr.Mediation.Commanding.IMediationCommand(Of TRequestData, TResultData)
  name.vb: IMediationCommand(Of TRequestData, TResultData)
  spec.csharp:
  - uid: Apizr.Mediation.Commanding.IMediationCommand`2
    name: IMediationCommand
    nameWithType: IMediationCommand
    fullName: Apizr.Mediation.Commanding.IMediationCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Commanding.IMediationCommand`2
    name: IMediationCommand
    nameWithType: IMediationCommand
    fullName: Apizr.Mediation.Commanding.IMediationCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR.IRequest`1
  commentId: T:MediatR.IRequest`1
  isExternal: true
  name: IRequest<TResponse>
  nameWithType: IRequest<TResponse>
  fullName: MediatR.IRequest<TResponse>
  nameWithType.vb: IRequest(Of TResponse)
  fullName.vb: MediatR.IRequest(Of TResponse)
  name.vb: IRequest(Of TResponse)
  spec.csharp:
  - uid: MediatR.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: MediatR.IRequest
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatR.IRequest`1
    name: IRequest
    nameWithType: IRequest
    fullName: MediatR.IRequest
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR
  commentId: N:MediatR
  isExternal: true
  name: MediatR
  nameWithType: MediatR
  fullName: MediatR
- uid: Apizr.Mediation.Cruding.Base.CreateCommandBase`2.RequestData
  commentId: P:Apizr.Mediation.Cruding.Base.CreateCommandBase`2.RequestData
  name: RequestData
  nameWithType: CreateCommandBase<TRequestData, TResultData>.RequestData
  fullName: Apizr.Mediation.Cruding.Base.CreateCommandBase<TRequestData, TResultData>.RequestData
  nameWithType.vb: CreateCommandBase(Of TRequestData, TResultData).RequestData
  fullName.vb: Apizr.Mediation.Cruding.Base.CreateCommandBase(Of TRequestData, TResultData).RequestData
- uid: Apizr.Mediation.Requesting.Base.RequestBase`1.Context
  commentId: P:Apizr.Mediation.Requesting.Base.RequestBase`1.Context
  name: Context
  nameWithType: RequestBase<TFormattedModelResultData>.Context
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<TFormattedModelResultData>.Context
  nameWithType.vb: RequestBase(Of TFormattedModelResultData).Context
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of TFormattedModelResultData).Context
- uid: Apizr.Mediation.Requesting.Base.RequestBase`1.OnException
  commentId: P:Apizr.Mediation.Requesting.Base.RequestBase`1.OnException
  name: OnException
  nameWithType: RequestBase<TFormattedModelResultData>.OnException
  fullName: Apizr.Mediation.Requesting.Base.RequestBase<TFormattedModelResultData>.OnException
  nameWithType.vb: RequestBase(Of TFormattedModelResultData).OnException
  fullName.vb: Apizr.Mediation.Requesting.Base.RequestBase(Of TFormattedModelResultData).OnException
- uid: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  commentId: M:Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  isExternal: true
  name: ToString(Object, String, String)
  nameWithType: ObjectExtensions.ToString(Object, String, String)
  fullName: Apizr.Extending.ObjectExtensions.ToString(System.Object, System.String, System.String)
  spec.csharp:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Extending.ObjectExtensions
  commentId: T:Apizr.Extending.ObjectExtensions
  parent: Apizr.Extending
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Apizr.Extending.ObjectExtensions
- uid: Apizr.Extending
  commentId: N:Apizr.Extending
  name: Apizr.Extending
  nameWithType: Apizr.Extending
  fullName: Apizr.Extending
- uid: Apizr.Optional.Cruding.CreateOptionalCommand`1.#ctor*
  commentId: Overload:Apizr.Optional.Cruding.CreateOptionalCommand`1.#ctor
  name: CreateOptionalCommand
  nameWithType: CreateOptionalCommand<TModelData>.CreateOptionalCommand
  fullName: Apizr.Optional.Cruding.CreateOptionalCommand<TModelData>.CreateOptionalCommand
  nameWithType.vb: CreateOptionalCommand(Of TModelData).CreateOptionalCommand
  fullName.vb: Apizr.Optional.Cruding.CreateOptionalCommand(Of TModelData).CreateOptionalCommand
- uid: '{TModelData}'
  commentId: '!:TModelData'
  definition: TModelData
  name: TModelData
  nameWithType: TModelData
  fullName: TModelData
- uid: TModelData
  name: TModelData
  nameWithType: TModelData
  fullName: TModelData
- uid: Polly.Context
  commentId: T:Polly.Context
  parent: Polly
  isExternal: true
  name: Context
  nameWithType: Context
  fullName: Polly.Context
- uid: Polly
  commentId: N:Polly
  isExternal: true
  name: Polly
  nameWithType: Polly
  fullName: Polly
