### YamlMime:ManagedReference
items:
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  commentId: T:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  id: IApizrCrudOptionalMediator`4
  parent: Apizr.Optional.Cruding.Sending
  children:
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand(`0)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand(`0,Polly.Context)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand(`0,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand(`0,System.Threading.CancellationToken)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand``1(``0)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand``1(``0,Polly.Context)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand``1(``0,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand``1(``0,System.Threading.CancellationToken)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand(`1)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand(`1,Polly.Context)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand(`1,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand(`1,System.Threading.CancellationToken)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Int32,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Int32,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Int32,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Int32,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Int32,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Int32,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand(`1,`0)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand(`1,`0,Polly.Context)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand(`1,`0,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand(`1,`0,System.Threading.CancellationToken)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand``1(`1,``0)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand``1(`1,``0,Polly.Context)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand``1(`1,``0,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand``1(`1,``0,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>
  type: Interface
  source:
    id: IApizrCrudOptionalMediator
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 904
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\n<xref href=\"Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator\" data-throw-if-not-resolved=\"false\"></xref> but dedicated to <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TApiEntity</code> cruding with optional result, getting all shorter\n"
  example: []
  syntax:
    content: 'public interface IApizrCrudOptionalMediator<TApiEntity, in TApiEntityKey, TReadAllResult, in TReadAllParams> : IApizrCrudOptionalMediatorBase, IApizrCrudMediatorBase, IApizrOptionalMediatorBase, IApizrMediatorBase where TApiEntity : class'
    typeParameters:
    - id: TApiEntity
    - id: TApiEntityKey
    - id: TReadAllResult
    - id: TReadAllParams
    content.vb: >-
      Public Interface IApizrCrudOptionalMediator(Of TApiEntity As Class, In TApiEntityKey, TReadAllResult, In TReadAllParams)
          Inherits IApizrCrudOptionalMediatorBase
  extensionMethods:
  - System.Object.Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)
  name.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand(`0)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand(`0)
  id: SendCreateOptionalCommand(`0)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand(TApiEntity)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateOptionalCommand(TApiEntity)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateOptionalCommand(TApiEntity)
  type: Method
  source:
    id: SendCreateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 916
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Optional.Cruding.CreateOptionalCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand(TApiEntity payload)
    parameters:
    - id: payload
      type: '{TApiEntity}'
      description: The entity to create
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException}}
      description: ''
    content.vb: Function SendCreateOptionalCommand(payload As TApiEntity) As Task(Of  Option(Of TApiEntity, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateOptionalCommand(TApiEntity)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateOptionalCommand(TApiEntity)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand(`0,Polly.Context)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand(`0,Polly.Context)
  id: SendCreateOptionalCommand(`0,Polly.Context)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand(TApiEntity, Context)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateOptionalCommand(TApiEntity, Context)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateOptionalCommand(TApiEntity, Polly.Context)
  type: Method
  source:
    id: SendCreateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 924
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Optional.Cruding.CreateOptionalCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand(TApiEntity payload, Context context)
    parameters:
    - id: payload
      type: '{TApiEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException}}
      description: ''
    content.vb: Function SendCreateOptionalCommand(payload As TApiEntity, context As Context) As Task(Of  Option(Of TApiEntity, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateOptionalCommand(TApiEntity, Context)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateOptionalCommand(TApiEntity, Polly.Context)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand(`0,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand(`0,System.Threading.CancellationToken)
  id: SendCreateOptionalCommand(`0,System.Threading.CancellationToken)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand(TApiEntity, CancellationToken)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateOptionalCommand(TApiEntity, CancellationToken)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateOptionalCommand(TApiEntity, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendCreateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 932
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Optional.Cruding.CreateOptionalCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand(TApiEntity payload, CancellationToken cancellationToken)
    parameters:
    - id: payload
      type: '{TApiEntity}'
      description: The entity to create
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException}}
      description: ''
    content.vb: Function SendCreateOptionalCommand(payload As TApiEntity, cancellationToken As CancellationToken) As Task(Of  Option(Of TApiEntity, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateOptionalCommand(TApiEntity, CancellationToken)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateOptionalCommand(TApiEntity, System.Threading.CancellationToken)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand(`0,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand(`0,Polly.Context,System.Threading.CancellationToken)
  id: SendCreateOptionalCommand(`0,Polly.Context,System.Threading.CancellationToken)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand(TApiEntity, Context, CancellationToken)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateOptionalCommand(TApiEntity, Context, CancellationToken)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateOptionalCommand(TApiEntity, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendCreateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 942
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Optional.Cruding.CreateOptionalCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand(TApiEntity payload, Context context, CancellationToken cancellationToken)
    parameters:
    - id: payload
      type: '{TApiEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException}}
      description: ''
    content.vb: Function SendCreateOptionalCommand(payload As TApiEntity, context As Context, cancellationToken As CancellationToken) As Task(Of  Option(Of TApiEntity, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateOptionalCommand(TApiEntity, Context, CancellationToken)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateOptionalCommand(TApiEntity, Polly.Context, System.Threading.CancellationToken)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand``1(``0)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand``1(``0)
  id: SendCreateOptionalCommand``1(``0)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TModelEntity>(TModelEntity)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateOptionalCommand<TModelEntity>(TModelEntity)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateOptionalCommand<TModelEntity>(TModelEntity)
  type: Method
  source:
    id: SendCreateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 955
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity>(TModelEntity payload)
    parameters:
    - id: payload
      type: '{TModelEntity}'
      description: The entity to create
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException}}
      description: ''
    content.vb: Function SendCreateOptionalCommand(Of TModelEntity)(payload As TModelEntity) As Task(Of  Option(Of TModelEntity, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateOptionalCommand(Of TModelEntity)(TModelEntity)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateOptionalCommand(Of TModelEntity)(TModelEntity)
  name.vb: SendCreateOptionalCommand(Of TModelEntity)(TModelEntity)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand``1(``0,Polly.Context)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand``1(``0,Polly.Context)
  id: SendCreateOptionalCommand``1(``0,Polly.Context)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TModelEntity>(TModelEntity, Context)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateOptionalCommand<TModelEntity>(TModelEntity, Context)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateOptionalCommand<TModelEntity>(TModelEntity, Polly.Context)
  type: Method
  source:
    id: SendCreateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 964
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity>(TModelEntity payload, Context context)
    parameters:
    - id: payload
      type: '{TModelEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException}}
      description: ''
    content.vb: Function SendCreateOptionalCommand(Of TModelEntity)(payload As TModelEntity, context As Context) As Task(Of  Option(Of TModelEntity, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateOptionalCommand(Of TModelEntity)(TModelEntity, Context)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateOptionalCommand(Of TModelEntity)(TModelEntity, Polly.Context)
  name.vb: SendCreateOptionalCommand(Of TModelEntity)(TModelEntity, Context)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand``1(``0,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand``1(``0,System.Threading.CancellationToken)
  id: SendCreateOptionalCommand``1(``0,System.Threading.CancellationToken)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TModelEntity>(TModelEntity, CancellationToken)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateOptionalCommand<TModelEntity>(TModelEntity, CancellationToken)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateOptionalCommand<TModelEntity>(TModelEntity, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendCreateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 973
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity>(TModelEntity payload, CancellationToken cancellationToken)
    parameters:
    - id: payload
      type: '{TModelEntity}'
      description: The entity to create
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException}}
      description: ''
    content.vb: Function SendCreateOptionalCommand(Of TModelEntity)(payload As TModelEntity, cancellationToken As CancellationToken) As Task(Of  Option(Of TModelEntity, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateOptionalCommand(Of TModelEntity)(TModelEntity, CancellationToken)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateOptionalCommand(Of TModelEntity)(TModelEntity, System.Threading.CancellationToken)
  name.vb: SendCreateOptionalCommand(Of TModelEntity)(TModelEntity, CancellationToken)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand``1(``0,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand``1(``0,Polly.Context,System.Threading.CancellationToken)
  id: SendCreateOptionalCommand``1(``0,Polly.Context,System.Threading.CancellationToken)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TModelEntity>(TModelEntity, Context, CancellationToken)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateOptionalCommand<TModelEntity>(TModelEntity, Context, CancellationToken)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateOptionalCommand<TModelEntity>(TModelEntity, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendCreateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 984
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity>(TModelEntity payload, Context context, CancellationToken cancellationToken)
    parameters:
    - id: payload
      type: '{TModelEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException}}
      description: ''
    content.vb: Function SendCreateOptionalCommand(Of TModelEntity)(payload As TModelEntity, context As Context, cancellationToken As CancellationToken) As Task(Of  Option(Of TModelEntity, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateOptionalCommand(Of TModelEntity)(TModelEntity, Context, CancellationToken)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateOptionalCommand(Of TModelEntity)(TModelEntity, Polly.Context, System.Threading.CancellationToken)
  name.vb: SendCreateOptionalCommand(Of TModelEntity)(TModelEntity, Context, CancellationToken)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Boolean)
  id: SendReadAllOptionalQuery(System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery(Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1000
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(bool clearCache = false)
    parameters:
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery(Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery(Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1008
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(Context context, bool clearCache = false)
    parameters:
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Polly.Context, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery(System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery(CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1016
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(System.Threading.CancellationToken, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Int32,System.Boolean)
  id: SendReadAllOptionalQuery(System.Int32,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery(Int32, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(Int32, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(System.Int32, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1024
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(int priority, bool clearCache = false)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Int32, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(System.Int32, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Int32,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery(System.Int32,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery(Int32, Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(Int32, Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1033
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(int priority, Context context, bool clearCache = false)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Int32, Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(System.Int32, Polly.Context, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery(System.Int32,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery(Int32, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1042
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(int priority, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Int32, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(System.Int32, System.Threading.CancellationToken, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery(Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery(Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1052
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Polly.Context, System.Threading.CancellationToken, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery(Int32, Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1063
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Int32, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Boolean)
  id: SendReadAllOptionalQuery``1(System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelEntityReadAllResult>(Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1076
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(bool clearCache = false)
    parameters:
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: The mapped result
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntityReadAllResult},Apizr.ApizrException{{TModelEntityReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(clearCache As Boolean = False) As Task(Of  Option(Of TModelEntityReadAllResult, ApizrException(Of TModelEntityReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``1(Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelEntityReadAllResult>(Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1086
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(Context context, bool clearCache = false)
    parameters:
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: The mapped result
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntityReadAllResult},Apizr.ApizrException{{TModelEntityReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntityReadAllResult, ApizrException(Of TModelEntityReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(Context, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``1(System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelEntityReadAllResult>(CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1096
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: The mapped result
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntityReadAllResult},Apizr.ApizrException{{TModelEntityReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntityReadAllResult, ApizrException(Of TModelEntityReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Int32,System.Boolean)
  id: SendReadAllOptionalQuery``1(System.Int32,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelEntityReadAllResult>(Int32, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(Int32, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(System.Int32, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1106
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(int priority, bool clearCache = false)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: The mapped result
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntityReadAllResult},Apizr.ApizrException{{TModelEntityReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntityReadAllResult, ApizrException(Of TModelEntityReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(Int32, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(System.Int32, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(Int32, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Int32,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``1(System.Int32,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelEntityReadAllResult>(Int32, Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(Int32, Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1117
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(int priority, Context context, bool clearCache = false)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: The mapped result
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntityReadAllResult},Apizr.ApizrException{{TModelEntityReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntityReadAllResult, ApizrException(Of TModelEntityReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(Int32, Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(System.Int32, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(Int32, Context, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``1(System.Int32,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelEntityReadAllResult>(Int32, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1128
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(int priority, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: The mapped result
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntityReadAllResult},Apizr.ApizrException{{TModelEntityReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntityReadAllResult, ApizrException(Of TModelEntityReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(Int32, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(System.Int32, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(Int32, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``1(Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelEntityReadAllResult>(Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1139
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: The mapped result
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntityReadAllResult},Apizr.ApizrException{{TModelEntityReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntityReadAllResult, ApizrException(Of TModelEntityReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``1(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelEntityReadAllResult>(Int32, Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1152
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: The mapped result
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntityReadAllResult},Apizr.ApizrException{{TModelEntityReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntityReadAllResult, ApizrException(Of TModelEntityReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(Int32, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(Int32, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Boolean)
  id: SendReadAllOptionalQuery(`3,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery(TReadAllParams, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(TReadAllParams, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(TReadAllParams, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1166
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(readAllParams As TReadAllParams, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(TReadAllParams, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(TReadAllParams, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery(`3,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery(TReadAllParams, Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(TReadAllParams, Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(TReadAllParams, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1176
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, Context context, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(readAllParams As TReadAllParams, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(TReadAllParams, Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(TReadAllParams, Polly.Context, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery(`3,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery(TReadAllParams, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(TReadAllParams, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(TReadAllParams, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1186
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(readAllParams As TReadAllParams, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(TReadAllParams, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(TReadAllParams, System.Threading.CancellationToken, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Int32,System.Boolean)
  id: SendReadAllOptionalQuery(`3,System.Int32,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery(TReadAllParams, Int32, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(TReadAllParams, Int32, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(TReadAllParams, System.Int32, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1197
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, int priority, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(readAllParams As TReadAllParams, priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(TReadAllParams, Int32, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(TReadAllParams, System.Int32, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Int32,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery(`3,System.Int32,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery(TReadAllParams, Int32, Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(TReadAllParams, Int32, Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(TReadAllParams, System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1209
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(readAllParams As TReadAllParams, priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(TReadAllParams, Int32, Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(TReadAllParams, System.Int32, Polly.Context, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery(`3,System.Int32,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery(TReadAllParams, Int32, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(TReadAllParams, Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1221
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(readAllParams As TReadAllParams, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(TReadAllParams, Int32, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery(`3,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery(TReadAllParams, Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(TReadAllParams, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1234
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(readAllParams As TReadAllParams, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(TReadAllParams, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery(`3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery(TReadAllParams, Int32, Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(TReadAllParams, Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery(TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1247
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(readAllParams As TReadAllParams, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(TReadAllParams, Int32, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Boolean)
  id: SendReadAllOptionalQuery``1(`3,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1263
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntityReadAllResult},Apizr.ApizrException{{TModelEntityReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(readAllParams As TReadAllParams, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntityReadAllResult, ApizrException(Of TModelEntityReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``1(`3,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1274
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, Context context, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntityReadAllResult},Apizr.ApizrException{{TModelEntityReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(readAllParams As TReadAllParams, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntityReadAllResult, ApizrException(Of TModelEntityReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, Context, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``1(`3,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1285
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntityReadAllResult},Apizr.ApizrException{{TModelEntityReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(readAllParams As TReadAllParams, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntityReadAllResult, ApizrException(Of TModelEntityReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Int32,System.Boolean)
  id: SendReadAllOptionalQuery``1(`3,System.Int32,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, System.Int32, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1297
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, int priority, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntityReadAllResult},Apizr.ApizrException{{TModelEntityReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(readAllParams As TReadAllParams, priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntityReadAllResult, ApizrException(Of TModelEntityReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, Int32, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, System.Int32, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, Int32, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Int32,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``1(`3,System.Int32,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1310
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntityReadAllResult},Apizr.ApizrException{{TModelEntityReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(readAllParams As TReadAllParams, priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntityReadAllResult, ApizrException(Of TModelEntityReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, Int32, Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, System.Int32, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, Int32, Context, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``1(`3,System.Int32,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1323
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntityReadAllResult},Apizr.ApizrException{{TModelEntityReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(readAllParams As TReadAllParams, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntityReadAllResult, ApizrException(Of TModelEntityReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, Int32, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, Int32, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``1(`3,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1337
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntityReadAllResult},Apizr.ApizrException{{TModelEntityReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(readAllParams As TReadAllParams, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntityReadAllResult, ApizrException(Of TModelEntityReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``1(`3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1351
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntityReadAllResult
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntityReadAllResult},Apizr.ApizrException{{TModelEntityReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(readAllParams As TReadAllParams, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntityReadAllResult, ApizrException(Of TModelEntityReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, Int32, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelEntityReadAllResult)(TReadAllParams, Int32, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Boolean)
  id: SendReadOptionalQuery(`1,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery(TApiEntityKey, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery(TApiEntityKey, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery(TApiEntityKey, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1370
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(key As TApiEntityKey, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(TApiEntityKey, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(TApiEntityKey, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,Polly.Context,System.Boolean)
  id: SendReadOptionalQuery(`1,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery(TApiEntityKey, Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery(TApiEntityKey, Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery(TApiEntityKey, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1379
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, Context context, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(key As TApiEntityKey, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(TApiEntityKey, Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(TApiEntityKey, Polly.Context, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery(`1,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery(TApiEntityKey, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery(TApiEntityKey, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery(TApiEntityKey, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1388
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(key As TApiEntityKey, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(TApiEntityKey, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(TApiEntityKey, System.Threading.CancellationToken, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Int32,System.Boolean)
  id: SendReadOptionalQuery(`1,System.Int32,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery(TApiEntityKey, Int32, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery(TApiEntityKey, Int32, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery(TApiEntityKey, System.Int32, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1398
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, int priority, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(key As TApiEntityKey, priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(TApiEntityKey, Int32, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(TApiEntityKey, System.Int32, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Int32,Polly.Context,System.Boolean)
  id: SendReadOptionalQuery(`1,System.Int32,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery(TApiEntityKey, Int32, Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery(TApiEntityKey, Int32, Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery(TApiEntityKey, System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1409
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, int priority, Context context, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(key As TApiEntityKey, priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(TApiEntityKey, Int32, Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(TApiEntityKey, System.Int32, Polly.Context, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery(`1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery(TApiEntityKey, Int32, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery(TApiEntityKey, Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery(TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1420
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(key As TApiEntityKey, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(TApiEntityKey, Int32, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery(`1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery(TApiEntityKey, Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery(TApiEntityKey, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery(TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1432
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(key As TApiEntityKey, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(TApiEntityKey, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery(`1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery(TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery(TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery(TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1444
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(key As TApiEntityKey, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Boolean)
  id: SendReadOptionalQuery``1(`1,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery<TModelEntity>(TApiEntityKey, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1459
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TModelEntity)(key As TApiEntityKey, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,Polly.Context,System.Boolean)
  id: SendReadOptionalQuery``1(`1,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1469
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, Context context, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TModelEntity)(key As TApiEntityKey, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, Polly.Context, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, Context, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``1(`1,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity>(TApiEntityKey, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery<TModelEntity>(TApiEntityKey, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery<TModelEntity>(TApiEntityKey, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1479
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TModelEntity)(key As TApiEntityKey, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Int32,System.Boolean)
  id: SendReadOptionalQuery``1(`1,System.Int32,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Int32, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Int32, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery<TModelEntity>(TApiEntityKey, System.Int32, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1490
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, int priority, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TModelEntity)(key As TApiEntityKey, priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, Int32, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, System.Int32, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, Int32, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Int32,Polly.Context,System.Boolean)
  id: SendReadOptionalQuery``1(`1,System.Int32,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Int32, Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Int32, Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery<TModelEntity>(TApiEntityKey, System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1502
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, int priority, Context context, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TModelEntity)(key As TApiEntityKey, priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, Int32, Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, System.Int32, Polly.Context, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, Int32, Context, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``1(`1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Int32, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery<TModelEntity>(TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1514
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TModelEntity)(key As TApiEntityKey, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, Int32, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, Int32, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``1(`1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1527
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TModelEntity)(key As TApiEntityKey, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``1(`1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery<TModelEntity>(TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1540
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TModelEntity)(key As TApiEntityKey, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity)(TApiEntityKey, Int32, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand(`1,`0)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand(`1,`0)
  id: SendUpdateOptionalCommand(`1,`0)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand(TApiEntityKey, TApiEntity)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateOptionalCommand(TApiEntityKey, TApiEntity)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateOptionalCommand(TApiEntityKey, TApiEntity)
  type: Method
  source:
    id: SendUpdateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1558
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand(TApiEntityKey key, TApiEntity payload)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: payload
      type: '{TApiEntity}'
      description: The entity to update
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendUpdateOptionalCommand(key As TApiEntityKey, payload As TApiEntity) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateOptionalCommand(TApiEntityKey, TApiEntity)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateOptionalCommand(TApiEntityKey, TApiEntity)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand(`1,`0,Polly.Context)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand(`1,`0,Polly.Context)
  id: SendUpdateOptionalCommand(`1,`0,Polly.Context)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, Context)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, Context)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, Polly.Context)
  type: Method
  source:
    id: SendUpdateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1567
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand(TApiEntityKey key, TApiEntity payload, Context context)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: payload
      type: '{TApiEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendUpdateOptionalCommand(key As TApiEntityKey, payload As TApiEntity, context As Context) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, Context)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, Polly.Context)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand(`1,`0,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand(`1,`0,System.Threading.CancellationToken)
  id: SendUpdateOptionalCommand(`1,`0,System.Threading.CancellationToken)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, CancellationToken)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, CancellationToken)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendUpdateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1576
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand(TApiEntityKey key, TApiEntity payload, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: payload
      type: '{TApiEntity}'
      description: The entity to update
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendUpdateOptionalCommand(key As TApiEntityKey, payload As TApiEntity, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, CancellationToken)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, System.Threading.CancellationToken)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand(`1,`0,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand(`1,`0,Polly.Context,System.Threading.CancellationToken)
  id: SendUpdateOptionalCommand(`1,`0,Polly.Context,System.Threading.CancellationToken)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, Context, CancellationToken)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, Context, CancellationToken)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendUpdateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1587
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand(TApiEntityKey key, TApiEntity payload, Context context, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: payload
      type: '{TApiEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendUpdateOptionalCommand(key As TApiEntityKey, payload As TApiEntity, context As Context, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, Context, CancellationToken)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, Polly.Context, System.Threading.CancellationToken)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand``1(`1,``0)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand``1(`1,``0)
  id: SendUpdateOptionalCommand``1(`1,``0)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity)
  type: Method
  source:
    id: SendUpdateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1601
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey key, TModelEntity payload)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: payload
      type: '{TModelEntity}'
      description: The entity to update
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendUpdateOptionalCommand(Of TModelEntity)(key As TApiEntityKey, payload As TModelEntity) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateOptionalCommand(Of TModelEntity)(TApiEntityKey, TModelEntity)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateOptionalCommand(Of TModelEntity)(TApiEntityKey, TModelEntity)
  name.vb: SendUpdateOptionalCommand(Of TModelEntity)(TApiEntityKey, TModelEntity)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand``1(`1,``0,Polly.Context)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand``1(`1,``0,Polly.Context)
  id: SendUpdateOptionalCommand``1(`1,``0,Polly.Context)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity, Context)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity, Context)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity, Polly.Context)
  type: Method
  source:
    id: SendUpdateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1612
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey key, TModelEntity payload, Context context)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: payload
      type: '{TModelEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendUpdateOptionalCommand(Of TModelEntity)(key As TApiEntityKey, payload As TModelEntity, context As Context) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateOptionalCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, Context)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateOptionalCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, Polly.Context)
  name.vb: SendUpdateOptionalCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, Context)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand``1(`1,``0,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand``1(`1,``0,System.Threading.CancellationToken)
  id: SendUpdateOptionalCommand``1(`1,``0,System.Threading.CancellationToken)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity, CancellationToken)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity, CancellationToken)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendUpdateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1623
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey key, TModelEntity payload, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: payload
      type: '{TModelEntity}'
      description: The entity to update
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendUpdateOptionalCommand(Of TModelEntity)(key As TApiEntityKey, payload As TModelEntity, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateOptionalCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, CancellationToken)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateOptionalCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, System.Threading.CancellationToken)
  name.vb: SendUpdateOptionalCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, CancellationToken)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand``1(`1,``0,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand``1(`1,``0,Polly.Context,System.Threading.CancellationToken)
  id: SendUpdateOptionalCommand``1(`1,``0,Polly.Context,System.Threading.CancellationToken)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity, Context, CancellationToken)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity, Context, CancellationToken)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendUpdateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1635
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey key, TModelEntity payload, Context context, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: payload
      type: '{TModelEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TModelEntity
      description: ''
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendUpdateOptionalCommand(Of TModelEntity)(key As TApiEntityKey, payload As TModelEntity, context As Context, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateOptionalCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, Context, CancellationToken)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateOptionalCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, Polly.Context, System.Threading.CancellationToken)
  name.vb: SendUpdateOptionalCommand(Of TModelEntity)(TApiEntityKey, TModelEntity, Context, CancellationToken)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand(`1)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand(`1)
  id: SendDeleteOptionalCommand(`1)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendDeleteOptionalCommand(TApiEntityKey)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteOptionalCommand(TApiEntityKey)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteOptionalCommand(TApiEntityKey)
  type: Method
  source:
    id: SendDeleteOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1650
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand(TApiEntityKey key)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendDeleteOptionalCommand(key As TApiEntityKey) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteOptionalCommand(TApiEntityKey)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteOptionalCommand(TApiEntityKey)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand(`1,Polly.Context)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand(`1,Polly.Context)
  id: SendDeleteOptionalCommand(`1,Polly.Context)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendDeleteOptionalCommand(TApiEntityKey, Context)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteOptionalCommand(TApiEntityKey, Context)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteOptionalCommand(TApiEntityKey, Polly.Context)
  type: Method
  source:
    id: SendDeleteOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1658
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand(TApiEntityKey key, Context context)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendDeleteOptionalCommand(key As TApiEntityKey, context As Context) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteOptionalCommand(TApiEntityKey, Context)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteOptionalCommand(TApiEntityKey, Polly.Context)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand(`1,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand(`1,System.Threading.CancellationToken)
  id: SendDeleteOptionalCommand(`1,System.Threading.CancellationToken)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendDeleteOptionalCommand(TApiEntityKey, CancellationToken)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteOptionalCommand(TApiEntityKey, CancellationToken)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteOptionalCommand(TApiEntityKey, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendDeleteOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1666
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand(TApiEntityKey key, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendDeleteOptionalCommand(key As TApiEntityKey, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteOptionalCommand(TApiEntityKey, CancellationToken)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteOptionalCommand(TApiEntityKey, System.Threading.CancellationToken)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand(`1,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand(`1,Polly.Context,System.Threading.CancellationToken)
  id: SendDeleteOptionalCommand(`1,Polly.Context,System.Threading.CancellationToken)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  langs:
  - csharp
  - vb
  name: SendDeleteOptionalCommand(TApiEntityKey, Context, CancellationToken)
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteOptionalCommand(TApiEntityKey, Context, CancellationToken)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteOptionalCommand(TApiEntityKey, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendDeleteOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 1676
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand(TApiEntityKey key, Context context, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendDeleteOptionalCommand(key As TApiEntityKey, context As Context, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteOptionalCommand(TApiEntityKey, Context, CancellationToken)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteOptionalCommand(TApiEntityKey, Polly.Context, System.Threading.CancellationToken)
references:
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  commentId: T:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  parent: Apizr.Optional.Cruding.Sending
  name: IApizrCrudOptionalMediator
  nameWithType: IApizrCrudOptionalMediator
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
- uid: Apizr.Optional.Cruding.Sending
  commentId: N:Apizr.Optional.Cruding.Sending
  name: Apizr.Optional.Cruding.Sending
  nameWithType: Apizr.Optional.Cruding.Sending
  fullName: Apizr.Optional.Cruding.Sending
- uid: System.Object.Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
  commentId: M:Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  parent: Apizr.Extending.ObjectExtensions
  definition: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  name: ToString(String, String)
  nameWithType: ObjectExtensions.ToString(String, String)
  fullName: Apizr.Extending.ObjectExtensions.ToString(System.String, System.String)
  spec.csharp:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  commentId: M:Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
  isExternal: true
  name: ToString(Object, String, String)
  nameWithType: ObjectExtensions.ToString(Object, String, String)
  fullName: Apizr.Extending.ObjectExtensions.ToString(System.Object, System.String, System.String)
  spec.csharp:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Extending.ObjectExtensions.ToString(System.Object,System.String,System.String)
    name: ToString
    nameWithType: ObjectExtensions.ToString
    fullName: Apizr.Extending.ObjectExtensions.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Extending.ObjectExtensions
  commentId: T:Apizr.Extending.ObjectExtensions
  parent: Apizr.Extending
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Apizr.Extending.ObjectExtensions
- uid: Apizr.Extending
  commentId: N:Apizr.Extending
  name: Apizr.Extending
  nameWithType: Apizr.Extending
  fullName: Apizr.Extending
- uid: Apizr.Optional.Cruding.CreateOptionalCommand`1
  commentId: T:Apizr.Optional.Cruding.CreateOptionalCommand`1
  name: CreateOptionalCommand<TModelData>
  nameWithType: CreateOptionalCommand<TModelData>
  fullName: Apizr.Optional.Cruding.CreateOptionalCommand<TModelData>
  nameWithType.vb: CreateOptionalCommand(Of TModelData)
  fullName.vb: Apizr.Optional.Cruding.CreateOptionalCommand(Of TModelData)
  name.vb: CreateOptionalCommand(Of TModelData)
  spec.csharp:
  - uid: Apizr.Optional.Cruding.CreateOptionalCommand`1
    name: CreateOptionalCommand
    nameWithType: CreateOptionalCommand
    fullName: Apizr.Optional.Cruding.CreateOptionalCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Optional.Cruding.CreateOptionalCommand`1
    name: CreateOptionalCommand
    nameWithType: CreateOptionalCommand
    fullName: Apizr.Optional.Cruding.CreateOptionalCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand*
  commentId: Overload:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand
  name: SendCreateOptionalCommand
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateOptionalCommand
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendCreateOptionalCommand
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateOptionalCommand
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendCreateOptionalCommand
- uid: '{TApiEntity}'
  commentId: '!:TApiEntity'
  definition: TApiEntity
  name: TApiEntity
  nameWithType: TApiEntity
  fullName: TApiEntity
- uid: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TApiEntity, ApizrException>>
  nameWithType: Task<Option<TApiEntity, ApizrException>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TApiEntity, Apizr.ApizrException>>
  nameWithType.vb: Task(Of Option(Of TApiEntity, ApizrException))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TApiEntity, Apizr.ApizrException))
  name.vb: Task(Of Option(Of TApiEntity, ApizrException))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TApiEntity
  name: TApiEntity
  nameWithType: TApiEntity
  fullName: TApiEntity
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Polly.Context
  commentId: T:Polly.Context
  parent: Polly
  isExternal: true
  name: Context
  nameWithType: Context
  fullName: Polly.Context
- uid: Polly
  commentId: N:Polly
  isExternal: true
  name: Polly
  nameWithType: Polly
  fullName: Polly
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Apizr.Mediation.Cruding.CreateCommand`1
  commentId: T:Apizr.Mediation.Cruding.CreateCommand`1
  name: CreateCommand<TModelData>
  nameWithType: CreateCommand<TModelData>
  fullName: Apizr.Mediation.Cruding.CreateCommand<TModelData>
  nameWithType.vb: CreateCommand(Of TModelData)
  fullName.vb: Apizr.Mediation.Cruding.CreateCommand(Of TModelData)
  name.vb: CreateCommand(Of TModelData)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.CreateCommand`1
    name: CreateCommand
    nameWithType: CreateCommand
    fullName: Apizr.Mediation.Cruding.CreateCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.CreateCommand`1
    name: CreateCommand
    nameWithType: CreateCommand
    fullName: Apizr.Mediation.Cruding.CreateCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TModelEntity}'
  commentId: '!:TModelEntity'
  definition: TModelEntity
  name: TModelEntity
  nameWithType: TModelEntity
  fullName: TModelEntity
- uid: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{`0,Apizr.ApizrException}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TModelEntity, ApizrException>>
  nameWithType: Task<Option<TModelEntity, ApizrException>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TModelEntity, Apizr.ApizrException>>
  nameWithType.vb: Task(Of Option(Of TModelEntity, ApizrException))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TModelEntity, Apizr.ApizrException))
  name.vb: Task(Of Option(Of TModelEntity, ApizrException))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TModelEntity
  name: TModelEntity
  nameWithType: TModelEntity
  fullName: TModelEntity
- uid: Apizr.Mediation.Cruding.ReadAllQuery`1
  commentId: T:Apizr.Mediation.Cruding.ReadAllQuery`1
  name: ReadAllQuery<TReadAllResult>
  nameWithType: ReadAllQuery<TReadAllResult>
  fullName: Apizr.Mediation.Cruding.ReadAllQuery<TReadAllResult>
  nameWithType.vb: ReadAllQuery(Of TReadAllResult)
  fullName.vb: Apizr.Mediation.Cruding.ReadAllQuery(Of TReadAllResult)
  name.vb: ReadAllQuery(Of TReadAllResult)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.ReadAllQuery`1
    name: ReadAllQuery
    nameWithType: ReadAllQuery
    fullName: Apizr.Mediation.Cruding.ReadAllQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.ReadAllQuery`1
    name: ReadAllQuery
    nameWithType: ReadAllQuery
    fullName: Apizr.Mediation.Cruding.ReadAllQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery*
  commentId: Overload:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery
  name: SendReadAllOptionalQuery
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadAllOptionalQuery
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadAllOptionalQuery
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>>
  nameWithType: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TReadAllResult, Apizr.ApizrException<TReadAllResult>>>
  nameWithType.vb: Task(Of Option(Of TReadAllResult, ApizrException(Of TReadAllResult)))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TReadAllResult, Apizr.ApizrException(Of TReadAllResult)))
  name.vb: Task(Of Option(Of TReadAllResult, ApizrException(Of TReadAllResult)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: <
    nameWithType: <
    fullName: <
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{Optional.Option{{TModelEntityReadAllResult},Apizr.ApizrException{{TModelEntityReadAllResult}}}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{`2,Apizr.ApizrException{`2}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>>
  nameWithType: Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TModelEntityReadAllResult, Apizr.ApizrException<TModelEntityReadAllResult>>>
  nameWithType.vb: Task(Of Option(Of TModelEntityReadAllResult, ApizrException(Of TModelEntityReadAllResult)))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TModelEntityReadAllResult, Apizr.ApizrException(Of TModelEntityReadAllResult)))
  name.vb: Task(Of Option(Of TModelEntityReadAllResult, ApizrException(Of TModelEntityReadAllResult)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelEntityReadAllResult
    nameWithType: TModelEntityReadAllResult
    fullName: TModelEntityReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelEntityReadAllResult
    nameWithType: TModelEntityReadAllResult
    fullName: TModelEntityReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelEntityReadAllResult
    nameWithType: TModelEntityReadAllResult
    fullName: TModelEntityReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelEntityReadAllResult
    nameWithType: TModelEntityReadAllResult
    fullName: TModelEntityReadAllResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TReadAllParams}'
  commentId: '!:TReadAllParams'
  definition: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: Apizr.Mediation.Cruding.ReadQuery`2
  commentId: T:Apizr.Mediation.Cruding.ReadQuery`2
  name: ReadQuery<TResultData, TKey>
  nameWithType: ReadQuery<TResultData, TKey>
  fullName: Apizr.Mediation.Cruding.ReadQuery<TResultData, TKey>
  nameWithType.vb: ReadQuery(Of TResultData, TKey)
  fullName.vb: Apizr.Mediation.Cruding.ReadQuery(Of TResultData, TKey)
  name.vb: ReadQuery(Of TResultData, TKey)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.ReadQuery`2
    name: ReadQuery
    nameWithType: ReadQuery
    fullName: Apizr.Mediation.Cruding.ReadQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.ReadQuery`2
    name: ReadQuery
    nameWithType: ReadQuery
    fullName: Apizr.Mediation.Cruding.ReadQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery*
  commentId: Overload:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery
  name: SendReadOptionalQuery
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendReadOptionalQuery
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendReadOptionalQuery
- uid: '{TApiEntityKey}'
  commentId: '!:TApiEntityKey'
  definition: TApiEntityKey
  name: TApiEntityKey
  nameWithType: TApiEntityKey
  fullName: TApiEntityKey
- uid: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TApiEntity, ApizrException<TApiEntity>>>
  nameWithType: Task<Option<TApiEntity, ApizrException<TApiEntity>>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TApiEntity, Apizr.ApizrException<TApiEntity>>>
  nameWithType.vb: Task(Of Option(Of TApiEntity, ApizrException(Of TApiEntity)))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TApiEntity, Apizr.ApizrException(Of TApiEntity)))
  name.vb: Task(Of Option(Of TApiEntity, ApizrException(Of TApiEntity)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TApiEntityKey
  name: TApiEntityKey
  nameWithType: TApiEntityKey
  fullName: TApiEntityKey
- uid: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{`0,Apizr.ApizrException{`0}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TModelEntity, ApizrException<TModelEntity>>>
  nameWithType: Task<Option<TModelEntity, ApizrException<TModelEntity>>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TModelEntity, Apizr.ApizrException<TModelEntity>>>
  nameWithType.vb: Task(Of Option(Of TModelEntity, ApizrException(Of TModelEntity)))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TModelEntity, Apizr.ApizrException(Of TModelEntity)))
  name.vb: Task(Of Option(Of TModelEntity, ApizrException(Of TModelEntity)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Cruding.UpdateCommand`2
  commentId: T:Apizr.Mediation.Cruding.UpdateCommand`2
  name: UpdateCommand<TKey, TRequestData>
  nameWithType: UpdateCommand<TKey, TRequestData>
  fullName: Apizr.Mediation.Cruding.UpdateCommand<TKey, TRequestData>
  nameWithType.vb: UpdateCommand(Of TKey, TRequestData)
  fullName.vb: Apizr.Mediation.Cruding.UpdateCommand(Of TKey, TRequestData)
  name.vb: UpdateCommand(Of TKey, TRequestData)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.UpdateCommand`2
    name: UpdateCommand
    nameWithType: UpdateCommand
    fullName: Apizr.Mediation.Cruding.UpdateCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.UpdateCommand`2
    name: UpdateCommand
    nameWithType: UpdateCommand
    fullName: Apizr.Mediation.Cruding.UpdateCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand*
  commentId: Overload:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand
  name: SendUpdateOptionalCommand
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateOptionalCommand
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendUpdateOptionalCommand
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateOptionalCommand
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendUpdateOptionalCommand
- uid: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<Unit, ApizrException>>
  nameWithType: Task<Option<Unit, ApizrException>>
  fullName: System.Threading.Tasks.Task<Optional.Option<MediatR.Unit, Apizr.ApizrException>>
  nameWithType.vb: Task(Of Option(Of Unit, ApizrException))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of MediatR.Unit, Apizr.ApizrException))
  name.vb: Task(Of Option(Of Unit, ApizrException))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Cruding.DeleteCommand`2
  commentId: T:Apizr.Mediation.Cruding.DeleteCommand`2
  name: DeleteCommand<T, TKey>
  nameWithType: DeleteCommand<T, TKey>
  fullName: Apizr.Mediation.Cruding.DeleteCommand<T, TKey>
  nameWithType.vb: DeleteCommand(Of T, TKey)
  fullName.vb: Apizr.Mediation.Cruding.DeleteCommand(Of T, TKey)
  name.vb: DeleteCommand(Of T, TKey)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.DeleteCommand`2
    name: DeleteCommand
    nameWithType: DeleteCommand
    fullName: Apizr.Mediation.Cruding.DeleteCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.DeleteCommand`2
    name: DeleteCommand
    nameWithType: DeleteCommand
    fullName: Apizr.Mediation.Cruding.DeleteCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand*
  commentId: Overload:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand
  name: SendDeleteOptionalCommand
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteOptionalCommand
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>.SendDeleteOptionalCommand
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteOptionalCommand
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams).SendDeleteOptionalCommand
