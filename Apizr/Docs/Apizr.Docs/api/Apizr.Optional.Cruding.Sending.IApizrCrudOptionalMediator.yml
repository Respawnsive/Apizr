### YamlMime:ManagedReference
items:
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  commentId: T:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  id: IApizrCrudOptionalMediator
  parent: Apizr.Optional.Cruding.Sending
  children:
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``1(``0)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``1(``0,Polly.Context)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``1(``0,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``1(``0,System.Threading.CancellationToken)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``2(``0)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``2(``0,Polly.Context)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``2(``0,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``2(``0,System.Threading.CancellationToken)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand``2(``1)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand``2(``1,Polly.Context)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand``2(``1,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand``2(``1,System.Threading.CancellationToken)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Int32,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Int32,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Int32,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Int32,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Int32,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Int32,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``2(``1,``0)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``2(``1,``0,Polly.Context)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``2(``1,``0,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``2(``1,``0,System.Threading.CancellationToken)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``3(``2,``0)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``3(``2,``0,Polly.Context)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``3(``2,``0,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``3(``2,``0,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IApizrCrudOptionalMediator
  nameWithType: IApizrCrudOptionalMediator
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  type: Interface
  source:
    id: IApizrCrudOptionalMediator
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 12
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nApizr mediator dedicated to cruding and with optional result\n"
  example: []
  syntax:
    content: 'public interface IApizrCrudOptionalMediator : IApizrCrudOptionalMediatorBase, IApizrCrudMediatorBase, IApizrOptionalMediatorBase, IApizrMediatorBase'
    content.vb: >-
      Public Interface IApizrCrudOptionalMediator
          Inherits IApizrCrudOptionalMediatorBase
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``1(``0)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``1(``0)
  id: SendCreateOptionalCommand``1(``0)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TApiEntity>(TApiEntity)
  nameWithType: IApizrCrudOptionalMediator.SendCreateOptionalCommand<TApiEntity>(TApiEntity)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand<TApiEntity>(TApiEntity)
  type: Method
  source:
    id: SendCreateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 24
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Optional.Cruding.CreateOptionalCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(TApiEntity entity)
    parameters:
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException}}
      description: ''
    content.vb: Function SendCreateOptionalCommand(Of TApiEntity)(entity As TApiEntity) As Task(Of  Option(Of TApiEntity, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator.SendCreateOptionalCommand(Of TApiEntity)(TApiEntity)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand(Of TApiEntity)(TApiEntity)
  name.vb: SendCreateOptionalCommand(Of TApiEntity)(TApiEntity)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``1(``0,Polly.Context)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``1(``0,Polly.Context)
  id: SendCreateOptionalCommand``1(``0,Polly.Context)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TApiEntity>(TApiEntity, Context)
  nameWithType: IApizrCrudOptionalMediator.SendCreateOptionalCommand<TApiEntity>(TApiEntity, Context)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand<TApiEntity>(TApiEntity, Polly.Context)
  type: Method
  source:
    id: SendCreateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 33
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Optional.Cruding.CreateOptionalCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(TApiEntity entity, Context context)
    parameters:
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException}}
      description: ''
    content.vb: Function SendCreateOptionalCommand(Of TApiEntity)(entity As TApiEntity, context As Context) As Task(Of  Option(Of TApiEntity, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator.SendCreateOptionalCommand(Of TApiEntity)(TApiEntity, Context)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand(Of TApiEntity)(TApiEntity, Polly.Context)
  name.vb: SendCreateOptionalCommand(Of TApiEntity)(TApiEntity, Context)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``1(``0,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``1(``0,System.Threading.CancellationToken)
  id: SendCreateOptionalCommand``1(``0,System.Threading.CancellationToken)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TApiEntity>(TApiEntity, CancellationToken)
  nameWithType: IApizrCrudOptionalMediator.SendCreateOptionalCommand<TApiEntity>(TApiEntity, CancellationToken)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand<TApiEntity>(TApiEntity, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendCreateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 42
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Optional.Cruding.CreateOptionalCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(TApiEntity entity, CancellationToken cancellationToken)
    parameters:
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException}}
      description: ''
    content.vb: Function SendCreateOptionalCommand(Of TApiEntity)(entity As TApiEntity, cancellationToken As CancellationToken) As Task(Of  Option(Of TApiEntity, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator.SendCreateOptionalCommand(Of TApiEntity)(TApiEntity, CancellationToken)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand(Of TApiEntity)(TApiEntity, System.Threading.CancellationToken)
  name.vb: SendCreateOptionalCommand(Of TApiEntity)(TApiEntity, CancellationToken)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``1(``0,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``1(``0,Polly.Context,System.Threading.CancellationToken)
  id: SendCreateOptionalCommand``1(``0,Polly.Context,System.Threading.CancellationToken)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TApiEntity>(TApiEntity, Context, CancellationToken)
  nameWithType: IApizrCrudOptionalMediator.SendCreateOptionalCommand<TApiEntity>(TApiEntity, Context, CancellationToken)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand<TApiEntity>(TApiEntity, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendCreateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 53
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Optional.Cruding.CreateOptionalCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(TApiEntity entity, Context context, CancellationToken cancellationToken)
    parameters:
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException}}
      description: ''
    content.vb: Function SendCreateOptionalCommand(Of TApiEntity)(entity As TApiEntity, context As Context, cancellationToken As CancellationToken) As Task(Of  Option(Of TApiEntity, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator.SendCreateOptionalCommand(Of TApiEntity)(TApiEntity, Context, CancellationToken)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand(Of TApiEntity)(TApiEntity, Polly.Context, System.Threading.CancellationToken)
  name.vb: SendCreateOptionalCommand(Of TApiEntity)(TApiEntity, Context, CancellationToken)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``2(``0)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``2(``0)
  id: SendCreateOptionalCommand``2(``0)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity)
  nameWithType: IApizrCrudOptionalMediator.SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity)
  type: Method
  source:
    id: SendCreateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 67
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity entity)
    parameters:
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException}}
      description: ''
    content.vb: Function SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(entity As TModelEntity) As Task(Of  Option(Of TModelEntity, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator.SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(TModelEntity)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(TModelEntity)
  name.vb: SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(TModelEntity)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``2(``0,Polly.Context)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``2(``0,Polly.Context)
  id: SendCreateOptionalCommand``2(``0,Polly.Context)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity, Context)
  nameWithType: IApizrCrudOptionalMediator.SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity, Context)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity, Polly.Context)
  type: Method
  source:
    id: SendCreateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 77
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity entity, Context context)
    parameters:
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException}}
      description: ''
    content.vb: Function SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(entity As TModelEntity, context As Context) As Task(Of  Option(Of TModelEntity, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator.SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(TModelEntity, Context)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(TModelEntity, Polly.Context)
  name.vb: SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(TModelEntity, Context)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``2(``0,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``2(``0,System.Threading.CancellationToken)
  id: SendCreateOptionalCommand``2(``0,System.Threading.CancellationToken)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity, CancellationToken)
  nameWithType: IApizrCrudOptionalMediator.SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity, CancellationToken)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendCreateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 87
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity entity, CancellationToken cancellationToken)
    parameters:
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException}}
      description: ''
    content.vb: Function SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(entity As TModelEntity, cancellationToken As CancellationToken) As Task(Of  Option(Of TModelEntity, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator.SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(TModelEntity, CancellationToken)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(TModelEntity, System.Threading.CancellationToken)
  name.vb: SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(TModelEntity, CancellationToken)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``2(``0,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``2(``0,Polly.Context,System.Threading.CancellationToken)
  id: SendCreateOptionalCommand``2(``0,Polly.Context,System.Threading.CancellationToken)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity, Context, CancellationToken)
  nameWithType: IApizrCrudOptionalMediator.SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity, Context, CancellationToken)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendCreateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 99
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity entity, Context context, CancellationToken cancellationToken)
    parameters:
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException}}
      description: ''
    content.vb: Function SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(entity As TModelEntity, context As Context, cancellationToken As CancellationToken) As Task(Of  Option(Of TModelEntity, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator.SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(TModelEntity, Context, CancellationToken)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(TModelEntity, Polly.Context, System.Threading.CancellationToken)
  name.vb: SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(TModelEntity, Context, CancellationToken)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Boolean)
  id: SendReadAllOptionalQuery``1(System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult>(Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult>(Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult>(System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 116
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(bool clearCache = false)
    parameters:
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TReadAllResult)(clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult)(Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult)(System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult)(Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``1(Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult>(Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult>(Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult>(Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 125
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(Context context, bool clearCache = false)
    parameters:
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TReadAllResult)(context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult)(Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult)(Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult)(Context, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``1(System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult>(CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult>(CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult>(System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 134
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TReadAllResult)(cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult)(CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult)(System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult)(CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Int32,System.Boolean)
  id: SendReadAllOptionalQuery``1(System.Int32,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult>(Int32, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult>(Int32, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult>(System.Int32, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 143
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(int priority, bool clearCache = false)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TReadAllResult)(priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult)(Int32, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult)(System.Int32, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult)(Int32, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Int32,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``1(System.Int32,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult>(Int32, Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult>(Int32, Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult>(System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 153
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(int priority, Context context, bool clearCache = false)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TReadAllResult)(priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult)(Int32, Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult)(System.Int32, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult)(Int32, Context, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``1(System.Int32,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult>(Int32, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult>(Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult>(System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 163
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(int priority, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TReadAllResult)(priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult)(Int32, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult)(System.Int32, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult)(Int32, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``1(Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult>(Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult>(Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult>(Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 174
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TReadAllResult)(context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult)(Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult)(Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult)(Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``1(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult>(Int32, Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult>(Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult>(System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 186
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TReadAllResult)(priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult)(Int32, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult)(System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult)(Int32, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Boolean)
  id: SendReadAllOptionalQuery``2(System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 200
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(bool clearCache = false)
    parameters:
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``2(Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 211
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Context context, bool clearCache = false)
    parameters:
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Context, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``2(System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 222
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Int32,System.Boolean)
  id: SendReadAllOptionalQuery``2(System.Int32,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Int32, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Int32, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(System.Int32, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 233
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(int priority, bool clearCache = false)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Int32, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(System.Int32, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Int32, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``2(System.Int32,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Int32, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 245
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(int priority, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Int32, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(System.Int32, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Int32, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Int32,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``2(System.Int32,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Int32, Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Int32, Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 257
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(int priority, Context context, bool clearCache = false)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Int32, Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(System.Int32, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Int32, Context, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``2(Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 269
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``2(System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Int32, Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 283
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Int32, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Int32, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Boolean)
  id: SendReadAllOptionalQuery``2(``1,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 299
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(readAllParams As TReadAllParams, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``2(``1,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 311
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Context context, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(readAllParams As TReadAllParams, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, Context, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``2(``1,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 323
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(readAllParams As TReadAllParams, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Int32,System.Boolean)
  id: SendReadAllOptionalQuery``2(``1,System.Int32,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, System.Int32, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 336
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(readAllParams As TReadAllParams, priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, Int32, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, System.Int32, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, Int32, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Int32,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``2(``1,System.Int32,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 350
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(readAllParams As TReadAllParams, priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, Int32, Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, System.Int32, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, Int32, Context, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``2(``1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 364
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(readAllParams As TReadAllParams, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, Int32, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, Int32, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``2(``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 379
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(readAllParams As TReadAllParams, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``2(``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 394
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(readAllParams As TReadAllParams, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, Int32, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(TReadAllParams, Int32, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Boolean)
  id: SendReadAllOptionalQuery``3(``2,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 412
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(readAllParams As TReadAllParams, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``3(``2,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 425
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Context context, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(readAllParams As TReadAllParams, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, Context, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``3(``2,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 438
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(readAllParams As TReadAllParams, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Int32,System.Boolean)
  id: SendReadAllOptionalQuery``3(``2,System.Int32,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Int32, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Int32, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, System.Int32, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 452
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(readAllParams As TReadAllParams, priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, Int32, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, System.Int32, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, Int32, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Int32,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``3(``2,System.Int32,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 467
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, Context context, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(readAllParams As TReadAllParams, priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, Int32, Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, System.Int32, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, Int32, Context, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``3(``2,System.Int32,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Int32, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 482
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(readAllParams As TReadAllParams, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, Int32, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, Int32, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``3(``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 498
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(readAllParams As TReadAllParams, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``3(``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadAllOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 514
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(readAllParams As TReadAllParams, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, Int32, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(TReadAllParams, Int32, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Boolean)
  id: SendReadOptionalQuery``2(``1,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 535
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(key As TApiEntityKey, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,Polly.Context,System.Boolean)
  id: SendReadOptionalQuery``2(``1,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 546
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(key As TApiEntityKey, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Polly.Context, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Context, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``2(``1,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 557
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(key As TApiEntityKey, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Int32,System.Boolean)
  id: SendReadOptionalQuery``2(``1,System.Int32,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, System.Int32, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 569
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(key As TApiEntityKey, priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Int32, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, System.Int32, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Int32, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``2(``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 582
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(key As TApiEntityKey, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Int32,Polly.Context,System.Boolean)
  id: SendReadOptionalQuery``2(``1,System.Int32,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 595
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, Context context, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(key As TApiEntityKey, priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Int32, Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, System.Int32, Polly.Context, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Int32, Context, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``2(``1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 608
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(key As TApiEntityKey, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Int32, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Int32, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``2(``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 623
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(key As TApiEntityKey, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Int32, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Boolean)
  id: SendReadOptionalQuery``3(``2,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 640
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(key As TApiEntityKey, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,Polly.Context,System.Boolean)
  id: SendReadOptionalQuery``3(``2,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 652
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(key As TApiEntityKey, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, Polly.Context, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, Context, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``3(``2,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 664
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(key As TApiEntityKey, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Int32,System.Boolean)
  id: SendReadOptionalQuery``3(``2,System.Int32,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, System.Int32, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 677
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(key As TApiEntityKey, priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, Int32, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, System.Int32, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, Int32, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``3(``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 691
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(key As TApiEntityKey, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Int32,Polly.Context,System.Boolean)
  id: SendReadOptionalQuery``3(``2,System.Int32,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 705
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, Context context, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(key As TApiEntityKey, priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, Int32, Context, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, System.Int32, Polly.Context, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, Int32, Context, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``3(``2,System.Int32,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 719
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(key As TApiEntityKey, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, Int32, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, Int32, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``3(``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  nameWithType: IApizrCrudOptionalMediator.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendReadOptionalQuery
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 735
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: Function SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(key As TApiEntityKey, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery*
  nameWithType.vb: IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, Int32, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``2(``1,``0)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``2(``1,``0)
  id: SendUpdateOptionalCommand``2(``1,``0)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity)
  nameWithType: IApizrCrudOptionalMediator.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity)
  type: Method
  source:
    id: SendUpdateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 755
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(key As TApiEntityKey, entity As TApiEntity) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator.SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey, TApiEntity)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey, TApiEntity)
  name.vb: SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey, TApiEntity)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``2(``1,``0,Polly.Context)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``2(``1,``0,Polly.Context)
  id: SendUpdateOptionalCommand``2(``1,``0,Polly.Context)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Context)
  nameWithType: IApizrCrudOptionalMediator.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Context)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Polly.Context)
  type: Method
  source:
    id: SendUpdateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 766
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Context context)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(key As TApiEntityKey, entity As TApiEntity, context As Context) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator.SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey, TApiEntity, Context)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey, TApiEntity, Polly.Context)
  name.vb: SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey, TApiEntity, Context)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``2(``1,``0,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``2(``1,``0,System.Threading.CancellationToken)
  id: SendUpdateOptionalCommand``2(``1,``0,System.Threading.CancellationToken)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, CancellationToken)
  nameWithType: IApizrCrudOptionalMediator.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, CancellationToken)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendUpdateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 777
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(key As TApiEntityKey, entity As TApiEntity, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator.SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey, TApiEntity, CancellationToken)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey, TApiEntity, System.Threading.CancellationToken)
  name.vb: SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey, TApiEntity, CancellationToken)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``2(``1,``0,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``2(``1,``0,Polly.Context,System.Threading.CancellationToken)
  id: SendUpdateOptionalCommand``2(``1,``0,Polly.Context,System.Threading.CancellationToken)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Context, CancellationToken)
  nameWithType: IApizrCrudOptionalMediator.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Context, CancellationToken)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendUpdateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 790
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Context context, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(key As TApiEntityKey, entity As TApiEntity, context As Context, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator.SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey, TApiEntity, Context, CancellationToken)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey, TApiEntity, Polly.Context, System.Threading.CancellationToken)
  name.vb: SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey, TApiEntity, Context, CancellationToken)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``3(``2,``0)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``3(``2,``0)
  id: SendUpdateOptionalCommand``3(``2,``0)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity)
  nameWithType: IApizrCrudOptionalMediator.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity)
  type: Method
  source:
    id: SendUpdateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 806
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(key As TApiEntityKey, entity As TModelEntity) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator.SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, TModelEntity)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, TModelEntity)
  name.vb: SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, TModelEntity)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``3(``2,``0,Polly.Context)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``3(``2,``0,Polly.Context)
  id: SendUpdateOptionalCommand``3(``2,``0,Polly.Context)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Context)
  nameWithType: IApizrCrudOptionalMediator.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Context)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Polly.Context)
  type: Method
  source:
    id: SendUpdateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 819
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Context context)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(key As TApiEntityKey, entity As TModelEntity, context As Context) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator.SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, TModelEntity, Context)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, TModelEntity, Polly.Context)
  name.vb: SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, TModelEntity, Context)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``3(``2,``0,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``3(``2,``0,System.Threading.CancellationToken)
  id: SendUpdateOptionalCommand``3(``2,``0,System.Threading.CancellationToken)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, CancellationToken)
  nameWithType: IApizrCrudOptionalMediator.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, CancellationToken)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendUpdateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 832
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(key As TApiEntityKey, entity As TModelEntity, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator.SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, TModelEntity, CancellationToken)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, TModelEntity, System.Threading.CancellationToken)
  name.vb: SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, TModelEntity, CancellationToken)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``3(``2,``0,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``3(``2,``0,Polly.Context,System.Threading.CancellationToken)
  id: SendUpdateOptionalCommand``3(``2,``0,Polly.Context,System.Threading.CancellationToken)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Context, CancellationToken)
  nameWithType: IApizrCrudOptionalMediator.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Context, CancellationToken)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendUpdateOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 846
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Context context, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(key As TApiEntityKey, entity As TModelEntity, context As Context, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator.SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, TModelEntity, Context, CancellationToken)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, TModelEntity, Polly.Context, System.Threading.CancellationToken)
  name.vb: SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(TApiEntityKey, TModelEntity, Context, CancellationToken)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand``2(``1)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand``2(``1)
  id: SendDeleteOptionalCommand``2(``1)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey)
  nameWithType: IApizrCrudOptionalMediator.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey)
  type: Method
  source:
    id: SendDeleteOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 863
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(key As TApiEntityKey) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator.SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey)
  name.vb: SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand``2(``1,Polly.Context)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand``2(``1,Polly.Context)
  id: SendDeleteOptionalCommand``2(``1,Polly.Context)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Context)
  nameWithType: IApizrCrudOptionalMediator.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Context)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Polly.Context)
  type: Method
  source:
    id: SendDeleteOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 873
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(key As TApiEntityKey, context As Context) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator.SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Context)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Polly.Context)
  name.vb: SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Context)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand``2(``1,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand``2(``1,System.Threading.CancellationToken)
  id: SendDeleteOptionalCommand``2(``1,System.Threading.CancellationToken)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, CancellationToken)
  nameWithType: IApizrCrudOptionalMediator.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, CancellationToken)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendDeleteOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 883
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(key As TApiEntityKey, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator.SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey, CancellationToken)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey, System.Threading.CancellationToken)
  name.vb: SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey, CancellationToken)
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand``2(``1,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand``2(``1,Polly.Context,System.Threading.CancellationToken)
  id: SendDeleteOptionalCommand``2(``1,Polly.Context,System.Threading.CancellationToken)
  parent: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  langs:
  - csharp
  - vb
  name: SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Context, CancellationToken)
  nameWithType: IApizrCrudOptionalMediator.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Context, CancellationToken)
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendDeleteOptionalCommand
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Cruding\Sending\IApizrCrudOptionalMediator.cs
    startLine: 895
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Cruding.Sending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Context context, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Function SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(key As TApiEntityKey, context As Context, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand*
  nameWithType.vb: IApizrCrudOptionalMediator.SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Context, CancellationToken)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Polly.Context, System.Threading.CancellationToken)
  name.vb: SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(TApiEntityKey, Context, CancellationToken)
references:
- uid: Apizr.Optional.Cruding.Sending
  commentId: N:Apizr.Optional.Cruding.Sending
  name: Apizr.Optional.Cruding.Sending
  nameWithType: Apizr.Optional.Cruding.Sending
  fullName: Apizr.Optional.Cruding.Sending
- uid: Apizr.Optional.Cruding.CreateOptionalCommand`1
  commentId: T:Apizr.Optional.Cruding.CreateOptionalCommand`1
  name: CreateOptionalCommand<TModelData>
  nameWithType: CreateOptionalCommand<TModelData>
  fullName: Apizr.Optional.Cruding.CreateOptionalCommand<TModelData>
  nameWithType.vb: CreateOptionalCommand(Of TModelData)
  fullName.vb: Apizr.Optional.Cruding.CreateOptionalCommand(Of TModelData)
  name.vb: CreateOptionalCommand(Of TModelData)
  spec.csharp:
  - uid: Apizr.Optional.Cruding.CreateOptionalCommand`1
    name: CreateOptionalCommand
    nameWithType: CreateOptionalCommand
    fullName: Apizr.Optional.Cruding.CreateOptionalCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Optional.Cruding.CreateOptionalCommand`1
    name: CreateOptionalCommand
    nameWithType: CreateOptionalCommand
    fullName: Apizr.Optional.Cruding.CreateOptionalCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand*
  commentId: Overload:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand
  name: SendCreateOptionalCommand
  nameWithType: IApizrCrudOptionalMediator.SendCreateOptionalCommand
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand
- uid: '{TApiEntity}'
  commentId: '!:TApiEntity'
  definition: TApiEntity
  name: TApiEntity
  nameWithType: TApiEntity
  fullName: TApiEntity
- uid: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TApiEntity, ApizrException>>
  nameWithType: Task<Option<TApiEntity, ApizrException>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TApiEntity, Apizr.ApizrException>>
  nameWithType.vb: Task(Of Option(Of TApiEntity, ApizrException))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TApiEntity, Apizr.ApizrException))
  name.vb: Task(Of Option(Of TApiEntity, ApizrException))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TApiEntity
  name: TApiEntity
  nameWithType: TApiEntity
  fullName: TApiEntity
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Polly.Context
  commentId: T:Polly.Context
  parent: Polly
  isExternal: true
  name: Context
  nameWithType: Context
  fullName: Polly.Context
- uid: Polly
  commentId: N:Polly
  isExternal: true
  name: Polly
  nameWithType: Polly
  fullName: Polly
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Apizr.Mediation.Cruding.CreateCommand`1
  commentId: T:Apizr.Mediation.Cruding.CreateCommand`1
  name: CreateCommand<TModelData>
  nameWithType: CreateCommand<TModelData>
  fullName: Apizr.Mediation.Cruding.CreateCommand<TModelData>
  nameWithType.vb: CreateCommand(Of TModelData)
  fullName.vb: Apizr.Mediation.Cruding.CreateCommand(Of TModelData)
  name.vb: CreateCommand(Of TModelData)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.CreateCommand`1
    name: CreateCommand
    nameWithType: CreateCommand
    fullName: Apizr.Mediation.Cruding.CreateCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.CreateCommand`1
    name: CreateCommand
    nameWithType: CreateCommand
    fullName: Apizr.Mediation.Cruding.CreateCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TModelEntity}'
  commentId: '!:TModelEntity'
  definition: TModelEntity
  name: TModelEntity
  nameWithType: TModelEntity
  fullName: TModelEntity
- uid: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{`0,Apizr.ApizrException}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TModelEntity, ApizrException>>
  nameWithType: Task<Option<TModelEntity, ApizrException>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TModelEntity, Apizr.ApizrException>>
  nameWithType.vb: Task(Of Option(Of TModelEntity, ApizrException))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TModelEntity, Apizr.ApizrException))
  name.vb: Task(Of Option(Of TModelEntity, ApizrException))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TModelEntity
  name: TModelEntity
  nameWithType: TModelEntity
  fullName: TModelEntity
- uid: Apizr.Mediation.Cruding.ReadAllQuery`1
  commentId: T:Apizr.Mediation.Cruding.ReadAllQuery`1
  name: ReadAllQuery<TReadAllResult>
  nameWithType: ReadAllQuery<TReadAllResult>
  fullName: Apizr.Mediation.Cruding.ReadAllQuery<TReadAllResult>
  nameWithType.vb: ReadAllQuery(Of TReadAllResult)
  fullName.vb: Apizr.Mediation.Cruding.ReadAllQuery(Of TReadAllResult)
  name.vb: ReadAllQuery(Of TReadAllResult)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.ReadAllQuery`1
    name: ReadAllQuery
    nameWithType: ReadAllQuery
    fullName: Apizr.Mediation.Cruding.ReadAllQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.ReadAllQuery`1
    name: ReadAllQuery
    nameWithType: ReadAllQuery
    fullName: Apizr.Mediation.Cruding.ReadAllQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery*
  commentId: Overload:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery
  name: SendReadAllOptionalQuery
  nameWithType: IApizrCrudOptionalMediator.SendReadAllOptionalQuery
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>>
  nameWithType: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TReadAllResult, Apizr.ApizrException<TReadAllResult>>>
  nameWithType.vb: Task(Of Option(Of TReadAllResult, ApizrException(Of TReadAllResult)))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TReadAllResult, Apizr.ApizrException(Of TReadAllResult)))
  name.vb: Task(Of Option(Of TReadAllResult, ApizrException(Of TReadAllResult)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: <
    nameWithType: <
    fullName: <
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>>
  nameWithType: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TModelReadAllResult, Apizr.ApizrException<TModelReadAllResult>>>
  nameWithType.vb: Task(Of Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult)))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TModelReadAllResult, Apizr.ApizrException(Of TModelReadAllResult)))
  name.vb: Task(Of Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelReadAllResult
    nameWithType: TModelReadAllResult
    fullName: TModelReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelReadAllResult
    nameWithType: TModelReadAllResult
    fullName: TModelReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelReadAllResult
    nameWithType: TModelReadAllResult
    fullName: TModelReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelReadAllResult
    nameWithType: TModelReadAllResult
    fullName: TModelReadAllResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TReadAllParams}'
  commentId: '!:TReadAllParams'
  definition: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: Apizr.Mediation.Cruding.ReadQuery`2
  commentId: T:Apizr.Mediation.Cruding.ReadQuery`2
  name: ReadQuery<TResultData, TKey>
  nameWithType: ReadQuery<TResultData, TKey>
  fullName: Apizr.Mediation.Cruding.ReadQuery<TResultData, TKey>
  nameWithType.vb: ReadQuery(Of TResultData, TKey)
  fullName.vb: Apizr.Mediation.Cruding.ReadQuery(Of TResultData, TKey)
  name.vb: ReadQuery(Of TResultData, TKey)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.ReadQuery`2
    name: ReadQuery
    nameWithType: ReadQuery
    fullName: Apizr.Mediation.Cruding.ReadQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.ReadQuery`2
    name: ReadQuery
    nameWithType: ReadQuery
    fullName: Apizr.Mediation.Cruding.ReadQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery*
  commentId: Overload:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery
  name: SendReadOptionalQuery
  nameWithType: IApizrCrudOptionalMediator.SendReadOptionalQuery
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery
- uid: '{TApiEntityKey}'
  commentId: '!:TApiEntityKey'
  definition: TApiEntityKey
  name: TApiEntityKey
  nameWithType: TApiEntityKey
  fullName: TApiEntityKey
- uid: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TApiEntity, ApizrException<TApiEntity>>>
  nameWithType: Task<Option<TApiEntity, ApizrException<TApiEntity>>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TApiEntity, Apizr.ApizrException<TApiEntity>>>
  nameWithType.vb: Task(Of Option(Of TApiEntity, ApizrException(Of TApiEntity)))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TApiEntity, Apizr.ApizrException(Of TApiEntity)))
  name.vb: Task(Of Option(Of TApiEntity, ApizrException(Of TApiEntity)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TApiEntityKey
  name: TApiEntityKey
  nameWithType: TApiEntityKey
  fullName: TApiEntityKey
- uid: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{`0,Apizr.ApizrException{`0}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TModelEntity, ApizrException<TModelEntity>>>
  nameWithType: Task<Option<TModelEntity, ApizrException<TModelEntity>>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TModelEntity, Apizr.ApizrException<TModelEntity>>>
  nameWithType.vb: Task(Of Option(Of TModelEntity, ApizrException(Of TModelEntity)))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TModelEntity, Apizr.ApizrException(Of TModelEntity)))
  name.vb: Task(Of Option(Of TModelEntity, ApizrException(Of TModelEntity)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Cruding.UpdateCommand`2
  commentId: T:Apizr.Mediation.Cruding.UpdateCommand`2
  name: UpdateCommand<TKey, TRequestData>
  nameWithType: UpdateCommand<TKey, TRequestData>
  fullName: Apizr.Mediation.Cruding.UpdateCommand<TKey, TRequestData>
  nameWithType.vb: UpdateCommand(Of TKey, TRequestData)
  fullName.vb: Apizr.Mediation.Cruding.UpdateCommand(Of TKey, TRequestData)
  name.vb: UpdateCommand(Of TKey, TRequestData)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.UpdateCommand`2
    name: UpdateCommand
    nameWithType: UpdateCommand
    fullName: Apizr.Mediation.Cruding.UpdateCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.UpdateCommand`2
    name: UpdateCommand
    nameWithType: UpdateCommand
    fullName: Apizr.Mediation.Cruding.UpdateCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand*
  commentId: Overload:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand
  name: SendUpdateOptionalCommand
  nameWithType: IApizrCrudOptionalMediator.SendUpdateOptionalCommand
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand
- uid: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<Unit, ApizrException>>
  nameWithType: Task<Option<Unit, ApizrException>>
  fullName: System.Threading.Tasks.Task<Optional.Option<MediatR.Unit, Apizr.ApizrException>>
  nameWithType.vb: Task(Of Option(Of Unit, ApizrException))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of MediatR.Unit, Apizr.ApizrException))
  name.vb: Task(Of Option(Of Unit, ApizrException))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Cruding.DeleteCommand`2
  commentId: T:Apizr.Mediation.Cruding.DeleteCommand`2
  name: DeleteCommand<T, TKey>
  nameWithType: DeleteCommand<T, TKey>
  fullName: Apizr.Mediation.Cruding.DeleteCommand<T, TKey>
  nameWithType.vb: DeleteCommand(Of T, TKey)
  fullName.vb: Apizr.Mediation.Cruding.DeleteCommand(Of T, TKey)
  name.vb: DeleteCommand(Of T, TKey)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.DeleteCommand`2
    name: DeleteCommand
    nameWithType: DeleteCommand
    fullName: Apizr.Mediation.Cruding.DeleteCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.DeleteCommand`2
    name: DeleteCommand
    nameWithType: DeleteCommand
    fullName: Apizr.Mediation.Cruding.DeleteCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand*
  commentId: Overload:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand
  name: SendDeleteOptionalCommand
  nameWithType: IApizrCrudOptionalMediator.SendDeleteOptionalCommand
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand
