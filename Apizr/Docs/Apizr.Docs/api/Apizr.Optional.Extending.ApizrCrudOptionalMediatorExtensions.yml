### YamlMime:ManagedReference
items:
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  commentId: T:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  id: ApizrCrudOptionalMediatorExtensions
  parent: Apizr.Optional.Extending
  children:
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,Polly.Context)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,System.Threading.CancellationToken)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,Polly.Context)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,System.Threading.CancellationToken)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Threading.CancellationToken)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,``0,Polly.Context)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,``0,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,``0,System.Threading.CancellationToken)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,``0,Polly.Context)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,``0,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,``0,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ApizrCrudOptionalMediatorExtensions
  nameWithType: ApizrCrudOptionalMediatorExtensions
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  type: Class
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: ApizrCrudOptionalMediatorExtensions
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 14
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  syntax:
    content: public static class ApizrCrudOptionalMediatorExtensions
    content.vb: Public Module ApizrCrudOptionalMediatorExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,Polly.Context)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,Polly.Context)
  id: SendCreateOptionalCommand``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,Polly.Context)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TApiEntity>(IApizrCrudOptionalMediator, TApiEntity, Context)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity>(IApizrCrudOptionalMediator, TApiEntity, Context)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntity, Polly.Context)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 27
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Optional.Cruding.CreateOptionalCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(this IApizrCrudOptionalMediator mediator, TApiEntity entity, Context context)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateOptionalCommand(Of TApiEntity)(mediator As IApizrCrudOptionalMediator, entity As TApiEntity, context As Context) As Task(Of  Option(Of TApiEntity, ApizrException)
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TApiEntity)(IApizrCrudOptionalMediator, TApiEntity, Context)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TApiEntity)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntity, Polly.Context)
  name.vb: SendCreateOptionalCommand(Of TApiEntity)(IApizrCrudOptionalMediator, TApiEntity, Context)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,System.Threading.CancellationToken)
  id: SendCreateOptionalCommand``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TApiEntity>(IApizrCrudOptionalMediator, TApiEntity, CancellationToken)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity>(IApizrCrudOptionalMediator, TApiEntity, CancellationToken)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntity, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 40
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Optional.Cruding.CreateOptionalCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(this IApizrCrudOptionalMediator mediator, TApiEntity entity, CancellationToken cancellationToken)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateOptionalCommand(Of TApiEntity)(mediator As IApizrCrudOptionalMediator, entity As TApiEntity, cancellationToken As CancellationToken) As Task(Of  Option(Of TApiEntity, ApizrException)
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TApiEntity)(IApizrCrudOptionalMediator, TApiEntity, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TApiEntity)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntity, System.Threading.CancellationToken)
  name.vb: SendCreateOptionalCommand(Of TApiEntity)(IApizrCrudOptionalMediator, TApiEntity, CancellationToken)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,Polly.Context,System.Threading.CancellationToken)
  id: SendCreateOptionalCommand``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,Polly.Context,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TApiEntity>(IApizrCrudOptionalMediator, TApiEntity, Context, CancellationToken)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity>(IApizrCrudOptionalMediator, TApiEntity, Context, CancellationToken)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntity, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 55
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Optional.Cruding.CreateOptionalCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(this IApizrCrudOptionalMediator mediator, TApiEntity entity, Context context, CancellationToken cancellationToken)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateOptionalCommand(Of TApiEntity)(mediator As IApizrCrudOptionalMediator, entity As TApiEntity, context As Context, cancellationToken As CancellationToken) As Task(Of  Option(Of TApiEntity, ApizrException)
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TApiEntity)(IApizrCrudOptionalMediator, TApiEntity, Context, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TApiEntity)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntity, Polly.Context, System.Threading.CancellationToken)
  name.vb: SendCreateOptionalCommand(Of TApiEntity)(IApizrCrudOptionalMediator, TApiEntity, Context, CancellationToken)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,Polly.Context)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,Polly.Context)
  id: SendCreateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,Polly.Context)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TModelEntity, TApiEntity>(IApizrCrudOptionalMediator, TModelEntity, Context)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity>(IApizrCrudOptionalMediator, TModelEntity, Context)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TModelEntity, Polly.Context)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 75
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(this IApizrCrudOptionalMediator mediator, TModelEntity entity, Context context)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(mediator As IApizrCrudOptionalMediator, entity As TModelEntity, context As Context) As Task(Of  Option(Of TModelEntity, ApizrException)
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(IApizrCrudOptionalMediator, TModelEntity, Context)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TModelEntity, Polly.Context)
  name.vb: SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(IApizrCrudOptionalMediator, TModelEntity, Context)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,System.Threading.CancellationToken)
  id: SendCreateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TModelEntity, TApiEntity>(IApizrCrudOptionalMediator, TModelEntity, CancellationToken)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity>(IApizrCrudOptionalMediator, TModelEntity, CancellationToken)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TModelEntity, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 89
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(this IApizrCrudOptionalMediator mediator, TModelEntity entity, CancellationToken cancellationToken)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(mediator As IApizrCrudOptionalMediator, entity As TModelEntity, cancellationToken As CancellationToken) As Task(Of  Option(Of TModelEntity, ApizrException)
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(IApizrCrudOptionalMediator, TModelEntity, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TModelEntity, System.Threading.CancellationToken)
  name.vb: SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(IApizrCrudOptionalMediator, TModelEntity, CancellationToken)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,Polly.Context,System.Threading.CancellationToken)
  id: SendCreateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,Polly.Context,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TModelEntity, TApiEntity>(IApizrCrudOptionalMediator, TModelEntity, Context, CancellationToken)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity>(IApizrCrudOptionalMediator, TModelEntity, Context, CancellationToken)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TModelEntity, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 105
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(this IApizrCrudOptionalMediator mediator, TModelEntity entity, Context context, CancellationToken cancellationToken)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(mediator As IApizrCrudOptionalMediator, entity As TModelEntity, context As Context, cancellationToken As CancellationToken) As Task(Of  Option(Of TModelEntity, ApizrException)
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(IApizrCrudOptionalMediator, TModelEntity, Context, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TModelEntity, Polly.Context, System.Threading.CancellationToken)
  name.vb: SendCreateOptionalCommand(Of TModelEntity, TApiEntity)(IApizrCrudOptionalMediator, TModelEntity, Context, CancellationToken)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Context, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 128
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(this IApizrCrudOptionalMediator mediator, Context context, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TReadAllResult)(mediator As IApizrCrudOptionalMediator, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult)(IApizrCrudOptionalMediator, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult)(IApizrCrudOptionalMediator, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 142
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(this IApizrCrudOptionalMediator mediator, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TReadAllResult)(mediator As IApizrCrudOptionalMediator, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult)(IApizrCrudOptionalMediator, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult)(IApizrCrudOptionalMediator, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,System.Boolean)
  id: SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Int32, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Int32, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 157
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(this IApizrCrudOptionalMediator mediator, int priority, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TReadAllResult)(mediator As IApizrCrudOptionalMediator, priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult)(IApizrCrudOptionalMediator, Int32, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Int32, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult)(IApizrCrudOptionalMediator, Int32, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Int32, Context, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Int32, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 173
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(this IApizrCrudOptionalMediator mediator, int priority, Context context, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TReadAllResult)(mediator As IApizrCrudOptionalMediator, priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult)(IApizrCrudOptionalMediator, Int32, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Int32, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult)(IApizrCrudOptionalMediator, Int32, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Int32, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 190
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(this IApizrCrudOptionalMediator mediator, int priority, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TReadAllResult)(mediator As IApizrCrudOptionalMediator, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult)(IApizrCrudOptionalMediator, Int32, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Int32, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult)(IApizrCrudOptionalMediator, Int32, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Context, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 207
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(this IApizrCrudOptionalMediator mediator, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TReadAllResult)(mediator As IApizrCrudOptionalMediator, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult)(IApizrCrudOptionalMediator, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult)(IApizrCrudOptionalMediator, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Int32, Context, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 224
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(this IApizrCrudOptionalMediator mediator, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TReadAllResult)(mediator As IApizrCrudOptionalMediator, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult)(IApizrCrudOptionalMediator, Int32, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult)(IApizrCrudOptionalMediator, Int32, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Boolean)
  id: SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 246
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudOptionalMediator mediator, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(mediator As IApizrCrudOptionalMediator, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudOptionalMediator, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudOptionalMediator, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Context, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 261
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudOptionalMediator mediator, Context context, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(mediator As IApizrCrudOptionalMediator, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudOptionalMediator, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudOptionalMediator, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 277
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudOptionalMediator mediator, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(mediator As IApizrCrudOptionalMediator, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudOptionalMediator, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudOptionalMediator, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,System.Boolean)
  id: SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Int32, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Int32, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 293
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudOptionalMediator mediator, int priority, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(mediator As IApizrCrudOptionalMediator, priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudOptionalMediator, Int32, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Int32, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudOptionalMediator, Int32, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Int32, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 310
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudOptionalMediator mediator, int priority, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(mediator As IApizrCrudOptionalMediator, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudOptionalMediator, Int32, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Int32, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudOptionalMediator, Int32, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Int32, Context, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Int32, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 328
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudOptionalMediator mediator, int priority, Context context, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(mediator As IApizrCrudOptionalMediator, priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudOptionalMediator, Int32, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Int32, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudOptionalMediator, Int32, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Context, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 346
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudOptionalMediator mediator, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(mediator As IApizrCrudOptionalMediator, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudOptionalMediator, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudOptionalMediator, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Int32, Context, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 366
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudOptionalMediator mediator, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(mediator As IApizrCrudOptionalMediator, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudOptionalMediator, Int32, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult)(IApizrCrudOptionalMediator, Int32, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Boolean)
  id: SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 389
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator, readAllParams As TReadAllParams, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Context, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 406
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, Context context, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator, readAllParams As TReadAllParams, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 424
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator, readAllParams As TReadAllParams, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,System.Boolean)
  id: SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 443
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, int priority, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator, readAllParams As TReadAllParams, priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Int32, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Int32, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Int32, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 463
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, int priority, Context context, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator, readAllParams As TReadAllParams, priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Int32, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 484
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator, readAllParams As TReadAllParams, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Int32, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Int32, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Context, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 506
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator, readAllParams As TReadAllParams, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 528
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TReadAllResult
      description: The api result type
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator, readAllParams As TReadAllParams, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Boolean)
  id: SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 554
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator, readAllParams As TReadAllParams, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Context, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 572
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, Context context, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator, readAllParams As TReadAllParams, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 592
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator, readAllParams As TReadAllParams, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,System.Boolean)
  id: SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 612
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, int priority, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator, readAllParams As TReadAllParams, priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Int32, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Int32, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Int32, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 633
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, int priority, Context context, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator, readAllParams As TReadAllParams, priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Int32, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 655
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator, readAllParams As TReadAllParams, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Int32, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Int32, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Context, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 678
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator, readAllParams As TReadAllParams, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 701
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiReadAllResult
      description: The api result type to map from
    - id: TReadAllParams
      description: The ReadAll parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator, readAllParams As TReadAllParams, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Boolean)
  id: SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 730
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Boolean)
  id: SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 747
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, Context context, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, Polly.Context, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 764
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,System.Boolean)
  id: SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 783
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, int priority, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Int32, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 803
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,Polly.Context,System.Boolean)
  id: SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 823
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, int priority, Context context, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Int32, Polly.Context, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 843
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Int32, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Int32, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 866
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Boolean)
  id: SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 892
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,Polly.Context,System.Boolean)
  id: SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 909
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, Context context, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, Polly.Context, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 928
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,System.Boolean)
  id: SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 947
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, int priority, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Int32, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 967
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,Polly.Context,System.Boolean)
  id: SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 988
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, int priority, Context context, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Int32, Polly.Context, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 1009
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Int32, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Int32, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 1032
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,``0,Polly.Context)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,``0,Polly.Context)
  id: SendUpdateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,``0,Polly.Context)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, Context)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, Context)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, Polly.Context)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 1061
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, TApiEntity entity, Context context)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, entity As TApiEntity, context As Context) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, Context)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, Polly.Context)
  name.vb: SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, Context)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,``0,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,``0,System.Threading.CancellationToken)
  id: SendUpdateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,``0,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, CancellationToken)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, CancellationToken)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 1077
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, TApiEntity entity, CancellationToken cancellationToken)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, entity As TApiEntity, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, System.Threading.CancellationToken)
  name.vb: SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, CancellationToken)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,``0,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,``0,Polly.Context,System.Threading.CancellationToken)
  id: SendUpdateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,``0,Polly.Context,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, Context, CancellationToken)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, Context, CancellationToken)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 1095
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, TApiEntity entity, Context context, CancellationToken cancellationToken)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, entity As TApiEntity, context As Context, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, Context, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, Polly.Context, System.Threading.CancellationToken)
  name.vb: SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, Context, CancellationToken)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,``0,Polly.Context)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,``0,Polly.Context)
  id: SendUpdateOptionalCommand``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,``0,Polly.Context)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, Context)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, Context)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, Polly.Context)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 1118
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, TModelEntity entity, Context context)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, entity As TModelEntity, context As Context) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, Context)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, Polly.Context)
  name.vb: SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, Context)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,``0,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,``0,System.Threading.CancellationToken)
  id: SendUpdateOptionalCommand``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,``0,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, CancellationToken)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, CancellationToken)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 1136
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, TModelEntity entity, CancellationToken cancellationToken)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, entity As TModelEntity, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, System.Threading.CancellationToken)
  name.vb: SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, CancellationToken)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,``0,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,``0,Polly.Context,System.Threading.CancellationToken)
  id: SendUpdateOptionalCommand``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,``0,Polly.Context,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, Context, CancellationToken)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, Context, CancellationToken)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 1155
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, TModelEntity entity, Context context, CancellationToken cancellationToken)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type to map to
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, entity As TModelEntity, context As Context, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, Context, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, Polly.Context, System.Threading.CancellationToken)
  name.vb: SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, Context, CancellationToken)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context)
  id: SendDeleteOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, Polly.Context)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendDeleteOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 1179
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, Context context)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, context As Context) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Context)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, Polly.Context)
  name.vb: SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Context)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Threading.CancellationToken)
  id: SendDeleteOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, CancellationToken)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, CancellationToken)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendDeleteOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 1194
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, CancellationToken cancellationToken)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, System.Threading.CancellationToken)
  name.vb: SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, CancellationToken)
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Threading.CancellationToken)
  id: SendDeleteOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, CancellationToken)
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, CancellationToken)
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
      branch: master
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendDeleteOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrCrudOptionalMediatorExtensions.cs
    startLine: 1211
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken)
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The entity&apos;s crud key type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(mediator As IApizrCrudOptionalMediator, key As TApiEntityKey, context As Context, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Context, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator, TApiEntityKey, Polly.Context, System.Threading.CancellationToken)
  name.vb: SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey)(IApizrCrudOptionalMediator, TApiEntityKey, Context, CancellationToken)
references:
- uid: Apizr.Optional.Extending
  commentId: N:Apizr.Optional.Extending
  name: Apizr.Optional.Extending
  nameWithType: Apizr.Optional.Extending
  fullName: Apizr.Optional.Extending
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Apizr.Optional.Cruding.CreateOptionalCommand`1
  commentId: T:Apizr.Optional.Cruding.CreateOptionalCommand`1
  name: CreateOptionalCommand<TModelData>
  nameWithType: CreateOptionalCommand<TModelData>
  fullName: Apizr.Optional.Cruding.CreateOptionalCommand<TModelData>
  nameWithType.vb: CreateOptionalCommand(Of TModelData)
  fullName.vb: Apizr.Optional.Cruding.CreateOptionalCommand(Of TModelData)
  name.vb: CreateOptionalCommand(Of TModelData)
  spec.csharp:
  - uid: Apizr.Optional.Cruding.CreateOptionalCommand`1
    name: CreateOptionalCommand
    nameWithType: CreateOptionalCommand
    fullName: Apizr.Optional.Cruding.CreateOptionalCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Optional.Cruding.CreateOptionalCommand`1
    name: CreateOptionalCommand
    nameWithType: CreateOptionalCommand
    fullName: Apizr.Optional.Cruding.CreateOptionalCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand*
  commentId: Overload:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand
  name: SendCreateOptionalCommand
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  commentId: T:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  parent: Apizr.Optional.Cruding.Sending
  name: IApizrCrudOptionalMediator
  nameWithType: IApizrCrudOptionalMediator
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
- uid: '{TApiEntity}'
  commentId: '!:TApiEntity'
  definition: TApiEntity
  name: TApiEntity
  nameWithType: TApiEntity
  fullName: TApiEntity
- uid: Polly.Context
  commentId: T:Polly.Context
  parent: Polly
  isExternal: true
  name: Context
  nameWithType: Context
  fullName: Polly.Context
- uid: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TApiEntity, ApizrException>>
  nameWithType: Task<Option<TApiEntity, ApizrException>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TApiEntity, Apizr.ApizrException>>
  nameWithType.vb: Task(Of Option(Of TApiEntity, ApizrException))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TApiEntity, Apizr.ApizrException))
  name.vb: Task(Of Option(Of TApiEntity, ApizrException))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Cruding.Sending
  commentId: N:Apizr.Optional.Cruding.Sending
  name: Apizr.Optional.Cruding.Sending
  nameWithType: Apizr.Optional.Cruding.Sending
  fullName: Apizr.Optional.Cruding.Sending
- uid: TApiEntity
  name: TApiEntity
  nameWithType: TApiEntity
  fullName: TApiEntity
- uid: Polly
  commentId: N:Polly
  isExternal: true
  name: Polly
  nameWithType: Polly
  fullName: Polly
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Apizr.Mediation.Cruding.CreateCommand`1
  commentId: T:Apizr.Mediation.Cruding.CreateCommand`1
  name: CreateCommand<TModelData>
  nameWithType: CreateCommand<TModelData>
  fullName: Apizr.Mediation.Cruding.CreateCommand<TModelData>
  nameWithType.vb: CreateCommand(Of TModelData)
  fullName.vb: Apizr.Mediation.Cruding.CreateCommand(Of TModelData)
  name.vb: CreateCommand(Of TModelData)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.CreateCommand`1
    name: CreateCommand
    nameWithType: CreateCommand
    fullName: Apizr.Mediation.Cruding.CreateCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.CreateCommand`1
    name: CreateCommand
    nameWithType: CreateCommand
    fullName: Apizr.Mediation.Cruding.CreateCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TModelEntity}'
  commentId: '!:TModelEntity'
  definition: TModelEntity
  name: TModelEntity
  nameWithType: TModelEntity
  fullName: TModelEntity
- uid: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{`0,Apizr.ApizrException}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TModelEntity, ApizrException>>
  nameWithType: Task<Option<TModelEntity, ApizrException>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TModelEntity, Apizr.ApizrException>>
  nameWithType.vb: Task(Of Option(Of TModelEntity, ApizrException))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TModelEntity, Apizr.ApizrException))
  name.vb: Task(Of Option(Of TModelEntity, ApizrException))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TModelEntity
  name: TModelEntity
  nameWithType: TModelEntity
  fullName: TModelEntity
- uid: Apizr.Mediation.Cruding.ReadAllQuery`1
  commentId: T:Apizr.Mediation.Cruding.ReadAllQuery`1
  name: ReadAllQuery<TReadAllResult>
  nameWithType: ReadAllQuery<TReadAllResult>
  fullName: Apizr.Mediation.Cruding.ReadAllQuery<TReadAllResult>
  nameWithType.vb: ReadAllQuery(Of TReadAllResult)
  fullName.vb: Apizr.Mediation.Cruding.ReadAllQuery(Of TReadAllResult)
  name.vb: ReadAllQuery(Of TReadAllResult)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.ReadAllQuery`1
    name: ReadAllQuery
    nameWithType: ReadAllQuery
    fullName: Apizr.Mediation.Cruding.ReadAllQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.ReadAllQuery`1
    name: ReadAllQuery
    nameWithType: ReadAllQuery
    fullName: Apizr.Mediation.Cruding.ReadAllQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  commentId: Overload:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery
  name: SendReadAllOptionalQuery
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>>
  nameWithType: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TReadAllResult, Apizr.ApizrException<TReadAllResult>>>
  nameWithType.vb: Task(Of Option(Of TReadAllResult, ApizrException(Of TReadAllResult)))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TReadAllResult, Apizr.ApizrException(Of TReadAllResult)))
  name.vb: Task(Of Option(Of TReadAllResult, ApizrException(Of TReadAllResult)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: <
    nameWithType: <
    fullName: <
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>>
  nameWithType: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TModelReadAllResult, Apizr.ApizrException<TModelReadAllResult>>>
  nameWithType.vb: Task(Of Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult)))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TModelReadAllResult, Apizr.ApizrException(Of TModelReadAllResult)))
  name.vb: Task(Of Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelReadAllResult
    nameWithType: TModelReadAllResult
    fullName: TModelReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelReadAllResult
    nameWithType: TModelReadAllResult
    fullName: TModelReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelReadAllResult
    nameWithType: TModelReadAllResult
    fullName: TModelReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelReadAllResult
    nameWithType: TModelReadAllResult
    fullName: TModelReadAllResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TReadAllParams}'
  commentId: '!:TReadAllParams'
  definition: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: Apizr.Mediation.Cruding.ReadQuery`2
  commentId: T:Apizr.Mediation.Cruding.ReadQuery`2
  name: ReadQuery<TResultData, TKey>
  nameWithType: ReadQuery<TResultData, TKey>
  fullName: Apizr.Mediation.Cruding.ReadQuery<TResultData, TKey>
  nameWithType.vb: ReadQuery(Of TResultData, TKey)
  fullName.vb: Apizr.Mediation.Cruding.ReadQuery(Of TResultData, TKey)
  name.vb: ReadQuery(Of TResultData, TKey)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.ReadQuery`2
    name: ReadQuery
    nameWithType: ReadQuery
    fullName: Apizr.Mediation.Cruding.ReadQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.ReadQuery`2
    name: ReadQuery
    nameWithType: ReadQuery
    fullName: Apizr.Mediation.Cruding.ReadQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  commentId: Overload:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery
  name: SendReadOptionalQuery
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery
- uid: '{TApiEntityKey}'
  commentId: '!:TApiEntityKey'
  definition: TApiEntityKey
  name: TApiEntityKey
  nameWithType: TApiEntityKey
  fullName: TApiEntityKey
- uid: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TApiEntity, ApizrException<TApiEntity>>>
  nameWithType: Task<Option<TApiEntity, ApizrException<TApiEntity>>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TApiEntity, Apizr.ApizrException<TApiEntity>>>
  nameWithType.vb: Task(Of Option(Of TApiEntity, ApizrException(Of TApiEntity)))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TApiEntity, Apizr.ApizrException(Of TApiEntity)))
  name.vb: Task(Of Option(Of TApiEntity, ApizrException(Of TApiEntity)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TApiEntityKey
  name: TApiEntityKey
  nameWithType: TApiEntityKey
  fullName: TApiEntityKey
- uid: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{`0,Apizr.ApizrException{`0}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TModelEntity, ApizrException<TModelEntity>>>
  nameWithType: Task<Option<TModelEntity, ApizrException<TModelEntity>>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TModelEntity, Apizr.ApizrException<TModelEntity>>>
  nameWithType.vb: Task(Of Option(Of TModelEntity, ApizrException(Of TModelEntity)))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TModelEntity, Apizr.ApizrException(Of TModelEntity)))
  name.vb: Task(Of Option(Of TModelEntity, ApizrException(Of TModelEntity)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Cruding.UpdateCommand`2
  commentId: T:Apizr.Mediation.Cruding.UpdateCommand`2
  name: UpdateCommand<TKey, TRequestData>
  nameWithType: UpdateCommand<TKey, TRequestData>
  fullName: Apizr.Mediation.Cruding.UpdateCommand<TKey, TRequestData>
  nameWithType.vb: UpdateCommand(Of TKey, TRequestData)
  fullName.vb: Apizr.Mediation.Cruding.UpdateCommand(Of TKey, TRequestData)
  name.vb: UpdateCommand(Of TKey, TRequestData)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.UpdateCommand`2
    name: UpdateCommand
    nameWithType: UpdateCommand
    fullName: Apizr.Mediation.Cruding.UpdateCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.UpdateCommand`2
    name: UpdateCommand
    nameWithType: UpdateCommand
    fullName: Apizr.Mediation.Cruding.UpdateCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand*
  commentId: Overload:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand
  name: SendUpdateOptionalCommand
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand
- uid: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<Unit, ApizrException>>
  nameWithType: Task<Option<Unit, ApizrException>>
  fullName: System.Threading.Tasks.Task<Optional.Option<MediatR.Unit, Apizr.ApizrException>>
  nameWithType.vb: Task(Of Option(Of Unit, ApizrException))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of MediatR.Unit, Apizr.ApizrException))
  name.vb: Task(Of Option(Of Unit, ApizrException))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Cruding.DeleteCommand`2
  commentId: T:Apizr.Mediation.Cruding.DeleteCommand`2
  name: DeleteCommand<T, TKey>
  nameWithType: DeleteCommand<T, TKey>
  fullName: Apizr.Mediation.Cruding.DeleteCommand<T, TKey>
  nameWithType.vb: DeleteCommand(Of T, TKey)
  fullName.vb: Apizr.Mediation.Cruding.DeleteCommand(Of T, TKey)
  name.vb: DeleteCommand(Of T, TKey)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.DeleteCommand`2
    name: DeleteCommand
    nameWithType: DeleteCommand
    fullName: Apizr.Mediation.Cruding.DeleteCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.DeleteCommand`2
    name: DeleteCommand
    nameWithType: DeleteCommand
    fullName: Apizr.Mediation.Cruding.DeleteCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand*
  commentId: Overload:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand
  name: SendDeleteOptionalCommand
  nameWithType: ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand
  fullName: Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand
