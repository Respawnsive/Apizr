### YamlMime:ManagedReference
items:
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  commentId: T:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  id: ApizrTypedCrudOptionalMediatorExtensions
  parent: Apizr.Optional.Extending
  children:
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``0,Polly.Context)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``0,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``0,System.Threading.CancellationToken)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``0,Polly.Context)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``0,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``0,System.Threading.CancellationToken)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,Polly.Context)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Threading.CancellationToken)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Int32,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Int32,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Int32,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Int32,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Int32,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Int32,Polly.Context,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Int32,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Int32,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,``0,Polly.Context)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,``0,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,``0,System.Threading.CancellationToken)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,``0,Polly.Context)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,``0,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,``0,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ApizrTypedCrudOptionalMediatorExtensions
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  type: Class
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ApizrTypedCrudOptionalMediatorExtensions
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 14
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  syntax:
    content: public static class ApizrTypedCrudOptionalMediatorExtensions
    content.vb: Public Module ApizrTypedCrudOptionalMediatorExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``0,Polly.Context)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``0,Polly.Context)
  id: SendCreateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``0,Polly.Context)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Context)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Context)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Polly.Context)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 30
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Optional.Cruding.CreateOptionalCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntity entity, Context context)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateOptionalCommand(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), entity As TApiEntity, context As Context) As Task(Of  Option(Of TApiEntity, ApizrException)
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntity, Context)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntity, Polly.Context)
  name.vb: SendCreateOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntity, Context)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``0,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``0,System.Threading.CancellationToken)
  id: SendCreateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``0,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, CancellationToken)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, CancellationToken)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 48
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Optional.Cruding.CreateOptionalCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntity entity, CancellationToken cancellationToken)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateOptionalCommand(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), entity As TApiEntity, cancellationToken As CancellationToken) As Task(Of  Option(Of TApiEntity, ApizrException)
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntity, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntity, System.Threading.CancellationToken)
  name.vb: SendCreateOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntity, CancellationToken)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``0,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``0,Polly.Context,System.Threading.CancellationToken)
  id: SendCreateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``0,Polly.Context,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Context, CancellationToken)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Context, CancellationToken)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 68
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Optional.Cruding.CreateOptionalCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntity entity, Context context, CancellationToken cancellationToken)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: entity
      type: '{TApiEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateOptionalCommand(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), entity As TApiEntity, context As Context, cancellationToken As CancellationToken) As Task(Of  Option(Of TApiEntity, ApizrException)
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntity, Context, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntity, Polly.Context, System.Threading.CancellationToken)
  name.vb: SendCreateOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntity, Context, CancellationToken)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``0,Polly.Context)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``0,Polly.Context)
  id: SendCreateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``0,Polly.Context)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Context)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Context)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Polly.Context)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 93
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TModelEntity entity, Context context)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateOptionalCommand(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), entity As TModelEntity, context As Context) As Task(Of  Option(Of TModelEntity, ApizrException)
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TModelEntity, Context)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TModelEntity, Polly.Context)
  name.vb: SendCreateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TModelEntity, Context)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``0,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``0,System.Threading.CancellationToken)
  id: SendCreateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``0,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, CancellationToken)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, CancellationToken)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 112
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TModelEntity entity, CancellationToken cancellationToken)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateOptionalCommand(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), entity As TModelEntity, cancellationToken As CancellationToken) As Task(Of  Option(Of TModelEntity, ApizrException)
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TModelEntity, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TModelEntity, System.Threading.CancellationToken)
  name.vb: SendCreateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TModelEntity, CancellationToken)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``0,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``0,Polly.Context,System.Threading.CancellationToken)
  id: SendCreateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``0,Polly.Context,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Context, CancellationToken)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Context, CancellationToken)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendCreateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 133
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.CreateCommand%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TModelEntity entity, Context context, CancellationToken cancellationToken)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: entity
      type: '{TModelEntity}'
      description: The entity to create
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendCreateOptionalCommand(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), entity As TModelEntity, context As Context, cancellationToken As CancellationToken) As Task(Of  Option(Of TModelEntity, ApizrException)
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TModelEntity, Context, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TModelEntity, Polly.Context, System.Threading.CancellationToken)
  name.vb: SendCreateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TModelEntity, Context, CancellationToken)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 161
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, Context context, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 177
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
    - id: TApiEntityKey
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Int32,System.Boolean)
  id: SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 196
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Int32, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Int32,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Int32,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 217
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, Context context, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Int32, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Int32,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 237
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Int32, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 259
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, Context context, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 281
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Boolean)
  id: SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 308
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 327
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, Context context, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 347
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Int32,System.Boolean)
  id: SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 367
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Int32, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Int32,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 388
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Int32, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Int32,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Int32,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 410
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, Context context, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Int32, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 432
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, Context context, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 456
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), Int32, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Boolean)
  id: SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 482
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 502
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, Context context, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 523
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Int32,System.Boolean)
  id: SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 545
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Int32, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Int32,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Int32,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 568
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, Context context, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Int32, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Int32,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 592
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 617
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 642
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TReadAllResult, ApizrException(Of TReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Boolean)
  id: SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 671
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 692
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, Context context, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 715
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Int32,System.Boolean)
  id: SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 738
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Int32, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Int32,Polly.Context,System.Boolean)
  id: SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Int32,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 762
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, Context context, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Int32, Polly.Context, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Int32,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 787
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Int32, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 813
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadAllOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 839
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.ReadAllQuery%601\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: readAllParams
      type: '{TReadAllParams}'
      description: The read all filters
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelReadAllResult
      description: The model result type to map to
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), readAllParams As TReadAllParams, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadAllOptionalQuery(Of TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TReadAllParams, Int32, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Boolean)
  id: SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 871
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,Polly.Context,System.Boolean)
  id: SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 891
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Polly.Context, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 911
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Int32,System.Boolean)
  id: SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 933
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Int32, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 956
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Int32,Polly.Context,System.Boolean)
  id: SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Int32,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 979
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, Context context, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Int32, Polly.Context, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Int32,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 1002
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 1028
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TApiEntity, ApizrException(Of TApiEntity))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Boolean)
  id: SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 1057
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,Polly.Context,System.Boolean)
  id: SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 1078
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Polly.Context, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 1100
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Int32,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Int32,System.Boolean)
  id: SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 1123
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, priority As Integer, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Int32, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 1147
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Int32,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Int32,Polly.Context,System.Boolean)
  id: SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Int32,Polly.Context,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Int32, Polly.Context, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 1172
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, Context context, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, priority As Integer, context As Context, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Context, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Int32, Polly.Context, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Context, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Int32,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Int32,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Int32,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 1197
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, priority As Integer, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Int32, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendReadOptionalQuery
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 1224
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.ReadQuery%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR with priority and returning a mapped optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: priority
      type: System.Int32
      description: The execution priority
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendReadOptionalQuery(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, priority As Integer, context As Context, cancellationToken As CancellationToken, clearCache As Boolean = False) As Task(Of  Option(Of TModelEntity, ApizrException(Of TModelEntity))
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Int32, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendReadOptionalQuery(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Int32, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,``0,Polly.Context)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,``0,Polly.Context)
  id: SendUpdateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,``0,Polly.Context)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Context)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Context)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Polly.Context)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 1257
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TApiEntity entity, Context context)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateOptionalCommand(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, entity As TApiEntity, context As Context) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TApiEntity, Context)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TApiEntity, Polly.Context)
  name.vb: SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TApiEntity, Context)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,``0,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,``0,System.Threading.CancellationToken)
  id: SendUpdateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,``0,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, CancellationToken)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, CancellationToken)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 1277
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TApiEntity entity, CancellationToken cancellationToken)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateOptionalCommand(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, entity As TApiEntity, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TApiEntity, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TApiEntity, System.Threading.CancellationToken)
  name.vb: SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TApiEntity, CancellationToken)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,``0,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,``0,Polly.Context,System.Threading.CancellationToken)
  id: SendUpdateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,``0,Polly.Context,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Context, CancellationToken)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Context, CancellationToken)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 1299
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TApiEntity entity, Context context, CancellationToken cancellationToken)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TApiEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateOptionalCommand(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, entity As TApiEntity, context As Context, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TApiEntity, Context, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TApiEntity, Polly.Context, System.Threading.CancellationToken)
  name.vb: SendUpdateOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TApiEntity, Context, CancellationToken)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,``0,Polly.Context)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,``0,Polly.Context)
  id: SendUpdateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,``0,Polly.Context)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Context)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Context)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Polly.Context)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 1326
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TModelEntity entity, Context context)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateOptionalCommand(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, entity As TModelEntity, context As Context) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TModelEntity, Context)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TModelEntity, Polly.Context)
  name.vb: SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TModelEntity, Context)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,``0,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,``0,System.Threading.CancellationToken)
  id: SendUpdateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,``0,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, CancellationToken)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, CancellationToken)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 1348
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TModelEntity entity, CancellationToken cancellationToken)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateOptionalCommand(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, entity As TModelEntity, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TModelEntity, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TModelEntity, System.Threading.CancellationToken)
  name.vb: SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TModelEntity, CancellationToken)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,``0,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,``0,Polly.Context,System.Threading.CancellationToken)
  id: SendUpdateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,``0,Polly.Context,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Context, CancellationToken)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Context, CancellationToken)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendUpdateOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 1371
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a mapped <xref href=\"Apizr.Mediation.Cruding.UpdateCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TModelEntity entity, Context context, CancellationToken cancellationToken)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: entity
      type: '{TModelEntity}'
      description: The entity to update
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TModelEntity
      description: The model entity type to map from
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendUpdateOptionalCommand(Of TModelEntity, TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, entity As TModelEntity, context As Context, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TModelEntity, Context, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TModelEntity, Polly.Context, System.Threading.CancellationToken)
  name.vb: SendUpdateOptionalCommand(Of TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, TModelEntity, Context, CancellationToken)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,Polly.Context)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,Polly.Context)
  id: SendDeleteOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,Polly.Context)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Polly.Context)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendDeleteOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 1399
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendDeleteOptionalCommand(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, context As Context) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Polly.Context)
  name.vb: SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Threading.CancellationToken)
  id: SendDeleteOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendDeleteOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 1418
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, CancellationToken cancellationToken)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendDeleteOptionalCommand(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, System.Threading.CancellationToken)
  name.vb: SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, CancellationToken)
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,Polly.Context,System.Threading.CancellationToken)
  id: SendDeleteOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,Polly.Context,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions
  langs:
  - csharp
  - vb
  name: SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken)
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken)
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: SendDeleteOptionalCommand
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/ApizrTypedCrudOptionalMediatorExtensions.cs
    startLine: 1439
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: "\nSend a <xref href=\"Apizr.Mediation.Cruding.DeleteCommand%602\" data-throw-if-not-resolved=\"false\"></xref> to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use the one with the request options builder parameter instead")]

      public static Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken)
          where TApiEntity : class
    parameters:
    - id: mediator
      type: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
    - id: key
      type: '{TApiEntityKey}'
      description: The entity key
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TApiEntity
      description: The api entity type
    - id: TApiEntityKey
      description: The api entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: >-
      <Obsolete("Use the one with the request options builder parameter instead")>

      <ExtensionAttribute>

      Public Shared Function SendDeleteOptionalCommand(Of TApiEntity As Class, TApiEntityKey, TReadAllResult, TReadAllParams)(mediator As IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), key As TApiEntityKey, context As Context, cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options builder parameter instead
  nameWithType.vb: ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Polly.Context, System.Threading.CancellationToken)
  name.vb: SendDeleteOptionalCommand(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)(IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams), TApiEntityKey, Context, CancellationToken)
references:
- uid: Apizr.Optional.Extending
  commentId: N:Apizr.Optional.Extending
  name: Apizr.Optional.Extending
  nameWithType: Apizr.Optional.Extending
  fullName: Apizr.Optional.Extending
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Apizr.Optional.Cruding.CreateOptionalCommand`1
  commentId: T:Apizr.Optional.Cruding.CreateOptionalCommand`1
  name: CreateOptionalCommand<TModelData>
  nameWithType: CreateOptionalCommand<TModelData>
  fullName: Apizr.Optional.Cruding.CreateOptionalCommand<TModelData>
  nameWithType.vb: CreateOptionalCommand(Of TModelData)
  fullName.vb: Apizr.Optional.Cruding.CreateOptionalCommand(Of TModelData)
  name.vb: CreateOptionalCommand(Of TModelData)
  spec.csharp:
  - uid: Apizr.Optional.Cruding.CreateOptionalCommand`1
    name: CreateOptionalCommand
    nameWithType: CreateOptionalCommand
    fullName: Apizr.Optional.Cruding.CreateOptionalCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Optional.Cruding.CreateOptionalCommand`1
    name: CreateOptionalCommand
    nameWithType: CreateOptionalCommand
    fullName: Apizr.Optional.Cruding.CreateOptionalCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand*
  commentId: Overload:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand
  name: SendCreateOptionalCommand
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{{TApiEntity},{TApiEntityKey},{TReadAllResult},{TReadAllParams}}
  commentId: T:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{`0,`1,`2,`3}
  parent: Apizr.Optional.Cruding.Sending
  definition: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  name: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)
  name.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)
  spec.csharp:
  - uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
    name: IApizrCrudOptionalMediator
    nameWithType: IApizrCrudOptionalMediator
    fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiEntityKey
    nameWithType: TApiEntityKey
    fullName: TApiEntityKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllParams
    nameWithType: TReadAllParams
    fullName: TReadAllParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
    name: IApizrCrudOptionalMediator
    nameWithType: IApizrCrudOptionalMediator
    fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiEntityKey
    nameWithType: TApiEntityKey
    fullName: TApiEntityKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllParams
    nameWithType: TReadAllParams
    fullName: TReadAllParams
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TApiEntity}'
  commentId: '!:TApiEntity'
  definition: TApiEntity
  name: TApiEntity
  nameWithType: TApiEntity
  fullName: TApiEntity
- uid: Polly.Context
  commentId: T:Polly.Context
  parent: Polly
  isExternal: true
  name: Context
  nameWithType: Context
  fullName: Polly.Context
- uid: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TApiEntity, ApizrException>>
  nameWithType: Task<Option<TApiEntity, ApizrException>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TApiEntity, Apizr.ApizrException>>
  nameWithType.vb: Task(Of Option(Of TApiEntity, ApizrException))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TApiEntity, Apizr.ApizrException))
  name.vb: Task(Of Option(Of TApiEntity, ApizrException))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  commentId: T:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
  name: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>
  nameWithType: IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>
  fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>
  nameWithType.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)
  fullName.vb: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)
  name.vb: IApizrCrudOptionalMediator(Of TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams)
  spec.csharp:
  - uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
    name: IApizrCrudOptionalMediator
    nameWithType: IApizrCrudOptionalMediator
    fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiEntityKey
    nameWithType: TApiEntityKey
    fullName: TApiEntityKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllParams
    nameWithType: TReadAllParams
    fullName: TReadAllParams
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4
    name: IApizrCrudOptionalMediator
    nameWithType: IApizrCrudOptionalMediator
    fullName: Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiEntityKey
    nameWithType: TApiEntityKey
    fullName: TApiEntityKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TReadAllParams
    nameWithType: TReadAllParams
    fullName: TReadAllParams
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Cruding.Sending
  commentId: N:Apizr.Optional.Cruding.Sending
  name: Apizr.Optional.Cruding.Sending
  nameWithType: Apizr.Optional.Cruding.Sending
  fullName: Apizr.Optional.Cruding.Sending
- uid: TApiEntity
  name: TApiEntity
  nameWithType: TApiEntity
  fullName: TApiEntity
- uid: Polly
  commentId: N:Polly
  isExternal: true
  name: Polly
  nameWithType: Polly
  fullName: Polly
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Apizr.Mediation.Cruding.CreateCommand`1
  commentId: T:Apizr.Mediation.Cruding.CreateCommand`1
  name: CreateCommand<TModelData>
  nameWithType: CreateCommand<TModelData>
  fullName: Apizr.Mediation.Cruding.CreateCommand<TModelData>
  nameWithType.vb: CreateCommand(Of TModelData)
  fullName.vb: Apizr.Mediation.Cruding.CreateCommand(Of TModelData)
  name.vb: CreateCommand(Of TModelData)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.CreateCommand`1
    name: CreateCommand
    nameWithType: CreateCommand
    fullName: Apizr.Mediation.Cruding.CreateCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.CreateCommand`1
    name: CreateCommand
    nameWithType: CreateCommand
    fullName: Apizr.Mediation.Cruding.CreateCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TModelEntity}'
  commentId: '!:TModelEntity'
  definition: TModelEntity
  name: TModelEntity
  nameWithType: TModelEntity
  fullName: TModelEntity
- uid: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{`0,Apizr.ApizrException}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TModelEntity, ApizrException>>
  nameWithType: Task<Option<TModelEntity, ApizrException>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TModelEntity, Apizr.ApizrException>>
  nameWithType.vb: Task(Of Option(Of TModelEntity, ApizrException))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TModelEntity, Apizr.ApizrException))
  name.vb: Task(Of Option(Of TModelEntity, ApizrException))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TModelEntity
  name: TModelEntity
  nameWithType: TModelEntity
  fullName: TModelEntity
- uid: Apizr.Mediation.Cruding.ReadAllQuery`1
  commentId: T:Apizr.Mediation.Cruding.ReadAllQuery`1
  name: ReadAllQuery<TReadAllResult>
  nameWithType: ReadAllQuery<TReadAllResult>
  fullName: Apizr.Mediation.Cruding.ReadAllQuery<TReadAllResult>
  nameWithType.vb: ReadAllQuery(Of TReadAllResult)
  fullName.vb: Apizr.Mediation.Cruding.ReadAllQuery(Of TReadAllResult)
  name.vb: ReadAllQuery(Of TReadAllResult)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.ReadAllQuery`1
    name: ReadAllQuery
    nameWithType: ReadAllQuery
    fullName: Apizr.Mediation.Cruding.ReadAllQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.ReadAllQuery`1
    name: ReadAllQuery
    nameWithType: ReadAllQuery
    fullName: Apizr.Mediation.Cruding.ReadAllQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery*
  commentId: Overload:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery
  name: SendReadAllOptionalQuery
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{Optional.Option{{TReadAllResult},Apizr.ApizrException{{TReadAllResult}}}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>>
  nameWithType: Task<Option<TReadAllResult, ApizrException<TReadAllResult>>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TReadAllResult, Apizr.ApizrException<TReadAllResult>>>
  nameWithType.vb: Task(Of Option(Of TReadAllResult, ApizrException(Of TReadAllResult)))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TReadAllResult, Apizr.ApizrException(Of TReadAllResult)))
  name.vb: Task(Of Option(Of TReadAllResult, ApizrException(Of TReadAllResult)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: <
    nameWithType: <
    fullName: <
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{Optional.Option{{TModelReadAllResult},Apizr.ApizrException{{TModelReadAllResult}}}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>>
  nameWithType: Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TModelReadAllResult, Apizr.ApizrException<TModelReadAllResult>>>
  nameWithType.vb: Task(Of Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult)))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TModelReadAllResult, Apizr.ApizrException(Of TModelReadAllResult)))
  name.vb: Task(Of Option(Of TModelReadAllResult, ApizrException(Of TModelReadAllResult)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelReadAllResult
    nameWithType: TModelReadAllResult
    fullName: TModelReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelReadAllResult
    nameWithType: TModelReadAllResult
    fullName: TModelReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelReadAllResult
    nameWithType: TModelReadAllResult
    fullName: TModelReadAllResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelReadAllResult
    nameWithType: TModelReadAllResult
    fullName: TModelReadAllResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TReadAllParams}'
  commentId: '!:TReadAllParams'
  definition: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: Apizr.Mediation.Cruding.ReadQuery`2
  commentId: T:Apizr.Mediation.Cruding.ReadQuery`2
  name: ReadQuery<TResultData, TKey>
  nameWithType: ReadQuery<TResultData, TKey>
  fullName: Apizr.Mediation.Cruding.ReadQuery<TResultData, TKey>
  nameWithType.vb: ReadQuery(Of TResultData, TKey)
  fullName.vb: Apizr.Mediation.Cruding.ReadQuery(Of TResultData, TKey)
  name.vb: ReadQuery(Of TResultData, TKey)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.ReadQuery`2
    name: ReadQuery
    nameWithType: ReadQuery
    fullName: Apizr.Mediation.Cruding.ReadQuery
  - name: <
    nameWithType: <
    fullName: <
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.ReadQuery`2
    name: ReadQuery
    nameWithType: ReadQuery
    fullName: Apizr.Mediation.Cruding.ReadQuery
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResultData
    nameWithType: TResultData
    fullName: TResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery*
  commentId: Overload:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery
  name: SendReadOptionalQuery
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery
- uid: '{TApiEntityKey}'
  commentId: '!:TApiEntityKey'
  definition: TApiEntityKey
  name: TApiEntityKey
  nameWithType: TApiEntityKey
  fullName: TApiEntityKey
- uid: System.Threading.Tasks.Task{Optional.Option{{TApiEntity},Apizr.ApizrException{{TApiEntity}}}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TApiEntity, ApizrException<TApiEntity>>>
  nameWithType: Task<Option<TApiEntity, ApizrException<TApiEntity>>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TApiEntity, Apizr.ApizrException<TApiEntity>>>
  nameWithType.vb: Task(Of Option(Of TApiEntity, ApizrException(Of TApiEntity)))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TApiEntity, Apizr.ApizrException(Of TApiEntity)))
  name.vb: Task(Of Option(Of TApiEntity, ApizrException(Of TApiEntity)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiEntity
    nameWithType: TApiEntity
    fullName: TApiEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TApiEntityKey
  name: TApiEntityKey
  nameWithType: TApiEntityKey
  fullName: TApiEntityKey
- uid: System.Threading.Tasks.Task{Optional.Option{{TModelEntity},Apizr.ApizrException{{TModelEntity}}}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{`0,Apizr.ApizrException{`0}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TModelEntity, ApizrException<TModelEntity>>>
  nameWithType: Task<Option<TModelEntity, ApizrException<TModelEntity>>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TModelEntity, Apizr.ApizrException<TModelEntity>>>
  nameWithType.vb: Task(Of Option(Of TModelEntity, ApizrException(Of TModelEntity)))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TModelEntity, Apizr.ApizrException(Of TModelEntity)))
  name.vb: Task(Of Option(Of TModelEntity, ApizrException(Of TModelEntity)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelEntity
    nameWithType: TModelEntity
    fullName: TModelEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Cruding.UpdateCommand`2
  commentId: T:Apizr.Mediation.Cruding.UpdateCommand`2
  name: UpdateCommand<TKey, TRequestData>
  nameWithType: UpdateCommand<TKey, TRequestData>
  fullName: Apizr.Mediation.Cruding.UpdateCommand<TKey, TRequestData>
  nameWithType.vb: UpdateCommand(Of TKey, TRequestData)
  fullName.vb: Apizr.Mediation.Cruding.UpdateCommand(Of TKey, TRequestData)
  name.vb: UpdateCommand(Of TKey, TRequestData)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.UpdateCommand`2
    name: UpdateCommand
    nameWithType: UpdateCommand
    fullName: Apizr.Mediation.Cruding.UpdateCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.UpdateCommand`2
    name: UpdateCommand
    nameWithType: UpdateCommand
    fullName: Apizr.Mediation.Cruding.UpdateCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequestData
    nameWithType: TRequestData
    fullName: TRequestData
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand*
  commentId: Overload:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand
  name: SendUpdateOptionalCommand
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand
- uid: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<Unit, ApizrException>>
  nameWithType: Task<Option<Unit, ApizrException>>
  fullName: System.Threading.Tasks.Task<Optional.Option<MediatR.Unit, Apizr.ApizrException>>
  nameWithType.vb: Task(Of Option(Of Unit, ApizrException))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of MediatR.Unit, Apizr.ApizrException))
  name.vb: Task(Of Option(Of Unit, ApizrException))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Cruding.DeleteCommand`2
  commentId: T:Apizr.Mediation.Cruding.DeleteCommand`2
  name: DeleteCommand<T, TKey>
  nameWithType: DeleteCommand<T, TKey>
  fullName: Apizr.Mediation.Cruding.DeleteCommand<T, TKey>
  nameWithType.vb: DeleteCommand(Of T, TKey)
  fullName.vb: Apizr.Mediation.Cruding.DeleteCommand(Of T, TKey)
  name.vb: DeleteCommand(Of T, TKey)
  spec.csharp:
  - uid: Apizr.Mediation.Cruding.DeleteCommand`2
    name: DeleteCommand
    nameWithType: DeleteCommand
    fullName: Apizr.Mediation.Cruding.DeleteCommand
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Cruding.DeleteCommand`2
    name: DeleteCommand
    nameWithType: DeleteCommand
    fullName: Apizr.Mediation.Cruding.DeleteCommand
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand*
  commentId: Overload:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand
  name: SendDeleteOptionalCommand
  nameWithType: ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand
  fullName: Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand
