### YamlMime:ManagedReference
items:
- uid: Apizr.Optional.Extending.OptionalMediationExtensions
  commentId: T:Apizr.Optional.Extending.OptionalMediationExtensions
  id: OptionalMediationExtensions
  parent: Apizr.Optional.Extending
  children:
  - Apizr.Optional.Extending.OptionalMediationExtensions.CatchAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Action{System.Exception},System.Boolean)
  - Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Action{``0})
  - Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Func{``0,Apizr.ApizrException{``0},System.Boolean})
  - Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Func{``0,Apizr.ApizrException{``0},System.Threading.Tasks.Task{System.Boolean}})
  langs:
  - csharp
  - vb
  name: OptionalMediationExtensions
  nameWithType: OptionalMediationExtensions
  fullName: Apizr.Optional.Extending.OptionalMediationExtensions
  type: Class
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/OptionalMediationExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: OptionalMediationExtensions
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/OptionalMediationExtensions.cs
    startLine: 10
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: Optional request extensions
  example: []
  syntax:
    content: public static class OptionalMediationExtensions
    content.vb: Public Module OptionalMediationExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Action{``0})
  commentId: M:Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Action{``0})
  id: OnResultAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Action{``0})
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.OptionalMediationExtensions
  langs:
  - csharp
  - vb
  name: OnResultAsync<TResult>(Task<Option<TResult, ApizrException<TResult>>>, Action<TResult>)
  nameWithType: OptionalMediationExtensions.OnResultAsync<TResult>(Task<Option<TResult, ApizrException<TResult>>>, Action<TResult>)
  fullName: Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync<TResult>(System.Threading.Tasks.Task<Optional.Option<TResult, Apizr.ApizrException<TResult>>>, System.Action<TResult>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/OptionalMediationExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: OnResultAsync
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/OptionalMediationExtensions.cs
    startLine: 19
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: The action will be invoked just before throwing any exception that might have occurred during request execution
  example: []
  syntax:
    content: public static Task OnResultAsync<TResult>(this Task<Option<TResult, ApizrException<TResult>>> option, Action<TResult> onResult)
    parameters:
    - id: option
      type: System.Threading.Tasks.Task{Optional.Option{{TResult},Apizr.ApizrException{{TResult}}}}
      description: ''
    - id: onResult
      type: System.Action{{TResult}}
      description: The action to invoke
    typeParameters:
    - id: TResult
      description: The returned result (from fetch if succeed or cache if failed)
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Shared Function OnResultAsync(Of TResult)([option] As Task(Of [Option](Of TResult, ApizrException(Of TResult))), onResult As Action(Of TResult)) As Task
  overload: Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync*
  nameWithType.vb: OptionalMediationExtensions.OnResultAsync(Of TResult)(Task(Of Option(Of TResult, ApizrException(Of TResult))), Action(Of TResult))
  fullName.vb: Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync(Of TResult)(System.Threading.Tasks.Task(Of Optional.Option(Of TResult, Apizr.ApizrException(Of TResult))), System.Action(Of TResult))
  name.vb: OnResultAsync(Of TResult)(Task(Of Option(Of TResult, ApizrException(Of TResult))), Action(Of TResult))
- uid: Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Func{``0,Apizr.ApizrException{``0},System.Boolean})
  commentId: M:Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Func{``0,Apizr.ApizrException{``0},System.Boolean})
  id: OnResultAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Func{``0,Apizr.ApizrException{``0},System.Boolean})
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.OptionalMediationExtensions
  langs:
  - csharp
  - vb
  name: OnResultAsync<TResult>(Task<Option<TResult, ApizrException<TResult>>>, Func<TResult, ApizrException<TResult>, bool>)
  nameWithType: OptionalMediationExtensions.OnResultAsync<TResult>(Task<Option<TResult, ApizrException<TResult>>>, Func<TResult, ApizrException<TResult>, bool>)
  fullName: Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync<TResult>(System.Threading.Tasks.Task<Optional.Option<TResult, Apizr.ApizrException<TResult>>>, System.Func<TResult, Apizr.ApizrException<TResult>, bool>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/OptionalMediationExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: OnResultAsync
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/OptionalMediationExtensions.cs
    startLine: 41
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: >-
    The function will be invoked with the returned result and potential occurred exception.

    You might decide to throw from the function itself, or to return the success boolean.
  example: []
  syntax:
    content: public static Task<bool> OnResultAsync<TResult>(this Task<Option<TResult, ApizrException<TResult>>> option, Func<TResult, ApizrException<TResult>, bool> onResult)
    parameters:
    - id: option
      type: System.Threading.Tasks.Task{Optional.Option{{TResult},Apizr.ApizrException{{TResult}}}}
      description: ''
    - id: onResult
      type: System.Func{{TResult},Apizr.ApizrException{{TResult}},System.Boolean}
      description: The function to invoke
    typeParameters:
    - id: TResult
      description: The returned result (from fetch if succeed or cache if failed)
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: ''
    content.vb: Public Shared Function OnResultAsync(Of TResult)([option] As Task(Of [Option](Of TResult, ApizrException(Of TResult))), onResult As Func(Of TResult, ApizrException(Of TResult), Boolean)) As Task(Of Boolean)
  overload: Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync*
  nameWithType.vb: OptionalMediationExtensions.OnResultAsync(Of TResult)(Task(Of Option(Of TResult, ApizrException(Of TResult))), Func(Of TResult, ApizrException(Of TResult), Boolean))
  fullName.vb: Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync(Of TResult)(System.Threading.Tasks.Task(Of Optional.Option(Of TResult, Apizr.ApizrException(Of TResult))), System.Func(Of TResult, Apizr.ApizrException(Of TResult), Boolean))
  name.vb: OnResultAsync(Of TResult)(Task(Of Option(Of TResult, ApizrException(Of TResult))), Func(Of TResult, ApizrException(Of TResult), Boolean))
- uid: Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Func{``0,Apizr.ApizrException{``0},System.Threading.Tasks.Task{System.Boolean}})
  commentId: M:Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Func{``0,Apizr.ApizrException{``0},System.Threading.Tasks.Task{System.Boolean}})
  id: OnResultAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Func{``0,Apizr.ApizrException{``0},System.Threading.Tasks.Task{System.Boolean}})
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.OptionalMediationExtensions
  langs:
  - csharp
  - vb
  name: OnResultAsync<TResult>(Task<Option<TResult, ApizrException<TResult>>>, Func<TResult, ApizrException<TResult>, Task<bool>>)
  nameWithType: OptionalMediationExtensions.OnResultAsync<TResult>(Task<Option<TResult, ApizrException<TResult>>>, Func<TResult, ApizrException<TResult>, Task<bool>>)
  fullName: Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync<TResult>(System.Threading.Tasks.Task<Optional.Option<TResult, Apizr.ApizrException<TResult>>>, System.Func<TResult, Apizr.ApizrException<TResult>, System.Threading.Tasks.Task<bool>>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/OptionalMediationExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: OnResultAsync
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/OptionalMediationExtensions.cs
    startLine: 52
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: >-
    The function will be invoked with the returned result and potential occurred exception.

    Checking exception, you might decide to throw it from the function itself, or to return the success boolean.
  example: []
  syntax:
    content: public static Task<bool> OnResultAsync<TResult>(this Task<Option<TResult, ApizrException<TResult>>> option, Func<TResult, ApizrException<TResult>, Task<bool>> onResult)
    parameters:
    - id: option
      type: System.Threading.Tasks.Task{Optional.Option{{TResult},Apizr.ApizrException{{TResult}}}}
      description: ''
    - id: onResult
      type: System.Func{{TResult},Apizr.ApizrException{{TResult}},System.Threading.Tasks.Task{System.Boolean}}
      description: The function to invoke
    typeParameters:
    - id: TResult
      description: The returned result (from fetch if succeed or cache if failed)
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Shared Function OnResultAsync(Of TResult)([option] As Task(Of [Option](Of TResult, ApizrException(Of TResult))), onResult As Func(Of TResult, ApizrException(Of TResult), Task(Of Boolean))) As Task(Of Boolean)
  overload: Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync*
  nameWithType.vb: OptionalMediationExtensions.OnResultAsync(Of TResult)(Task(Of Option(Of TResult, ApizrException(Of TResult))), Func(Of TResult, ApizrException(Of TResult), Task(Of Boolean)))
  fullName.vb: Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync(Of TResult)(System.Threading.Tasks.Task(Of Optional.Option(Of TResult, Apizr.ApizrException(Of TResult))), System.Func(Of TResult, Apizr.ApizrException(Of TResult), System.Threading.Tasks.Task(Of Boolean)))
  name.vb: OnResultAsync(Of TResult)(Task(Of Option(Of TResult, ApizrException(Of TResult))), Func(Of TResult, ApizrException(Of TResult), Task(Of Boolean)))
- uid: Apizr.Optional.Extending.OptionalMediationExtensions.CatchAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Action{System.Exception},System.Boolean)
  commentId: M:Apizr.Optional.Extending.OptionalMediationExtensions.CatchAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Action{System.Exception},System.Boolean)
  id: CatchAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Action{System.Exception},System.Boolean)
  isExtensionMethod: true
  parent: Apizr.Optional.Extending.OptionalMediationExtensions
  langs:
  - csharp
  - vb
  name: CatchAsync<TResult>(Task<Option<TResult, ApizrException<TResult>>>, Action<Exception>, bool)
  nameWithType: OptionalMediationExtensions.CatchAsync<TResult>(Task<Option<TResult, ApizrException<TResult>>>, Action<Exception>, bool)
  fullName: Apizr.Optional.Extending.OptionalMediationExtensions.CatchAsync<TResult>(System.Threading.Tasks.Task<Optional.Option<TResult, Apizr.ApizrException<TResult>>>, System.Action<System.Exception>, bool)
  type: Method
  source:
    remote:
      path: Apizr/Src/Handling/Apizr.Integrations.Optional/Optional/Extending/OptionalMediationExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: CatchAsync
    path: ../../Src/Handling/Apizr.Integrations.Optional/Optional/Extending/OptionalMediationExtensions.cs
    startLine: 88
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Extending
  summary: >-
    Return <code class="typeparamref">TResult</code> (from fetch or cache), no matter of exception (handled by <code class="paramref">onException</code>).

    Could throw if you ask to with <code class="paramref">letThrowOnExceptionWithEmptyCache</code> in case of exception with empty cache (<code class="paramref">onException</code> won't be called),

    otherwise return the empty cache (have to be managed) after calling <code class="paramref">onException</code> action.
  example: []
  syntax:
    content: public static Task<TResult> CatchAsync<TResult>(this Task<Option<TResult, ApizrException<TResult>>> option, Action<Exception> onException, bool letThrowOnExceptionWithEmptyCache = false)
    parameters:
    - id: option
      type: System.Threading.Tasks.Task{Optional.Option{{TResult},Apizr.ApizrException{{TResult}}}}
      description: ''
    - id: onException
      type: System.Action{System.Exception}
      description: Action to call to handle exception (like informing the user) before returning result from cache
    - id: letThrowOnExceptionWithEmptyCache
      type: System.Boolean
      description: True to let it throw the inner exception in case of empty cache, False to handle it with <code class="paramref">onException</code> action and return empty cache result
    typeParameters:
    - id: TResult
      description: The returned result (from fetch if succeed or cache if failed)
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: ''
    content.vb: Public Shared Function CatchAsync(Of TResult)([option] As Task(Of [Option](Of TResult, ApizrException(Of TResult))), onException As Action(Of Exception), letThrowOnExceptionWithEmptyCache As Boolean = False) As Task(Of TResult)
  overload: Apizr.Optional.Extending.OptionalMediationExtensions.CatchAsync*
  nameWithType.vb: OptionalMediationExtensions.CatchAsync(Of TResult)(Task(Of Option(Of TResult, ApizrException(Of TResult))), Action(Of Exception), Boolean)
  fullName.vb: Apizr.Optional.Extending.OptionalMediationExtensions.CatchAsync(Of TResult)(System.Threading.Tasks.Task(Of Optional.Option(Of TResult, Apizr.ApizrException(Of TResult))), System.Action(Of System.Exception), Boolean)
  name.vb: CatchAsync(Of TResult)(Task(Of Option(Of TResult, ApizrException(Of TResult))), Action(Of Exception), Boolean)
references:
- uid: Apizr.Optional.Extending
  commentId: N:Apizr.Optional.Extending
  href: Apizr.html
  name: Apizr.Optional.Extending
  nameWithType: Apizr.Optional.Extending
  fullName: Apizr.Optional.Extending
  spec.csharp:
  - uid: Apizr
    name: Apizr
    href: Apizr.html
  - name: .
  - uid: Apizr.Optional
    name: Optional
    href: Apizr.Optional.html
  - name: .
  - uid: Apizr.Optional.Extending
    name: Extending
    href: Apizr.Optional.Extending.html
  spec.vb:
  - uid: Apizr
    name: Apizr
    href: Apizr.html
  - name: .
  - uid: Apizr.Optional
    name: Optional
    href: Apizr.Optional.html
  - name: .
  - uid: Apizr.Optional.Extending
    name: Extending
    href: Apizr.Optional.Extending.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync*
  commentId: Overload:Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync
  href: Apizr.Optional.Extending.OptionalMediationExtensions.html#Apizr_Optional_Extending_OptionalMediationExtensions_OnResultAsync__1_System_Threading_Tasks_Task_Optional_Option___0_Apizr_ApizrException___0____System_Action___0__
  name: OnResultAsync
  nameWithType: OptionalMediationExtensions.OnResultAsync
  fullName: Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync
- uid: System.Threading.Tasks.Task{Optional.Option{{TResult},Apizr.ApizrException{{TResult}}}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Option<TResult, ApizrException<TResult>>>
  nameWithType: Task<Option<TResult, ApizrException<TResult>>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TResult, Apizr.ApizrException<TResult>>>
  nameWithType.vb: Task(Of Option(Of TResult, ApizrException(Of TResult)))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TResult, Apizr.ApizrException(Of TResult)))
  name.vb: Task(Of Option(Of TResult, ApizrException(Of TResult)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Optional.Option`2
    name: Option
    isExternal: true
  - name: <
  - name: TResult
  - name: ','
  - name: " "
  - uid: Apizr.ApizrException`1
    name: ApizrException
    href: Apizr.ApizrException-1.html
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Optional.Option`2
    name: Option
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: ','
  - name: " "
  - uid: Apizr.ApizrException`1
    name: ApizrException
    href: Apizr.ApizrException-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: System.Action{{TResult}}
  commentId: T:System.Action{``0}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<TResult>
  nameWithType: Action<TResult>
  fullName: System.Action<TResult>
  nameWithType.vb: Action(Of TResult)
  fullName.vb: System.Action(Of TResult)
  name.vb: Action(Of TResult)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Func{{TResult},Apizr.ApizrException{{TResult}},System.Boolean}
  commentId: T:System.Func{``0,Apizr.ApizrException{``0},System.Boolean}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<TResult, ApizrException<TResult>, bool>
  nameWithType: Func<TResult, ApizrException<TResult>, bool>
  fullName: System.Func<TResult, Apizr.ApizrException<TResult>, bool>
  nameWithType.vb: Func(Of TResult, ApizrException(Of TResult), Boolean)
  fullName.vb: System.Func(Of TResult, Apizr.ApizrException(Of TResult), Boolean)
  name.vb: Func(Of TResult, ApizrException(Of TResult), Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TResult
  - name: ','
  - name: " "
  - uid: Apizr.ApizrException`1
    name: ApizrException
    href: Apizr.ApizrException-1.html
  - name: <
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: ','
  - name: " "
  - uid: Apizr.ApizrException`1
    name: ApizrException
    href: Apizr.ApizrException-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{{TResult},Apizr.ApizrException{{TResult}},System.Threading.Tasks.Task{System.Boolean}}
  commentId: T:System.Func{``0,Apizr.ApizrException{``0},System.Threading.Tasks.Task{System.Boolean}}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<TResult, ApizrException<TResult>, Task<bool>>
  nameWithType: Func<TResult, ApizrException<TResult>, Task<bool>>
  fullName: System.Func<TResult, Apizr.ApizrException<TResult>, System.Threading.Tasks.Task<bool>>
  nameWithType.vb: Func(Of TResult, ApizrException(Of TResult), Task(Of Boolean))
  fullName.vb: System.Func(Of TResult, Apizr.ApizrException(Of TResult), System.Threading.Tasks.Task(Of Boolean))
  name.vb: Func(Of TResult, ApizrException(Of TResult), Task(Of Boolean))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TResult
  - name: ','
  - name: " "
  - uid: Apizr.ApizrException`1
    name: ApizrException
    href: Apizr.ApizrException-1.html
  - name: <
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: ','
  - name: " "
  - uid: Apizr.ApizrException`1
    name: ApizrException
    href: Apizr.ApizrException-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: Apizr.Optional.Extending.OptionalMediationExtensions.CatchAsync*
  commentId: Overload:Apizr.Optional.Extending.OptionalMediationExtensions.CatchAsync
  href: Apizr.Optional.Extending.OptionalMediationExtensions.html#Apizr_Optional_Extending_OptionalMediationExtensions_CatchAsync__1_System_Threading_Tasks_Task_Optional_Option___0_Apizr_ApizrException___0____System_Action_System_Exception__System_Boolean_
  name: CatchAsync
  nameWithType: OptionalMediationExtensions.CatchAsync
  fullName: Apizr.Optional.Extending.OptionalMediationExtensions.CatchAsync
- uid: System.Action{System.Exception}
  commentId: T:System.Action{System.Exception}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<Exception>
  nameWithType: Action<Exception>
  fullName: System.Action<System.Exception>
  nameWithType.vb: Action(Of Exception)
  fullName.vb: System.Action(Of System.Exception)
  name.vb: Action(Of Exception)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.Exception
    name: Exception
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.exception
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Exception
    name: Exception
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.exception
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
