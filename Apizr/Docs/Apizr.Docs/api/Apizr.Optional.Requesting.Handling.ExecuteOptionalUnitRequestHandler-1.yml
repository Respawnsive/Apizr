### YamlMime:ManagedReference
items:
- uid: Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler`1
  commentId: T:Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler`1
  id: ExecuteOptionalUnitRequestHandler`1
  parent: Apizr.Optional.Requesting.Handling
  children:
  - Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler`1.#ctor(Apizr.IApizrManager{`0})
  - Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler`1.Handle(Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{`0},System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ExecuteOptionalUnitRequestHandler<TWebApi>
  nameWithType: ExecuteOptionalUnitRequestHandler<TWebApi>
  fullName: Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler<TWebApi>
  type: Class
  source:
    id: ExecuteOptionalUnitRequestHandler
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Handling\ExecuteOptionalUnitRequestHandler.cs
    startLine: 76
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Handling
  syntax:
    content: 'public class ExecuteOptionalUnitRequestHandler<TWebApi> : ExecuteOptionalUnitRequestHandlerBase<TWebApi, ExecuteOptionalUnitRequest<TWebApi>>, IRequestHandler<ExecuteOptionalUnitRequest<TWebApi>, Option<Unit, ApizrException>>'
    typeParameters:
    - id: TWebApi
    content.vb: >-
      Public Class ExecuteOptionalUnitRequestHandler(Of TWebApi)
          Inherits ExecuteOptionalUnitRequestHandlerBase(Of TWebApi, ExecuteOptionalUnitRequest(Of TWebApi))
          Implements IRequestHandler(Of ExecuteOptionalUnitRequest(Of TWebApi),  Option(Of Unit, ApizrException) )
  inheritance:
  - System.Object
  - Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase{{TWebApi},Optional.Option{MediatR.Unit,Apizr.ApizrException},Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{{TWebApi}}}
  - Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase{{TWebApi},Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{{TWebApi}}}
  implements:
  - MediatR.IRequestHandler{Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{{TWebApi}},Optional.Option{MediatR.Unit,Apizr.ApizrException}}
  inheritedMembers:
  - Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase{{TWebApi},Optional.Option{MediatR.Unit,Apizr.ApizrException},Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{{TWebApi}}}.WebApiManager
  - Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase{{TWebApi},Optional.Option{MediatR.Unit,Apizr.ApizrException},Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{{TWebApi}}}.Handle(Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{{TWebApi}},System.Threading.CancellationToken)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: ExecuteOptionalUnitRequestHandler(Of TWebApi)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler(Of TWebApi)
  name.vb: ExecuteOptionalUnitRequestHandler(Of TWebApi)
- uid: Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler`1.#ctor(Apizr.IApizrManager{`0})
  commentId: M:Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler`1.#ctor(Apizr.IApizrManager{`0})
  id: '#ctor(Apizr.IApizrManager{`0})'
  parent: Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler`1
  langs:
  - csharp
  - vb
  name: ExecuteOptionalUnitRequestHandler(IApizrManager<TWebApi>)
  nameWithType: ExecuteOptionalUnitRequestHandler<TWebApi>.ExecuteOptionalUnitRequestHandler(IApizrManager<TWebApi>)
  fullName: Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler<TWebApi>.ExecuteOptionalUnitRequestHandler(Apizr.IApizrManager<TWebApi>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Handling\ExecuteOptionalUnitRequestHandler.cs
    startLine: 78
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Handling
  syntax:
    content: public ExecuteOptionalUnitRequestHandler(IApizrManager<TWebApi> webApiManager)
    parameters:
    - id: webApiManager
      type: Apizr.IApizrManager{{TWebApi}}
    content.vb: Public Sub New(webApiManager As IApizrManager(Of TWebApi))
  overload: Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler`1.#ctor*
  nameWithType.vb: ExecuteOptionalUnitRequestHandler(Of TWebApi).ExecuteOptionalUnitRequestHandler(IApizrManager(Of TWebApi))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler(Of TWebApi).ExecuteOptionalUnitRequestHandler(Apizr.IApizrManager(Of TWebApi))
  name.vb: ExecuteOptionalUnitRequestHandler(IApizrManager(Of TWebApi))
- uid: Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler`1.Handle(Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{`0},System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler`1.Handle(Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{`0},System.Threading.CancellationToken)
  id: Handle(Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{`0},System.Threading.CancellationToken)
  parent: Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler`1
  langs:
  - csharp
  - vb
  name: Handle(ExecuteOptionalUnitRequest<TWebApi>, CancellationToken)
  nameWithType: ExecuteOptionalUnitRequestHandler<TWebApi>.Handle(ExecuteOptionalUnitRequest<TWebApi>, CancellationToken)
  fullName: Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler<TWebApi>.Handle(Apizr.Optional.Requesting.ExecuteOptionalUnitRequest<TWebApi>, System.Threading.CancellationToken)
  type: Method
  source:
    id: Handle
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Handling\ExecuteOptionalUnitRequestHandler.cs
    startLine: 82
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Handling
  syntax:
    content: public override async Task<Option<Unit, ApizrException>> Handle(ExecuteOptionalUnitRequest<TWebApi> request, CancellationToken cancellationToken)
    parameters:
    - id: request
      type: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{{TWebApi}}
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
    content.vb: Public Overrides Function Handle(request As ExecuteOptionalUnitRequest(Of TWebApi), cancellationToken As CancellationToken) As Task(Of  Option(Of Unit, ApizrException)
  overridden: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase{{TWebApi},Optional.Option{MediatR.Unit,Apizr.ApizrException},Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{{TWebApi}}}.Handle(Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{{TWebApi}},System.Threading.CancellationToken)
  overload: Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler`1.Handle*
  nameWithType.vb: ExecuteOptionalUnitRequestHandler(Of TWebApi).Handle(ExecuteOptionalUnitRequest(Of TWebApi), CancellationToken)
  modifiers.csharp:
  - public
  - override
  - async
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler(Of TWebApi).Handle(Apizr.Optional.Requesting.ExecuteOptionalUnitRequest(Of TWebApi), System.Threading.CancellationToken)
  name.vb: Handle(ExecuteOptionalUnitRequest(Of TWebApi), CancellationToken)
references:
- uid: Apizr.Optional.Requesting.Handling
  commentId: N:Apizr.Optional.Requesting.Handling
  name: Apizr.Optional.Requesting.Handling
  nameWithType: Apizr.Optional.Requesting.Handling
  fullName: Apizr.Optional.Requesting.Handling
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase{{TWebApi},Optional.Option{MediatR.Unit,Apizr.ApizrException},Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{{TWebApi}}}
  commentId: T:Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase{`0,Optional.Option{MediatR.Unit,Apizr.ApizrException},Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{`0}}
  parent: Apizr.Mediation.Requesting.Handling.Base
  definition: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`3
  name: ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, ExecuteOptionalUnitRequest<TWebApi>>
  nameWithType: ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, ExecuteOptionalUnitRequest<TWebApi>>
  fullName: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase<TWebApi, Optional.Option<MediatR.Unit, Apizr.ApizrException>, Apizr.Optional.Requesting.ExecuteOptionalUnitRequest<TWebApi>>
  nameWithType.vb: ExecuteUnitRequestHandlerBase(Of TWebApi, Option(Of Unit, ApizrException), ExecuteOptionalUnitRequest(Of TWebApi))
  fullName.vb: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase(Of TWebApi, Optional.Option(Of MediatR.Unit, Apizr.ApizrException), Apizr.Optional.Requesting.ExecuteOptionalUnitRequest(Of TWebApi))
  name.vb: ExecuteUnitRequestHandlerBase(Of TWebApi, Option(Of Unit, ApizrException), ExecuteOptionalUnitRequest(Of TWebApi))
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`3
    name: ExecuteUnitRequestHandlerBase
    nameWithType: ExecuteUnitRequestHandlerBase
    fullName: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest`1
    name: ExecuteOptionalUnitRequest
    nameWithType: ExecuteOptionalUnitRequest
    fullName: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`3
    name: ExecuteUnitRequestHandlerBase
    nameWithType: ExecuteUnitRequestHandlerBase
    fullName: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest`1
    name: ExecuteOptionalUnitRequest
    nameWithType: ExecuteOptionalUnitRequest
    fullName: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase{{TWebApi},Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{{TWebApi}}}
  commentId: T:Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase{`0,Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{`0}}
  parent: Apizr.Optional.Requesting.Handling.Base
  definition: Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase`2
  name: ExecuteOptionalUnitRequestHandlerBase<TWebApi, ExecuteOptionalUnitRequest<TWebApi>>
  nameWithType: ExecuteOptionalUnitRequestHandlerBase<TWebApi, ExecuteOptionalUnitRequest<TWebApi>>
  fullName: Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase<TWebApi, Apizr.Optional.Requesting.ExecuteOptionalUnitRequest<TWebApi>>
  nameWithType.vb: ExecuteOptionalUnitRequestHandlerBase(Of TWebApi, ExecuteOptionalUnitRequest(Of TWebApi))
  fullName.vb: Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase(Of TWebApi, Apizr.Optional.Requesting.ExecuteOptionalUnitRequest(Of TWebApi))
  name.vb: ExecuteOptionalUnitRequestHandlerBase(Of TWebApi, ExecuteOptionalUnitRequest(Of TWebApi))
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase`2
    name: ExecuteOptionalUnitRequestHandlerBase
    nameWithType: ExecuteOptionalUnitRequestHandlerBase
    fullName: Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest`1
    name: ExecuteOptionalUnitRequest
    nameWithType: ExecuteOptionalUnitRequest
    fullName: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase`2
    name: ExecuteOptionalUnitRequestHandlerBase
    nameWithType: ExecuteOptionalUnitRequestHandlerBase
    fullName: Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest`1
    name: ExecuteOptionalUnitRequest
    nameWithType: ExecuteOptionalUnitRequest
    fullName: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR.IRequestHandler{Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{{TWebApi}},Optional.Option{MediatR.Unit,Apizr.ApizrException}}
  commentId: T:MediatR.IRequestHandler{Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{`0},Optional.Option{MediatR.Unit,Apizr.ApizrException}}
  parent: MediatR
  definition: MediatR.IRequestHandler`2
  name: IRequestHandler<ExecuteOptionalUnitRequest<TWebApi>, Option<Unit, ApizrException>>
  nameWithType: IRequestHandler<ExecuteOptionalUnitRequest<TWebApi>, Option<Unit, ApizrException>>
  fullName: MediatR.IRequestHandler<Apizr.Optional.Requesting.ExecuteOptionalUnitRequest<TWebApi>, Optional.Option<MediatR.Unit, Apizr.ApizrException>>
  nameWithType.vb: IRequestHandler(Of ExecuteOptionalUnitRequest(Of TWebApi), Option(Of Unit, ApizrException))
  fullName.vb: MediatR.IRequestHandler(Of Apizr.Optional.Requesting.ExecuteOptionalUnitRequest(Of TWebApi), Optional.Option(Of MediatR.Unit, Apizr.ApizrException))
  name.vb: IRequestHandler(Of ExecuteOptionalUnitRequest(Of TWebApi), Option(Of Unit, ApizrException))
  spec.csharp:
  - uid: MediatR.IRequestHandler`2
    name: IRequestHandler
    nameWithType: IRequestHandler
    fullName: MediatR.IRequestHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest`1
    name: ExecuteOptionalUnitRequest
    nameWithType: ExecuteOptionalUnitRequest
    fullName: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatR.IRequestHandler`2
    name: IRequestHandler
    nameWithType: IRequestHandler
    fullName: MediatR.IRequestHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest`1
    name: ExecuteOptionalUnitRequest
    nameWithType: ExecuteOptionalUnitRequest
    fullName: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase{{TWebApi},Optional.Option{MediatR.Unit,Apizr.ApizrException},Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{{TWebApi}}}.WebApiManager
  commentId: F:Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase{`0,Optional.Option{MediatR.Unit,Apizr.ApizrException},Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{`0}}.WebApiManager
  parent: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase{{TWebApi},Optional.Option{MediatR.Unit,Apizr.ApizrException},Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{{TWebApi}}}
  definition: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`3.WebApiManager
  name: WebApiManager
  nameWithType: ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, ExecuteOptionalUnitRequest<TWebApi>>.WebApiManager
  fullName: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase<TWebApi, Optional.Option<MediatR.Unit, Apizr.ApizrException>, Apizr.Optional.Requesting.ExecuteOptionalUnitRequest<TWebApi>>.WebApiManager
  nameWithType.vb: ExecuteUnitRequestHandlerBase(Of TWebApi, Option(Of Unit, ApizrException), ExecuteOptionalUnitRequest(Of TWebApi)).WebApiManager
  fullName.vb: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase(Of TWebApi, Optional.Option(Of MediatR.Unit, Apizr.ApizrException), Apizr.Optional.Requesting.ExecuteOptionalUnitRequest(Of TWebApi)).WebApiManager
- uid: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase{{TWebApi},Optional.Option{MediatR.Unit,Apizr.ApizrException},Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{{TWebApi}}}.Handle(Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{{TWebApi}},System.Threading.CancellationToken)
  commentId: M:Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase{`0,Optional.Option{MediatR.Unit,Apizr.ApizrException},Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{`0}}.Handle(Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{`0},System.Threading.CancellationToken)
  parent: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase{{TWebApi},Optional.Option{MediatR.Unit,Apizr.ApizrException},Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{{TWebApi}}}
  definition: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`3.Handle(`2,System.Threading.CancellationToken)
  name: Handle(ExecuteOptionalUnitRequest<TWebApi>, CancellationToken)
  nameWithType: ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, ExecuteOptionalUnitRequest<TWebApi>>.Handle(ExecuteOptionalUnitRequest<TWebApi>, CancellationToken)
  fullName: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase<TWebApi, Optional.Option<MediatR.Unit, Apizr.ApizrException>, Apizr.Optional.Requesting.ExecuteOptionalUnitRequest<TWebApi>>.Handle(Apizr.Optional.Requesting.ExecuteOptionalUnitRequest<TWebApi>, System.Threading.CancellationToken)
  nameWithType.vb: ExecuteUnitRequestHandlerBase(Of TWebApi, Option(Of Unit, ApizrException), ExecuteOptionalUnitRequest(Of TWebApi)).Handle(ExecuteOptionalUnitRequest(Of TWebApi), CancellationToken)
  fullName.vb: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase(Of TWebApi, Optional.Option(Of MediatR.Unit, Apizr.ApizrException), Apizr.Optional.Requesting.ExecuteOptionalUnitRequest(Of TWebApi)).Handle(Apizr.Optional.Requesting.ExecuteOptionalUnitRequest(Of TWebApi), System.Threading.CancellationToken)
  name.vb: Handle(ExecuteOptionalUnitRequest(Of TWebApi), CancellationToken)
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`3.Handle(`2,System.Threading.CancellationToken)
    name: Handle
    nameWithType: ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, ExecuteOptionalUnitRequest<TWebApi>>.Handle
    fullName: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase<TWebApi, Optional.Option<MediatR.Unit, Apizr.ApizrException>, Apizr.Optional.Requesting.ExecuteOptionalUnitRequest<TWebApi>>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest`1
    name: ExecuteOptionalUnitRequest
    nameWithType: ExecuteOptionalUnitRequest
    fullName: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`3.Handle(`2,System.Threading.CancellationToken)
    name: Handle
    nameWithType: ExecuteUnitRequestHandlerBase(Of TWebApi, Option(Of Unit, ApizrException), ExecuteOptionalUnitRequest(Of TWebApi)).Handle
    fullName: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase(Of TWebApi, Optional.Option(Of MediatR.Unit, Apizr.ApizrException), Apizr.Optional.Requesting.ExecuteOptionalUnitRequest(Of TWebApi)).Handle
  - name: (
    nameWithType: (
    fullName: (
  - uid: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest`1
    name: ExecuteOptionalUnitRequest
    nameWithType: ExecuteOptionalUnitRequest
    fullName: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`3
  commentId: T:Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`3
  name: ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest>
  nameWithType: ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest>
  fullName: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest>
  nameWithType.vb: ExecuteUnitRequestHandlerBase(Of TWebApi, TFormattedModelResultData, TRequest)
  fullName.vb: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase(Of TWebApi, TFormattedModelResultData, TRequest)
  name.vb: ExecuteUnitRequestHandlerBase(Of TWebApi, TFormattedModelResultData, TRequest)
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`3
    name: ExecuteUnitRequestHandlerBase
    nameWithType: ExecuteUnitRequestHandlerBase
    fullName: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFormattedModelResultData
    nameWithType: TFormattedModelResultData
    fullName: TFormattedModelResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`3
    name: ExecuteUnitRequestHandlerBase
    nameWithType: ExecuteUnitRequestHandlerBase
    fullName: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TFormattedModelResultData
    nameWithType: TFormattedModelResultData
    fullName: TFormattedModelResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Mediation.Requesting.Handling.Base
  commentId: N:Apizr.Mediation.Requesting.Handling.Base
  name: Apizr.Mediation.Requesting.Handling.Base
  nameWithType: Apizr.Mediation.Requesting.Handling.Base
  fullName: Apizr.Mediation.Requesting.Handling.Base
- uid: Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase`2
  commentId: T:Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase`2
  name: ExecuteOptionalUnitRequestHandlerBase<TWebApi, TRequest>
  nameWithType: ExecuteOptionalUnitRequestHandlerBase<TWebApi, TRequest>
  fullName: Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase<TWebApi, TRequest>
  nameWithType.vb: ExecuteOptionalUnitRequestHandlerBase(Of TWebApi, TRequest)
  fullName.vb: Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase(Of TWebApi, TRequest)
  name.vb: ExecuteOptionalUnitRequestHandlerBase(Of TWebApi, TRequest)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase`2
    name: ExecuteOptionalUnitRequestHandlerBase
    nameWithType: ExecuteOptionalUnitRequestHandlerBase
    fullName: Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase`2
    name: ExecuteOptionalUnitRequestHandlerBase
    nameWithType: ExecuteOptionalUnitRequestHandlerBase
    fullName: Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Handling.Base
  commentId: N:Apizr.Optional.Requesting.Handling.Base
  name: Apizr.Optional.Requesting.Handling.Base
  nameWithType: Apizr.Optional.Requesting.Handling.Base
  fullName: Apizr.Optional.Requesting.Handling.Base
- uid: MediatR.IRequestHandler`2
  commentId: T:MediatR.IRequestHandler`2
  isExternal: true
  name: IRequestHandler<TRequest, TResponse>
  nameWithType: IRequestHandler<TRequest, TResponse>
  fullName: MediatR.IRequestHandler<TRequest, TResponse>
  nameWithType.vb: IRequestHandler(Of TRequest, TResponse)
  fullName.vb: MediatR.IRequestHandler(Of TRequest, TResponse)
  name.vb: IRequestHandler(Of TRequest, TResponse)
  spec.csharp:
  - uid: MediatR.IRequestHandler`2
    name: IRequestHandler
    nameWithType: IRequestHandler
    fullName: MediatR.IRequestHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatR.IRequestHandler`2
    name: IRequestHandler
    nameWithType: IRequestHandler
    fullName: MediatR.IRequestHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatR
  commentId: N:MediatR
  isExternal: true
  name: MediatR
  nameWithType: MediatR
  fullName: MediatR
- uid: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`3.WebApiManager
  commentId: F:Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`3.WebApiManager
  name: WebApiManager
  nameWithType: ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest>.WebApiManager
  fullName: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest>.WebApiManager
  nameWithType.vb: ExecuteUnitRequestHandlerBase(Of TWebApi, TFormattedModelResultData, TRequest).WebApiManager
  fullName.vb: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase(Of TWebApi, TFormattedModelResultData, TRequest).WebApiManager
- uid: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`3.Handle(`2,System.Threading.CancellationToken)
  commentId: M:Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`3.Handle(`2,System.Threading.CancellationToken)
  isExternal: true
  name: Handle(TRequest, CancellationToken)
  nameWithType: ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest>.Handle(TRequest, CancellationToken)
  fullName: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest>.Handle(TRequest, System.Threading.CancellationToken)
  nameWithType.vb: ExecuteUnitRequestHandlerBase(Of TWebApi, TFormattedModelResultData, TRequest).Handle(TRequest, CancellationToken)
  fullName.vb: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase(Of TWebApi, TFormattedModelResultData, TRequest).Handle(TRequest, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`3.Handle(`2,System.Threading.CancellationToken)
    name: Handle
    nameWithType: ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest>.Handle
    fullName: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest>.Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase`3.Handle(`2,System.Threading.CancellationToken)
    name: Handle
    nameWithType: ExecuteUnitRequestHandlerBase(Of TWebApi, TFormattedModelResultData, TRequest).Handle
    fullName: Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase(Of TWebApi, TFormattedModelResultData, TRequest).Handle
  - name: (
    nameWithType: (
    fullName: (
  - name: TRequest
    nameWithType: TRequest
    fullName: TRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler`1.#ctor*
  commentId: Overload:Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler`1.#ctor
  name: ExecuteOptionalUnitRequestHandler
  nameWithType: ExecuteOptionalUnitRequestHandler<TWebApi>.ExecuteOptionalUnitRequestHandler
  fullName: Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler<TWebApi>.ExecuteOptionalUnitRequestHandler
  nameWithType.vb: ExecuteOptionalUnitRequestHandler(Of TWebApi).ExecuteOptionalUnitRequestHandler
  fullName.vb: Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler(Of TWebApi).ExecuteOptionalUnitRequestHandler
- uid: Apizr.IApizrManager{{TWebApi}}
  commentId: T:Apizr.IApizrManager{``0}
  parent: Apizr
  definition: Apizr.IApizrManager`1
  name: IApizrManager<TWebApi>
  nameWithType: IApizrManager<TWebApi>
  fullName: Apizr.IApizrManager<TWebApi>
  nameWithType.vb: IApizrManager(Of TWebApi)
  fullName.vb: Apizr.IApizrManager(Of TWebApi)
  name.vb: IApizrManager(Of TWebApi)
  spec.csharp:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.IApizrManager`1
  commentId: T:Apizr.IApizrManager`1
  name: IApizrManager<TWebApi>
  nameWithType: IApizrManager<TWebApi>
  fullName: Apizr.IApizrManager<TWebApi>
  nameWithType.vb: IApizrManager(Of TWebApi)
  fullName.vb: Apizr.IApizrManager(Of TWebApi)
  name.vb: IApizrManager(Of TWebApi)
  spec.csharp:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr
  commentId: N:Apizr
  name: Apizr
  nameWithType: Apizr
  fullName: Apizr
- uid: Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler`1.Handle*
  commentId: Overload:Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler`1.Handle
  name: Handle
  nameWithType: ExecuteOptionalUnitRequestHandler<TWebApi>.Handle
  fullName: Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler<TWebApi>.Handle
  nameWithType.vb: ExecuteOptionalUnitRequestHandler(Of TWebApi).Handle
  fullName.vb: Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler(Of TWebApi).Handle
- uid: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{{TWebApi}}
  commentId: T:Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{`0}
  parent: Apizr.Optional.Requesting
  definition: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest`1
  name: ExecuteOptionalUnitRequest<TWebApi>
  nameWithType: ExecuteOptionalUnitRequest<TWebApi>
  fullName: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest<TWebApi>
  nameWithType.vb: ExecuteOptionalUnitRequest(Of TWebApi)
  fullName.vb: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest(Of TWebApi)
  name.vb: ExecuteOptionalUnitRequest(Of TWebApi)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest`1
    name: ExecuteOptionalUnitRequest
    nameWithType: ExecuteOptionalUnitRequest
    fullName: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest`1
    name: ExecuteOptionalUnitRequest
    nameWithType: ExecuteOptionalUnitRequest
    fullName: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<Unit, ApizrException>>
  nameWithType: Task<Option<Unit, ApizrException>>
  fullName: System.Threading.Tasks.Task<Optional.Option<MediatR.Unit, Apizr.ApizrException>>
  nameWithType.vb: Task(Of Option(Of Unit, ApizrException))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of MediatR.Unit, Apizr.ApizrException))
  name.vb: Task(Of Option(Of Unit, ApizrException))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest`1
  commentId: T:Apizr.Optional.Requesting.ExecuteOptionalUnitRequest`1
  name: ExecuteOptionalUnitRequest<TWebApi>
  nameWithType: ExecuteOptionalUnitRequest<TWebApi>
  fullName: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest<TWebApi>
  nameWithType.vb: ExecuteOptionalUnitRequest(Of TWebApi)
  fullName.vb: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest(Of TWebApi)
  name.vb: ExecuteOptionalUnitRequest(Of TWebApi)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest`1
    name: ExecuteOptionalUnitRequest
    nameWithType: ExecuteOptionalUnitRequest
    fullName: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest`1
    name: ExecuteOptionalUnitRequest
    nameWithType: ExecuteOptionalUnitRequest
    fullName: Apizr.Optional.Requesting.ExecuteOptionalUnitRequest
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting
  commentId: N:Apizr.Optional.Requesting
  name: Apizr.Optional.Requesting
  nameWithType: Apizr.Optional.Requesting
  fullName: Apizr.Optional.Requesting
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
