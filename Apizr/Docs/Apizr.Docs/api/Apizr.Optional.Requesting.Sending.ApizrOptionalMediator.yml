### YamlMime:ManagedReference
items:
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  commentId: T:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  id: ApizrOptionalMediator
  parent: Apizr.Optional.Requesting.Sending
  children:
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.#ctor(MediatR.IMediator)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}})
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  - Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Threading.CancellationToken,System.Boolean)
  langs:
  - csharp
  - vb
  name: ApizrOptionalMediator
  nameWithType: ApizrOptionalMediator
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  type: Class
  source:
    id: ApizrOptionalMediator
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 12
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nApizr mediator to send request using MediatR by calling expression and returning optional result\n"
  example: []
  syntax:
    content: 'public class ApizrOptionalMediator : IApizrOptionalMediator, IApizrOptionalMediatorBase, IApizrMediatorBase'
    content.vb: >-
      Public Class ApizrOptionalMediator
          Implements IApizrOptionalMediator, IApizrOptionalMediatorBase, IApizrMediatorBase
  inheritance:
  - System.Object
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediatorBase
  - Apizr.Mediation.Requesting.Sending.IApizrMediatorBase
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.#ctor(MediatR.IMediator)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.#ctor(MediatR.IMediator)
  id: '#ctor(MediatR.IMediator)'
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: ApizrOptionalMediator(IMediator)
  nameWithType: ApizrOptionalMediator.ApizrOptionalMediator(IMediator)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.ApizrOptionalMediator(MediatR.IMediator)
  type: Constructor
  source:
    id: .ctor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 16
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  syntax:
    content: public ApizrOptionalMediator(IMediator mediator)
    parameters:
    - id: mediator
      type: MediatR.IMediator
    content.vb: Public Sub New(mediator As IMediator)
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}})
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}})
  id: SendFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}})
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi>(Expression<Func<TWebApi, Task>>)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi>(Expression<Func<TWebApi, Task>>)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi>(System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task>>)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 26
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: public Task<Option<Unit, ApizrException>> SendFor<TWebApi>(Expression<Func<TWebApi, Task>> executeApiMethod)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    typeParameters:
    - id: TWebApi
      description: The web api type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi)(executeApiMethod As Expression(Of Func(Of TWebApi, Task))) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task}})
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi)(Expression(Of Func(Of TWebApi, Task)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi)(System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task)))
  name.vb: SendFor(Of TWebApi)(Expression(Of Func(Of TWebApi, Task)))
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context)
  id: SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi>(Expression<Func<Context, TWebApi, Task>>, Context)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi>(Expression<Func<Context, TWebApi, Task>>, Context)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi>(System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, System.Threading.Tasks.Task>>, Polly.Context)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 30
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR with a Polly Context and returning an optional result\n"
  example: []
  syntax:
    content: public Task<Option<Unit, ApizrException>> SendFor<TWebApi>(Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context = null)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},System.Threading.Tasks.Task}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: context
      type: Polly.Context
      description: The Polly context
    typeParameters:
    - id: TWebApi
      description: The web api type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi)(executeApiMethod As Expression(Of Func(Of Context, TWebApi, Task)), context As Context = Nothing) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},System.Threading.Tasks.Task}},Polly.Context)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi)(Expression(Of Func(Of Context, TWebApi, Task)), Context)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, System.Threading.Tasks.Task)), Polly.Context)
  name.vb: SendFor(Of TWebApi)(Expression(Of Func(Of Context, TWebApi, Task)), Context)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken)
  id: SendFor``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi>(Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi>(Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi>(System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task>>, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 34
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR with a cancellation token and returning an optional result\n"
  example: []
  syntax:
    content: public Task<Option<Unit, ApizrException>> SendFor<TWebApi>(Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod, CancellationToken token = default(CancellationToken))
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TWebApi
      description: The web api type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi)(executeApiMethod As Expression(Of Func(Of CancellationToken, TWebApi, Task)), token As CancellationToken = Nothing) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task}},System.Threading.CancellationToken)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi)(Expression(Of Func(Of CancellationToken, TWebApi, Task)), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi)(System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task)), System.Threading.CancellationToken)
  name.vb: SendFor(Of TWebApi)(Expression(Of Func(Of CancellationToken, TWebApi, Task)), CancellationToken)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken)
  id: SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi>(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi>(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi>(System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task>>, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 38
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional result\n"
  example: []
  syntax:
    content: public Task<Option<Unit, ApizrException>> SendFor<TWebApi>(Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken))
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    typeParameters:
    - id: TWebApi
      description: The web api type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi)(executeApiMethod As Expression(Of Func(Of Context, CancellationToken, TWebApi, Task)), context As Context = Nothing, token As CancellationToken = Nothing) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi)(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task)), Context, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task)), Polly.Context, System.Threading.CancellationToken)
  name.vb: SendFor(Of TWebApi)(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task)), Context, CancellationToken)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1)
  id: SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<TWebApi, TApiData, System.Threading.Tasks.Task>>, TModelData)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 46
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR with mapped request and returning an optional result\n"
  example: []
  syntax:
    content: public Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiData},System.Threading.Tasks.Task}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    typeParameters:
    - id: TWebApi
      description: The web api type
    - id: TModelData
      description: The model request type to map from
    - id: TApiData
      description: The api request type to map to
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi, TModelData, TApiData)(executeApiMethod As Expression(Of Func(Of TWebApi, TApiData, Task)), modelData As TModelData) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiData},System.Threading.Tasks.Task}},{TModelData})
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of TWebApi, TApiData, Task)), TModelData)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiData, System.Threading.Tasks.Task)), TModelData)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of TWebApi, TApiData, Task)), TModelData)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken)
  id: SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task>>, TModelData, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 50
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR with mapped request and a cancellation token and returning an optional result\n"
  example: []
  syntax:
    content: public Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken))
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    - id: token
      type: System.Threading.CancellationToken
      description: A cancellation token
    typeParameters:
    - id: TWebApi
      description: The web api type
    - id: TModelData
      description: The model request type to map from
    - id: TApiData
      description: The api request type to map to
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi, TModelData, TApiData)(executeApiMethod As Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task)), modelData As TModelData, token As CancellationToken = Nothing) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task}},{TModelData},System.Threading.CancellationToken)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task)), TModelData, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task)), TModelData, System.Threading.CancellationToken)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task)), TModelData, CancellationToken)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context)
  id: SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task>>, TModelData, Polly.Context)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 55
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR with mapped request and a Polly Context and returning an optional result\n"
  example: []
  syntax:
    content: public Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},{TApiData},System.Threading.Tasks.Task}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    - id: context
      type: Polly.Context
      description: The Polly Context to pass through it all
    typeParameters:
    - id: TWebApi
      description: The web api type
    - id: TModelData
      description: The model request type to map from
    - id: TApiData
      description: The api request type to map to
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi, TModelData, TApiData)(executeApiMethod As Expression(Of Func(Of Context, TWebApi, TApiData, Task)), modelData As TModelData, context As Context = Nothing) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},{TApiData},System.Threading.Tasks.Task}},{TModelData},Polly.Context)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, TWebApi, TApiData, Task)), TModelData, Context)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task)), TModelData, Polly.Context)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, TWebApi, TApiData, Task)), TModelData, Context)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken)
  id: SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task>>, TModelData, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 59
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token and returning an optional result\n"
  example: []
  syntax:
    content: public Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken))
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    - id: context
      type: Polly.Context
      description: The Polly Context to pass through it all
    - id: token
      type: System.Threading.CancellationToken
      description: A cancellation token
    typeParameters:
    - id: TWebApi
      description: The web api type
    - id: TModelData
      description: The model request type to map from
    - id: TApiData
      description: The api request type to map to
    return:
      type: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi, TModelData, TApiData)(executeApiMethod As Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task)), modelData As TModelData, context As Context = Nothing, token As CancellationToken = Nothing) As Task(Of  Option(Of Unit, ApizrException)
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task}},{TModelData},Polly.Context,System.Threading.CancellationToken)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task)), TModelData, Context, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task)), TModelData, Polly.Context, System.Threading.CancellationToken)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task)), TModelData, Context, CancellationToken)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean)
  id: SendFor``2(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi, TApiData>(System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Boolean)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 72
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR and returning an optional result\n"
  example: []
  syntax:
    content: public Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TWebApi
      description: The web api type
    - id: TApiData
      description: The api result type
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiData},Apizr.ApizrException{{TApiData}}}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi, TApiData)(executeApiMethod As Expression(Of Func(Of TWebApi, Task(Of TApiData))), clearCache As Boolean = False) As Task(Of  Option(Of TApiData, ApizrException(Of TApiData))
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task{{TApiData}}}},System.Boolean)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of TWebApi, Task(Of TApiData))), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Boolean)
  name.vb: SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of TWebApi, Task(Of TApiData))), Boolean)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean)
  id: SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, System.Threading.Tasks.Task<TApiData>>>, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 77
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR with a Polly Context and returning an optional result\n"
  example: []
  syntax:
    content: public Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TWebApi
      description: The web api type
    - id: TApiData
      description: The api response
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiData},Apizr.ApizrException{{TApiData}}}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi, TApiData)(executeApiMethod As Expression(Of Func(Of Context, TWebApi, Task(Of TApiData))), context As Context = Nothing, clearCache As Boolean = False) As Task(Of  Option(Of TApiData, ApizrException(Of TApiData))
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}},Polly.Context,System.Boolean)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of Context, TWebApi, Task(Of TApiData))), Context, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, System.Threading.Tasks.Task(Of TApiData))), Polly.Context, System.Boolean)
  name.vb: SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of Context, TWebApi, Task(Of TApiData))), Context, Boolean)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken,System.Boolean)
  id: SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi, TApiData>(System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 83
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR with a cancellation token and returning an optional result\n"
  example: []
  syntax:
    content: public Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TWebApi
      description: The web api type
    - id: TApiData
      description: The api response
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiData},Apizr.ApizrException{{TApiData}}}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi, TApiData)(executeApiMethod As Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData))), token As CancellationToken = Nothing, clearCache As Boolean = False) As Task(Of  Option(Of TApiData, ApizrException(Of TApiData))
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}},System.Threading.CancellationToken,System.Boolean)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData))), CancellationToken, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData))), CancellationToken, Boolean)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiData>>>, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 89
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional result\n"
  example: []
  syntax:
    content: public Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TWebApi
      description: The web api type
    - id: TApiData
      description: The api response
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TApiData},Apizr.ApizrException{{TApiData}}}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi, TApiData)(executeApiMethod As Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData))), context As Context = Nothing, token As CancellationToken = Nothing, clearCache As Boolean = False) As Task(Of  Option(Of TApiData, ApizrException(Of TApiData))
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData))), Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiData))), Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData))), Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean)
  id: SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Boolean)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 99
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR returning an optional mapped result\n"
  example: []
  syntax:
    content: public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TWebApi
      description: The web api type
    - id: TModelData
      description: The mapped model type to map to
    - id: TApiData
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelData},Apizr.ApizrException{{TModelData}}}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi, TModelData, TApiData)(executeApiMethod As Expression(Of Func(Of TWebApi, Task(Of TApiData))), clearCache As Boolean = False) As Task(Of  Option(Of TModelData, ApizrException(Of TModelData))
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task{{TApiData}}}},System.Boolean)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of TWebApi, Task(Of TApiData))), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of TWebApi, Task(Of TApiData))), Boolean)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean)
  id: SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, System.Threading.Tasks.Task<TApiData>>>, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 104
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR with a Polly Context and returning an optional mapped result\n"
  example: []
  syntax:
    content: public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TWebApi
      description: The web api type
    - id: TModelData
      description: The mapped model type to map to
    - id: TApiData
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelData},Apizr.ApizrException{{TModelData}}}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi, TModelData, TApiData)(executeApiMethod As Expression(Of Func(Of Context, TWebApi, Task(Of TApiData))), context As Context = Nothing, clearCache As Boolean = False) As Task(Of  Option(Of TModelData, ApizrException(Of TModelData))
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}},Polly.Context,System.Boolean)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, TWebApi, Task(Of TApiData))), Context, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, System.Threading.Tasks.Task(Of TApiData))), Polly.Context, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, TWebApi, Task(Of TApiData))), Context, Boolean)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Threading.CancellationToken,System.Boolean)
  id: SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 110
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR with a cancellation token and returning an optional mapped result\n"
  example: []
  syntax:
    content: public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TWebApi
      description: The web api type
    - id: TModelData
      description: The mapped model type to map to
    - id: TApiData
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelData},Apizr.ApizrException{{TModelData}}}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi, TModelData, TApiData)(executeApiMethod As Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData))), token As CancellationToken = Nothing, clearCache As Boolean = False) As Task(Of  Option(Of TModelData, ApizrException(Of TModelData))
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}},System.Threading.CancellationToken,System.Boolean)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData))), CancellationToken, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData))), CancellationToken, Boolean)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiData>>>, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 117
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional mapped result\n"
  example: []
  syntax:
    content: public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TWebApi
      description: The web api type
    - id: TModelData
      description: The mapped model type to map to
    - id: TApiData
      description: The api result type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelData},Apizr.ApizrException{{TModelData}}}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi, TModelData, TApiData)(executeApiMethod As Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData))), context As Context = Nothing, token As CancellationToken = Nothing, clearCache As Boolean = False) As Task(Of  Option(Of TModelData, ApizrException(Of TModelData))
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData))), Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiData))), Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData))), Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean)
  id: SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>, TModelData, System.Boolean)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 125
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR with a mapped request and returning an optional mapped result\n"
  example: []
  syntax:
    content: public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache = false)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TWebApi
      description: The web api type
    - id: TModelData
      description: The mapped model type to map request from and result to
    - id: TApiData
      description: The api result type to map request to and result from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelData},Apizr.ApizrException{{TModelData}}}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi, TModelData, TApiData)(executeApiMethod As Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData))), modelData As TModelData, clearCache As Boolean = False) As Task(Of  Option(Of TModelData, ApizrException(Of TModelData))
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}},{TModelData},System.Boolean)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData))), TModelData, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData))), TModelData, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData))), TModelData, Boolean)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean)
  id: SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>, TModelData, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 132
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR with a mapped request and a Polly Context and returning an optional mapped result\n"
  example: []
  syntax:
    content: public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, bool clearCache = false)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    - id: context
      type: Polly.Context
      description: The Polly Context to pass through it all
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TWebApi
      description: The web api type
    - id: TModelData
      description: The mapped model type to map request from and result to
    - id: TApiData
      description: The api result type to map request to and result from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelData},Apizr.ApizrException{{TModelData}}}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi, TModelData, TApiData)(executeApiMethod As Expression(Of Func(Of Context, TWebApi, TApiData, Task(Of TApiData))), modelData As TModelData, context As Context = Nothing, clearCache As Boolean = False) As Task(Of  Option(Of TModelData, ApizrException(Of TModelData))
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}},{TModelData},Polly.Context,System.Boolean)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, TWebApi, TApiData, Task(Of TApiData))), TModelData, Context, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData))), TModelData, Polly.Context, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, TWebApi, TApiData, Task(Of TApiData))), TModelData, Context, Boolean)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Threading.CancellationToken,System.Boolean)
  id: SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>, TModelData, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 139
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR with a mapped request and a cancellation token and returning an optional mapped result\n"
  example: []
  syntax:
    content: public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken), bool clearCache = false)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    - id: token
      type: System.Threading.CancellationToken
      description: A cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TWebApi
      description: The web api type
    - id: TModelData
      description: The mapped model type to map request from and result to
    - id: TApiData
      description: The api result type to map request to and result from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelData},Apizr.ApizrException{{TModelData}}}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi, TModelData, TApiData)(executeApiMethod As Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task(Of TApiData))), modelData As TModelData, token As CancellationToken = Nothing, clearCache As Boolean = False) As Task(Of  Option(Of TModelData, ApizrException(Of TModelData))
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}},{TModelData},System.Threading.CancellationToken,System.Boolean)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task(Of TApiData))), TModelData, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData))), TModelData, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task(Of TApiData))), TModelData, CancellationToken, Boolean)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>, TModelData, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 148
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning an optional mapped result\n"
  example: []
  syntax:
    content: public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelData
      type: '{TModelData}'
      description: The model data to map
    - id: context
      type: Polly.Context
      description: The Polly Context to pass through it all
    - id: token
      type: System.Threading.CancellationToken
      description: A cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TWebApi
      description: The web api type
    - id: TModelData
      description: The mapped model type to map request from and result to
    - id: TApiData
      description: The api result type to map request to and result from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelData},Apizr.ApizrException{{TModelData}}}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi, TModelData, TApiData)(executeApiMethod As Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task(Of TApiData))), modelData As TModelData, context As Context = Nothing, token As CancellationToken = Nothing, clearCache As Boolean = False) As Task(Of  Option(Of TModelData, ApizrException(Of TModelData))
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}},{TModelData},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task(Of TApiData))), TModelData, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData))), TModelData, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task(Of TApiData))), TModelData, Context, CancellationToken, Boolean)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean)
  id: SendFor``5(System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(System.Linq.Expressions.Expression<System.Func<TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, System.Boolean)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 161
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR with a mapped request and returning an optional mapped result\n"
  example: []
  syntax:
    content: public Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache = false)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelRequestData
      type: '{TModelRequestData}'
      description: The model request data
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TWebApi
      description: The web api type
    - id: TModelResultData
      description: The model result type to map to
    - id: TApiResultData
      description: The api request type to map to
    - id: TApiRequestData
      description: The api result type to map from
    - id: TModelRequestData
      description: The model request type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelResultData},Apizr.ApizrException{{TModelResultData}}}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(executeApiMethod As Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), modelRequestData As TModelRequestData, clearCache As Boolean = False) As Task(Of  Option(Of TModelResultData, ApizrException(Of TModelResultData))
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}},{TModelRequestData},System.Boolean)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Boolean)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Threading.CancellationToken,System.Boolean)
  id: SendFor``5(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 170
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR with a mapped request and a cancellation token and returning an optional mapped result\n"
  example: []
  syntax:
    content: public Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, CancellationToken token = default(CancellationToken), bool clearCache = false)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelRequestData
      type: '{TModelRequestData}'
      description: The model request data
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TWebApi
      description: The web api type
    - id: TModelResultData
      description: The model result type to map to
    - id: TApiResultData
      description: The api request type to map to
    - id: TApiRequestData
      description: The api result type to map from
    - id: TModelRequestData
      description: The model request type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelResultData},Apizr.ApizrException{{TModelResultData}}}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(executeApiMethod As Expression(Of Func(Of CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), modelRequestData As TModelRequestData, token As CancellationToken = Nothing, clearCache As Boolean = False) As Task(Of  Option(Of TModelResultData, ApizrException(Of TModelResultData))
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}},{TModelRequestData},System.Threading.CancellationToken,System.Boolean)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, CancellationToken, Boolean)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean)
  id: SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, Polly.Context, System.Boolean)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 180
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR with a mapped request and a Polly Context and returning an optional mapped result\n"
  example: []
  syntax:
    content: public Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, bool clearCache = false)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelRequestData
      type: '{TModelRequestData}'
      description: The model request data
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TWebApi
      description: The web api type
    - id: TModelResultData
      description: The model result type to map to
    - id: TApiResultData
      description: The api request type to map to
    - id: TApiRequestData
      description: The api result type to map from
    - id: TModelRequestData
      description: The model request type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelResultData},Apizr.ApizrException{{TModelResultData}}}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(executeApiMethod As Expression(Of Func(Of Context, TWebApi, TApiRequestData, Task(Of TApiResultData))), modelRequestData As TModelRequestData, context As Context = Nothing, clearCache As Boolean = False) As Task(Of  Option(Of TModelResultData, ApizrException(Of TModelResultData))
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}},{TModelRequestData},Polly.Context,System.Boolean)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of Context, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Context, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, Polly.Context, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of Context, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Context, Boolean)
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  id: SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator
  langs:
  - csharp
  - vb
  name: SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean)
  nameWithType: ApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  type: Method
  source:
    id: SendFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Integrations.Optional\Optional\Requesting\Sending\ApizrOptionalMediator.cs
    startLine: 189
  assemblies:
  - Apizr.Integrations.Optional
  namespace: Apizr.Optional.Requesting.Sending
  summary: "\nSend an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning an optional mapped result\n"
  example: []
  syntax:
    content: public Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false)
    parameters:
    - id: executeApiMethod
      type: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
      description: The <code data-dev-comment-type="typeparamref" class="typeparamref">TWebApi</code> call to execute
    - id: modelRequestData
      type: '{TModelRequestData}'
      description: The model request data
    - id: context
      type: Polly.Context
      description: The Polly context
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    - id: clearCache
      type: System.Boolean
      description: 'Clear request cache before executing (default: false)'
    typeParameters:
    - id: TWebApi
      description: The web api type
    - id: TModelResultData
      description: The model result type to map to
    - id: TApiResultData
      description: The api request type to map to
    - id: TApiRequestData
      description: The api result type to map from
    - id: TModelRequestData
      description: The model request type to map from
    return:
      type: System.Threading.Tasks.Task{Optional.Option{{TModelResultData},Apizr.ApizrException{{TModelResultData}}}}
      description: ''
    content.vb: Public Function SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(executeApiMethod As Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), modelRequestData As TModelRequestData, context As Context = Nothing, token As CancellationToken = Nothing, clearCache As Boolean = False) As Task(Of  Option(Of TModelResultData, ApizrException(Of TModelResultData))
  overload: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  implements:
  - Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}},{TModelRequestData},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  nameWithType.vb: ApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Context, CancellationToken, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Context, CancellationToken, Boolean)
references:
- uid: Apizr.Optional.Requesting.Sending
  commentId: N:Apizr.Optional.Requesting.Sending
  name: Apizr.Optional.Requesting.Sending
  nameWithType: Apizr.Optional.Requesting.Sending
  fullName: Apizr.Optional.Requesting.Sending
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  commentId: T:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  parent: Apizr.Optional.Requesting.Sending
  name: IApizrOptionalMediator
  nameWithType: IApizrOptionalMediator
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediatorBase
  commentId: T:Apizr.Optional.Requesting.Sending.IApizrOptionalMediatorBase
  parent: Apizr.Optional.Requesting.Sending
  name: IApizrOptionalMediatorBase
  nameWithType: IApizrOptionalMediatorBase
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediatorBase
- uid: Apizr.Mediation.Requesting.Sending.IApizrMediatorBase
  commentId: T:Apizr.Mediation.Requesting.Sending.IApizrMediatorBase
  parent: Apizr.Mediation.Requesting.Sending
  name: IApizrMediatorBase
  nameWithType: IApizrMediatorBase
  fullName: Apizr.Mediation.Requesting.Sending.IApizrMediatorBase
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Apizr.Mediation.Requesting.Sending
  commentId: N:Apizr.Mediation.Requesting.Sending
  name: Apizr.Mediation.Requesting.Sending
  nameWithType: Apizr.Mediation.Requesting.Sending
  fullName: Apizr.Mediation.Requesting.Sending
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.#ctor*
  commentId: Overload:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.#ctor
  name: ApizrOptionalMediator
  nameWithType: ApizrOptionalMediator.ApizrOptionalMediator
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.ApizrOptionalMediator
- uid: MediatR.IMediator
  commentId: T:MediatR.IMediator
  parent: MediatR
  isExternal: true
  name: IMediator
  nameWithType: IMediator
  fullName: MediatR.IMediator
- uid: MediatR
  commentId: N:MediatR
  isExternal: true
  name: MediatR
  nameWithType: MediatR
  fullName: MediatR
- uid: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor*
  commentId: Overload:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor
  name: SendFor
  nameWithType: ApizrOptionalMediator.SendFor
  fullName: Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task}})
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}})
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}})
  name: SendFor<TWebApi>(Expression<Func<TWebApi, Task>>)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi>(Expression<Func<TWebApi, Task>>)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi>(System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task>>)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi)(Expression(Of Func(Of TWebApi, Task)))
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi)(System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task)))
  name.vb: SendFor(Of TWebApi)(Expression(Of Func(Of TWebApi, Task)))
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}})
    name: SendFor<TWebApi>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}})
    name: SendFor(Of TWebApi)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TWebApi, Task>>
  nameWithType: Expression<Func<TWebApi, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of TWebApi, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of TWebApi, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{MediatR.Unit,Apizr.ApizrException}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<Unit, ApizrException>>
  nameWithType: Task<Option<Unit, ApizrException>>
  fullName: System.Threading.Tasks.Task<Optional.Option<MediatR.Unit, Apizr.ApizrException>>
  nameWithType.vb: Task(Of Option(Of Unit, ApizrException))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of MediatR.Unit, Apizr.ApizrException))
  name.vb: Task(Of Option(Of Unit, ApizrException))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MediatR.Unit
    name: Unit
    nameWithType: Unit
    fullName: MediatR.Unit
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}})
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}})
  isExternal: true
  name: SendFor<TWebApi>(Expression<Func<TWebApi, Task>>)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi>(Expression<Func<TWebApi, Task>>)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi>(System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task>>)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi)(Expression(Of Func(Of TWebApi, Task)))
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi)(System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task)))
  name.vb: SendFor(Of TWebApi)(Expression(Of Func(Of TWebApi, Task)))
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}})
    name: SendFor<TWebApi>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}})
    name: SendFor(Of TWebApi)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},System.Threading.Tasks.Task}},Polly.Context)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context)
  name: SendFor<TWebApi>(Expression<Func<Context, TWebApi, Task>>, Context)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi>(Expression<Func<Context, TWebApi, Task>>, Context)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi>(System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, System.Threading.Tasks.Task>>, Polly.Context)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi)(Expression(Of Func(Of Context, TWebApi, Task)), Context)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, System.Threading.Tasks.Task)), Polly.Context)
  name.vb: SendFor(Of TWebApi)(Expression(Of Func(Of Context, TWebApi, Task)), Context)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context)
    name: SendFor<TWebApi>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context)
    name: SendFor(Of TWebApi)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, TWebApi, Task>>
  nameWithType: Expression<Func<Context, TWebApi, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of Context, TWebApi, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of Context, TWebApi, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Polly.Context
  commentId: T:Polly.Context
  parent: Polly
  isExternal: true
  name: Context
  nameWithType: Context
  fullName: Polly.Context
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context)
  isExternal: true
  name: SendFor<TWebApi>(Expression<Func<Context, TWebApi, Task>>, Context)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi>(Expression<Func<Context, TWebApi, Task>>, Context)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi>(System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, System.Threading.Tasks.Task>>, Polly.Context)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi)(Expression(Of Func(Of Context, TWebApi, Task)), Context)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, System.Threading.Tasks.Task)), Polly.Context)
  name.vb: SendFor(Of TWebApi)(Expression(Of Func(Of Context, TWebApi, Task)), Context)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context)
    name: SendFor<TWebApi>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context)
    name: SendFor(Of TWebApi)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Polly
  commentId: N:Polly
  isExternal: true
  name: Polly
  nameWithType: Polly
  fullName: Polly
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task}},System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken)
  name: SendFor<TWebApi>(Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi>(Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi>(System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task>>, System.Threading.CancellationToken)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi)(Expression(Of Func(Of CancellationToken, TWebApi, Task)), CancellationToken)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi)(System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task)), System.Threading.CancellationToken)
  name.vb: SendFor(Of TWebApi)(Expression(Of Func(Of CancellationToken, TWebApi, Task)), CancellationToken)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken)
    name: SendFor<TWebApi>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken)
    name: SendFor(Of TWebApi)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<CancellationToken, TWebApi, Task>>
  nameWithType: Expression<Func<CancellationToken, TWebApi, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of CancellationToken, TWebApi, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of CancellationToken, TWebApi, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken)
  isExternal: true
  name: SendFor<TWebApi>(Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi>(Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi>(System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task>>, System.Threading.CancellationToken)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi)(Expression(Of Func(Of CancellationToken, TWebApi, Task)), CancellationToken)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi)(System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task)), System.Threading.CancellationToken)
  name.vb: SendFor(Of TWebApi)(Expression(Of Func(Of CancellationToken, TWebApi, Task)), CancellationToken)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken)
    name: SendFor<TWebApi>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken)
    name: SendFor(Of TWebApi)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken)
  name: SendFor<TWebApi>(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi>(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi>(System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task>>, Polly.Context, System.Threading.CancellationToken)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi)(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task)), Context, CancellationToken)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task)), Polly.Context, System.Threading.CancellationToken)
  name.vb: SendFor(Of TWebApi)(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task)), Context, CancellationToken)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken)
    name: SendFor<TWebApi>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken)
    name: SendFor(Of TWebApi)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, CancellationToken, TWebApi, Task>>
  nameWithType: Expression<Func<Context, CancellationToken, TWebApi, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken)
  isExternal: true
  name: SendFor<TWebApi>(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi>(Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi>(System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task>>, Polly.Context, System.Threading.CancellationToken)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi)(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task)), Context, CancellationToken)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task)), Polly.Context, System.Threading.CancellationToken)
  name.vb: SendFor(Of TWebApi)(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task)), Context, CancellationToken)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken)
    name: SendFor<TWebApi>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken)
    name: SendFor(Of TWebApi)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiData},System.Threading.Tasks.Task}},{TModelData})
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1)
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<TWebApi, TApiData, System.Threading.Tasks.Task>>, TModelData)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of TWebApi, TApiData, Task)), TModelData)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiData, System.Threading.Tasks.Task)), TModelData)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of TWebApi, TApiData, Task)), TModelData)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiData},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TWebApi, TApiData, Task>>
  nameWithType: Expression<Func<TWebApi, TApiData, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<TWebApi, TApiData, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of TWebApi, TApiData, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiData, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of TWebApi, TApiData, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TModelData}'
  commentId: '!:TModelData'
  definition: TModelData
  name: TModelData
  nameWithType: TModelData
  fullName: TModelData
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1)
  isExternal: true
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<TWebApi, TApiData, System.Threading.Tasks.Task>>, TModelData)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of TWebApi, TApiData, Task)), TModelData)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiData, System.Threading.Tasks.Task)), TModelData)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of TWebApi, TApiData, Task)), TModelData)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: )
    nameWithType: )
    fullName: )
- uid: TModelData
  name: TModelData
  nameWithType: TModelData
  fullName: TModelData
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task}},{TModelData},System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken)
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task>>, TModelData, System.Threading.CancellationToken)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task)), TModelData, CancellationToken)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task)), TModelData, System.Threading.CancellationToken)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task)), TModelData, CancellationToken)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,``1,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<CancellationToken, TWebApi, TApiData, Task>>
  nameWithType: Expression<Func<CancellationToken, TWebApi, TApiData, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken)
  isExternal: true
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task>>, TModelData, System.Threading.CancellationToken)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task)), TModelData, CancellationToken)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task)), TModelData, System.Threading.CancellationToken)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task)), TModelData, CancellationToken)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},{TApiData},System.Threading.Tasks.Task}},{TModelData},Polly.Context)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context)
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task>>, TModelData, Polly.Context)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, TWebApi, TApiData, Task)), TModelData, Context)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task)), TModelData, Polly.Context)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, TWebApi, TApiData, Task)), TModelData, Context)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},{TApiData},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,``1,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, TWebApi, TApiData, Task>>
  nameWithType: Expression<Func<Context, TWebApi, TApiData, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of Context, TWebApi, TApiData, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of Context, TWebApi, TApiData, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context)
  isExternal: true
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task>>, TModelData, Polly.Context)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, TWebApi, TApiData, Task)), TModelData, Context)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task)), TModelData, Polly.Context)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, TWebApi, TApiData, Task)), TModelData, Context)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task}},{TModelData},Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken)
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task>>, TModelData, Polly.Context, System.Threading.CancellationToken)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task)), TModelData, Context, CancellationToken)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task)), TModelData, Polly.Context, System.Threading.CancellationToken)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task)), TModelData, Context, CancellationToken)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,``1,System.Threading.Tasks.Task}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>
  nameWithType: Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task>>
  nameWithType.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task))
  name.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken)
  isExternal: true
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task>>, TModelData, Polly.Context, System.Threading.CancellationToken)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task)), TModelData, Context, CancellationToken)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task)), TModelData, Polly.Context, System.Threading.CancellationToken)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task)), TModelData, Context, CancellationToken)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task{{TApiData}}}},System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean)
  name: SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TApiData>(System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of TWebApi, Task(Of TApiData))), Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Boolean)
  name.vb: SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of TWebApi, Task(Of TApiData))), Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean)
    name: SendFor<TWebApi, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean)
    name: SendFor(Of TWebApi, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TWebApi, Task<TApiData>>>
  nameWithType: Expression<Func<TWebApi, Task<TApiData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task<TApiData>>>
  nameWithType.vb: Expression(Of Func(Of TWebApi, Task(Of TApiData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task(Of TApiData)))
  name.vb: Expression(Of Func(Of TWebApi, Task(Of TApiData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{Optional.Option{{TApiData},Apizr.ApizrException{{TApiData}}}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{`1,Apizr.ApizrException{`1}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TApiData, ApizrException<TApiData>>>
  nameWithType: Task<Option<TApiData, ApizrException<TApiData>>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TApiData, Apizr.ApizrException<TApiData>>>
  nameWithType.vb: Task(Of Option(Of TApiData, ApizrException(Of TApiData)))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TApiData, Apizr.ApizrException(Of TApiData)))
  name.vb: Task(Of Option(Of TApiData, ApizrException(Of TApiData)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean)
  isExternal: true
  name: SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TApiData>(System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of TWebApi, Task(Of TApiData))), Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Boolean)
  name.vb: SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of TWebApi, Task(Of TApiData))), Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean)
    name: SendFor<TWebApi, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean)
    name: SendFor(Of TWebApi, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}},Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean)
  name: SendFor<TWebApi, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, System.Threading.Tasks.Task<TApiData>>>, Polly.Context, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of Context, TWebApi, Task(Of TApiData))), Context, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, System.Threading.Tasks.Task(Of TApiData))), Polly.Context, System.Boolean)
  name.vb: SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of Context, TWebApi, Task(Of TApiData))), Context, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean)
    name: SendFor<TWebApi, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean)
    name: SendFor(Of TWebApi, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, TWebApi, Task<TApiData>>>
  nameWithType: Expression<Func<Context, TWebApi, Task<TApiData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, System.Threading.Tasks.Task<TApiData>>>
  nameWithType.vb: Expression(Of Func(Of Context, TWebApi, Task(Of TApiData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, System.Threading.Tasks.Task(Of TApiData)))
  name.vb: Expression(Of Func(Of Context, TWebApi, Task(Of TApiData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean)
  isExternal: true
  name: SendFor<TWebApi, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, System.Threading.Tasks.Task<TApiData>>>, Polly.Context, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of Context, TWebApi, Task(Of TApiData))), Context, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, System.Threading.Tasks.Task(Of TApiData))), Polly.Context, System.Boolean)
  name.vb: SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of Context, TWebApi, Task(Of TApiData))), Context, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean)
    name: SendFor<TWebApi, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean)
    name: SendFor(Of TWebApi, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken,System.Boolean)
  name: SendFor<TWebApi, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TApiData>(System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData))), CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData))), CancellationToken, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken,System.Boolean)
    name: SendFor<TWebApi, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken,System.Boolean)
    name: SendFor(Of TWebApi, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>
  nameWithType: Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiData>>>
  nameWithType.vb: Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiData)))
  name.vb: Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken,System.Boolean)
  isExternal: true
  name: SendFor<TWebApi, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TApiData>(System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData))), CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData))), CancellationToken, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken,System.Boolean)
    name: SendFor<TWebApi, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken,System.Boolean)
    name: SendFor(Of TWebApi, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  name: SendFor<TWebApi, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiData>>>, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData))), Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiData))), Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData))), Context, CancellationToken, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
    name: SendFor<TWebApi, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
    name: SendFor(Of TWebApi, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>
  nameWithType: Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiData>>>
  nameWithType.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiData)))
  name.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExternal: true
  name: SendFor<TWebApi, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiData>>>, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData))), Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiData))), Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData))), Context, CancellationToken, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
    name: SendFor<TWebApi, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
    name: SendFor(Of TWebApi, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{{TWebApi},System.Threading.Tasks.Task{{TApiData}}}},System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean)
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of TWebApi, Task(Of TApiData))), Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of TWebApi, Task(Of TApiData))), Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Optional.Option{{TModelData},Apizr.ApizrException{{TModelData}}}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{`1,Apizr.ApizrException{`1}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TModelData, ApizrException<TModelData>>>
  nameWithType: Task<Option<TModelData, ApizrException<TModelData>>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TModelData, Apizr.ApizrException<TModelData>>>
  nameWithType.vb: Task(Of Option(Of TModelData, ApizrException(Of TModelData)))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TModelData, Apizr.ApizrException(Of TModelData)))
  name.vb: Task(Of Option(Of TModelData, ApizrException(Of TModelData)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean)
  isExternal: true
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of TWebApi, Task(Of TApiData))), Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of TWebApi, Task(Of TApiData))), Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}},Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean)
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, System.Threading.Tasks.Task<TApiData>>>, Polly.Context, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, TWebApi, Task(Of TApiData))), Context, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, System.Threading.Tasks.Task(Of TApiData))), Polly.Context, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, TWebApi, Task(Of TApiData))), Context, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean)
  isExternal: true
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, System.Threading.Tasks.Task<TApiData>>>, Polly.Context, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, TWebApi, Task(Of TApiData))), Context, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, System.Threading.Tasks.Task(Of TApiData))), Polly.Context, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, TWebApi, Task(Of TApiData))), Context, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Threading.CancellationToken,System.Boolean)
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData))), CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData))), CancellationToken, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Threading.CancellationToken,System.Boolean)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Threading.CancellationToken,System.Boolean)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Threading.CancellationToken,System.Boolean)
  isExternal: true
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiData>>>, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData))), CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiData))), System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, Task(Of TApiData))), CancellationToken, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Threading.CancellationToken,System.Boolean)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Threading.CancellationToken,System.Boolean)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},System.Threading.Tasks.Task{{TApiData}}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiData>>>, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData))), Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiData))), Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData))), Context, CancellationToken, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExternal: true
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task<TApiData>>>, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData))), Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, System.Threading.Tasks.Task(Of TApiData))), Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, Task(Of TApiData))), Context, CancellationToken, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}},{TModelData},System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean)
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>, TModelData, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData))), TModelData, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData))), TModelData, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData))), TModelData, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TWebApi, TApiData, Task<TApiData>>>
  nameWithType: Expression<Func<TWebApi, TApiData, Task<TApiData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>
  nameWithType.vb: Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData)))
  name.vb: Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean)
  isExternal: true
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>, TModelData, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData))), TModelData, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData))), TModelData, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of TWebApi, TApiData, Task(Of TApiData))), TModelData, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}},{TModelData},Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean)
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>, TModelData, Polly.Context, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, TWebApi, TApiData, Task(Of TApiData))), TModelData, Context, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData))), TModelData, Polly.Context, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, TWebApi, TApiData, Task(Of TApiData))), TModelData, Context, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,``1,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>
  nameWithType: Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>
  nameWithType.vb: Expression(Of Func(Of Context, TWebApi, TApiData, Task(Of TApiData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData)))
  name.vb: Expression(Of Func(Of Context, TWebApi, TApiData, Task(Of TApiData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean)
  isExternal: true
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>, TModelData, Polly.Context, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, TWebApi, TApiData, Task(Of TApiData))), TModelData, Context, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData))), TModelData, Polly.Context, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, TWebApi, TApiData, Task(Of TApiData))), TModelData, Context, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}},{TModelData},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Threading.CancellationToken,System.Boolean)
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>, TModelData, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task(Of TApiData))), TModelData, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData))), TModelData, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task(Of TApiData))), TModelData, CancellationToken, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Threading.CancellationToken,System.Boolean)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Threading.CancellationToken,System.Boolean)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,``1,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>
  nameWithType: Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>
  nameWithType.vb: Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task(Of TApiData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData)))
  name.vb: Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task(Of TApiData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Threading.CancellationToken,System.Boolean)
  isExternal: true
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>, TModelData, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task(Of TApiData))), TModelData, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData))), TModelData, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of CancellationToken, TWebApi, TApiData, Task(Of TApiData))), TModelData, CancellationToken, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Threading.CancellationToken,System.Boolean)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Threading.CancellationToken,System.Boolean)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}},{TModelData},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>, TModelData, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task(Of TApiData))), TModelData, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData))), TModelData, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task(Of TApiData))), TModelData, Context, CancellationToken, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},{TApiData},System.Threading.Tasks.Task{{TApiData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,``1,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>
  nameWithType: Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>
  nameWithType.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task(Of TApiData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData)))
  name.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task(Of TApiData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExternal: true
  name: SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task<TApiData>>>, TModelData, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task(Of TApiData))), TModelData, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, TApiData, System.Threading.Tasks.Task(Of TApiData))), TModelData, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelData, TApiData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiData, Task(Of TApiData))), TModelData, Context, CancellationToken, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
    name: SendFor<TWebApi, TModelData, TApiData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelData, TApiData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)
    name: SendFor(Of TWebApi, TModelData, TApiData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelData, TApiData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiData
    nameWithType: TApiData
    fullName: TApiData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelData
    nameWithType: TModelData
    fullName: TModelData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}},{TModelRequestData},System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean)
  name: SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(System.Linq.Expressions.Expression<System.Func<TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean)
    name: SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean)
    name: SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``2,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>
  nameWithType: Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>
  nameWithType.vb: Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData)))
  name.vb: Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TModelRequestData}'
  commentId: '!:TModelRequestData'
  definition: TModelRequestData
  name: TModelRequestData
  nameWithType: TModelRequestData
  fullName: TModelRequestData
- uid: System.Threading.Tasks.Task{Optional.Option{{TModelResultData},Apizr.ApizrException{{TModelResultData}}}}
  commentId: T:System.Threading.Tasks.Task{Optional.Option{`1,Apizr.ApizrException{`1}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Option<TModelResultData, ApizrException<TModelResultData>>>
  nameWithType: Task<Option<TModelResultData, ApizrException<TModelResultData>>>
  fullName: System.Threading.Tasks.Task<Optional.Option<TModelResultData, Apizr.ApizrException<TModelResultData>>>
  nameWithType.vb: Task(Of Option(Of TModelResultData, ApizrException(Of TModelResultData)))
  fullName.vb: System.Threading.Tasks.Task(Of Optional.Option(Of TModelResultData, Apizr.ApizrException(Of TModelResultData)))
  name.vb: Task(Of Option(Of TModelResultData, ApizrException(Of TModelResultData)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: <
    nameWithType: <
    fullName: <
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Optional.Option`2
    name: Option
    nameWithType: Option
    fullName: Optional.Option
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Apizr.ApizrException`1
    name: ApizrException
    nameWithType: ApizrException
    fullName: Apizr.ApizrException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModelResultData
    nameWithType: TModelResultData
    fullName: TModelResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean)
  isExternal: true
  name: SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(System.Linq.Expressions.Expression<System.Func<TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(System.Linq.Expressions.Expression(Of System.Func(Of TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean)
    name: SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean)
    name: SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TModelRequestData
  name: TModelRequestData
  nameWithType: TModelRequestData
  fullName: TModelRequestData
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}},{TModelRequestData},System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Threading.CancellationToken,System.Boolean)
  name: SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, CancellationToken, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Threading.CancellationToken,System.Boolean)
    name: SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Threading.CancellationToken,System.Boolean)
    name: SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,`0,``2,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>
  nameWithType: Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>
  nameWithType.vb: Expression(Of Func(Of CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData)))
  name.vb: Expression(Of Func(Of CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Threading.CancellationToken,System.Boolean)
  isExternal: true
  name: SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(System.Linq.Expressions.Expression(Of System.Func(Of System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, CancellationToken, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Threading.CancellationToken,System.Boolean)
    name: SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Threading.CancellationToken,System.Boolean)
    name: SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}},{TModelRequestData},Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean)
  name: SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, Polly.Context, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of Context, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Context, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, Polly.Context, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of Context, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Context, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean)
    name: SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean)
    name: SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,`0,``2,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>
  nameWithType: Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>
  nameWithType.vb: Expression(Of Func(Of Context, TWebApi, TApiRequestData, Task(Of TApiResultData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData)))
  name.vb: Expression(Of Func(Of Context, TWebApi, TApiRequestData, Task(Of TApiResultData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean)
  isExternal: true
  name: SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, Polly.Context, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of Context, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Context, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, Polly.Context, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of Context, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Context, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean)
    name: SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean)
    name: SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}},{TModelRequestData},Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  parent: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator
  definition: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  name: SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Context, CancellationToken, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean)
    name: SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean)
    name: SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,{TWebApi},{TApiRequestData},System.Threading.Tasks.Task{{TApiResultData}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,`0,``2,System.Threading.Tasks.Task{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>
  nameWithType: Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>
  fullName: System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>
  nameWithType.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData)))
  name.vb: Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  commentId: M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean)
  isExternal: true
  name: SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean)
  nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean)
  fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(System.Linq.Expressions.Expression<System.Func<Polly.Context, System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task<TApiResultData>>>, TModelRequestData, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  nameWithType.vb: IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Context, CancellationToken, Boolean)
  fullName.vb: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(System.Linq.Expressions.Expression(Of System.Func(Of Polly.Context, System.Threading.CancellationToken, TWebApi, TApiRequestData, System.Threading.Tasks.Task(Of TApiResultData))), TModelRequestData, Polly.Context, System.Threading.CancellationToken, System.Boolean)
  name.vb: SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)(Expression(Of Func(Of Context, CancellationToken, TWebApi, TApiRequestData, Task(Of TApiResultData))), TModelRequestData, Context, CancellationToken, Boolean)
  spec.csharp:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean)
    name: SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
    nameWithType: IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean)
    name: SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
    nameWithType: IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
    fullName: Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor(Of TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TApiRequestData
    nameWithType: TApiRequestData
    fullName: TApiRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TModelRequestData
    nameWithType: TModelRequestData
    fullName: TModelRequestData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Polly.Context
    name: Context
    nameWithType: Context
    fullName: Polly.Context
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
