### YamlMime:ManagedReference
items:
- uid: Apizr.Requesting.ICrudApi`4
  commentId: T:Apizr.Requesting.ICrudApi`4
  id: ICrudApi`4
  parent: Apizr.Requesting
  children:
  - Apizr.Requesting.ICrudApi`4.Create(`0)
  - Apizr.Requesting.ICrudApi`4.Create(`0,Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Requesting.ICrudApi`4.Delete(`1)
  - Apizr.Requesting.ICrudApi`4.Delete(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Requesting.ICrudApi`4.Read(`1)
  - Apizr.Requesting.ICrudApi`4.Read(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Requesting.ICrudApi`4.ReadAll
  - Apizr.Requesting.ICrudApi`4.ReadAll(Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Requesting.ICrudApi`4.ReadAll(`3)
  - Apizr.Requesting.ICrudApi`4.ReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Requesting.ICrudApi`4.SafeCreate(`0)
  - Apizr.Requesting.ICrudApi`4.SafeCreate(`0,Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Requesting.ICrudApi`4.SafeDelete(`1)
  - Apizr.Requesting.ICrudApi`4.SafeDelete(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Requesting.ICrudApi`4.SafeRead(`1)
  - Apizr.Requesting.ICrudApi`4.SafeRead(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Requesting.ICrudApi`4.SafeReadAll
  - Apizr.Requesting.ICrudApi`4.SafeReadAll(Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Requesting.ICrudApi`4.SafeReadAll(`3)
  - Apizr.Requesting.ICrudApi`4.SafeReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Requesting.ICrudApi`4.SafeUpdate(`1,`0)
  - Apizr.Requesting.ICrudApi`4.SafeUpdate(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Requesting.ICrudApi`4.Update(`1,`0)
  - Apizr.Requesting.ICrudApi`4.Update(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions)
  langs:
  - csharp
  - vb
  name: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>
  type: Interface
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: ICrudApi
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 14
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: The crud api interface
  example: []
  syntax:
    content: 'public interface ICrudApi<T, in TKey, TReadAllResult, in TReadAllParams> where T : class'
    typeParameters:
    - id: T
      description: The entity type
    - id: TKey
      description: The entity's crud key type
    - id: TReadAllResult
      description: The "ReadAll" query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    content.vb: Public Interface ICrudApi(Of T As Class, In TKey, TReadAllResult, In TReadAllParams)
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams)
  name.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams)
- uid: Apizr.Requesting.ICrudApi`4.Create(`0)
  commentId: M:Apizr.Requesting.ICrudApi`4.Create(`0)
  id: Create(`0)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Create(T)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Create(T)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Create(T)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: Create
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 23
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send a Create request with a <code class="typeparamref">T</code> payload
  example: []
  syntax:
    content: >-
      [Post("")]

      Task<T> Create(T payload)
    parameters:
    - id: payload
      type: '{T}'
      description: The payload
      attributes:
      - type: Refit.BodyAttribute
        ctor: Refit.BodyAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: >-
      <Post("")>

      Function Create(payload As T) As Task(Of T)
  overload: Apizr.Requesting.ICrudApi`4.Create*
  attributes:
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Create(T)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Create(T)
- uid: Apizr.Requesting.ICrudApi`4.SafeCreate(`0)
  commentId: M:Apizr.Requesting.ICrudApi`4.SafeCreate(`0)
  id: SafeCreate(`0)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: SafeCreate(T)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeCreate(T)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeCreate(T)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: SafeCreate
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 31
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send a Create request with a <code class="typeparamref">T</code> payload
  example: []
  syntax:
    content: >-
      [Post("")]

      Task<IApiResponse<T>> SafeCreate(T payload)
    parameters:
    - id: payload
      type: '{T}'
      description: The payload
      attributes:
      - type: Refit.BodyAttribute
        ctor: Refit.BodyAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{Refit.IApiResponse{{T}}}
      description: ''
    content.vb: >-
      <Post("")>

      Function SafeCreate(payload As T) As Task(Of IApiResponse(Of T))
  overload: Apizr.Requesting.ICrudApi`4.SafeCreate*
  attributes:
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeCreate(T)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeCreate(T)
- uid: Apizr.Requesting.ICrudApi`4.Create(`0,Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Requesting.ICrudApi`4.Create(`0,Apizr.Configuring.Request.IApizrRequestOptions)
  id: Create(`0,Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Create(T, IApizrRequestOptions)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Create(T, IApizrRequestOptions)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Create(T, Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: Create
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 40
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send a Create request with a <code class="typeparamref">T</code> payload, passing a Polly context and a cancellation token through the request
  example: []
  syntax:
    content: >-
      [Post("")]

      Task<T> Create(T payload, IApizrRequestOptions options)
    parameters:
    - id: payload
      type: '{T}'
      description: The payload
      attributes:
      - type: Refit.BodyAttribute
        ctor: Refit.BodyAttribute.#ctor
        arguments: []
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: >-
      <Post("")>

      Function Create(payload As T, options As IApizrRequestOptions) As Task(Of T)
  overload: Apizr.Requesting.ICrudApi`4.Create*
  attributes:
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Create(T, IApizrRequestOptions)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Create(T, Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Requesting.ICrudApi`4.SafeCreate(`0,Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Requesting.ICrudApi`4.SafeCreate(`0,Apizr.Configuring.Request.IApizrRequestOptions)
  id: SafeCreate(`0,Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: SafeCreate(T, IApizrRequestOptions)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeCreate(T, IApizrRequestOptions)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeCreate(T, Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: SafeCreate
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 49
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send a Create request with a <code class="typeparamref">T</code> payload, passing a Polly context and a cancellation token through the request
  example: []
  syntax:
    content: >-
      [Post("")]

      Task<IApiResponse<T>> SafeCreate(T payload, IApizrRequestOptions options)
    parameters:
    - id: payload
      type: '{T}'
      description: The payload
      attributes:
      - type: Refit.BodyAttribute
        ctor: Refit.BodyAttribute.#ctor
        arguments: []
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{Refit.IApiResponse{{T}}}
      description: ''
    content.vb: >-
      <Post("")>

      Function SafeCreate(payload As T, options As IApizrRequestOptions) As Task(Of IApiResponse(Of T))
  overload: Apizr.Requesting.ICrudApi`4.SafeCreate*
  attributes:
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeCreate(T, IApizrRequestOptions)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeCreate(T, Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Requesting.ICrudApi`4.ReadAll
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll
  id: ReadAll
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll()
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll()
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll()
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: ReadAll
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 60
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send a ReadAll request
  example: []
  syntax:
    content: >-
      [Get("")]

      Task<TReadAllResult> ReadAll()
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      Function ReadAll() As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll()
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll()
- uid: Apizr.Requesting.ICrudApi`4.SafeReadAll
  commentId: M:Apizr.Requesting.ICrudApi`4.SafeReadAll
  id: SafeReadAll
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: SafeReadAll()
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeReadAll()
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeReadAll()
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: SafeReadAll
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 67
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send a ReadAll request
  example: []
  syntax:
    content: >-
      [Get("")]

      Task<IApiResponse<TReadAllResult>> SafeReadAll()
    return:
      type: System.Threading.Tasks.Task{Refit.IApiResponse{{TReadAllResult}}}
      description: ''
    content.vb: >-
      <Get("")>

      Function SafeReadAll() As Task(Of IApiResponse(Of TReadAllResult))
  overload: Apizr.Requesting.ICrudApi`4.SafeReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeReadAll()
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeReadAll()
- uid: Apizr.Requesting.ICrudApi`4.ReadAll(Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll(Apizr.Configuring.Request.IApizrRequestOptions)
  id: ReadAll(Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll(IApizrRequestOptions)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(IApizrRequestOptions)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: ReadAll
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 75
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send a ReadAll request
  example: []
  syntax:
    content: >-
      [Get("")]

      Task<TReadAllResult> ReadAll(IApizrRequestOptions options)
    parameters:
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      Function ReadAll(options As IApizrRequestOptions) As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(IApizrRequestOptions)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Requesting.ICrudApi`4.SafeReadAll(Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Requesting.ICrudApi`4.SafeReadAll(Apizr.Configuring.Request.IApizrRequestOptions)
  id: SafeReadAll(Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: SafeReadAll(IApizrRequestOptions)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeReadAll(IApizrRequestOptions)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeReadAll(Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: SafeReadAll
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 83
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send a ReadAll request
  example: []
  syntax:
    content: >-
      [Get("")]

      Task<IApiResponse<TReadAllResult>> SafeReadAll(IApizrRequestOptions options)
    parameters:
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{Refit.IApiResponse{{TReadAllResult}}}
      description: ''
    content.vb: >-
      <Get("")>

      Function SafeReadAll(options As IApizrRequestOptions) As Task(Of IApiResponse(Of TReadAllResult))
  overload: Apizr.Requesting.ICrudApi`4.SafeReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeReadAll(IApizrRequestOptions)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeReadAll(Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Requesting.ICrudApi`4.ReadAll(`3)
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll(`3)
  id: ReadAll(`3)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll(TReadAllParams)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: ReadAll
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 91
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send a ReadAll request with some query params used as cache key
  example: []
  syntax:
    content: >-
      [Get("")]

      Task<TReadAllResult> ReadAll(TReadAllParams readAllParams)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: Query params used as cache key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      Function ReadAll(readAllParams As TReadAllParams) As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams)
- uid: Apizr.Requesting.ICrudApi`4.SafeReadAll(`3)
  commentId: M:Apizr.Requesting.ICrudApi`4.SafeReadAll(`3)
  id: SafeReadAll(`3)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: SafeReadAll(TReadAllParams)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeReadAll(TReadAllParams)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeReadAll(TReadAllParams)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: SafeReadAll
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 99
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send a ReadAll request with some query params used as cache key
  example: []
  syntax:
    content: >-
      [Get("")]

      Task<IApiResponse<TReadAllResult>> SafeReadAll(TReadAllParams readAllParams)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: Query params used as cache key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{Refit.IApiResponse{{TReadAllResult}}}
      description: ''
    content.vb: >-
      <Get("")>

      Function SafeReadAll(readAllParams As TReadAllParams) As Task(Of IApiResponse(Of TReadAllResult))
  overload: Apizr.Requesting.ICrudApi`4.SafeReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeReadAll(TReadAllParams)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeReadAll(TReadAllParams)
- uid: Apizr.Requesting.ICrudApi`4.ReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions)
  id: ReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll(TReadAllParams, IApizrRequestOptions)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams, IApizrRequestOptions)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams, Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: ReadAll
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 108
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send a ReadAll request with some query params used as cache key
  example: []
  syntax:
    content: >-
      [Get("")]

      Task<TReadAllResult> ReadAll(TReadAllParams readAllParams, IApizrRequestOptions options)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: Query params used as cache key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      Function ReadAll(readAllParams As TReadAllParams, options As IApizrRequestOptions) As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams, IApizrRequestOptions)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams, Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Requesting.ICrudApi`4.SafeReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Requesting.ICrudApi`4.SafeReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions)
  id: SafeReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: SafeReadAll(TReadAllParams, IApizrRequestOptions)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeReadAll(TReadAllParams, IApizrRequestOptions)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeReadAll(TReadAllParams, Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: SafeReadAll
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 117
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send a ReadAll request with some query params used as cache key
  example: []
  syntax:
    content: >-
      [Get("")]

      Task<IApiResponse<TReadAllResult>> SafeReadAll(TReadAllParams readAllParams, IApizrRequestOptions options)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: Query params used as cache key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{Refit.IApiResponse{{TReadAllResult}}}
      description: ''
    content.vb: >-
      <Get("")>

      Function SafeReadAll(readAllParams As TReadAllParams, options As IApizrRequestOptions) As Task(Of IApiResponse(Of TReadAllResult))
  overload: Apizr.Requesting.ICrudApi`4.SafeReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeReadAll(TReadAllParams, IApizrRequestOptions)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeReadAll(TReadAllParams, Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Requesting.ICrudApi`4.Read(`1)
  commentId: M:Apizr.Requesting.ICrudApi`4.Read(`1)
  id: Read(`1)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Read(TKey)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: Read
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 129
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send a Read request with a key param
  example: []
  syntax:
    content: >-
      [Get("/{key}")]

      Task<T> Read(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: >-
      <Get("/{key}")>

      Function Read(key As TKey) As Task(Of T)
  overload: Apizr.Requesting.ICrudApi`4.Read*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey)
- uid: Apizr.Requesting.ICrudApi`4.SafeRead(`1)
  commentId: M:Apizr.Requesting.ICrudApi`4.SafeRead(`1)
  id: SafeRead(`1)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: SafeRead(TKey)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeRead(TKey)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeRead(TKey)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: SafeRead
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 137
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send a Read request with a key param
  example: []
  syntax:
    content: >-
      [Get("/{key}")]

      Task<IApiResponse<T>> SafeRead(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{Refit.IApiResponse{{T}}}
      description: ''
    content.vb: >-
      <Get("/{key}")>

      Function SafeRead(key As TKey) As Task(Of IApiResponse(Of T))
  overload: Apizr.Requesting.ICrudApi`4.SafeRead*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeRead(TKey)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeRead(TKey)
- uid: Apizr.Requesting.ICrudApi`4.Read(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Requesting.ICrudApi`4.Read(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  id: Read(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Read(TKey, IApizrRequestOptions)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey, IApizrRequestOptions)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey, Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: Read
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 146
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send a Read request with a key param
  example: []
  syntax:
    content: >-
      [Get("/{key}")]

      Task<T> Read(TKey key, IApizrRequestOptions options)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: >-
      <Get("/{key}")>

      Function Read(key As TKey, options As IApizrRequestOptions) As Task(Of T)
  overload: Apizr.Requesting.ICrudApi`4.Read*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey, IApizrRequestOptions)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey, Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Requesting.ICrudApi`4.SafeRead(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Requesting.ICrudApi`4.SafeRead(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  id: SafeRead(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: SafeRead(TKey, IApizrRequestOptions)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeRead(TKey, IApizrRequestOptions)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeRead(TKey, Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: SafeRead
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 155
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send a Read request with a key param
  example: []
  syntax:
    content: >-
      [Get("/{key}")]

      Task<IApiResponse<T>> SafeRead(TKey key, IApizrRequestOptions options)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{Refit.IApiResponse{{T}}}
      description: ''
    content.vb: >-
      <Get("/{key}")>

      Function SafeRead(key As TKey, options As IApizrRequestOptions) As Task(Of IApiResponse(Of T))
  overload: Apizr.Requesting.ICrudApi`4.SafeRead*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeRead(TKey, IApizrRequestOptions)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeRead(TKey, Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Requesting.ICrudApi`4.Update(`1,`0)
  commentId: M:Apizr.Requesting.ICrudApi`4.Update(`1,`0)
  id: Update(`1,`0)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Update(TKey, T)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Update(TKey, T)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Update(TKey, T)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: Update
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 168
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send an Update request with a key and a payload
  example: []
  syntax:
    content: >-
      [Put("/{key}")]

      Task Update(TKey key, T payload)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    - id: payload
      type: '{T}'
      description: The payload
      attributes:
      - type: Refit.BodyAttribute
        ctor: Refit.BodyAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Put("/{key}")>

      Function Update(key As TKey, payload As T) As Task
  overload: Apizr.Requesting.ICrudApi`4.Update*
  attributes:
  - type: Refit.PutAttribute
    ctor: Refit.PutAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Update(TKey, T)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Update(TKey, T)
- uid: Apizr.Requesting.ICrudApi`4.SafeUpdate(`1,`0)
  commentId: M:Apizr.Requesting.ICrudApi`4.SafeUpdate(`1,`0)
  id: SafeUpdate(`1,`0)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: SafeUpdate(TKey, T)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeUpdate(TKey, T)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeUpdate(TKey, T)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: SafeUpdate
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 177
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send an Update request with a key and a payload
  example: []
  syntax:
    content: >-
      [Put("/{key}")]

      Task<IApiResponse> SafeUpdate(TKey key, T payload)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    - id: payload
      type: '{T}'
      description: The payload
      attributes:
      - type: Refit.BodyAttribute
        ctor: Refit.BodyAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{Refit.IApiResponse}
      description: ''
    content.vb: >-
      <Put("/{key}")>

      Function SafeUpdate(key As TKey, payload As T) As Task(Of IApiResponse)
  overload: Apizr.Requesting.ICrudApi`4.SafeUpdate*
  attributes:
  - type: Refit.PutAttribute
    ctor: Refit.PutAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeUpdate(TKey, T)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeUpdate(TKey, T)
- uid: Apizr.Requesting.ICrudApi`4.Update(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Requesting.ICrudApi`4.Update(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions)
  id: Update(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Update(TKey, T, IApizrRequestOptions)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Update(TKey, T, IApizrRequestOptions)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Update(TKey, T, Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: Update
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 187
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send an Update request with a key and a payload
  example: []
  syntax:
    content: >-
      [Put("/{key}")]

      Task Update(TKey key, T payload, IApizrRequestOptions options)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    - id: payload
      type: '{T}'
      description: The payload
      attributes:
      - type: Refit.BodyAttribute
        ctor: Refit.BodyAttribute.#ctor
        arguments: []
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Put("/{key}")>

      Function Update(key As TKey, payload As T, options As IApizrRequestOptions) As Task
  overload: Apizr.Requesting.ICrudApi`4.Update*
  attributes:
  - type: Refit.PutAttribute
    ctor: Refit.PutAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Update(TKey, T, IApizrRequestOptions)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Update(TKey, T, Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Requesting.ICrudApi`4.SafeUpdate(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Requesting.ICrudApi`4.SafeUpdate(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions)
  id: SafeUpdate(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: SafeUpdate(TKey, T, IApizrRequestOptions)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeUpdate(TKey, T, IApizrRequestOptions)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeUpdate(TKey, T, Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: SafeUpdate
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 197
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send an Update request with a key and a payload
  example: []
  syntax:
    content: >-
      [Put("/{key}")]

      Task<IApiResponse> SafeUpdate(TKey key, T payload, IApizrRequestOptions options)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    - id: payload
      type: '{T}'
      description: The payload
      attributes:
      - type: Refit.BodyAttribute
        ctor: Refit.BodyAttribute.#ctor
        arguments: []
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{Refit.IApiResponse}
      description: ''
    content.vb: >-
      <Put("/{key}")>

      Function SafeUpdate(key As TKey, payload As T, options As IApizrRequestOptions) As Task(Of IApiResponse)
  overload: Apizr.Requesting.ICrudApi`4.SafeUpdate*
  attributes:
  - type: Refit.PutAttribute
    ctor: Refit.PutAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeUpdate(TKey, T, IApizrRequestOptions)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeUpdate(TKey, T, Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Requesting.ICrudApi`4.Delete(`1)
  commentId: M:Apizr.Requesting.ICrudApi`4.Delete(`1)
  id: Delete(`1)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Delete(TKey)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Delete(TKey)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Delete(TKey)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: Delete
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 209
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send a Delete request with a key param
  example: []
  syntax:
    content: >-
      [Delete("/{key}")]

      Task Delete(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Delete("/{key}")>

      Function Delete(key As TKey) As Task
  overload: Apizr.Requesting.ICrudApi`4.Delete*
  attributes:
  - type: Refit.DeleteAttribute
    ctor: Refit.DeleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Delete(TKey)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Delete(TKey)
- uid: Apizr.Requesting.ICrudApi`4.SafeDelete(`1)
  commentId: M:Apizr.Requesting.ICrudApi`4.SafeDelete(`1)
  id: SafeDelete(`1)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: SafeDelete(TKey)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeDelete(TKey)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeDelete(TKey)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: SafeDelete
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 217
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send a Delete request with a key param
  example: []
  syntax:
    content: >-
      [Delete("/{key}")]

      Task<IApiResponse> SafeDelete(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    return:
      type: System.Threading.Tasks.Task{Refit.IApiResponse}
      description: ''
    content.vb: >-
      <Delete("/{key}")>

      Function SafeDelete(key As TKey) As Task(Of IApiResponse)
  overload: Apizr.Requesting.ICrudApi`4.SafeDelete*
  attributes:
  - type: Refit.DeleteAttribute
    ctor: Refit.DeleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeDelete(TKey)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeDelete(TKey)
- uid: Apizr.Requesting.ICrudApi`4.Delete(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Requesting.ICrudApi`4.Delete(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  id: Delete(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Delete(TKey, IApizrRequestOptions)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Delete(TKey, IApizrRequestOptions)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Delete(TKey, Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: Delete
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 226
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send a Delete request with a key param
  example: []
  syntax:
    content: >-
      [Delete("/{key}")]

      Task Delete(TKey key, IApizrRequestOptions options)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Delete("/{key}")>

      Function Delete(key As TKey, options As IApizrRequestOptions) As Task
  overload: Apizr.Requesting.ICrudApi`4.Delete*
  attributes:
  - type: Refit.DeleteAttribute
    ctor: Refit.DeleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Delete(TKey, IApizrRequestOptions)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Delete(TKey, Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Requesting.ICrudApi`4.SafeDelete(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Requesting.ICrudApi`4.SafeDelete(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  id: SafeDelete(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: SafeDelete(TKey, IApizrRequestOptions)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeDelete(TKey, IApizrRequestOptions)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeDelete(TKey, Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Requesting/ICrudApi.cs
      branch: lab
      repo: https://github.com/Respawnsive/Apizr.git
    id: SafeDelete
    path: ../../Src/Apizr/Requesting/ICrudApi.cs
    startLine: 235
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: Send a Delete request with a key param
  example: []
  syntax:
    content: >-
      [Delete("/{key}")]

      Task<IApiResponse> SafeDelete(TKey key, IApizrRequestOptions options)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{Refit.IApiResponse}
      description: ''
    content.vb: >-
      <Delete("/{key}")>

      Function SafeDelete(key As TKey, options As IApizrRequestOptions) As Task(Of IApiResponse)
  overload: Apizr.Requesting.ICrudApi`4.SafeDelete*
  attributes:
  - type: Refit.DeleteAttribute
    ctor: Refit.DeleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeDelete(TKey, IApizrRequestOptions)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeDelete(TKey, Apizr.Configuring.Request.IApizrRequestOptions)
references:
- uid: Apizr.Requesting
  commentId: N:Apizr.Requesting
  href: Apizr.html
  name: Apizr.Requesting
  nameWithType: Apizr.Requesting
  fullName: Apizr.Requesting
  spec.csharp:
  - uid: Apizr
    name: Apizr
    href: Apizr.html
  - name: .
  - uid: Apizr.Requesting
    name: Requesting
    href: Apizr.Requesting.html
  spec.vb:
  - uid: Apizr
    name: Apizr
    href: Apizr.html
  - name: .
  - uid: Apizr.Requesting
    name: Requesting
    href: Apizr.Requesting.html
- uid: Apizr.Requesting.ICrudApi`4.Create*
  commentId: Overload:Apizr.Requesting.ICrudApi`4.Create
  href: Apizr.Requesting.ICrudApi-4.html#Apizr_Requesting_ICrudApi_4_Create__0_
  name: Create
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Create
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Create
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Create
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Create
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Apizr.Requesting.ICrudApi`4.SafeCreate*
  commentId: Overload:Apizr.Requesting.ICrudApi`4.SafeCreate
  href: Apizr.Requesting.ICrudApi-4.html#Apizr_Requesting_ICrudApi_4_SafeCreate__0_
  name: SafeCreate
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeCreate
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeCreate
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeCreate
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeCreate
- uid: System.Threading.Tasks.Task{Refit.IApiResponse{{T}}}
  commentId: T:System.Threading.Tasks.Task{Refit.IApiResponse{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IApiResponse<T>>
  nameWithType: Task<IApiResponse<T>>
  fullName: System.Threading.Tasks.Task<Refit.IApiResponse<T>>
  nameWithType.vb: Task(Of IApiResponse(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of Refit.IApiResponse(Of T))
  name.vb: Task(Of IApiResponse(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Refit.IApiResponse`1
    name: IApiResponse
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Refit.IApiResponse`1
    name: IApiResponse
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: Apizr.Configuring.Request.IApizrRequestOptions
  commentId: T:Apizr.Configuring.Request.IApizrRequestOptions
  parent: Apizr.Configuring.Request
  href: Apizr.Configuring.Request.IApizrRequestOptions.html
  name: IApizrRequestOptions
  nameWithType: IApizrRequestOptions
  fullName: Apizr.Configuring.Request.IApizrRequestOptions
- uid: Apizr.Configuring.Request
  commentId: N:Apizr.Configuring.Request
  href: Apizr.html
  name: Apizr.Configuring.Request
  nameWithType: Apizr.Configuring.Request
  fullName: Apizr.Configuring.Request
  spec.csharp:
  - uid: Apizr
    name: Apizr
    href: Apizr.html
  - name: .
  - uid: Apizr.Configuring
    name: Configuring
    href: Apizr.Configuring.html
  - name: .
  - uid: Apizr.Configuring.Request
    name: Request
    href: Apizr.Configuring.Request.html
  spec.vb:
  - uid: Apizr
    name: Apizr
    href: Apizr.html
  - name: .
  - uid: Apizr.Configuring
    name: Configuring
    href: Apizr.Configuring.html
  - name: .
  - uid: Apizr.Configuring.Request
    name: Request
    href: Apizr.Configuring.Request.html
- uid: Apizr.Requesting.ICrudApi`4.ReadAll*
  commentId: Overload:Apizr.Requesting.ICrudApi`4.ReadAll
  href: Apizr.Requesting.ICrudApi-4.html#Apizr_Requesting_ICrudApi_4_ReadAll
  name: ReadAll
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll
- uid: System.Threading.Tasks.Task{{TReadAllResult}}
  commentId: T:System.Threading.Tasks.Task{``2}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TReadAllResult>
  nameWithType: Task<TReadAllResult>
  fullName: System.Threading.Tasks.Task<TReadAllResult>
  nameWithType.vb: Task(Of TReadAllResult)
  fullName.vb: System.Threading.Tasks.Task(Of TReadAllResult)
  name.vb: Task(Of TReadAllResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TReadAllResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TReadAllResult
  - name: )
- uid: Apizr.Requesting.ICrudApi`4.SafeReadAll*
  commentId: Overload:Apizr.Requesting.ICrudApi`4.SafeReadAll
  href: Apizr.Requesting.ICrudApi-4.html#Apizr_Requesting_ICrudApi_4_SafeReadAll
  name: SafeReadAll
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeReadAll
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeReadAll
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeReadAll
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeReadAll
- uid: System.Threading.Tasks.Task{Refit.IApiResponse{{TReadAllResult}}}
  commentId: T:System.Threading.Tasks.Task{Refit.IApiResponse{`2}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IApiResponse<TReadAllResult>>
  nameWithType: Task<IApiResponse<TReadAllResult>>
  fullName: System.Threading.Tasks.Task<Refit.IApiResponse<TReadAllResult>>
  nameWithType.vb: Task(Of IApiResponse(Of TReadAllResult))
  fullName.vb: System.Threading.Tasks.Task(Of Refit.IApiResponse(Of TReadAllResult))
  name.vb: Task(Of IApiResponse(Of TReadAllResult))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Refit.IApiResponse`1
    name: IApiResponse
    isExternal: true
  - name: <
  - name: TReadAllResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Refit.IApiResponse`1
    name: IApiResponse
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TReadAllResult
  - name: )
  - name: )
- uid: '{TReadAllParams}'
  commentId: '!:TReadAllParams'
  definition: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: Apizr.Requesting.ICrudApi`4.Read*
  commentId: Overload:Apizr.Requesting.ICrudApi`4.Read
  href: Apizr.Requesting.ICrudApi-4.html#Apizr_Requesting_ICrudApi_4_Read__1_
  name: Read
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: Apizr.Requesting.ICrudApi`4.SafeRead*
  commentId: Overload:Apizr.Requesting.ICrudApi`4.SafeRead
  href: Apizr.Requesting.ICrudApi-4.html#Apizr_Requesting_ICrudApi_4_SafeRead__1_
  name: SafeRead
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeRead
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeRead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeRead
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeRead
- uid: Apizr.Requesting.ICrudApi`4.Update*
  commentId: Overload:Apizr.Requesting.ICrudApi`4.Update
  href: Apizr.Requesting.ICrudApi-4.html#Apizr_Requesting_ICrudApi_4_Update__1__0_
  name: Update
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Update
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Update
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Update
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Update
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Apizr.Requesting.ICrudApi`4.SafeUpdate*
  commentId: Overload:Apizr.Requesting.ICrudApi`4.SafeUpdate
  href: Apizr.Requesting.ICrudApi-4.html#Apizr_Requesting_ICrudApi_4_SafeUpdate__1__0_
  name: SafeUpdate
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeUpdate
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeUpdate
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeUpdate
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeUpdate
- uid: System.Threading.Tasks.Task{Refit.IApiResponse}
  commentId: T:System.Threading.Tasks.Task{Refit.IApiResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IApiResponse>
  nameWithType: Task<IApiResponse>
  fullName: System.Threading.Tasks.Task<Refit.IApiResponse>
  nameWithType.vb: Task(Of IApiResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Refit.IApiResponse)
  name.vb: Task(Of IApiResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Refit.IApiResponse
    name: IApiResponse
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Refit.IApiResponse
    name: IApiResponse
    isExternal: true
  - name: )
- uid: Apizr.Requesting.ICrudApi`4.Delete*
  commentId: Overload:Apizr.Requesting.ICrudApi`4.Delete
  href: Apizr.Requesting.ICrudApi-4.html#Apizr_Requesting_ICrudApi_4_Delete__1_
  name: Delete
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Delete
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Delete
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Delete
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Delete
- uid: Apizr.Requesting.ICrudApi`4.SafeDelete*
  commentId: Overload:Apizr.Requesting.ICrudApi`4.SafeDelete
  href: Apizr.Requesting.ICrudApi-4.html#Apizr_Requesting_ICrudApi_4_SafeDelete__1_
  name: SafeDelete
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeDelete
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.SafeDelete
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeDelete
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).SafeDelete
