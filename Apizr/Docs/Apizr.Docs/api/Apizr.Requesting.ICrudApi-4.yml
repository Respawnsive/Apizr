### YamlMime:ManagedReference
items:
- uid: Apizr.Requesting.ICrudApi`4
  commentId: T:Apizr.Requesting.ICrudApi`4
  id: ICrudApi`4
  parent: Apizr.Requesting
  children:
  - Apizr.Requesting.ICrudApi`4.Create(`0)
  - Apizr.Requesting.ICrudApi`4.Create(`0,Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Requesting.ICrudApi`4.Create(`0,Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  - Apizr.Requesting.ICrudApi`4.Create(`0,Polly.Context)
  - Apizr.Requesting.ICrudApi`4.Create(`0,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Requesting.ICrudApi`4.Create(`0,System.Threading.CancellationToken)
  - Apizr.Requesting.ICrudApi`4.Delete(`1)
  - Apizr.Requesting.ICrudApi`4.Delete(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Requesting.ICrudApi`4.Delete(`1,Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  - Apizr.Requesting.ICrudApi`4.Delete(`1,Polly.Context)
  - Apizr.Requesting.ICrudApi`4.Delete(`1,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Requesting.ICrudApi`4.Delete(`1,System.Threading.CancellationToken)
  - Apizr.Requesting.ICrudApi`4.Read(`1)
  - Apizr.Requesting.ICrudApi`4.Read(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Requesting.ICrudApi`4.Read(`1,Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  - Apizr.Requesting.ICrudApi`4.Read(`1,Polly.Context)
  - Apizr.Requesting.ICrudApi`4.Read(`1,System.Int32)
  - Apizr.Requesting.ICrudApi`4.Read(`1,System.Int32,Polly.Context)
  - Apizr.Requesting.ICrudApi`4.Read(`1,System.Int32,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Requesting.ICrudApi`4.Read(`1,System.Int32,System.Threading.CancellationToken)
  - Apizr.Requesting.ICrudApi`4.Read(`1,System.Threading.CancellationToken)
  - Apizr.Requesting.ICrudApi`4.ReadAll
  - Apizr.Requesting.ICrudApi`4.ReadAll(`3)
  - Apizr.Requesting.ICrudApi`4.ReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Requesting.ICrudApi`4.ReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  - Apizr.Requesting.ICrudApi`4.ReadAll(`3,Polly.Context)
  - Apizr.Requesting.ICrudApi`4.ReadAll(`3,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Requesting.ICrudApi`4.ReadAll(`3,System.Int32)
  - Apizr.Requesting.ICrudApi`4.ReadAll(`3,System.Int32,Polly.Context)
  - Apizr.Requesting.ICrudApi`4.ReadAll(`3,System.Int32,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Requesting.ICrudApi`4.ReadAll(`3,System.Int32,System.Threading.CancellationToken)
  - Apizr.Requesting.ICrudApi`4.ReadAll(`3,System.Threading.CancellationToken)
  - Apizr.Requesting.ICrudApi`4.ReadAll(Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Requesting.ICrudApi`4.ReadAll(Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  - Apizr.Requesting.ICrudApi`4.ReadAll(Polly.Context)
  - Apizr.Requesting.ICrudApi`4.ReadAll(Polly.Context,System.Threading.CancellationToken)
  - Apizr.Requesting.ICrudApi`4.ReadAll(System.Int32)
  - Apizr.Requesting.ICrudApi`4.ReadAll(System.Int32,Polly.Context)
  - Apizr.Requesting.ICrudApi`4.ReadAll(System.Int32,System.Threading.CancellationToken)
  - Apizr.Requesting.ICrudApi`4.ReadAll(System.Threading.CancellationToken)
  - Apizr.Requesting.ICrudApi`4.Update(`1,`0)
  - Apizr.Requesting.ICrudApi`4.Update(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Requesting.ICrudApi`4.Update(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  - Apizr.Requesting.ICrudApi`4.Update(`1,`0,Polly.Context)
  - Apizr.Requesting.ICrudApi`4.Update(`1,`0,Polly.Context,System.Threading.CancellationToken)
  - Apizr.Requesting.ICrudApi`4.Update(`1,`0,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>
  type: Interface
  source:
    id: ICrudApi
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 18
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nThe crud api interface\n"
  example: []
  syntax:
    content: >-
      public interface ICrudApi<T, in TKey, TReadAllResult, in TReadAllParams>
          where T : class
    typeParameters:
    - id: T
      description: The entity type
    - id: TKey
      description: The entity&apos;s crud key type
    - id: TReadAllResult
      description: The &quot;ReadAll&quot; query result type
    - id: TReadAllParams
      description: ReadAll query parameters type
    content.vb: Public Interface ICrudApi(Of T As Class, In TKey, TReadAllResult, In TReadAllParams)
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams)
  name.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams)
- uid: Apizr.Requesting.ICrudApi`4.Create(`0,Polly.Context)
  commentId: M:Apizr.Requesting.ICrudApi`4.Create(`0,Polly.Context)
  id: Create(`0,Polly.Context)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Create(T, Context)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Create(T, Context)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Create(T, Polly.Context)
  type: Method
  source:
    id: Create
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 31
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a Create request with a <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> payload, passing a Polly context through the request\n"
  example: []
  syntax:
    content: >-
      [Post("")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task<T> Create([Body] T payload, [Context] Context context)
    parameters:
    - id: payload
      type: '{T}'
      description: The payload
      attributes:
      - type: Refit.BodyAttribute
        ctor: Refit.BodyAttribute.#ctor
        arguments: []
    - id: context
      type: Polly.Context
      description: The Polly context
      attributes:
      - type: Apizr.Policing.ContextAttribute
        ctor: Apizr.Policing.ContextAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: >-
      <Post("")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function Create(payload As T, context As Context) As Task(Of T)
  overload: Apizr.Requesting.ICrudApi`4.Create*
  attributes:
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Create(T, Context)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Create(T, Polly.Context)
- uid: Apizr.Requesting.ICrudApi`4.Create(`0,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.Create(`0,Polly.Context,System.Threading.CancellationToken)
  id: Create(`0,Polly.Context,System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Create(T, Context, CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Create(T, Context, CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Create(T, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    id: Create
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 42
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a Create request with a <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> payload, passing a Polly context and a cancellation token through the request\n"
  example: []
  syntax:
    content: >-
      [Post("")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task<T> Create([Body] T payload, [Context] Context context, CancellationToken cancellationToken)
    parameters:
    - id: payload
      type: '{T}'
      description: The payload
      attributes:
      - type: Refit.BodyAttribute
        ctor: Refit.BodyAttribute.#ctor
        arguments: []
    - id: context
      type: Polly.Context
      description: The Polly context
      attributes:
      - type: Apizr.Policing.ContextAttribute
        ctor: Apizr.Policing.ContextAttribute.#ctor
        arguments: []
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: >-
      <Post("")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function Create(payload As T, context As Context, cancellationToken As CancellationToken) As Task(Of T)
  overload: Apizr.Requesting.ICrudApi`4.Create*
  attributes:
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Create(T, Context, CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Create(T, Polly.Context, System.Threading.CancellationToken)
- uid: Apizr.Requesting.ICrudApi`4.Create(`0)
  commentId: M:Apizr.Requesting.ICrudApi`4.Create(`0)
  id: Create(`0)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Create(T)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Create(T)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Create(T)
  type: Method
  source:
    id: Create
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 53
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a Create request with a <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> payload\n"
  example: []
  syntax:
    content: >-
      [Post("")]

      Task<T> Create([Body] T payload)
    parameters:
    - id: payload
      type: '{T}'
      description: The payload
      attributes:
      - type: Refit.BodyAttribute
        ctor: Refit.BodyAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: >-
      <Post("")>

      Function Create(payload As T) As Task(Of T)
  overload: Apizr.Requesting.ICrudApi`4.Create*
  attributes:
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Create(T)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Create(T)
- uid: Apizr.Requesting.ICrudApi`4.Create(`0,System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.Create(`0,System.Threading.CancellationToken)
  id: Create(`0,System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Create(T, CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Create(T, CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Create(T, System.Threading.CancellationToken)
  type: Method
  source:
    id: Create
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 62
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a Create request with a <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> payload, passing a cancellation token through the request\n"
  example: []
  syntax:
    content: >-
      [Post("")]

      Task<T> Create([Body] T payload, CancellationToken cancellationToken)
    parameters:
    - id: payload
      type: '{T}'
      description: The payload
      attributes:
      - type: Refit.BodyAttribute
        ctor: Refit.BodyAttribute.#ctor
        arguments: []
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: >-
      <Post("")>

      Function Create(payload As T, cancellationToken As CancellationToken) As Task(Of T)
  overload: Apizr.Requesting.ICrudApi`4.Create*
  attributes:
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Create(T, CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Create(T, System.Threading.CancellationToken)
- uid: Apizr.Requesting.ICrudApi`4.Create(`0,Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Requesting.ICrudApi`4.Create(`0,Apizr.Configuring.Request.IApizrRequestOptions)
  id: Create(`0,Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Create(T, IApizrRequestOptions)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Create(T, IApizrRequestOptions)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Create(T, Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    id: Create
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 71
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a Create request with a <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> payload, passing a Polly context and a cancellation token through the request\n"
  example: []
  syntax:
    content: >-
      [Post("")]

      Task<T> Create([Body] T payload, [RequestOptions] IApizrRequestOptions options)
    parameters:
    - id: payload
      type: '{T}'
      description: The payload
      attributes:
      - type: Refit.BodyAttribute
        ctor: Refit.BodyAttribute.#ctor
        arguments: []
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: >-
      <Post("")>

      Function Create(payload As T, options As IApizrRequestOptions) As Task(Of T)
  overload: Apizr.Requesting.ICrudApi`4.Create*
  attributes:
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Create(T, IApizrRequestOptions)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Create(T, Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Requesting.ICrudApi`4.Create(`0,Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.Create(`0,Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  id: Create(`0,Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Create(T, IApizrRequestOptions, CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Create(T, IApizrRequestOptions, CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Create(T, Apizr.Configuring.Request.IApizrRequestOptions, System.Threading.CancellationToken)
  type: Method
  source:
    id: Create
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 81
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a Create request with a <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> payload, passing a Polly context and a cancellation token through the request\n"
  example: []
  syntax:
    content: >-
      [Post("")]

      Task<T> Create([Body] T payload, [RequestOptions] IApizrRequestOptions options, CancellationToken cancellationToken)
    parameters:
    - id: payload
      type: '{T}'
      description: The payload
      attributes:
      - type: Refit.BodyAttribute
        ctor: Refit.BodyAttribute.#ctor
        arguments: []
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: >-
      <Post("")>

      Function Create(payload As T, options As IApizrRequestOptions, cancellationToken As CancellationToken) As Task(Of T)
  overload: Apizr.Requesting.ICrudApi`4.Create*
  attributes:
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Create(T, IApizrRequestOptions, CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Create(T, Apizr.Configuring.Request.IApizrRequestOptions, System.Threading.CancellationToken)
- uid: Apizr.Requesting.ICrudApi`4.ReadAll(System.Int32)
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll(System.Int32)
  id: ReadAll(System.Int32)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll(Int32)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(Int32)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(System.Int32)
  type: Method
  source:
    id: ReadAll
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 95
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a ReadAll request with an execution priority level\n"
  example: []
  syntax:
    content: >-
      [Get("")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task<TReadAllResult> ReadAll([Property("Priority")] int priority)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority level
      attributes:
      - type: Refit.PropertyAttribute
        ctor: Refit.PropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Priority
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function ReadAll(priority As Integer) As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(Int32)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(System.Int32)
- uid: Apizr.Requesting.ICrudApi`4.ReadAll(Polly.Context)
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll(Polly.Context)
  id: ReadAll(Polly.Context)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll(Context)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(Context)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(Polly.Context)
  type: Method
  source:
    id: ReadAll
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 104
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a ReadAll request, passing a Polly context through the request\n"
  example: []
  syntax:
    content: >-
      [Get("")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task<TReadAllResult> ReadAll([Context] Context context)
    parameters:
    - id: context
      type: Polly.Context
      description: The Polly context
      attributes:
      - type: Apizr.Policing.ContextAttribute
        ctor: Apizr.Policing.ContextAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function ReadAll(context As Context) As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(Context)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(Polly.Context)
- uid: Apizr.Requesting.ICrudApi`4.ReadAll(`3,System.Int32)
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll(`3,System.Int32)
  id: ReadAll(`3,System.Int32)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll(TReadAllParams, Int32)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams, Int32)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams, System.Int32)
  type: Method
  source:
    id: ReadAll
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 114
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a ReadAll request with some query params used as cache key and an execution priority level\n"
  example: []
  syntax:
    content: >-
      [Get("")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property("Priority")] int priority)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: Query params used as cache key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    - id: priority
      type: System.Int32
      description: The execution priority level
      attributes:
      - type: Refit.PropertyAttribute
        ctor: Refit.PropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Priority
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function ReadAll(readAllParams As TReadAllParams, priority As Integer) As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams, Int32)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams, System.Int32)
- uid: Apizr.Requesting.ICrudApi`4.ReadAll(`3,Polly.Context)
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll(`3,Polly.Context)
  id: ReadAll(`3,Polly.Context)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll(TReadAllParams, Context)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams, Context)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams, Polly.Context)
  type: Method
  source:
    id: ReadAll
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 124
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a ReadAll request with some query params used as cache key and passing a Polly context through the request\n"
  example: []
  syntax:
    content: >-
      [Get("")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Context] Context context)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: Query params used as cache key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    - id: context
      type: Polly.Context
      description: The Polly context
      attributes:
      - type: Apizr.Policing.ContextAttribute
        ctor: Apizr.Policing.ContextAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function ReadAll(readAllParams As TReadAllParams, context As Context) As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams, Context)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams, Polly.Context)
- uid: Apizr.Requesting.ICrudApi`4.ReadAll(System.Int32,Polly.Context)
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll(System.Int32,Polly.Context)
  id: ReadAll(System.Int32,Polly.Context)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll(Int32, Context)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(Int32, Context)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(System.Int32, Polly.Context)
  type: Method
  source:
    id: ReadAll
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 134
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a ReadAll request with an execution priority level and passing a Polly context through the request\n"
  example: []
  syntax:
    content: >-
      [Get("")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task<TReadAllResult> ReadAll([Property("Priority")] int priority, [Context] Context context)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority level
      attributes:
      - type: Refit.PropertyAttribute
        ctor: Refit.PropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Priority
    - id: context
      type: Polly.Context
      description: The Polly context
      attributes:
      - type: Apizr.Policing.ContextAttribute
        ctor: Apizr.Policing.ContextAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function ReadAll(priority As Integer, context As Context) As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(Int32, Context)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(System.Int32, Polly.Context)
- uid: Apizr.Requesting.ICrudApi`4.ReadAll(System.Int32,System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll(System.Int32,System.Threading.CancellationToken)
  id: ReadAll(System.Int32,System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll(Int32, CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(Int32, CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    id: ReadAll
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 144
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a ReadAll request with an execution priority level, passing a cancellation token through the request\n"
  example: []
  syntax:
    content: >-
      [Get("")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task<TReadAllResult> ReadAll([Property("Priority")] int priority, CancellationToken cancellationToken)
    parameters:
    - id: priority
      type: System.Int32
      description: The execution priority level
      attributes:
      - type: Refit.PropertyAttribute
        ctor: Refit.PropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function ReadAll(priority As Integer, cancellationToken As CancellationToken) As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(Int32, CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(System.Int32, System.Threading.CancellationToken)
- uid: Apizr.Requesting.ICrudApi`4.ReadAll(Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll(Polly.Context,System.Threading.CancellationToken)
  id: ReadAll(Polly.Context,System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll(Context, CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(Context, CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    id: ReadAll
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 154
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a ReadAll request, passing a Polly context and a cancellation token through the request\n"
  example: []
  syntax:
    content: >-
      [Get("")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task<TReadAllResult> ReadAll([Context] Context context, CancellationToken cancellationToken)
    parameters:
    - id: context
      type: Polly.Context
      description: The Polly context
      attributes:
      - type: Apizr.Policing.ContextAttribute
        ctor: Apizr.Policing.ContextAttribute.#ctor
        arguments: []
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function ReadAll(context As Context, cancellationToken As CancellationToken) As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(Context, CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(Polly.Context, System.Threading.CancellationToken)
- uid: Apizr.Requesting.ICrudApi`4.ReadAll(`3,System.Int32,Polly.Context)
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll(`3,System.Int32,Polly.Context)
  id: ReadAll(`3,System.Int32,Polly.Context)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll(TReadAllParams, Int32, Context)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams, Int32, Context)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams, System.Int32, Polly.Context)
  type: Method
  source:
    id: ReadAll
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 165
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a ReadAll request with some query params used as cache key and an execution priority level, passing a Polly context through the request\n"
  example: []
  syntax:
    content: >-
      [Get("")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property("Priority")] int priority, [Context] Context context)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: Query params used as cache key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    - id: priority
      type: System.Int32
      description: The execution priority level
      attributes:
      - type: Refit.PropertyAttribute
        ctor: Refit.PropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Priority
    - id: context
      type: Polly.Context
      description: The Polly context
      attributes:
      - type: Apizr.Policing.ContextAttribute
        ctor: Apizr.Policing.ContextAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function ReadAll(readAllParams As TReadAllParams, priority As Integer, context As Context) As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams, Int32, Context)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams, System.Int32, Polly.Context)
- uid: Apizr.Requesting.ICrudApi`4.ReadAll(`3,System.Int32,System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll(`3,System.Int32,System.Threading.CancellationToken)
  id: ReadAll(`3,System.Int32,System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll(TReadAllParams, Int32, CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams, Int32, CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    id: ReadAll
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 176
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a ReadAll request with some query params used as cache key and an execution priority level, passing a cancellation token through the request\n"
  example: []
  syntax:
    content: >-
      [Get("")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property("Priority")] int priority, CancellationToken cancellationToken)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: Query params used as cache key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    - id: priority
      type: System.Int32
      description: The execution priority level
      attributes:
      - type: Refit.PropertyAttribute
        ctor: Refit.PropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function ReadAll(readAllParams As TReadAllParams, priority As Integer, cancellationToken As CancellationToken) As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams, Int32, CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams, System.Int32, System.Threading.CancellationToken)
- uid: Apizr.Requesting.ICrudApi`4.ReadAll(`3,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll(`3,Polly.Context,System.Threading.CancellationToken)
  id: ReadAll(`3,Polly.Context,System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll(TReadAllParams, Context, CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams, Context, CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    id: ReadAll
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 187
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a ReadAll request with some query params used as cache key, passing a Polly context and a cancellation token through the request\n"
  example: []
  syntax:
    content: >-
      [Get("")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Context] Context context, CancellationToken cancellationToken)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: Query params used as cache key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    - id: context
      type: Polly.Context
      description: The Polly context
      attributes:
      - type: Apizr.Policing.ContextAttribute
        ctor: Apizr.Policing.ContextAttribute.#ctor
        arguments: []
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function ReadAll(readAllParams As TReadAllParams, context As Context, cancellationToken As CancellationToken) As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams, Context, CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams, Polly.Context, System.Threading.CancellationToken)
- uid: Apizr.Requesting.ICrudApi`4.ReadAll(`3,System.Int32,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll(`3,System.Int32,Polly.Context,System.Threading.CancellationToken)
  id: ReadAll(`3,System.Int32,Polly.Context,System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll(TReadAllParams, Int32, Context, CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams, Int32, Context, CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    id: ReadAll
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 199
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a ReadAll request with some query params used as cache key and an execution priority level, passing a Polly context and a cancellation token through the request\n"
  example: []
  syntax:
    content: >-
      [Get("")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property("Priority")] int priority, [Context] Context context, CancellationToken cancellationToken)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: Query params used as cache key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    - id: priority
      type: System.Int32
      description: The execution priority level
      attributes:
      - type: Refit.PropertyAttribute
        ctor: Refit.PropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Priority
    - id: context
      type: Polly.Context
      description: The Polly context
      attributes:
      - type: Apizr.Policing.ContextAttribute
        ctor: Apizr.Policing.ContextAttribute.#ctor
        arguments: []
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function ReadAll(readAllParams As TReadAllParams, priority As Integer, context As Context, cancellationToken As CancellationToken) As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams, Int32, Context, CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams, System.Int32, Polly.Context, System.Threading.CancellationToken)
- uid: Apizr.Requesting.ICrudApi`4.ReadAll
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll
  id: ReadAll
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll()
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll()
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll()
  type: Method
  source:
    id: ReadAll
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 209
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a ReadAll request\n"
  example: []
  syntax:
    content: >-
      [Get("")]

      Task<TReadAllResult> ReadAll()
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      Function ReadAll As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll()
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll()
- uid: Apizr.Requesting.ICrudApi`4.ReadAll(Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll(Apizr.Configuring.Request.IApizrRequestOptions)
  id: ReadAll(Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll(IApizrRequestOptions)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(IApizrRequestOptions)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    id: ReadAll
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 217
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a ReadAll request\n"
  example: []
  syntax:
    content: >-
      [Get("")]

      Task<TReadAllResult> ReadAll([RequestOptions] IApizrRequestOptions options)
    parameters:
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      Function ReadAll(options As IApizrRequestOptions) As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(IApizrRequestOptions)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Requesting.ICrudApi`4.ReadAll(`3)
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll(`3)
  id: ReadAll(`3)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll(TReadAllParams)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams)
  type: Method
  source:
    id: ReadAll
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 225
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a ReadAll request with some query params used as cache key\n"
  example: []
  syntax:
    content: >-
      [Get("")]

      Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: Query params used as cache key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      Function ReadAll(readAllParams As TReadAllParams) As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams)
- uid: Apizr.Requesting.ICrudApi`4.ReadAll(System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll(System.Threading.CancellationToken)
  id: ReadAll(System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll(CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(System.Threading.CancellationToken)
  type: Method
  source:
    id: ReadAll
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 233
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a ReadAll request, passing a cancellation token through the request\n"
  example: []
  syntax:
    content: >-
      [Get("")]

      Task<TReadAllResult> ReadAll(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      Function ReadAll(cancellationToken As CancellationToken) As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(System.Threading.CancellationToken)
- uid: Apizr.Requesting.ICrudApi`4.ReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions)
  id: ReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll(TReadAllParams, IApizrRequestOptions)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams, IApizrRequestOptions)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams, Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    id: ReadAll
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 242
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a ReadAll request with some query params used as cache key\n"
  example: []
  syntax:
    content: >-
      [Get("")]

      Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [RequestOptions] IApizrRequestOptions options)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: Query params used as cache key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      Function ReadAll(readAllParams As TReadAllParams, options As IApizrRequestOptions) As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams, IApizrRequestOptions)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams, Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Requesting.ICrudApi`4.ReadAll(`3,System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll(`3,System.Threading.CancellationToken)
  id: ReadAll(`3,System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll(TReadAllParams, CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams, CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams, System.Threading.CancellationToken)
  type: Method
  source:
    id: ReadAll
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 251
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a ReadAll request with some query params used as cache key, passing a cancellation token through the request\n"
  example: []
  syntax:
    content: >-
      [Get("")]

      Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, CancellationToken cancellationToken)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: Query params used as cache key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      Function ReadAll(readAllParams As TReadAllParams, cancellationToken As CancellationToken) As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams, CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams, System.Threading.CancellationToken)
- uid: Apizr.Requesting.ICrudApi`4.ReadAll(Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll(Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  id: ReadAll(Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll(IApizrRequestOptions, CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(IApizrRequestOptions, CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(Apizr.Configuring.Request.IApizrRequestOptions, System.Threading.CancellationToken)
  type: Method
  source:
    id: ReadAll
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 260
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a ReadAll request, passing a cancellation token through the request\n"
  example: []
  syntax:
    content: >-
      [Get("")]

      Task<TReadAllResult> ReadAll([RequestOptions] IApizrRequestOptions options, CancellationToken cancellationToken)
    parameters:
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      Function ReadAll(options As IApizrRequestOptions, cancellationToken As CancellationToken) As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(IApizrRequestOptions, CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(Apizr.Configuring.Request.IApizrRequestOptions, System.Threading.CancellationToken)
- uid: Apizr.Requesting.ICrudApi`4.ReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.ReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  id: ReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: ReadAll(TReadAllParams, IApizrRequestOptions, CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams, IApizrRequestOptions, CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll(TReadAllParams, Apizr.Configuring.Request.IApizrRequestOptions, System.Threading.CancellationToken)
  type: Method
  source:
    id: ReadAll
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 270
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a ReadAll request with some query params used as cache key\n"
  example: []
  syntax:
    content: >-
      [Get("")]

      Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [RequestOptions] IApizrRequestOptions options, CancellationToken cancellationToken)
    parameters:
    - id: readAllParams
      type: '{TReadAllParams}'
      description: Query params used as cache key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{{TReadAllResult}}
      description: ''
    content.vb: >-
      <Get("")>

      Function ReadAll(readAllParams As TReadAllParams, options As IApizrRequestOptions, cancellationToken As CancellationToken) As Task(Of TReadAllResult)
  overload: Apizr.Requesting.ICrudApi`4.ReadAll*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams, IApizrRequestOptions, CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll(TReadAllParams, Apizr.Configuring.Request.IApizrRequestOptions, System.Threading.CancellationToken)
- uid: Apizr.Requesting.ICrudApi`4.Read(`1,System.Int32)
  commentId: M:Apizr.Requesting.ICrudApi`4.Read(`1,System.Int32)
  id: Read(`1,System.Int32)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Read(TKey, Int32)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey, Int32)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey, System.Int32)
  type: Method
  source:
    id: Read
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 285
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a Read request with a key param and an execution priority level\n"
  example: []
  syntax:
    content: >-
      [Get("/{key}")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task<T> Read([CacheKey] TKey key, [Property("Priority")] int priority)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    - id: priority
      type: System.Int32
      description: The execution priority level
      attributes:
      - type: Refit.PropertyAttribute
        ctor: Refit.PropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Priority
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: >-
      <Get("/{key}")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function Read(key As TKey, priority As Integer) As Task(Of T)
  overload: Apizr.Requesting.ICrudApi`4.Read*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey, Int32)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey, System.Int32)
- uid: Apizr.Requesting.ICrudApi`4.Read(`1,Polly.Context)
  commentId: M:Apizr.Requesting.ICrudApi`4.Read(`1,Polly.Context)
  id: Read(`1,Polly.Context)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Read(TKey, Context)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey, Context)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey, Polly.Context)
  type: Method
  source:
    id: Read
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 295
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a Read request with a key param, passing a Polly context through the request\n"
  example: []
  syntax:
    content: >-
      [Get("/{key}")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task<T> Read([CacheKey] TKey key, [Context] Context context)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    - id: context
      type: Polly.Context
      description: The Polly context
      attributes:
      - type: Apizr.Policing.ContextAttribute
        ctor: Apizr.Policing.ContextAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: >-
      <Get("/{key}")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function Read(key As TKey, context As Context) As Task(Of T)
  overload: Apizr.Requesting.ICrudApi`4.Read*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey, Context)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey, Polly.Context)
- uid: Apizr.Requesting.ICrudApi`4.Read(`1,System.Int32,Polly.Context)
  commentId: M:Apizr.Requesting.ICrudApi`4.Read(`1,System.Int32,Polly.Context)
  id: Read(`1,System.Int32,Polly.Context)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Read(TKey, Int32, Context)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey, Int32, Context)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey, System.Int32, Polly.Context)
  type: Method
  source:
    id: Read
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 306
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a Read request with a key param and an execution priority level, passing a Polly context through the request\n"
  example: []
  syntax:
    content: >-
      [Get("/{key}")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task<T> Read([CacheKey] TKey key, [Property("Priority")] int priority, [Context] Context context)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    - id: priority
      type: System.Int32
      description: The execution priority level
      attributes:
      - type: Refit.PropertyAttribute
        ctor: Refit.PropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Priority
    - id: context
      type: Polly.Context
      description: The Polly context
      attributes:
      - type: Apizr.Policing.ContextAttribute
        ctor: Apizr.Policing.ContextAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: >-
      <Get("/{key}")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function Read(key As TKey, priority As Integer, context As Context) As Task(Of T)
  overload: Apizr.Requesting.ICrudApi`4.Read*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey, Int32, Context)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey, System.Int32, Polly.Context)
- uid: Apizr.Requesting.ICrudApi`4.Read(`1,System.Int32,System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.Read(`1,System.Int32,System.Threading.CancellationToken)
  id: Read(`1,System.Int32,System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Read(TKey, Int32, CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey, Int32, CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    id: Read
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 317
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a Read request with a key param and an execution priority level, passing a cancellation token through the request\n"
  example: []
  syntax:
    content: >-
      [Get("/{key}")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task<T> Read([CacheKey] TKey key, [Property("Priority")] int priority, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    - id: priority
      type: System.Int32
      description: The execution priority level
      attributes:
      - type: Refit.PropertyAttribute
        ctor: Refit.PropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Priority
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: >-
      <Get("/{key}")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function Read(key As TKey, priority As Integer, cancellationToken As CancellationToken) As Task(Of T)
  overload: Apizr.Requesting.ICrudApi`4.Read*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey, Int32, CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey, System.Int32, System.Threading.CancellationToken)
- uid: Apizr.Requesting.ICrudApi`4.Read(`1,System.Int32,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.Read(`1,System.Int32,Polly.Context,System.Threading.CancellationToken)
  id: Read(`1,System.Int32,Polly.Context,System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Read(TKey, Int32, Context, CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey, Int32, Context, CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey, System.Int32, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    id: Read
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 329
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a Read request with a key param and an execution priority level, passing a Polly context and a cancellation token through the request\n"
  example: []
  syntax:
    content: >-
      [Get("/{key}")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task<T> Read([CacheKey] TKey key, [Property("Priority")] int priority, [Context] Context context, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    - id: priority
      type: System.Int32
      description: The execution priority level
      attributes:
      - type: Refit.PropertyAttribute
        ctor: Refit.PropertyAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: Priority
    - id: context
      type: Polly.Context
      description: The Polly context
      attributes:
      - type: Apizr.Policing.ContextAttribute
        ctor: Apizr.Policing.ContextAttribute.#ctor
        arguments: []
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: >-
      <Get("/{key}")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function Read(key As TKey, priority As Integer, context As Context, cancellationToken As CancellationToken) As Task(Of T)
  overload: Apizr.Requesting.ICrudApi`4.Read*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey, Int32, Context, CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey, System.Int32, Polly.Context, System.Threading.CancellationToken)
- uid: Apizr.Requesting.ICrudApi`4.Read(`1)
  commentId: M:Apizr.Requesting.ICrudApi`4.Read(`1)
  id: Read(`1)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Read(TKey)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey)
  type: Method
  source:
    id: Read
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 340
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a Read request with a key param\n"
  example: []
  syntax:
    content: >-
      [Get("/{key}")]

      Task<T> Read([CacheKey] TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: >-
      <Get("/{key}")>

      Function Read(key As TKey) As Task(Of T)
  overload: Apizr.Requesting.ICrudApi`4.Read*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey)
- uid: Apizr.Requesting.ICrudApi`4.Read(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Requesting.ICrudApi`4.Read(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  id: Read(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Read(TKey, IApizrRequestOptions)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey, IApizrRequestOptions)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey, Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    id: Read
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 349
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a Read request with a key param\n"
  example: []
  syntax:
    content: >-
      [Get("/{key}")]

      Task<T> Read([CacheKey] TKey key, [RequestOptions] IApizrRequestOptions options)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: >-
      <Get("/{key}")>

      Function Read(key As TKey, options As IApizrRequestOptions) As Task(Of T)
  overload: Apizr.Requesting.ICrudApi`4.Read*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey, IApizrRequestOptions)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey, Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Requesting.ICrudApi`4.Read(`1,System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.Read(`1,System.Threading.CancellationToken)
  id: Read(`1,System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Read(TKey, CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey, CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey, System.Threading.CancellationToken)
  type: Method
  source:
    id: Read
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 358
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a Read request with a key param, passing a cancellation token through the request\n"
  example: []
  syntax:
    content: >-
      [Get("/{key}")]

      Task<T> Read([CacheKey] TKey key, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: >-
      <Get("/{key}")>

      Function Read(key As TKey, cancellationToken As CancellationToken) As Task(Of T)
  overload: Apizr.Requesting.ICrudApi`4.Read*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey, CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey, System.Threading.CancellationToken)
- uid: Apizr.Requesting.ICrudApi`4.Read(`1,Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.Read(`1,Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  id: Read(`1,Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Read(TKey, IApizrRequestOptions, CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey, IApizrRequestOptions, CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read(TKey, Apizr.Configuring.Request.IApizrRequestOptions, System.Threading.CancellationToken)
  type: Method
  source:
    id: Read
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 368
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a Read request with a key param\n"
  example: []
  syntax:
    content: >-
      [Get("/{key}")]

      Task<T> Read([CacheKey] TKey key, [RequestOptions] IApizrRequestOptions options, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
      attributes:
      - type: Apizr.Caching.Attributes.CacheKeyAttribute
        ctor: Apizr.Caching.Attributes.CacheKeyAttribute.#ctor
        arguments: []
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: >-
      <Get("/{key}")>

      Function Read(key As TKey, options As IApizrRequestOptions, cancellationToken As CancellationToken) As Task(Of T)
  overload: Apizr.Requesting.ICrudApi`4.Read*
  attributes:
  - type: Refit.GetAttribute
    ctor: Refit.GetAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey, IApizrRequestOptions, CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read(TKey, Apizr.Configuring.Request.IApizrRequestOptions, System.Threading.CancellationToken)
- uid: Apizr.Requesting.ICrudApi`4.Update(`1,`0,Polly.Context)
  commentId: M:Apizr.Requesting.ICrudApi`4.Update(`1,`0,Polly.Context)
  id: Update(`1,`0,Polly.Context)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Update(TKey, T, Context)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Update(TKey, T, Context)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Update(TKey, T, Polly.Context)
  type: Method
  source:
    id: Update
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 384
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend an Update request with a key and a payload, passing a Polly context through the request\n"
  example: []
  syntax:
    content: >-
      [Put("/{key}")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task Update(TKey key, [Body] T payload, [Context] Context context)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    - id: payload
      type: '{T}'
      description: The payload
      attributes:
      - type: Refit.BodyAttribute
        ctor: Refit.BodyAttribute.#ctor
        arguments: []
    - id: context
      type: Polly.Context
      description: The Polly context
      attributes:
      - type: Apizr.Policing.ContextAttribute
        ctor: Apizr.Policing.ContextAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Put("/{key}")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function Update(key As TKey, payload As T, context As Context) As Task
  overload: Apizr.Requesting.ICrudApi`4.Update*
  attributes:
  - type: Refit.PutAttribute
    ctor: Refit.PutAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Update(TKey, T, Context)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Update(TKey, T, Polly.Context)
- uid: Apizr.Requesting.ICrudApi`4.Update(`1,`0,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.Update(`1,`0,Polly.Context,System.Threading.CancellationToken)
  id: Update(`1,`0,Polly.Context,System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Update(TKey, T, Context, CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Update(TKey, T, Context, CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Update(TKey, T, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    id: Update
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 396
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend an Update request with a key and a payload, passing a Polly context and a cancellation token through the request\n"
  example: []
  syntax:
    content: >-
      [Put("/{key}")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task Update(TKey key, [Body] T payload, [Context] Context context, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    - id: payload
      type: '{T}'
      description: The payload
      attributes:
      - type: Refit.BodyAttribute
        ctor: Refit.BodyAttribute.#ctor
        arguments: []
    - id: context
      type: Polly.Context
      description: The Polly context
      attributes:
      - type: Apizr.Policing.ContextAttribute
        ctor: Apizr.Policing.ContextAttribute.#ctor
        arguments: []
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Put("/{key}")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function Update(key As TKey, payload As T, context As Context, cancellationToken As CancellationToken) As Task
  overload: Apizr.Requesting.ICrudApi`4.Update*
  attributes:
  - type: Refit.PutAttribute
    ctor: Refit.PutAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Update(TKey, T, Context, CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Update(TKey, T, Polly.Context, System.Threading.CancellationToken)
- uid: Apizr.Requesting.ICrudApi`4.Update(`1,`0)
  commentId: M:Apizr.Requesting.ICrudApi`4.Update(`1,`0)
  id: Update(`1,`0)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Update(TKey, T)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Update(TKey, T)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Update(TKey, T)
  type: Method
  source:
    id: Update
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 408
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend an Update request with a key and a payload\n"
  example: []
  syntax:
    content: >-
      [Put("/{key}")]

      Task Update(TKey key, [Body] T payload)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    - id: payload
      type: '{T}'
      description: The payload
      attributes:
      - type: Refit.BodyAttribute
        ctor: Refit.BodyAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Put("/{key}")>

      Function Update(key As TKey, payload As T) As Task
  overload: Apizr.Requesting.ICrudApi`4.Update*
  attributes:
  - type: Refit.PutAttribute
    ctor: Refit.PutAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Update(TKey, T)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Update(TKey, T)
- uid: Apizr.Requesting.ICrudApi`4.Update(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Requesting.ICrudApi`4.Update(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions)
  id: Update(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Update(TKey, T, IApizrRequestOptions)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Update(TKey, T, IApizrRequestOptions)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Update(TKey, T, Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    id: Update
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 418
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend an Update request with a key and a payload\n"
  example: []
  syntax:
    content: >-
      [Put("/{key}")]

      Task Update(TKey key, [Body] T payload, [RequestOptions] IApizrRequestOptions options)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    - id: payload
      type: '{T}'
      description: The payload
      attributes:
      - type: Refit.BodyAttribute
        ctor: Refit.BodyAttribute.#ctor
        arguments: []
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Put("/{key}")>

      Function Update(key As TKey, payload As T, options As IApizrRequestOptions) As Task
  overload: Apizr.Requesting.ICrudApi`4.Update*
  attributes:
  - type: Refit.PutAttribute
    ctor: Refit.PutAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Update(TKey, T, IApizrRequestOptions)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Update(TKey, T, Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Requesting.ICrudApi`4.Update(`1,`0,System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.Update(`1,`0,System.Threading.CancellationToken)
  id: Update(`1,`0,System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Update(TKey, T, CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Update(TKey, T, CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Update(TKey, T, System.Threading.CancellationToken)
  type: Method
  source:
    id: Update
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 428
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend an Update request with a key and a payload, passing a cancellation token through the request\n"
  example: []
  syntax:
    content: >-
      [Put("/{key}")]

      Task Update(TKey key, [Body] T payload, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    - id: payload
      type: '{T}'
      description: The payload
      attributes:
      - type: Refit.BodyAttribute
        ctor: Refit.BodyAttribute.#ctor
        arguments: []
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Put("/{key}")>

      Function Update(key As TKey, payload As T, cancellationToken As CancellationToken) As Task
  overload: Apizr.Requesting.ICrudApi`4.Update*
  attributes:
  - type: Refit.PutAttribute
    ctor: Refit.PutAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Update(TKey, T, CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Update(TKey, T, System.Threading.CancellationToken)
- uid: Apizr.Requesting.ICrudApi`4.Update(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.Update(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  id: Update(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Update(TKey, T, IApizrRequestOptions, CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Update(TKey, T, IApizrRequestOptions, CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Update(TKey, T, Apizr.Configuring.Request.IApizrRequestOptions, System.Threading.CancellationToken)
  type: Method
  source:
    id: Update
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 439
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend an Update request with a key and a payload, passing a cancellation token through the request\n"
  example: []
  syntax:
    content: >-
      [Put("/{key}")]

      Task Update(TKey key, [Body] T payload, [RequestOptions] IApizrRequestOptions options, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    - id: payload
      type: '{T}'
      description: The payload
      attributes:
      - type: Refit.BodyAttribute
        ctor: Refit.BodyAttribute.#ctor
        arguments: []
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Put("/{key}")>

      Function Update(key As TKey, payload As T, options As IApizrRequestOptions, cancellationToken As CancellationToken) As Task
  overload: Apizr.Requesting.ICrudApi`4.Update*
  attributes:
  - type: Refit.PutAttribute
    ctor: Refit.PutAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Update(TKey, T, IApizrRequestOptions, CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Update(TKey, T, Apizr.Configuring.Request.IApizrRequestOptions, System.Threading.CancellationToken)
- uid: Apizr.Requesting.ICrudApi`4.Delete(`1,Polly.Context)
  commentId: M:Apizr.Requesting.ICrudApi`4.Delete(`1,Polly.Context)
  id: Delete(`1,Polly.Context)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Delete(TKey, Context)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Delete(TKey, Context)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Delete(TKey, Polly.Context)
  type: Method
  source:
    id: Delete
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 454
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a Delete request with a key param, passing a Polly context through the request\n"
  example: []
  syntax:
    content: >-
      [Delete("/{key}")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task Delete(TKey key, [Context] Context context)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    - id: context
      type: Polly.Context
      description: The Polly context
      attributes:
      - type: Apizr.Policing.ContextAttribute
        ctor: Apizr.Policing.ContextAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Delete("/{key}")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function Delete(key As TKey, context As Context) As Task
  overload: Apizr.Requesting.ICrudApi`4.Delete*
  attributes:
  - type: Refit.DeleteAttribute
    ctor: Refit.DeleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Delete(TKey, Context)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Delete(TKey, Polly.Context)
- uid: Apizr.Requesting.ICrudApi`4.Delete(`1,Polly.Context,System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.Delete(`1,Polly.Context,System.Threading.CancellationToken)
  id: Delete(`1,Polly.Context,System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Delete(TKey, Context, CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Delete(TKey, Context, CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Delete(TKey, Polly.Context, System.Threading.CancellationToken)
  type: Method
  source:
    id: Delete
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 465
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a Delete request with a key param, passing a Polly context and a cancellation token through the request\n"
  example: []
  syntax:
    content: >-
      [Delete("/{key}")]

      [Obsolete("Use the one with the request options parameter instead")]

      Task Delete(TKey key, [Context] Context context, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    - id: context
      type: Polly.Context
      description: The Polly context
      attributes:
      - type: Apizr.Policing.ContextAttribute
        ctor: Apizr.Policing.ContextAttribute.#ctor
        arguments: []
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Delete("/{key}")>

      <Obsolete("Use the one with the request options parameter instead")>

      Function Delete(key As TKey, context As Context, cancellationToken As CancellationToken) As Task
  overload: Apizr.Requesting.ICrudApi`4.Delete*
  attributes:
  - type: Refit.DeleteAttribute
    ctor: Refit.DeleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use the one with the request options parameter instead
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Delete(TKey, Context, CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Delete(TKey, Polly.Context, System.Threading.CancellationToken)
- uid: Apizr.Requesting.ICrudApi`4.Delete(`1)
  commentId: M:Apizr.Requesting.ICrudApi`4.Delete(`1)
  id: Delete(`1)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Delete(TKey)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Delete(TKey)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Delete(TKey)
  type: Method
  source:
    id: Delete
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 476
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a Delete request with a key param\n"
  example: []
  syntax:
    content: >-
      [Delete("/{key}")]

      Task Delete(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Delete("/{key}")>

      Function Delete(key As TKey) As Task
  overload: Apizr.Requesting.ICrudApi`4.Delete*
  attributes:
  - type: Refit.DeleteAttribute
    ctor: Refit.DeleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Delete(TKey)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Delete(TKey)
- uid: Apizr.Requesting.ICrudApi`4.Delete(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Requesting.ICrudApi`4.Delete(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  id: Delete(`1,Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Delete(TKey, IApizrRequestOptions)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Delete(TKey, IApizrRequestOptions)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Delete(TKey, Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    id: Delete
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 485
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a Delete request with a key param\n"
  example: []
  syntax:
    content: >-
      [Delete("/{key}")]

      Task Delete(TKey key, [RequestOptions] IApizrRequestOptions options)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Delete("/{key}")>

      Function Delete(key As TKey, options As IApizrRequestOptions) As Task
  overload: Apizr.Requesting.ICrudApi`4.Delete*
  attributes:
  - type: Refit.DeleteAttribute
    ctor: Refit.DeleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Delete(TKey, IApizrRequestOptions)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Delete(TKey, Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Requesting.ICrudApi`4.Delete(`1,System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.Delete(`1,System.Threading.CancellationToken)
  id: Delete(`1,System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Delete(TKey, CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Delete(TKey, CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Delete(TKey, System.Threading.CancellationToken)
  type: Method
  source:
    id: Delete
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 494
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a Delete request with a key param, passing a cancellation token through the request\n"
  example: []
  syntax:
    content: >-
      [Delete("/{key}")]

      Task Delete(TKey key, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Delete("/{key}")>

      Function Delete(key As TKey, cancellationToken As CancellationToken) As Task
  overload: Apizr.Requesting.ICrudApi`4.Delete*
  attributes:
  - type: Refit.DeleteAttribute
    ctor: Refit.DeleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Delete(TKey, CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Delete(TKey, System.Threading.CancellationToken)
- uid: Apizr.Requesting.ICrudApi`4.Delete(`1,Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  commentId: M:Apizr.Requesting.ICrudApi`4.Delete(`1,Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  id: Delete(`1,Apizr.Configuring.Request.IApizrRequestOptions,System.Threading.CancellationToken)
  parent: Apizr.Requesting.ICrudApi`4
  langs:
  - csharp
  - vb
  name: Delete(TKey, IApizrRequestOptions, CancellationToken)
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Delete(TKey, IApizrRequestOptions, CancellationToken)
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Delete(TKey, Apizr.Configuring.Request.IApizrRequestOptions, System.Threading.CancellationToken)
  type: Method
  source:
    id: Delete
    path: C:\Dev\Community\Apizr\Apizr\Apizr\Requesting\ICrudApi.cs
    startLine: 504
  assemblies:
  - Apizr
  namespace: Apizr.Requesting
  summary: "\nSend a Delete request with a key param, passing a cancellation token through the request\n"
  example: []
  syntax:
    content: >-
      [Delete("/{key}")]

      Task Delete(TKey key, [RequestOptions] IApizrRequestOptions options, CancellationToken cancellationToken)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      description: The request options
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: >-
      <Delete("/{key}")>

      Function Delete(key As TKey, options As IApizrRequestOptions, cancellationToken As CancellationToken) As Task
  overload: Apizr.Requesting.ICrudApi`4.Delete*
  attributes:
  - type: Refit.DeleteAttribute
    ctor: Refit.DeleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{key}
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Delete(TKey, IApizrRequestOptions, CancellationToken)
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Delete(TKey, Apizr.Configuring.Request.IApizrRequestOptions, System.Threading.CancellationToken)
references:
- uid: Apizr.Requesting
  commentId: N:Apizr.Requesting
  name: Apizr.Requesting
  nameWithType: Apizr.Requesting
  fullName: Apizr.Requesting
- uid: Apizr.Requesting.ICrudApi`4.Create*
  commentId: Overload:Apizr.Requesting.ICrudApi`4.Create
  name: Create
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Create
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Create
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Create
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Create
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Polly.Context
  commentId: T:Polly.Context
  parent: Polly
  isExternal: true
  name: Context
  nameWithType: Context
  fullName: Polly.Context
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Polly
  commentId: N:Polly
  isExternal: true
  name: Polly
  nameWithType: Polly
  fullName: Polly
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Apizr.Configuring.Request.IApizrRequestOptions
  commentId: T:Apizr.Configuring.Request.IApizrRequestOptions
  parent: Apizr.Configuring.Request
  name: IApizrRequestOptions
  nameWithType: IApizrRequestOptions
  fullName: Apizr.Configuring.Request.IApizrRequestOptions
- uid: Apizr.Configuring.Request
  commentId: N:Apizr.Configuring.Request
  name: Apizr.Configuring.Request
  nameWithType: Apizr.Configuring.Request
  fullName: Apizr.Configuring.Request
- uid: Apizr.Requesting.ICrudApi`4.ReadAll*
  commentId: Overload:Apizr.Requesting.ICrudApi`4.ReadAll
  name: ReadAll
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.ReadAll
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).ReadAll
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{{TReadAllResult}}
  commentId: T:System.Threading.Tasks.Task{`2}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TReadAllResult>
  nameWithType: Task<TReadAllResult>
  fullName: System.Threading.Tasks.Task<TReadAllResult>
  nameWithType.vb: Task(Of TReadAllResult)
  fullName.vb: System.Threading.Tasks.Task(Of TReadAllResult)
  name.vb: Task(Of TReadAllResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TReadAllResult
    nameWithType: TReadAllResult
    fullName: TReadAllResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: '{TReadAllParams}'
  commentId: '!:TReadAllParams'
  definition: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: TReadAllParams
  name: TReadAllParams
  nameWithType: TReadAllParams
  fullName: TReadAllParams
- uid: Apizr.Requesting.ICrudApi`4.Read*
  commentId: Overload:Apizr.Requesting.ICrudApi`4.Read
  name: Read
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Read
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Read
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: Apizr.Requesting.ICrudApi`4.Update*
  commentId: Overload:Apizr.Requesting.ICrudApi`4.Update
  name: Update
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Update
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Update
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Update
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Update
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Apizr.Requesting.ICrudApi`4.Delete*
  commentId: Overload:Apizr.Requesting.ICrudApi`4.Delete
  name: Delete
  nameWithType: ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Delete
  fullName: Apizr.Requesting.ICrudApi<T, TKey, TReadAllResult, TReadAllParams>.Delete
  nameWithType.vb: ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Delete
  fullName.vb: Apizr.Requesting.ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams).Delete
