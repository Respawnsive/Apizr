### YamlMime:ManagedReference
items:
- uid: Apizr.Resiliencing.ResilienceContextExtensions
  commentId: T:Apizr.Resiliencing.ResilienceContextExtensions
  id: ResilienceContextExtensions
  parent: Apizr.Resiliencing
  children:
  - Apizr.Resiliencing.ResilienceContextExtensions.TryGetLogger(Polly.ResilienceContext,Microsoft.Extensions.Logging.ILogger@,Microsoft.Extensions.Logging.LogLevel[]@,Apizr.Logging.HttpMessageParts@,Apizr.Logging.HttpTracerMode@)
  - Apizr.Resiliencing.ResilienceContextExtensions.WithLogger(Polly.ResilienceContext,Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.LogLevel[],Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode)
  langs:
  - csharp
  - vb
  name: ResilienceContextExtensions
  nameWithType: ResilienceContextExtensions
  fullName: Apizr.Resiliencing.ResilienceContextExtensions
  type: Class
  source:
    remote:
      path: Apizr/Src/Apizr/Resiliencing/ResilienceContextExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: ResilienceContextExtensions
    path: ../../Src/Apizr/Resiliencing/ResilienceContextExtensions.cs
    startLine: 9
  assemblies:
  - Apizr
  namespace: Apizr.Resiliencing
  summary: "\nPolly logging extensions\n"
  example: []
  syntax:
    content: public static class ResilienceContextExtensions
    content.vb: Public Module ResilienceContextExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Apizr.Resiliencing.ResilienceContextExtensions.WithLogger(Polly.ResilienceContext,Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.LogLevel[],Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode)
  commentId: M:Apizr.Resiliencing.ResilienceContextExtensions.WithLogger(Polly.ResilienceContext,Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.LogLevel[],Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode)
  id: WithLogger(Polly.ResilienceContext,Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.LogLevel[],Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode)
  isExtensionMethod: true
  parent: Apizr.Resiliencing.ResilienceContextExtensions
  langs:
  - csharp
  - vb
  name: WithLogger(ResilienceContext, ILogger, LogLevel[], HttpMessageParts, HttpTracerMode)
  nameWithType: ResilienceContextExtensions.WithLogger(ResilienceContext, ILogger, LogLevel[], HttpMessageParts, HttpTracerMode)
  fullName: Apizr.Resiliencing.ResilienceContextExtensions.WithLogger(Polly.ResilienceContext, Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.LogLevel[], Apizr.Logging.HttpMessageParts, Apizr.Logging.HttpTracerMode)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Resiliencing/ResilienceContextExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: WithLogger
    path: ../../Src/Apizr/Resiliencing/ResilienceContextExtensions.cs
    startLine: 20
  assemblies:
  - Apizr
  namespace: Apizr.Resiliencing
  summary: "\nPassing your <xref href=\"Microsoft.Extensions.Logging.ILogger\" data-throw-if-not-resolved=\"false\"></xref> mapping implementation to Polly context\n"
  example: []
  syntax:
    content: public static ResilienceContext WithLogger(this ResilienceContext context, ILogger logger, LogLevel[] logLevels, HttpMessageParts verbosity, HttpTracerMode tracerMode)
    parameters:
    - id: context
      type: Polly.ResilienceContext
      description: Polly context
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: Your <xref href="Microsoft.Extensions.Logging.ILogger" data-throw-if-not-resolved="false"></xref> mapping implementation
    - id: logLevels
      type: Microsoft.Extensions.Logging.LogLevel[]
      description: ''
    - id: verbosity
      type: Apizr.Logging.HttpMessageParts
      description: ''
    - id: tracerMode
      type: Apizr.Logging.HttpTracerMode
      description: ''
    return:
      type: Polly.ResilienceContext
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithLogger(context As ResilienceContext, logger As ILogger, logLevels As LogLevel(), verbosity As HttpMessageParts, tracerMode As HttpTracerMode) As ResilienceContext
  overload: Apizr.Resiliencing.ResilienceContextExtensions.WithLogger*
  nameWithType.vb: ResilienceContextExtensions.WithLogger(ResilienceContext, ILogger, LogLevel(), HttpMessageParts, HttpTracerMode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Resiliencing.ResilienceContextExtensions.WithLogger(Polly.ResilienceContext, Microsoft.Extensions.Logging.ILogger, Microsoft.Extensions.Logging.LogLevel(), Apizr.Logging.HttpMessageParts, Apizr.Logging.HttpTracerMode)
  name.vb: WithLogger(ResilienceContext, ILogger, LogLevel(), HttpMessageParts, HttpTracerMode)
- uid: Apizr.Resiliencing.ResilienceContextExtensions.TryGetLogger(Polly.ResilienceContext,Microsoft.Extensions.Logging.ILogger@,Microsoft.Extensions.Logging.LogLevel[]@,Apizr.Logging.HttpMessageParts@,Apizr.Logging.HttpTracerMode@)
  commentId: M:Apizr.Resiliencing.ResilienceContextExtensions.TryGetLogger(Polly.ResilienceContext,Microsoft.Extensions.Logging.ILogger@,Microsoft.Extensions.Logging.LogLevel[]@,Apizr.Logging.HttpMessageParts@,Apizr.Logging.HttpTracerMode@)
  id: TryGetLogger(Polly.ResilienceContext,Microsoft.Extensions.Logging.ILogger@,Microsoft.Extensions.Logging.LogLevel[]@,Apizr.Logging.HttpMessageParts@,Apizr.Logging.HttpTracerMode@)
  isExtensionMethod: true
  parent: Apizr.Resiliencing.ResilienceContextExtensions
  langs:
  - csharp
  - vb
  name: TryGetLogger(ResilienceContext, out ILogger, out LogLevel[], out HttpMessageParts, out HttpTracerMode)
  nameWithType: ResilienceContextExtensions.TryGetLogger(ResilienceContext, out ILogger, out LogLevel[], out HttpMessageParts, out HttpTracerMode)
  fullName: Apizr.Resiliencing.ResilienceContextExtensions.TryGetLogger(Polly.ResilienceContext, out Microsoft.Extensions.Logging.ILogger, out Microsoft.Extensions.Logging.LogLevel[], out Apizr.Logging.HttpMessageParts, out Apizr.Logging.HttpTracerMode)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr/Resiliencing/ResilienceContextExtensions.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: TryGetLogger
    path: ../../Src/Apizr/Resiliencing/ResilienceContextExtensions.cs
    startLine: 39
  assemblies:
  - Apizr
  namespace: Apizr.Resiliencing
  summary: "\nTrying to get your <xref href=\"Microsoft.Extensions.Logging.ILogger\" data-throw-if-not-resolved=\"false\"></xref> mapping implementation from Polly context\n"
  example: []
  syntax:
    content: public static bool TryGetLogger(this ResilienceContext context, out ILogger logger, out LogLevel[] logLevels, out HttpMessageParts verbosity, out HttpTracerMode tracerMode)
    parameters:
    - id: context
      type: Polly.ResilienceContext
      description: Polly context
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: Your <xref href="Microsoft.Extensions.Logging.ILogger" data-throw-if-not-resolved="false"></xref> mapping implementation
    - id: logLevels
      type: Microsoft.Extensions.Logging.LogLevel[]
      description: ''
    - id: verbosity
      type: Apizr.Logging.HttpMessageParts
      description: ''
    - id: tracerMode
      type: Apizr.Logging.HttpTracerMode
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryGetLogger(context As ResilienceContext, ByRef logger As ILogger, ByRef logLevels As LogLevel(), ByRef verbosity As HttpMessageParts, ByRef tracerMode As HttpTracerMode) As Boolean
  overload: Apizr.Resiliencing.ResilienceContextExtensions.TryGetLogger*
  nameWithType.vb: ResilienceContextExtensions.TryGetLogger(ResilienceContext, ByRef ILogger, ByRef LogLevel(), ByRef HttpMessageParts, ByRef HttpTracerMode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.Resiliencing.ResilienceContextExtensions.TryGetLogger(Polly.ResilienceContext, ByRef Microsoft.Extensions.Logging.ILogger, ByRef Microsoft.Extensions.Logging.LogLevel(), ByRef Apizr.Logging.HttpMessageParts, ByRef Apizr.Logging.HttpTracerMode)
  name.vb: TryGetLogger(ResilienceContext, ByRef ILogger, ByRef LogLevel(), ByRef HttpMessageParts, ByRef HttpTracerMode)
references:
- uid: Apizr.Resiliencing
  commentId: N:Apizr.Resiliencing
  name: Apizr.Resiliencing
  nameWithType: Apizr.Resiliencing
  fullName: Apizr.Resiliencing
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: Apizr.Resiliencing.ResilienceContextExtensions.WithLogger*
  commentId: Overload:Apizr.Resiliencing.ResilienceContextExtensions.WithLogger
  name: WithLogger
  nameWithType: ResilienceContextExtensions.WithLogger
  fullName: Apizr.Resiliencing.ResilienceContextExtensions.WithLogger
- uid: Polly.ResilienceContext
  commentId: T:Polly.ResilienceContext
  parent: Polly
  isExternal: true
  name: ResilienceContext
  nameWithType: ResilienceContext
  fullName: Polly.ResilienceContext
- uid: Microsoft.Extensions.Logging.LogLevel[]
  isExternal: true
  name: LogLevel[]
  nameWithType: LogLevel[]
  fullName: Microsoft.Extensions.Logging.LogLevel[]
  nameWithType.vb: LogLevel()
  fullName.vb: Microsoft.Extensions.Logging.LogLevel()
  name.vb: LogLevel()
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Apizr.Logging.HttpMessageParts
  commentId: T:Apizr.Logging.HttpMessageParts
  parent: Apizr.Logging
  name: HttpMessageParts
  nameWithType: HttpMessageParts
  fullName: Apizr.Logging.HttpMessageParts
- uid: Apizr.Logging.HttpTracerMode
  commentId: T:Apizr.Logging.HttpTracerMode
  parent: Apizr.Logging
  name: HttpTracerMode
  nameWithType: HttpTracerMode
  fullName: Apizr.Logging.HttpTracerMode
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Polly
  commentId: N:Polly
  isExternal: true
  name: Polly
  nameWithType: Polly
  fullName: Polly
- uid: Apizr.Logging
  commentId: N:Apizr.Logging
  name: Apizr.Logging
  nameWithType: Apizr.Logging
  fullName: Apizr.Logging
- uid: Apizr.Resiliencing.ResilienceContextExtensions.TryGetLogger*
  commentId: Overload:Apizr.Resiliencing.ResilienceContextExtensions.TryGetLogger
  name: TryGetLogger
  nameWithType: ResilienceContextExtensions.TryGetLogger
  fullName: Apizr.Resiliencing.ResilienceContextExtensions.TryGetLogger
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
