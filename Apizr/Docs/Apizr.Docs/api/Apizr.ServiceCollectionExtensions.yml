### YamlMime:ManagedReference
items:
- uid: Apizr.ServiceCollectionExtensions
  commentId: T:Apizr.ServiceCollectionExtensions
  id: ServiceCollectionExtensions
  parent: Apizr
  children:
  - Apizr.ServiceCollectionExtensions.AddApizr(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder},System.Action{Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])
  - Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Type[])
  - Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])
  - Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])
  - Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Type[])
  - Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Reflection.Assembly[])
  - Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type[])
  - Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type[])
  - Apizr.ServiceCollectionExtensions.AddApizrCrudFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrCrudFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrCrudFor``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrCrudFor``4(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrCrudFor``5(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])
  - Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Type[])
  - Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])
  - Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Type[])
  - Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  langs:
  - csharp
  - vb
  name: ServiceCollectionExtensions
  nameWithType: ServiceCollectionExtensions
  fullName: Apizr.ServiceCollectionExtensions
  type: Class
  source:
    id: ServiceCollectionExtensions
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 29
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  syntax:
    content: public static class ServiceCollectionExtensions
    content.vb: Public Module ServiceCollectionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Apizr.ServiceCollectionExtensions.AddApizr(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder},System.Action{Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizr(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder},System.Action{Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder})
  id: AddApizr(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder},System.Action{Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizr(IServiceCollection, Action<IApizrExtendedRegistryBuilder>, Action<IApizrExtendedCommonOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizr(IServiceCollection, Action<IApizrExtendedRegistryBuilder>, Action<IApizrExtendedCommonOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizr(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder>, System.Action<Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder>)
  type: Method
  source:
    id: AddApizr
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 40
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nCreate a registry with all managers built with both common and proper options\n"
  example: []
  syntax:
    content: public static IServiceCollection AddApizr(this IServiceCollection services, Action<IApizrExtendedRegistryBuilder> registryBuilder, Action<IApizrExtendedCommonOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: registryBuilder
      type: System.Action{Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder}
      description: The registry builder with access to proper options
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder}
      description: The common options shared by all managers
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizr(services As IServiceCollection, registryBuilder As Action(Of IApizrExtendedRegistryBuilder), optionsBuilder As Action(Of IApizrExtendedCommonOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizr*
  nameWithType.vb: ServiceCollectionExtensions.AddApizr(IServiceCollection, Action(Of IApizrExtendedRegistryBuilder), Action(Of IApizrExtendedCommonOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizr(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder), System.Action(Of Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder))
  name.vb: AddApizr(IServiceCollection, Action(Of IApizrExtendedRegistryBuilder), Action(Of IApizrExtendedCommonOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  id: AddApizrCrudFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudFor<T>(IServiceCollection, Action<IApizrExtendedOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrCrudFor<T>(IServiceCollection, Action<IApizrExtendedOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudFor<T>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>)
  type: Method
  source:
    id: AddApizrCrudFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 69
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> object type (class),\nwith key of type <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> and &quot;ReadAll&quot; query result of type <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref>\nand ReadAll query parameters of type IDictionary{string,object}\n"
  example: []
  syntax:
    content: >-
      public static IServiceCollection AddApizrCrudFor<T>(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null)

          where T : class
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    typeParameters:
    - id: T
      description: The object type to manage with crud api calls
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrCrudFor(Of T As Class)(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudFor(Of T)(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Of T)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder))
  name.vb: AddApizrCrudFor(Of T)(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  id: AddApizrCrudFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudFor<T, TKey>(IServiceCollection, Action<IApizrExtendedOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrCrudFor<T, TKey>(IServiceCollection, Action<IApizrExtendedOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudFor<T, TKey>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>)
  type: Method
  source:
    id: AddApizrCrudFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 82
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> object type (class), \nwith key of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TKey</code> (primitive) and &quot;ReadAll&quot; query result of type <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref>\nand ReadAll query parameters of type IDictionary{string,object}\n"
  example: []
  syntax:
    content: >-
      public static IServiceCollection AddApizrCrudFor<T, TKey>(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null)

          where T : class
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    typeParameters:
    - id: T
      description: The object type to manage with crud api calls
    - id: TKey
      description: The object key type (primitive)
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrCrudFor(Of T As Class, TKey)(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudFor(Of T, TKey)(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Of T, TKey)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder))
  name.vb: AddApizrCrudFor(Of T, TKey)(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudFor``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudFor``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  id: AddApizrCrudFor``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudFor<T, TKey, TReadAllResult>(IServiceCollection, Action<IApizrExtendedOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrCrudFor<T, TKey, TReadAllResult>(IServiceCollection, Action<IApizrExtendedOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudFor<T, TKey, TReadAllResult>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>)
  type: Method
  source:
    id: AddApizrCrudFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 99
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> object type (class), \nwith key of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TKey</code> (primitive) and &quot;ReadAll&quot; query result of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TReadAllResult</code>\n(inheriting from <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> or be of class type)\nand ReadAll query parameters of type IDictionary{string,object}\n"
  example: []
  syntax:
    content: >-
      public static IServiceCollection AddApizrCrudFor<T, TKey, TReadAllResult>(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null)

          where T : class
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    typeParameters:
    - id: T
      description: The object type to manage with crud api calls (class)
    - id: TKey
      description: The object key type (primitive)
    - id: TReadAllResult
      description: >-
        &quot;ReadAll&quot; query result type

        (should inherit from <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> or be of class type)
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrCrudFor(Of T As Class, TKey, TReadAllResult)(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudFor(Of T, TKey, TReadAllResult)(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Of T, TKey, TReadAllResult)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder))
  name.vb: AddApizrCrudFor(Of T, TKey, TReadAllResult)(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudFor``4(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudFor``4(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  id: AddApizrCrudFor``4(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudFor<T, TKey, TReadAllResult, TReadAllParams>(IServiceCollection, Action<IApizrExtendedOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrCrudFor<T, TKey, TReadAllResult, TReadAllParams>(IServiceCollection, Action<IApizrExtendedOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudFor<T, TKey, TReadAllResult, TReadAllParams>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>)
  type: Method
  source:
    id: AddApizrCrudFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 118
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> object type (class), \nwith key of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TKey</code> (primitive) and &quot;ReadAll&quot; query result of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TReadAllResult</code>\n(inheriting from <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> or be of class type)\nand ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)\n"
  example: []
  syntax:
    content: >-
      public static IServiceCollection AddApizrCrudFor<T, TKey, TReadAllResult, TReadAllParams>(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null)

          where T : class
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    typeParameters:
    - id: T
      description: The object type to manage with crud api calls (class)
    - id: TKey
      description: The object key type (primitive)
    - id: TReadAllResult
      description: >-
        &quot;ReadAll&quot; query result type

        (should inherit from <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> or be of class type)
    - id: TReadAllParams
      description: ReadAll query parameters
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrCrudFor(Of T As Class, TKey, TReadAllResult, TReadAllParams)(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudFor(Of T, TKey, TReadAllResult, TReadAllParams)(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Of T, TKey, TReadAllResult, TReadAllParams)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder))
  name.vb: AddApizrCrudFor(Of T, TKey, TReadAllResult, TReadAllParams)(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudFor``5(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudFor``5(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  id: AddApizrCrudFor``5(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(IServiceCollection, Action<IApizrExtendedOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrCrudFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(IServiceCollection, Action<IApizrExtendedOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>)
  type: Method
  source:
    id: AddApizrCrudFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 138
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister a custom <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> object type, \nwith key of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TKey</code> (primitive) and &quot;ReadAll&quot; query result of type <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TReadAllResult</code>\n(inheriting from <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> or be of class type)\nand ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)\n"
  example: []
  syntax:
    content: >-
      public static IServiceCollection AddApizrCrudFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null)

          where T : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    typeParameters:
    - id: T
      description: The object type to manage with crud api calls
    - id: TKey
      description: The object key type (primitive)
    - id: TReadAllResult
      description: >-
        &quot;ReadAll&quot; query result type

        (should inherit from <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> or be of class type)
    - id: TReadAllParams
      description: ReadAll query parameters
    - id: TApizrManager
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrCrudFor(Of T As Class, TKey, TReadAllResult, TReadAllParams, TApizrManager As IApizrManager(Of ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams)))(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudFor(Of T, TKey, TReadAllResult, TReadAllParams, TApizrManager)(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Of T, TKey, TReadAllResult, TReadAllParams, TApizrManager)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder))
  name.vb: AddApizrCrudFor(Of T, TKey, TReadAllResult, TReadAllParams, TApizrManager)(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  id: AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudFor(IServiceCollection, Type, Action<IApizrExtendedOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Type, Action<IApizrExtendedOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>)
  type: Method
  source:
    id: AddApizrCrudFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 153
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for <code data-dev-comment-type=\"paramref\" class=\"paramref\">crudedType</code> object type (class), \nwith key of type <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> and &quot;ReadAll&quot; query result of type <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref>\nand ReadAll query parameters of type IDictionary{string,object}\n"
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudFor(this IServiceCollection services, Type crudedType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: crudedType
      type: System.Type
      description: The object type to manage with crud api calls (class)
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrCrudFor(services As IServiceCollection, crudedType As Type, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Type, Action(Of IApizrExtendedOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder))
  name.vb: AddApizrCrudFor(IServiceCollection, Type, Action(Of IApizrExtendedOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  id: AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudFor(IServiceCollection, Type, Type, Action<IApizrExtendedOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Type, Type, Action<IApizrExtendedOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>)
  type: Method
  source:
    id: AddApizrCrudFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 166
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for <code data-dev-comment-type=\"paramref\" class=\"paramref\">crudedType</code> object type (class), \nwith key of type <code data-dev-comment-type=\"paramref\" class=\"paramref\">crudedKeyType</code> (primitive) and &quot;ReadAll&quot; query result of type <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudFor(this IServiceCollection services, Type crudedType, Type crudedKeyType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: crudedType
      type: System.Type
      description: The object type to manage with crud api calls (class)
    - id: crudedKeyType
      type: System.Type
      description: The object key type (primitive)
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrCrudFor(services As IServiceCollection, crudedType As Type, crudedKeyType As Type, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Type, Type, Action(Of IApizrExtendedOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder))
  name.vb: AddApizrCrudFor(IServiceCollection, Type, Type, Action(Of IApizrExtendedOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  id: AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudFor(IServiceCollection, Type, Type, Type, Action<IApizrExtendedOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Type, Type, Type, Action<IApizrExtendedOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type, System.Type, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>)
  type: Method
  source:
    id: AddApizrCrudFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 183
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for <code data-dev-comment-type=\"paramref\" class=\"paramref\">crudedType</code> object type (class), \nwith key of type <code data-dev-comment-type=\"paramref\" class=\"paramref\">crudedKeyType</code> (primitive) and &quot;ReadAll&quot; query result of type <code data-dev-comment-type=\"paramref\" class=\"paramref\">crudedReadAllResultType</code>\n(inheriting from <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> or be of class type)\nand ReadAll query parameters of type IDictionary{string,object}\n"
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudFor(this IServiceCollection services, Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: crudedType
      type: System.Type
      description: The object type to manage with crud api calls (class)
    - id: crudedKeyType
      type: System.Type
      description: The object key type (primitive)
    - id: crudedReadAllResultType
      type: System.Type
      description: >-
        &quot;ReadAll&quot; query result type

        (should inherit from <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> or be of class type)
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrCrudFor(services As IServiceCollection, crudedType As Type, crudedKeyType As Type, crudedReadAllResultType As Type, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Type, Type, Type, Action(Of IApizrExtendedOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type, System.Type, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder))
  name.vb: AddApizrCrudFor(IServiceCollection, Type, Type, Type, Action(Of IApizrExtendedOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  id: AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudFor(IServiceCollection, Type, Type, Type, Type, Action<IApizrExtendedOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Type, Type, Type, Type, Action<IApizrExtendedOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type, System.Type, System.Type, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>)
  type: Method
  source:
    id: AddApizrCrudFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 201
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for <code data-dev-comment-type=\"paramref\" class=\"paramref\">crudedType</code> object type (class), \nwith key of type <code data-dev-comment-type=\"paramref\" class=\"paramref\">crudedKeyType</code> (primitive) and &quot;ReadAll&quot; query result of type <code data-dev-comment-type=\"paramref\" class=\"paramref\">crudedReadAllResultType</code>\n(inheriting from <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> or be of class type)\nand ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)\n"
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudFor(this IServiceCollection services, Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Type crudedReadAllParamsType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: crudedType
      type: System.Type
      description: The object type to manage with crud api calls (class)
    - id: crudedKeyType
      type: System.Type
      description: The object key type (primitive)
    - id: crudedReadAllResultType
      type: System.Type
      description: >-
        &quot;ReadAll&quot; query result type

        (should inherit from <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> or be of class type)
    - id: crudedReadAllParamsType
      type: System.Type
      description: ReadAll query parameters type
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrCrudFor(services As IServiceCollection, crudedType As Type, crudedKeyType As Type, crudedReadAllResultType As Type, crudedReadAllParamsType As Type, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Type, Type, Type, Type, Action(Of IApizrExtendedOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type, System.Type, System.Type, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder))
  name.vb: AddApizrCrudFor(IServiceCollection, Type, Type, Type, Type, Action(Of IApizrExtendedOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  id: AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudFor(IServiceCollection, Type, Type, Type, Type, Type, Action<IApizrExtendedOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Type, Type, Type, Type, Type, Action<IApizrExtendedOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type, System.Type, System.Type, System.Type, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>)
  type: Method
  source:
    id: AddApizrCrudFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 221
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister a custom <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for <code data-dev-comment-type=\"paramref\" class=\"paramref\">crudedType</code> object type (class), \nwith key of type <code data-dev-comment-type=\"paramref\" class=\"paramref\">crudedKeyType</code> (primitive) and &quot;ReadAll&quot; query result of type <code data-dev-comment-type=\"paramref\" class=\"paramref\">crudedReadAllResultType</code>\n(inheriting from <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> or be of class type)\nand ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)\n"
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudFor(this IServiceCollection services, Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Type crudedReadAllParamsType, Type apizrManagerType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: crudedType
      type: System.Type
      description: The object type to manage with crud api calls
    - id: crudedKeyType
      type: System.Type
      description: The object key type
    - id: crudedReadAllResultType
      type: System.Type
      description: >-
        &quot;ReadAll&quot; query result type

        (should inherit from <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> or be of class type)
    - id: crudedReadAllParamsType
      type: System.Type
      description: ReadAll query parameters type
    - id: apizrManagerType
      type: System.Type
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation type
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrCrudFor(services As IServiceCollection, crudedType As Type, crudedKeyType As Type, crudedReadAllResultType As Type, crudedReadAllParamsType As Type, apizrManagerType As Type, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Type, Type, Type, Type, Type, Action(Of IApizrExtendedOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type, System.Type, System.Type, System.Type, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder))
  name.vb: AddApizrCrudFor(IServiceCollection, Type, Type, Type, Type, Type, Action(Of IApizrExtendedOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type[])
  id: AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudFor(IServiceCollection, Type[])
  nameWithType: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Type[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type[])
  type: Method
  source:
    id: AddApizrCrudFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 289
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for each <xref href=\"Apizr.Requesting.CrudEntityAttribute\" data-throw-if-not-resolved=\"false\"></xref> decorated classes\n"
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudFor(this IServiceCollection services, params Type[] assemblyMarkerTypes)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: assemblyMarkerTypes
      type: System.Type[]
      description: Any type contained in assembly to scan for <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrCrudFor(services As IServiceCollection, ParamArray assemblyMarkerTypes As Type()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type())
  name.vb: AddApizrCrudFor(IServiceCollection, Type())
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])
  id: AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudFor(IServiceCollection, Assembly[])
  nameWithType: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Assembly[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Reflection.Assembly[])
  type: Method
  source:
    id: AddApizrCrudFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 299
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for each <xref href=\"Apizr.Requesting.CrudEntityAttribute\" data-throw-if-not-resolved=\"false\"></xref> decorated classes\n"
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudFor(this IServiceCollection services, params Assembly[] assemblies)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: assemblies
      type: System.Reflection.Assembly[]
      description: Any assembly to scan for <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrCrudFor(services As IServiceCollection, ParamArray assemblies As Assembly()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Assembly())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Reflection.Assembly())
  name.vb: AddApizrCrudFor(IServiceCollection, Assembly())
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Type[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Type[])
  id: AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Type[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudFor(IServiceCollection, Action<IApizrExtendedOptionsBuilder>, Type[])
  nameWithType: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Action<IApizrExtendedOptionsBuilder>, Type[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>, System.Type[])
  type: Method
  source:
    id: AddApizrCrudFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 310
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for each <xref href=\"Apizr.Requesting.CrudEntityAttribute\" data-throw-if-not-resolved=\"false\"></xref> decorated classes\n"
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudFor(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    - id: assemblyMarkerTypes
      type: System.Type[]
      description: Any type contained in assembly to scan for <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrCrudFor(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing, ParamArray assemblyMarkerTypes As Type()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder), Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder), System.Type())
  name.vb: AddApizrCrudFor(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder), Type())
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])
  id: AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudFor(IServiceCollection, Action<IApizrExtendedOptionsBuilder>, Assembly[])
  nameWithType: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Action<IApizrExtendedOptionsBuilder>, Assembly[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>, System.Reflection.Assembly[])
  type: Method
  source:
    id: AddApizrCrudFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 322
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for each <xref href=\"Apizr.Requesting.CrudEntityAttribute\" data-throw-if-not-resolved=\"false\"></xref> decorated classes\n"
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudFor(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    - id: assemblies
      type: System.Reflection.Assembly[]
      description: Any assembly to scan for <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrCrudFor(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing, ParamArray assemblies As Assembly()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder), Assembly())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder), System.Reflection.Assembly())
  name.vb: AddApizrCrudFor(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder), Assembly())
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type[])
  id: AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudFor(IServiceCollection, Type, Type[])
  nameWithType: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Type, Type[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type[])
  type: Method
  source:
    id: AddApizrCrudFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 334
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister a custom <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for each <xref href=\"Apizr.Requesting.CrudEntityAttribute\" data-throw-if-not-resolved=\"false\"></xref> decorated classes\n"
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudFor(this IServiceCollection services, Type apizrManagerType, params Type[] assemblyMarkerTypes)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: apizrManagerType
      type: System.Type
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation type
    - id: assemblyMarkerTypes
      type: System.Type[]
      description: Any type contained in assembly to scan for <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrCrudFor(services As IServiceCollection, apizrManagerType As Type, ParamArray assemblyMarkerTypes As Type()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Type, Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type())
  name.vb: AddApizrCrudFor(IServiceCollection, Type, Type())
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Reflection.Assembly[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Reflection.Assembly[])
  id: AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Reflection.Assembly[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudFor(IServiceCollection, Type, Assembly[])
  nameWithType: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Type, Assembly[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Reflection.Assembly[])
  type: Method
  source:
    id: AddApizrCrudFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 345
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister a custom <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for each <xref href=\"Apizr.Requesting.CrudEntityAttribute\" data-throw-if-not-resolved=\"false\"></xref> decorated classes\n"
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudFor(this IServiceCollection services, Type apizrManagerType, params Assembly[] assemblies)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: apizrManagerType
      type: System.Type
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation type
    - id: assemblies
      type: System.Reflection.Assembly[]
      description: Any assembly to scan for <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrCrudFor(services As IServiceCollection, apizrManagerType As Type, ParamArray assemblies As Assembly()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Type, Assembly())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Reflection.Assembly())
  name.vb: AddApizrCrudFor(IServiceCollection, Type, Assembly())
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Type[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Type[])
  id: AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Type[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudFor(IServiceCollection, Type, Action<IApizrExtendedOptionsBuilder>, Type[])
  nameWithType: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Type, Action<IApizrExtendedOptionsBuilder>, Type[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>, System.Type[])
  type: Method
  source:
    id: AddApizrCrudFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 357
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister a custom <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for each <xref href=\"Apizr.Requesting.CrudEntityAttribute\" data-throw-if-not-resolved=\"false\"></xref> decorated classes\n"
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudFor(this IServiceCollection services, Type apizrManagerType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: apizrManagerType
      type: System.Type
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation type
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    - id: assemblyMarkerTypes
      type: System.Type[]
      description: Any type contained in assembly to scan for <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrCrudFor(services As IServiceCollection, apizrManagerType As Type, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing, ParamArray assemblyMarkerTypes As Type()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Type, Action(Of IApizrExtendedOptionsBuilder), Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder), System.Type())
  name.vb: AddApizrCrudFor(IServiceCollection, Type, Action(Of IApizrExtendedOptionsBuilder), Type())
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])
  id: AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudFor(IServiceCollection, Type, Action<IApizrExtendedOptionsBuilder>, Assembly[])
  nameWithType: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Type, Action<IApizrExtendedOptionsBuilder>, Assembly[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>, System.Reflection.Assembly[])
  type: Method
  source:
    id: AddApizrCrudFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 370
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister a custom <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for each <xref href=\"Apizr.Requesting.CrudEntityAttribute\" data-throw-if-not-resolved=\"false\"></xref> decorated classes\n"
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudFor(this IServiceCollection services, Type apizrManagerType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: apizrManagerType
      type: System.Type
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation type
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    - id: assemblies
      type: System.Reflection.Assembly[]
      description: Any assembly to scan for <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrCrudFor(services As IServiceCollection, apizrManagerType As Type, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing, ParamArray assemblies As Assembly()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudFor(IServiceCollection, Type, Action(Of IApizrExtendedOptionsBuilder), Assembly())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder), System.Reflection.Assembly())
  name.vb: AddApizrCrudFor(IServiceCollection, Type, Action(Of IApizrExtendedOptionsBuilder), Assembly())
- uid: Apizr.ServiceCollectionExtensions.AddApizrFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  id: AddApizrFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrFor<TWebApi>(IServiceCollection, Action<IApizrExtendedOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrFor<TWebApi>(IServiceCollection, Action<IApizrExtendedOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrFor<TWebApi>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>)
  type: Method
  source:
    id: AddApizrFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 440
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static IServiceCollection AddApizrFor<TWebApi>(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrFor(Of TWebApi)(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrFor(Of TWebApi)(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrFor(Of TWebApi)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder))
  name.vb: AddApizrFor(Of TWebApi)(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  id: AddApizrFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrFor<TWebApi, TApizrManager>(IServiceCollection, Action<IApizrExtendedOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrFor<TWebApi, TApizrManager>(IServiceCollection, Action<IApizrExtendedOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrFor<TWebApi, TApizrManager>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>)
  type: Method
  source:
    id: AddApizrFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 453
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister a custom <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      public static IServiceCollection AddApizrFor<TWebApi, TApizrManager>(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null)

          where TApizrManager : IApizrManager<TWebApi>
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TApizrManager
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrFor(Of TWebApi, TApizrManager As IApizrManager(Of TWebApi))(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrFor(Of TWebApi, TApizrManager)(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrFor(Of TWebApi, TApizrManager)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder))
  name.vb: AddApizrFor(Of TWebApi, TApizrManager)(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  id: AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrFor(IServiceCollection, Type, Action<IApizrExtendedOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrFor(IServiceCollection, Type, Action<IApizrExtendedOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>)
  type: Method
  source:
    id: AddApizrFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 466
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static IServiceCollection AddApizrFor(this IServiceCollection services, Type webApiType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: webApiType
      type: System.Type
      description: The web api interface type to manage
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrFor(services As IServiceCollection, webApiType As Type, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrFor(IServiceCollection, Type, Action(Of IApizrExtendedOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder))
  name.vb: AddApizrFor(IServiceCollection, Type, Action(Of IApizrExtendedOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Type[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Type[])
  id: AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Type[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrFor(IServiceCollection, Action<IApizrExtendedOptionsBuilder>, Type[])
  nameWithType: ServiceCollectionExtensions.AddApizrFor(IServiceCollection, Action<IApizrExtendedOptionsBuilder>, Type[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>, System.Type[])
  type: Method
  source:
    id: AddApizrFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 478
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister a <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for each <xref href=\"Apizr.WebApiAttribute\" data-throw-if-not-resolved=\"false\"></xref> decorated interfaces\n"
  example: []
  syntax:
    content: public static IServiceCollection AddApizrFor(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    - id: assemblyMarkerTypes
      type: System.Type[]
      description: Any type contained in assembly to scan for <xref href="Apizr.WebApiAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrFor(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing, ParamArray assemblyMarkerTypes As Type()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrFor(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder), Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder), System.Type())
  name.vb: AddApizrFor(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder), Type())
- uid: Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])
  id: AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrFor(IServiceCollection, Action<IApizrExtendedOptionsBuilder>, Assembly[])
  nameWithType: ServiceCollectionExtensions.AddApizrFor(IServiceCollection, Action<IApizrExtendedOptionsBuilder>, Assembly[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>, System.Reflection.Assembly[])
  type: Method
  source:
    id: AddApizrFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 490
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister a <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for each <xref href=\"Apizr.WebApiAttribute\" data-throw-if-not-resolved=\"false\"></xref> decorated interfaces\n"
  example: []
  syntax:
    content: public static IServiceCollection AddApizrFor(this IServiceCollection services, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    - id: assemblies
      type: System.Reflection.Assembly[]
      description: Any assembly to scan for <xref href="Apizr.WebApiAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrFor(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing, ParamArray assemblies As Assembly()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrFor(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder), Assembly())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder), System.Reflection.Assembly())
  name.vb: AddApizrFor(IServiceCollection, Action(Of IApizrExtendedOptionsBuilder), Assembly())
- uid: Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Type[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Type[])
  id: AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Type[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrFor(IServiceCollection, Type, Action<IApizrExtendedOptionsBuilder>, Type[])
  nameWithType: ServiceCollectionExtensions.AddApizrFor(IServiceCollection, Type, Action<IApizrExtendedOptionsBuilder>, Type[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>, System.Type[])
  type: Method
  source:
    id: AddApizrFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 503
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister a custom <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for each <xref href=\"Apizr.WebApiAttribute\" data-throw-if-not-resolved=\"false\"></xref> decorated interfaces\n"
  example: []
  syntax:
    content: public static IServiceCollection AddApizrFor(this IServiceCollection services, Type apizrManagerType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: apizrManagerType
      type: System.Type
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation type
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    - id: assemblyMarkerTypes
      type: System.Type[]
      description: Any type contained in assembly to scan for <xref href="Apizr.WebApiAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrFor(services As IServiceCollection, apizrManagerType As Type, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing, ParamArray assemblyMarkerTypes As Type()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrFor(IServiceCollection, Type, Action(Of IApizrExtendedOptionsBuilder), Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder), System.Type())
  name.vb: AddApizrFor(IServiceCollection, Type, Action(Of IApizrExtendedOptionsBuilder), Type())
- uid: Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])
  id: AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder},System.Reflection.Assembly[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrFor(IServiceCollection, Type, Action<IApizrExtendedOptionsBuilder>, Assembly[])
  nameWithType: ServiceCollectionExtensions.AddApizrFor(IServiceCollection, Type, Action<IApizrExtendedOptionsBuilder>, Assembly[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>, System.Reflection.Assembly[])
  type: Method
  source:
    id: AddApizrFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 516
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister a custom <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref> for each <xref href=\"Apizr.WebApiAttribute\" data-throw-if-not-resolved=\"false\"></xref> decorated interfaces\n"
  example: []
  syntax:
    content: public static IServiceCollection AddApizrFor(this IServiceCollection services, Type apizrManagerType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: apizrManagerType
      type: System.Type
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation type
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    - id: assemblies
      type: System.Reflection.Assembly[]
      description: Any assembly to scan for <xref href="Apizr.WebApiAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrFor(services As IServiceCollection, apizrManagerType As Type, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing, ParamArray assemblies As Assembly()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrFor(IServiceCollection, Type, Action(Of IApizrExtendedOptionsBuilder), Assembly())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder), System.Reflection.Assembly())
  name.vb: AddApizrFor(IServiceCollection, Type, Action(Of IApizrExtendedOptionsBuilder), Assembly())
- uid: Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  id: AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrFor(IServiceCollection, Type, Type, Action<IApizrExtendedOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrFor(IServiceCollection, Type, Type, Action<IApizrExtendedOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type, System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>)
  type: Method
  source:
    id: AddApizrFor
    path: C:\Dev\Community\Apizr\Apizr\Apizr.Extensions.Microsoft.DependencyInjection\ServiceCollectionExtensions.cs
    startLine: 557
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: "\nRegister a custom <xref href=\"Apizr.IApizrManager%601\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static IServiceCollection AddApizrFor(this IServiceCollection services, Type webApiType, Type apizrManagerType, Action<IApizrExtendedOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: webApiType
      type: System.Type
      description: The web api interface type to manage
    - id: apizrManagerType
      type: System.Type
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation type
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
      description: The builder defining specific Apizr options
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddApizrFor(services As IServiceCollection, webApiType As Type, apizrManagerType As Type, optionsBuilder As Action(Of IApizrExtendedOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrFor(IServiceCollection, Type, Type, Action(Of IApizrExtendedOptionsBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type, System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder))
  name.vb: AddApizrFor(IServiceCollection, Type, Type, Action(Of IApizrExtendedOptionsBuilder))
references:
- uid: Apizr
  commentId: N:Apizr
  name: Apizr
  nameWithType: Apizr
  fullName: Apizr
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Apizr.ServiceCollectionExtensions.AddApizr*
  commentId: Overload:Apizr.ServiceCollectionExtensions.AddApizr
  name: AddApizr
  nameWithType: ServiceCollectionExtensions.AddApizr
  fullName: Apizr.ServiceCollectionExtensions.AddApizr
- uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceCollection
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
- uid: System.Action{Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder}
  commentId: T:System.Action{Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder}
  parent: System
  definition: System.Action`1
  name: Action<IApizrExtendedRegistryBuilder>
  nameWithType: Action<IApizrExtendedRegistryBuilder>
  fullName: System.Action<Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder>
  nameWithType.vb: Action(Of IApizrExtendedRegistryBuilder)
  fullName.vb: System.Action(Of Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder)
  name.vb: Action(Of IApizrExtendedRegistryBuilder)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder
    name: IApizrExtendedRegistryBuilder
    nameWithType: IApizrExtendedRegistryBuilder
    fullName: Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder
    name: IApizrExtendedRegistryBuilder
    nameWithType: IApizrExtendedRegistryBuilder
    fullName: Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder}
  commentId: T:System.Action{Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder}
  parent: System
  definition: System.Action`1
  name: Action<IApizrExtendedCommonOptionsBuilder>
  nameWithType: Action<IApizrExtendedCommonOptionsBuilder>
  fullName: System.Action<Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder>
  nameWithType.vb: Action(Of IApizrExtendedCommonOptionsBuilder)
  fullName.vb: System.Action(Of Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder)
  name.vb: Action(Of IApizrExtendedCommonOptionsBuilder)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder
    name: IApizrExtendedCommonOptionsBuilder
    nameWithType: IApizrExtendedCommonOptionsBuilder
    fullName: Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder
    name: IApizrExtendedCommonOptionsBuilder
    nameWithType: IApizrExtendedCommonOptionsBuilder
    fullName: Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.IApizrManager`1
  commentId: T:Apizr.IApizrManager`1
  name: IApizrManager<TWebApi>
  nameWithType: IApizrManager<TWebApi>
  fullName: Apizr.IApizrManager<TWebApi>
  nameWithType.vb: IApizrManager(Of TWebApi)
  fullName.vb: Apizr.IApizrManager(Of TWebApi)
  name.vb: IApizrManager(Of TWebApi)
  spec.csharp:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    nameWithType: IApizrManager
    fullName: Apizr.IApizrManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWebApi
    nameWithType: TWebApi
    fullName: TWebApi
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudFor*
  commentId: Overload:Apizr.ServiceCollectionExtensions.AddApizrCrudFor
  name: AddApizrCrudFor
  nameWithType: ServiceCollectionExtensions.AddApizrCrudFor
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudFor
- uid: System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
  commentId: T:System.Action{Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder}
  parent: System
  definition: System.Action`1
  name: Action<IApizrExtendedOptionsBuilder>
  nameWithType: Action<IApizrExtendedOptionsBuilder>
  fullName: System.Action<Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder>
  nameWithType.vb: Action(Of IApizrExtendedOptionsBuilder)
  fullName.vb: System.Action(Of Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder)
  name.vb: Action(Of IApizrExtendedOptionsBuilder)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder
    name: IApizrExtendedOptionsBuilder
    nameWithType: IApizrExtendedOptionsBuilder
    fullName: Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder
    name: IApizrExtendedOptionsBuilder
    nameWithType: IApizrExtendedOptionsBuilder
    fullName: Apizr.Extending.Configuring.IApizrExtendedOptionsBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Apizr.Requesting.CrudEntityAttribute
  commentId: T:Apizr.Requesting.CrudEntityAttribute
  parent: Apizr.Requesting
  name: CrudEntityAttribute
  nameWithType: CrudEntityAttribute
  fullName: Apizr.Requesting.CrudEntityAttribute
- uid: System.Type[]
  isExternal: true
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Apizr.Requesting
  commentId: N:Apizr.Requesting
  name: Apizr.Requesting
  nameWithType: Apizr.Requesting
  fullName: Apizr.Requesting
- uid: System.Reflection.Assembly[]
  isExternal: true
  name: Assembly[]
  nameWithType: Assembly[]
  fullName: System.Reflection.Assembly[]
  nameWithType.vb: Assembly()
  fullName.vb: System.Reflection.Assembly()
  name.vb: Assembly()
  spec.csharp:
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Apizr.ServiceCollectionExtensions.AddApizrFor*
  commentId: Overload:Apizr.ServiceCollectionExtensions.AddApizrFor
  name: AddApizrFor
  nameWithType: ServiceCollectionExtensions.AddApizrFor
  fullName: Apizr.ServiceCollectionExtensions.AddApizrFor
- uid: Apizr.WebApiAttribute
  commentId: T:Apizr.WebApiAttribute
  name: WebApiAttribute
  nameWithType: WebApiAttribute
  fullName: Apizr.WebApiAttribute
