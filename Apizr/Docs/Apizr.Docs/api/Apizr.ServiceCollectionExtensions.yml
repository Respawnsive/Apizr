### YamlMime:ManagedReference
items:
- uid: Apizr.ServiceCollectionExtensions
  commentId: T:Apizr.ServiceCollectionExtensions
  id: ServiceCollectionExtensions
  parent: Apizr
  children:
  - Apizr.ServiceCollectionExtensions.AddApizr(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder},System.Action{Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Reflection.Assembly[])
  - Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Type[])
  - Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])
  - Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Reflection.Assembly[])
  - Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Type[])
  - Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Reflection.Assembly[])
  - Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type[])
  - Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type[])
  - Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``4(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``5(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Reflection.Assembly[])
  - Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Type[])
  - Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Reflection.Assembly[])
  - Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Type[])
  - Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrManagerFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  - Apizr.ServiceCollectionExtensions.AddApizrManagerFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  langs:
  - csharp
  - vb
  name: ServiceCollectionExtensions
  nameWithType: ServiceCollectionExtensions
  fullName: Apizr.ServiceCollectionExtensions
  type: Class
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: ServiceCollectionExtensions
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 37
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: Apizr service collection extensions
  example: []
  syntax:
    content: public static class ServiceCollectionExtensions
    content.vb: Public Module ServiceCollectionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Apizr.ServiceCollectionExtensions.AddApizr(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder},System.Action{Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizr(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder},System.Action{Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder})
  id: AddApizr(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder},System.Action{Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizr(IServiceCollection, Action<IApizrExtendedRegistryBuilder>, Action<IApizrExtendedCommonOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizr(IServiceCollection, Action<IApizrExtendedRegistryBuilder>, Action<IApizrExtendedCommonOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizr(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder>, System.Action<Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizr
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 48
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: Create a registry with all managers built with both common and proper options
  example: []
  syntax:
    content: public static IServiceCollection AddApizr(this IServiceCollection services, Action<IApizrExtendedRegistryBuilder> registryBuilder, Action<IApizrExtendedCommonOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: registryBuilder
      type: System.Action{Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder}
      description: The registry builder with access to proper options
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder}
      description: The common options shared by all managers
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizr(services As IServiceCollection, registryBuilder As Action(Of IApizrExtendedRegistryBuilder), optionsBuilder As Action(Of IApizrExtendedCommonOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizr*
  nameWithType.vb: ServiceCollectionExtensions.AddApizr(IServiceCollection, Action(Of IApizrExtendedRegistryBuilder), Action(Of IApizrExtendedCommonOptionsBuilder))
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizr(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder), System.Action(Of Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder))
  name.vb: AddApizr(IServiceCollection, Action(Of IApizrExtendedRegistryBuilder), Action(Of IApizrExtendedCommonOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  id: AddApizrCrudManagerFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudManagerFor<T>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrCrudManagerFor<T>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor<T>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrCrudManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 77
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: >-
    Register <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for <code class="typeparamref">T</code> object type (class),

    with key of type <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> and "ReadAll" query result of type <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref>

    and ReadAll query parameters of type IDictionary{string,object}
  example: []
  syntax:
    content: 'public static IServiceCollection AddApizrCrudManagerFor<T>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where T : class'
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    typeParameters:
    - id: T
      description: The object type to manage with crud api calls
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrCrudManagerFor(Of T As Class)(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudManagerFor(Of T)(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder))
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Of T)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder))
  name.vb: AddApizrCrudManagerFor(Of T)(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  id: AddApizrCrudManagerFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudManagerFor<T, TKey>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrCrudManagerFor<T, TKey>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor<T, TKey>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrCrudManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 90
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: >-
    Register <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for <code class="typeparamref">T</code> object type (class), 

    with key of type <code class="typeparamref">TKey</code> (primitive) and "ReadAll" query result of type <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref>

    and ReadAll query parameters of type IDictionary{string,object}
  example: []
  syntax:
    content: 'public static IServiceCollection AddApizrCrudManagerFor<T, TKey>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where T : class'
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    typeParameters:
    - id: T
      description: The object type to manage with crud api calls
    - id: TKey
      description: The object key type (primitive)
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrCrudManagerFor(Of T As Class, TKey)(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudManagerFor(Of T, TKey)(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder))
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Of T, TKey)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder))
  name.vb: AddApizrCrudManagerFor(Of T, TKey)(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  id: AddApizrCrudManagerFor``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudManagerFor<T, TKey, TReadAllResult>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrCrudManagerFor<T, TKey, TReadAllResult>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor<T, TKey, TReadAllResult>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrCrudManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 107
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: >-
    Register <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for <code class="typeparamref">T</code> object type (class), 

    with key of type <code class="typeparamref">TKey</code> (primitive) and "ReadAll" query result of type <code class="typeparamref">TReadAllResult</code>

    (inheriting from <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> or be of class type)

    and ReadAll query parameters of type IDictionary{string,object}
  example: []
  syntax:
    content: 'public static IServiceCollection AddApizrCrudManagerFor<T, TKey, TReadAllResult>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where T : class'
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    typeParameters:
    - id: T
      description: The object type to manage with crud api calls (class)
    - id: TKey
      description: The object key type (primitive)
    - id: TReadAllResult
      description: "\"ReadAll\" query result type\r\n    (should inherit from <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> or be of class type)"
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrCrudManagerFor(Of T As Class, TKey, TReadAllResult)(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudManagerFor(Of T, TKey, TReadAllResult)(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder))
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Of T, TKey, TReadAllResult)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder))
  name.vb: AddApizrCrudManagerFor(Of T, TKey, TReadAllResult)(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``4(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``4(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  id: AddApizrCrudManagerFor``4(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrCrudManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 126
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: >-
    Register <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for <code class="typeparamref">T</code> object type (class), 

    with key of type <code class="typeparamref">TKey</code> (primitive) and "ReadAll" query result of type <code class="typeparamref">TReadAllResult</code>

    (inheriting from <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> or be of class type)

    and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
  example: []
  syntax:
    content: 'public static IServiceCollection AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where T : class'
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    typeParameters:
    - id: T
      description: The object type to manage with crud api calls (class)
    - id: TKey
      description: The object key type (primitive)
    - id: TReadAllResult
      description: "\"ReadAll\" query result type\r\n    (should inherit from <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> or be of class type)"
    - id: TReadAllParams
      description: ReadAll query parameters
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrCrudManagerFor(Of T As Class, TKey, TReadAllResult, TReadAllParams)(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudManagerFor(Of T, TKey, TReadAllResult, TReadAllParams)(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder))
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Of T, TKey, TReadAllResult, TReadAllParams)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder))
  name.vb: AddApizrCrudManagerFor(Of T, TKey, TReadAllResult, TReadAllParams)(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``5(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``5(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  id: AddApizrCrudManagerFor``5(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrCrudManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 146
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: >-
    Register a custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for <code class="typeparamref">T</code> object type, 

    with key of type <code class="typeparamref">TKey</code> (primitive) and "ReadAll" query result of type <code class="typeparamref">TReadAllResult</code>

    (inheriting from <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> or be of class type)

    and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
  example: []
  syntax:
    content: 'public static IServiceCollection AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where T : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>'
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    typeParameters:
    - id: T
      description: The object type to manage with crud api calls
    - id: TKey
      description: The object key type (primitive)
    - id: TReadAllResult
      description: "\"ReadAll\" query result type\r\n    (should inherit from <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> or be of class type)"
    - id: TReadAllParams
      description: ReadAll query parameters
    - id: TApizrManager
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrCrudManagerFor(Of T As Class, TKey, TReadAllResult, TReadAllParams, TApizrManager As IApizrManager(Of ICrudApi(Of T, TKey, TReadAllResult, TReadAllParams)))(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudManagerFor(Of T, TKey, TReadAllResult, TReadAllParams, TApizrManager)(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder))
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Of T, TKey, TReadAllResult, TReadAllParams, TApizrManager)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder))
  name.vb: AddApizrCrudManagerFor(Of T, TKey, TReadAllResult, TReadAllParams, TApizrManager)(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  id: AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudManagerFor(IServiceCollection, Type, Action<IApizrExtendedManagerOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Type, Action<IApizrExtendedManagerOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrCrudManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 161
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: >-
    Register <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for <code class="paramref">crudedType</code> object type (class), 

    with key of type <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> and "ReadAll" query result of type <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref>

    and ReadAll query parameters of type IDictionary{string,object}
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type crudedType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: crudedType
      type: System.Type
      description: The object type to manage with crud api calls (class)
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrCrudManagerFor(services As IServiceCollection, crudedType As Type, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Type, Action(Of IApizrExtendedManagerOptionsBuilder))
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder))
  name.vb: AddApizrCrudManagerFor(IServiceCollection, Type, Action(Of IApizrExtendedManagerOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  id: AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudManagerFor(IServiceCollection, Type, Type, Action<IApizrExtendedManagerOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Type, Type, Action<IApizrExtendedManagerOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrCrudManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 174
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: >-
    Register <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for <code class="paramref">crudedType</code> object type (class), 

    with key of type <code class="paramref">crudedKeyType</code> (primitive) and "ReadAll" query result of type <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type crudedType, Type crudedKeyType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: crudedType
      type: System.Type
      description: The object type to manage with crud api calls (class)
    - id: crudedKeyType
      type: System.Type
      description: The object key type (primitive)
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrCrudManagerFor(services As IServiceCollection, crudedType As Type, crudedKeyType As Type, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Type, Type, Action(Of IApizrExtendedManagerOptionsBuilder))
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder))
  name.vb: AddApizrCrudManagerFor(IServiceCollection, Type, Type, Action(Of IApizrExtendedManagerOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  id: AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudManagerFor(IServiceCollection, Type, Type, Type, Action<IApizrExtendedManagerOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Type, Type, Type, Action<IApizrExtendedManagerOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type, System.Type, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrCrudManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 191
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: >-
    Register <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for <code class="paramref">crudedType</code> object type (class), 

    with key of type <code class="paramref">crudedKeyType</code> (primitive) and "ReadAll" query result of type <code class="paramref">crudedReadAllResultType</code>

    (inheriting from <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> or be of class type)

    and ReadAll query parameters of type IDictionary{string,object}
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: crudedType
      type: System.Type
      description: The object type to manage with crud api calls (class)
    - id: crudedKeyType
      type: System.Type
      description: The object key type (primitive)
    - id: crudedReadAllResultType
      type: System.Type
      description: "\"ReadAll\" query result type\r\n    (should inherit from <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> or be of class type)"
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrCrudManagerFor(services As IServiceCollection, crudedType As Type, crudedKeyType As Type, crudedReadAllResultType As Type, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Type, Type, Type, Action(Of IApizrExtendedManagerOptionsBuilder))
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type, System.Type, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder))
  name.vb: AddApizrCrudManagerFor(IServiceCollection, Type, Type, Type, Action(Of IApizrExtendedManagerOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  id: AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudManagerFor(IServiceCollection, Type, Type, Type, Type, Action<IApizrExtendedManagerOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Type, Type, Type, Type, Action<IApizrExtendedManagerOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type, System.Type, System.Type, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrCrudManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 209
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: >-
    Register <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for <code class="paramref">crudedType</code> object type (class), 

    with key of type <code class="paramref">crudedKeyType</code> (primitive) and "ReadAll" query result of type <code class="paramref">crudedReadAllResultType</code>

    (inheriting from <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> or be of class type)

    and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Type crudedReadAllParamsType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: crudedType
      type: System.Type
      description: The object type to manage with crud api calls (class)
    - id: crudedKeyType
      type: System.Type
      description: The object key type (primitive)
    - id: crudedReadAllResultType
      type: System.Type
      description: "\"ReadAll\" query result type\r\n    (should inherit from <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> or be of class type)"
    - id: crudedReadAllParamsType
      type: System.Type
      description: ReadAll query parameters type
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrCrudManagerFor(services As IServiceCollection, crudedType As Type, crudedKeyType As Type, crudedReadAllResultType As Type, crudedReadAllParamsType As Type, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Type, Type, Type, Type, Action(Of IApizrExtendedManagerOptionsBuilder))
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type, System.Type, System.Type, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder))
  name.vb: AddApizrCrudManagerFor(IServiceCollection, Type, Type, Type, Type, Action(Of IApizrExtendedManagerOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  id: AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudManagerFor(IServiceCollection, Type, Type, Type, Type, Type, Action<IApizrExtendedManagerOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Type, Type, Type, Type, Type, Action<IApizrExtendedManagerOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type, System.Type, System.Type, System.Type, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrCrudManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 229
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: >-
    Register a custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for <code class="paramref">crudedType</code> object type (class), 

    with key of type <code class="paramref">crudedKeyType</code> (primitive) and "ReadAll" query result of type <code class="paramref">crudedReadAllResultType</code>

    (inheriting from <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> or be of class type)

    and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Type crudedReadAllParamsType, Type apizrManagerType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: crudedType
      type: System.Type
      description: The object type to manage with crud api calls
    - id: crudedKeyType
      type: System.Type
      description: The object key type
    - id: crudedReadAllResultType
      type: System.Type
      description: "\"ReadAll\" query result type\r\n    (should inherit from <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> or be of class type)"
    - id: crudedReadAllParamsType
      type: System.Type
      description: ReadAll query parameters type
    - id: apizrManagerType
      type: System.Type
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation type
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrCrudManagerFor(services As IServiceCollection, crudedType As Type, crudedKeyType As Type, crudedReadAllResultType As Type, crudedReadAllParamsType As Type, apizrManagerType As Type, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Type, Type, Type, Type, Type, Action(Of IApizrExtendedManagerOptionsBuilder))
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type, System.Type, System.Type, System.Type, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder))
  name.vb: AddApizrCrudManagerFor(IServiceCollection, Type, Type, Type, Type, Type, Action(Of IApizrExtendedManagerOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type[])
  id: AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudManagerFor(IServiceCollection, params Type[])
  nameWithType: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, params Type[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, params System.Type[])
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrCrudManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 297
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: Register <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for each <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref> decorated classes
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, params Type[] assemblyMarkerTypes)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: assemblyMarkerTypes
      type: System.Type[]
      description: Any type contained in assembly to scan for <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrCrudManagerFor(services As IServiceCollection, ParamArray assemblyMarkerTypes As Type()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, ParamArray Type())
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, ParamArray System.Type())
  name.vb: AddApizrCrudManagerFor(IServiceCollection, ParamArray Type())
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])
  id: AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudManagerFor(IServiceCollection, params Assembly[])
  nameWithType: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, params Assembly[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, params System.Reflection.Assembly[])
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrCrudManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 307
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: Register <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for each <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref> decorated classes
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, params Assembly[] assemblies)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: assemblies
      type: System.Reflection.Assembly[]
      description: Any assembly to scan for <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrCrudManagerFor(services As IServiceCollection, ParamArray assemblies As Assembly()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, ParamArray Assembly())
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, ParamArray System.Reflection.Assembly())
  name.vb: AddApizrCrudManagerFor(IServiceCollection, ParamArray Assembly())
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Type[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Type[])
  id: AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Type[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudManagerFor(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>, params Type[])
  nameWithType: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>, params Type[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>, params System.Type[])
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrCrudManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 318
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: Register <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for each <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref> decorated classes
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    - id: assemblyMarkerTypes
      type: System.Type[]
      description: Any type contained in assembly to scan for <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrCrudManagerFor(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing, ParamArray assemblyMarkerTypes As Type()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder), ParamArray Type())
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder), ParamArray System.Type())
  name.vb: AddApizrCrudManagerFor(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder), ParamArray Type())
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Reflection.Assembly[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Reflection.Assembly[])
  id: AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Reflection.Assembly[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudManagerFor(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>, params Assembly[])
  nameWithType: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>, params Assembly[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>, params System.Reflection.Assembly[])
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrCrudManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 330
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: Register <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for each <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref> decorated classes
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    - id: assemblies
      type: System.Reflection.Assembly[]
      description: Any assembly to scan for <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrCrudManagerFor(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing, ParamArray assemblies As Assembly()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder), ParamArray Assembly())
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder), ParamArray System.Reflection.Assembly())
  name.vb: AddApizrCrudManagerFor(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder), ParamArray Assembly())
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type[])
  id: AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudManagerFor(IServiceCollection, Type, params Type[])
  nameWithType: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Type, params Type[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, params System.Type[])
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrCrudManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 342
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: Register a custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for each <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref> decorated classes
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type apizrManagerType, params Type[] assemblyMarkerTypes)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: apizrManagerType
      type: System.Type
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation type
    - id: assemblyMarkerTypes
      type: System.Type[]
      description: Any type contained in assembly to scan for <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrCrudManagerFor(services As IServiceCollection, apizrManagerType As Type, ParamArray assemblyMarkerTypes As Type()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Type, ParamArray Type())
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, ParamArray System.Type())
  name.vb: AddApizrCrudManagerFor(IServiceCollection, Type, ParamArray Type())
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Reflection.Assembly[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Reflection.Assembly[])
  id: AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Reflection.Assembly[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudManagerFor(IServiceCollection, Type, params Assembly[])
  nameWithType: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Type, params Assembly[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, params System.Reflection.Assembly[])
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrCrudManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 353
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: Register a custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for each <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref> decorated classes
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type apizrManagerType, params Assembly[] assemblies)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: apizrManagerType
      type: System.Type
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation type
    - id: assemblies
      type: System.Reflection.Assembly[]
      description: Any assembly to scan for <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrCrudManagerFor(services As IServiceCollection, apizrManagerType As Type, ParamArray assemblies As Assembly()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Type, ParamArray Assembly())
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, ParamArray System.Reflection.Assembly())
  name.vb: AddApizrCrudManagerFor(IServiceCollection, Type, ParamArray Assembly())
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Type[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Type[])
  id: AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Type[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudManagerFor(IServiceCollection, Type, Action<IApizrExtendedManagerOptionsBuilder>, params Type[])
  nameWithType: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Type, Action<IApizrExtendedManagerOptionsBuilder>, params Type[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>, params System.Type[])
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrCrudManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 365
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: Register a custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for each <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref> decorated classes
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type apizrManagerType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: apizrManagerType
      type: System.Type
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation type
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    - id: assemblyMarkerTypes
      type: System.Type[]
      description: Any type contained in assembly to scan for <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrCrudManagerFor(services As IServiceCollection, apizrManagerType As Type, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing, ParamArray assemblyMarkerTypes As Type()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Type, Action(Of IApizrExtendedManagerOptionsBuilder), ParamArray Type())
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder), ParamArray System.Type())
  name.vb: AddApizrCrudManagerFor(IServiceCollection, Type, Action(Of IApizrExtendedManagerOptionsBuilder), ParamArray Type())
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Reflection.Assembly[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Reflection.Assembly[])
  id: AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Reflection.Assembly[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrCrudManagerFor(IServiceCollection, Type, Action<IApizrExtendedManagerOptionsBuilder>, params Assembly[])
  nameWithType: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Type, Action<IApizrExtendedManagerOptionsBuilder>, params Assembly[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>, params System.Reflection.Assembly[])
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrCrudManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 378
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: Register a custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for each <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref> decorated classes
  example: []
  syntax:
    content: public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type apizrManagerType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: apizrManagerType
      type: System.Type
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation type
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    - id: assemblies
      type: System.Reflection.Assembly[]
      description: Any assembly to scan for <xref href="Apizr.Requesting.CrudEntityAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrCrudManagerFor(services As IServiceCollection, apizrManagerType As Type, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing, ParamArray assemblies As Assembly()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrCrudManagerFor(IServiceCollection, Type, Action(Of IApizrExtendedManagerOptionsBuilder), ParamArray Assembly())
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder), ParamArray System.Reflection.Assembly())
  name.vb: AddApizrCrudManagerFor(IServiceCollection, Type, Action(Of IApizrExtendedManagerOptionsBuilder), ParamArray Assembly())
- uid: Apizr.ServiceCollectionExtensions.AddApizrManagerFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  id: AddApizrManagerFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrManagerFor<TWebApi>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrManagerFor<TWebApi>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrManagerFor<TWebApi>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 448
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: Register <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static IServiceCollection AddApizrManagerFor<TWebApi>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrManagerFor(Of TWebApi)(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrManagerFor(Of TWebApi)(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder))
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Of TWebApi)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder))
  name.vb: AddApizrManagerFor(Of TWebApi)(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrManagerFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  id: AddApizrManagerFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrManagerFor<TWebApi, TApizrManager>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrManagerFor<TWebApi, TApizrManager>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrManagerFor<TWebApi, TApizrManager>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 461
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: Register a custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: 'public static IServiceCollection AddApizrManagerFor<TWebApi, TApizrManager>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where TApizrManager : IApizrManager<TWebApi>'
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    typeParameters:
    - id: TWebApi
      description: The web api interface to manage
    - id: TApizrManager
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrManagerFor(Of TWebApi, TApizrManager As IApizrManager(Of TWebApi))(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrManagerFor(Of TWebApi, TApizrManager)(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder))
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Of TWebApi, TApizrManager)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder))
  name.vb: AddApizrManagerFor(Of TWebApi, TApizrManager)(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  id: AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrManagerFor(IServiceCollection, Type, Action<IApizrExtendedManagerOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrManagerFor(IServiceCollection, Type, Action<IApizrExtendedManagerOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 474
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: Register <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Type webApiType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: webApiType
      type: System.Type
      description: The web api interface type to manage
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrManagerFor(services As IServiceCollection, webApiType As Type, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrManagerFor(IServiceCollection, Type, Action(Of IApizrExtendedManagerOptionsBuilder))
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder))
  name.vb: AddApizrManagerFor(IServiceCollection, Type, Action(Of IApizrExtendedManagerOptionsBuilder))
- uid: Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Type[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Type[])
  id: AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Type[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrManagerFor(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>, params Type[])
  nameWithType: ServiceCollectionExtensions.AddApizrManagerFor(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>, params Type[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>, params System.Type[])
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 486
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: Register a <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for each <xref href="Apizr.WebApiAttribute" data-throw-if-not-resolved="false"></xref> decorated interfaces
  example: []
  syntax:
    content: public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    - id: assemblyMarkerTypes
      type: System.Type[]
      description: Any type contained in assembly to scan for <xref href="Apizr.WebApiAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrManagerFor(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing, ParamArray assemblyMarkerTypes As Type()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrManagerFor(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder), ParamArray Type())
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder), ParamArray System.Type())
  name.vb: AddApizrManagerFor(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder), ParamArray Type())
- uid: Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Reflection.Assembly[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Reflection.Assembly[])
  id: AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Reflection.Assembly[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrManagerFor(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>, params Assembly[])
  nameWithType: ServiceCollectionExtensions.AddApizrManagerFor(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>, params Assembly[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>, params System.Reflection.Assembly[])
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 498
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: Register a <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for each <xref href="Apizr.WebApiAttribute" data-throw-if-not-resolved="false"></xref> decorated interfaces
  example: []
  syntax:
    content: public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    - id: assemblies
      type: System.Reflection.Assembly[]
      description: Any assembly to scan for <xref href="Apizr.WebApiAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrManagerFor(services As IServiceCollection, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing, ParamArray assemblies As Assembly()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrManagerFor(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder), ParamArray Assembly())
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder), ParamArray System.Reflection.Assembly())
  name.vb: AddApizrManagerFor(IServiceCollection, Action(Of IApizrExtendedManagerOptionsBuilder), ParamArray Assembly())
- uid: Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Type[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Type[])
  id: AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Type[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrManagerFor(IServiceCollection, Type, Action<IApizrExtendedManagerOptionsBuilder>, params Type[])
  nameWithType: ServiceCollectionExtensions.AddApizrManagerFor(IServiceCollection, Type, Action<IApizrExtendedManagerOptionsBuilder>, params Type[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>, params System.Type[])
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 511
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: Register a custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for each <xref href="Apizr.WebApiAttribute" data-throw-if-not-resolved="false"></xref> decorated interfaces
  example: []
  syntax:
    content: public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Type apizrManagerType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: apizrManagerType
      type: System.Type
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation type
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    - id: assemblyMarkerTypes
      type: System.Type[]
      description: Any type contained in assembly to scan for <xref href="Apizr.WebApiAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrManagerFor(services As IServiceCollection, apizrManagerType As Type, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing, ParamArray assemblyMarkerTypes As Type()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrManagerFor(IServiceCollection, Type, Action(Of IApizrExtendedManagerOptionsBuilder), ParamArray Type())
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder), ParamArray System.Type())
  name.vb: AddApizrManagerFor(IServiceCollection, Type, Action(Of IApizrExtendedManagerOptionsBuilder), ParamArray Type())
- uid: Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Reflection.Assembly[])
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Reflection.Assembly[])
  id: AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder},System.Reflection.Assembly[])
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrManagerFor(IServiceCollection, Type, Action<IApizrExtendedManagerOptionsBuilder>, params Assembly[])
  nameWithType: ServiceCollectionExtensions.AddApizrManagerFor(IServiceCollection, Type, Action<IApizrExtendedManagerOptionsBuilder>, params Assembly[])
  fullName: Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>, params System.Reflection.Assembly[])
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 524
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: Register a custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> for each <xref href="Apizr.WebApiAttribute" data-throw-if-not-resolved="false"></xref> decorated interfaces
  example: []
  syntax:
    content: public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Type apizrManagerType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: apizrManagerType
      type: System.Type
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation type
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    - id: assemblies
      type: System.Reflection.Assembly[]
      description: Any assembly to scan for <xref href="Apizr.WebApiAttribute" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrManagerFor(services As IServiceCollection, apizrManagerType As Type, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing, ParamArray assemblies As Assembly()) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrManagerFor(IServiceCollection, Type, Action(Of IApizrExtendedManagerOptionsBuilder), ParamArray Assembly())
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder), ParamArray System.Reflection.Assembly())
  name.vb: AddApizrManagerFor(IServiceCollection, Type, Action(Of IApizrExtendedManagerOptionsBuilder), ParamArray Assembly())
- uid: Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  commentId: M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  id: AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})
  isExtensionMethod: true
  parent: Apizr.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddApizrManagerFor(IServiceCollection, Type, Type, Action<IApizrExtendedManagerOptionsBuilder>)
  nameWithType: ServiceCollectionExtensions.AddApizrManagerFor(IServiceCollection, Type, Type, Action<IApizrExtendedManagerOptionsBuilder>)
  fullName: Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type, System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>)
  type: Method
  source:
    remote:
      path: Apizr/Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
      branch: dev
      repo: https://github.com/Respawnsive/Apizr.git
    id: AddApizrManagerFor
    path: ../../Src/Apizr.Extensions.Microsoft.DependencyInjection/ServiceCollectionExtensions.cs
    startLine: 565
  assemblies:
  - Apizr.Extensions.Microsoft.DependencyInjection
  namespace: Apizr
  summary: Register a custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Type webApiType, Type apizrManagerType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The service collection
    - id: webApiType
      type: System.Type
      description: The web api interface type to manage
    - id: apizrManagerType
      type: System.Type
      description: A custom <xref href="Apizr.IApizrManager%601" data-throw-if-not-resolved="false"></xref> implementation type
    - id: optionsBuilder
      type: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
      description: The builder defining specific Apizr options
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddApizrManagerFor(services As IServiceCollection, webApiType As Type, apizrManagerType As Type, optionsBuilder As Action(Of IApizrExtendedManagerOptionsBuilder) = Nothing) As IServiceCollection
  overload: Apizr.ServiceCollectionExtensions.AddApizrManagerFor*
  nameWithType.vb: ServiceCollectionExtensions.AddApizrManagerFor(IServiceCollection, Type, Type, Action(Of IApizrExtendedManagerOptionsBuilder))
  fullName.vb: Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type, System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder))
  name.vb: AddApizrManagerFor(IServiceCollection, Type, Type, Action(Of IApizrExtendedManagerOptionsBuilder))
references:
- uid: Apizr
  commentId: N:Apizr
  href: Apizr.html
  name: Apizr
  nameWithType: Apizr
  fullName: Apizr
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Apizr.ServiceCollectionExtensions.AddApizr*
  commentId: Overload:Apizr.ServiceCollectionExtensions.AddApizr
  href: Apizr.ServiceCollectionExtensions.html#Apizr_ServiceCollectionExtensions_AddApizr_Microsoft_Extensions_DependencyInjection_IServiceCollection_System_Action_Apizr_Extending_Configuring_Registry_IApizrExtendedRegistryBuilder__System_Action_Apizr_Extending_Configuring_Common_IApizrExtendedCommonOptionsBuilder__
  name: AddApizr
  nameWithType: ServiceCollectionExtensions.AddApizr
  fullName: Apizr.ServiceCollectionExtensions.AddApizr
- uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceCollection
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.iservicecollection
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
- uid: System.Action{Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder}
  commentId: T:System.Action{Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<IApizrExtendedRegistryBuilder>
  nameWithType: Action<IApizrExtendedRegistryBuilder>
  fullName: System.Action<Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder>
  nameWithType.vb: Action(Of IApizrExtendedRegistryBuilder)
  fullName.vb: System.Action(Of Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder)
  name.vb: Action(Of IApizrExtendedRegistryBuilder)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder
    name: IApizrExtendedRegistryBuilder
    href: Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder.html
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder
    name: IApizrExtendedRegistryBuilder
    href: Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder.html
  - name: )
- uid: System.Action{Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder}
  commentId: T:System.Action{Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<IApizrExtendedCommonOptionsBuilder>
  nameWithType: Action<IApizrExtendedCommonOptionsBuilder>
  fullName: System.Action<Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder>
  nameWithType.vb: Action(Of IApizrExtendedCommonOptionsBuilder)
  fullName.vb: System.Action(Of Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder)
  name.vb: Action(Of IApizrExtendedCommonOptionsBuilder)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder
    name: IApizrExtendedCommonOptionsBuilder
    href: Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder.html
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder
    name: IApizrExtendedCommonOptionsBuilder
    href: Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder.html
  - name: )
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.DependencyInjection
    name: DependencyInjection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.DependencyInjection
    name: DependencyInjection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Apizr.IApizrManager`1
  commentId: T:Apizr.IApizrManager`1
  href: Apizr.IApizrManager-1.html
  name: IApizrManager<TWebApi>
  nameWithType: IApizrManager<TWebApi>
  fullName: Apizr.IApizrManager<TWebApi>
  nameWithType.vb: IApizrManager(Of TWebApi)
  fullName.vb: Apizr.IApizrManager(Of TWebApi)
  name.vb: IApizrManager(Of TWebApi)
  spec.csharp:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    href: Apizr.IApizrManager-1.html
  - name: <
  - name: TWebApi
  - name: '>'
  spec.vb:
  - uid: Apizr.IApizrManager`1
    name: IApizrManager
    href: Apizr.IApizrManager-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TWebApi
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor*
  commentId: Overload:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor
  href: Apizr.ServiceCollectionExtensions.html#Apizr_ServiceCollectionExtensions_AddApizrCrudManagerFor__1_Microsoft_Extensions_DependencyInjection_IServiceCollection_System_Action_Apizr_Extending_Configuring_Manager_IApizrExtendedManagerOptionsBuilder__
  name: AddApizrCrudManagerFor
  nameWithType: ServiceCollectionExtensions.AddApizrCrudManagerFor
  fullName: Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor
- uid: System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
  commentId: T:System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<IApizrExtendedManagerOptionsBuilder>
  nameWithType: Action<IApizrExtendedManagerOptionsBuilder>
  fullName: System.Action<Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder>
  nameWithType.vb: Action(Of IApizrExtendedManagerOptionsBuilder)
  fullName.vb: System.Action(Of Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder)
  name.vb: Action(Of IApizrExtendedManagerOptionsBuilder)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder
    name: IApizrExtendedManagerOptionsBuilder
    href: Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder.html
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder
    name: IApizrExtendedManagerOptionsBuilder
    href: Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder.html
  - name: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Apizr.Requesting.CrudEntityAttribute
  commentId: T:Apizr.Requesting.CrudEntityAttribute
  parent: Apizr.Requesting
  href: Apizr.Requesting.CrudEntityAttribute.html
  name: CrudEntityAttribute
  nameWithType: CrudEntityAttribute
  fullName: Apizr.Requesting.CrudEntityAttribute
- uid: System.Type[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: (
  - name: )
- uid: Apizr.Requesting
  commentId: N:Apizr.Requesting
  href: Apizr.html
  name: Apizr.Requesting
  nameWithType: Apizr.Requesting
  fullName: Apizr.Requesting
  spec.csharp:
  - uid: Apizr
    name: Apizr
    href: Apizr.html
  - name: .
  - uid: Apizr.Requesting
    name: Requesting
    href: Apizr.Requesting.html
  spec.vb:
  - uid: Apizr
    name: Apizr
    href: Apizr.html
  - name: .
  - uid: Apizr.Requesting
    name: Requesting
    href: Apizr.Requesting.html
- uid: System.Reflection.Assembly[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.reflection.assembly
  name: Assembly[]
  nameWithType: Assembly[]
  fullName: System.Reflection.Assembly[]
  nameWithType.vb: Assembly()
  fullName.vb: System.Reflection.Assembly()
  name.vb: Assembly()
  spec.csharp:
  - uid: System.Reflection.Assembly
    name: Assembly
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.reflection.assembly
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Reflection.Assembly
    name: Assembly
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.reflection.assembly
  - name: (
  - name: )
- uid: Apizr.ServiceCollectionExtensions.AddApizrManagerFor*
  commentId: Overload:Apizr.ServiceCollectionExtensions.AddApizrManagerFor
  href: Apizr.ServiceCollectionExtensions.html#Apizr_ServiceCollectionExtensions_AddApizrManagerFor__1_Microsoft_Extensions_DependencyInjection_IServiceCollection_System_Action_Apizr_Extending_Configuring_Manager_IApizrExtendedManagerOptionsBuilder__
  name: AddApizrManagerFor
  nameWithType: ServiceCollectionExtensions.AddApizrManagerFor
  fullName: Apizr.ServiceCollectionExtensions.AddApizrManagerFor
- uid: Apizr.WebApiAttribute
  commentId: T:Apizr.WebApiAttribute
  parent: Apizr
  href: Apizr.WebApiAttribute.html
  name: WebApiAttribute
  nameWithType: WebApiAttribute
  fullName: Apizr.WebApiAttribute
