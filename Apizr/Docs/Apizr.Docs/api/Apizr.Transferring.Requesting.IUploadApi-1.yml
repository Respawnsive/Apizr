### YamlMime:ManagedReference
items:
- uid: Apizr.Transferring.Requesting.IUploadApi`1
  commentId: T:Apizr.Transferring.Requesting.IUploadApi`1
  id: IUploadApi`1
  parent: Apizr.Transferring.Requesting
  children:
  - Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.ByteArrayPart)
  - Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.ByteArrayPart,Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.ByteArrayPart,System.String)
  - Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.ByteArrayPart,System.String,Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.FileInfoPart)
  - Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.FileInfoPart,Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.FileInfoPart,System.String)
  - Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.FileInfoPart,System.String,Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.StreamPart)
  - Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.StreamPart,Apizr.Configuring.Request.IApizrRequestOptions)
  - Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.StreamPart,System.String)
  - Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.StreamPart,System.String,Apizr.Configuring.Request.IApizrRequestOptions)
  langs:
  - csharp
  - vb
  name: IUploadApi<TApiResultData>
  nameWithType: IUploadApi<TApiResultData>
  fullName: Apizr.Transferring.Requesting.IUploadApi<TApiResultData>
  type: Interface
  source:
    remote:
      path: Apizr/Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: IUploadApi
    path: ../../Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
    startLine: 8
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Transferring.Requesting
  syntax:
    content: 'public interface IUploadApi<TApiResultData> : ITransferApiBase'
    typeParameters:
    - id: TApiResultData
    content.vb: >-
      Public Interface IUploadApi(Of TApiResultData)
          Inherits ITransferApiBase
  nameWithType.vb: IUploadApi(Of TApiResultData)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Apizr.Transferring.Requesting.IUploadApi(Of TApiResultData)
  name.vb: IUploadApi(Of TApiResultData)
- uid: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.ByteArrayPart)
  commentId: M:Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.ByteArrayPart)
  id: UploadAsync(Refit.ByteArrayPart)
  parent: Apizr.Transferring.Requesting.IUploadApi`1
  langs:
  - csharp
  - vb
  name: UploadAsync(ByteArrayPart)
  nameWithType: IUploadApi<TApiResultData>.UploadAsync(ByteArrayPart)
  fullName: Apizr.Transferring.Requesting.IUploadApi<TApiResultData>.UploadAsync(Refit.ByteArrayPart)
  type: Method
  source:
    remote:
      path: Apizr/Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: UploadAsync
    path: ../../Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
    startLine: 12
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Transferring.Requesting
  syntax:
    content: >-
      [Multipart("----MyGreatBoundary")]

      [Post("")]

      Task<TApiResultData> UploadAsync([AliasAs("file")] ByteArrayPart byteArrayPart)
    parameters:
    - id: byteArrayPart
      type: Refit.ByteArrayPart
      attributes:
      - type: Refit.AliasAsAttribute
        ctor: Refit.AliasAsAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: file
    return:
      type: System.Threading.Tasks.Task{{TApiResultData}}
    content.vb: >-
      <Multipart("----MyGreatBoundary")>

      <Post("")>

      Function UploadAsync(byteArrayPart As ByteArrayPart) As Task(Of TApiResultData)
  overload: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync*
  attributes:
  - type: Refit.MultipartAttribute
    ctor: Refit.MultipartAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: '----MyGreatBoundary'
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: IUploadApi(Of TApiResultData).UploadAsync(ByteArrayPart)
  fullName.vb: Apizr.Transferring.Requesting.IUploadApi(Of TApiResultData).UploadAsync(Refit.ByteArrayPart)
- uid: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.ByteArrayPart,System.String)
  commentId: M:Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.ByteArrayPart,System.String)
  id: UploadAsync(Refit.ByteArrayPart,System.String)
  parent: Apizr.Transferring.Requesting.IUploadApi`1
  langs:
  - csharp
  - vb
  name: UploadAsync(ByteArrayPart, String)
  nameWithType: IUploadApi<TApiResultData>.UploadAsync(ByteArrayPart, String)
  fullName: Apizr.Transferring.Requesting.IUploadApi<TApiResultData>.UploadAsync(Refit.ByteArrayPart, System.String)
  type: Method
  source:
    remote:
      path: Apizr/Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: UploadAsync
    path: ../../Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
    startLine: 16
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Transferring.Requesting
  syntax:
    content: >-
      [Multipart("----MyGreatBoundary")]

      [Post("/{path}")]

      [QueryUriFormat(UriFormat.Unescaped)]

      Task<TApiResultData> UploadAsync([AliasAs("file")] ByteArrayPart byteArrayPart, string path)
    parameters:
    - id: byteArrayPart
      type: Refit.ByteArrayPart
      attributes:
      - type: Refit.AliasAsAttribute
        ctor: Refit.AliasAsAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: file
    - id: path
      type: System.String
    return:
      type: System.Threading.Tasks.Task{{TApiResultData}}
    content.vb: >-
      <Multipart("----MyGreatBoundary")>

      <Post("/{path}")>

      <QueryUriFormat(UriFormat.Unescaped)>

      Function UploadAsync(byteArrayPart As ByteArrayPart, path As String) As Task(Of TApiResultData)
  overload: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync*
  attributes:
  - type: Refit.MultipartAttribute
    ctor: Refit.MultipartAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: '----MyGreatBoundary'
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{path}
  - type: Refit.QueryUriFormatAttribute
    ctor: Refit.QueryUriFormatAttribute.#ctor(System.UriFormat)
    arguments:
    - type: System.UriFormat
      value: 2
  nameWithType.vb: IUploadApi(Of TApiResultData).UploadAsync(ByteArrayPart, String)
  fullName.vb: Apizr.Transferring.Requesting.IUploadApi(Of TApiResultData).UploadAsync(Refit.ByteArrayPart, System.String)
- uid: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.ByteArrayPart,Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.ByteArrayPart,Apizr.Configuring.Request.IApizrRequestOptions)
  id: UploadAsync(Refit.ByteArrayPart,Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Transferring.Requesting.IUploadApi`1
  langs:
  - csharp
  - vb
  name: UploadAsync(ByteArrayPart, IApizrRequestOptions)
  nameWithType: IUploadApi<TApiResultData>.UploadAsync(ByteArrayPart, IApizrRequestOptions)
  fullName: Apizr.Transferring.Requesting.IUploadApi<TApiResultData>.UploadAsync(Refit.ByteArrayPart, Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    remote:
      path: Apizr/Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: UploadAsync
    path: ../../Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
    startLine: 20
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Transferring.Requesting
  syntax:
    content: >-
      [Multipart("----MyGreatBoundary")]

      [Post("")]

      Task<TApiResultData> UploadAsync([AliasAs("file")] ByteArrayPart byteArrayPart, [RequestOptions] IApizrRequestOptions options)
    parameters:
    - id: byteArrayPart
      type: Refit.ByteArrayPart
      attributes:
      - type: Refit.AliasAsAttribute
        ctor: Refit.AliasAsAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: file
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{TApiResultData}}
    content.vb: >-
      <Multipart("----MyGreatBoundary")>

      <Post("")>

      Function UploadAsync(byteArrayPart As ByteArrayPart, options As IApizrRequestOptions) As Task(Of TApiResultData)
  overload: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync*
  attributes:
  - type: Refit.MultipartAttribute
    ctor: Refit.MultipartAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: '----MyGreatBoundary'
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: IUploadApi(Of TApiResultData).UploadAsync(ByteArrayPart, IApizrRequestOptions)
  fullName.vb: Apizr.Transferring.Requesting.IUploadApi(Of TApiResultData).UploadAsync(Refit.ByteArrayPart, Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.ByteArrayPart,System.String,Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.ByteArrayPart,System.String,Apizr.Configuring.Request.IApizrRequestOptions)
  id: UploadAsync(Refit.ByteArrayPart,System.String,Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Transferring.Requesting.IUploadApi`1
  langs:
  - csharp
  - vb
  name: UploadAsync(ByteArrayPart, String, IApizrRequestOptions)
  nameWithType: IUploadApi<TApiResultData>.UploadAsync(ByteArrayPart, String, IApizrRequestOptions)
  fullName: Apizr.Transferring.Requesting.IUploadApi<TApiResultData>.UploadAsync(Refit.ByteArrayPart, System.String, Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    remote:
      path: Apizr/Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: UploadAsync
    path: ../../Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
    startLine: 24
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Transferring.Requesting
  syntax:
    content: >-
      [Multipart("----MyGreatBoundary")]

      [Post("/{path}")]

      [QueryUriFormat(UriFormat.Unescaped)]

      Task<TApiResultData> UploadAsync([AliasAs("file")] ByteArrayPart byteArrayPart, string path, [RequestOptions] IApizrRequestOptions options)
    parameters:
    - id: byteArrayPart
      type: Refit.ByteArrayPart
      attributes:
      - type: Refit.AliasAsAttribute
        ctor: Refit.AliasAsAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: file
    - id: path
      type: System.String
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{TApiResultData}}
    content.vb: >-
      <Multipart("----MyGreatBoundary")>

      <Post("/{path}")>

      <QueryUriFormat(UriFormat.Unescaped)>

      Function UploadAsync(byteArrayPart As ByteArrayPart, path As String, options As IApizrRequestOptions) As Task(Of TApiResultData)
  overload: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync*
  attributes:
  - type: Refit.MultipartAttribute
    ctor: Refit.MultipartAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: '----MyGreatBoundary'
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{path}
  - type: Refit.QueryUriFormatAttribute
    ctor: Refit.QueryUriFormatAttribute.#ctor(System.UriFormat)
    arguments:
    - type: System.UriFormat
      value: 2
  nameWithType.vb: IUploadApi(Of TApiResultData).UploadAsync(ByteArrayPart, String, IApizrRequestOptions)
  fullName.vb: Apizr.Transferring.Requesting.IUploadApi(Of TApiResultData).UploadAsync(Refit.ByteArrayPart, System.String, Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.StreamPart)
  commentId: M:Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.StreamPart)
  id: UploadAsync(Refit.StreamPart)
  parent: Apizr.Transferring.Requesting.IUploadApi`1
  langs:
  - csharp
  - vb
  name: UploadAsync(StreamPart)
  nameWithType: IUploadApi<TApiResultData>.UploadAsync(StreamPart)
  fullName: Apizr.Transferring.Requesting.IUploadApi<TApiResultData>.UploadAsync(Refit.StreamPart)
  type: Method
  source:
    remote:
      path: Apizr/Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: UploadAsync
    path: ../../Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
    startLine: 32
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Transferring.Requesting
  syntax:
    content: >-
      [Multipart("----MyGreatBoundary")]

      [Post("")]

      Task<TApiResultData> UploadAsync([AliasAs("file")] StreamPart streamPart)
    parameters:
    - id: streamPart
      type: Refit.StreamPart
      attributes:
      - type: Refit.AliasAsAttribute
        ctor: Refit.AliasAsAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: file
    return:
      type: System.Threading.Tasks.Task{{TApiResultData}}
    content.vb: >-
      <Multipart("----MyGreatBoundary")>

      <Post("")>

      Function UploadAsync(streamPart As StreamPart) As Task(Of TApiResultData)
  overload: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync*
  attributes:
  - type: Refit.MultipartAttribute
    ctor: Refit.MultipartAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: '----MyGreatBoundary'
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: IUploadApi(Of TApiResultData).UploadAsync(StreamPart)
  fullName.vb: Apizr.Transferring.Requesting.IUploadApi(Of TApiResultData).UploadAsync(Refit.StreamPart)
- uid: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.StreamPart,System.String)
  commentId: M:Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.StreamPart,System.String)
  id: UploadAsync(Refit.StreamPart,System.String)
  parent: Apizr.Transferring.Requesting.IUploadApi`1
  langs:
  - csharp
  - vb
  name: UploadAsync(StreamPart, String)
  nameWithType: IUploadApi<TApiResultData>.UploadAsync(StreamPart, String)
  fullName: Apizr.Transferring.Requesting.IUploadApi<TApiResultData>.UploadAsync(Refit.StreamPart, System.String)
  type: Method
  source:
    remote:
      path: Apizr/Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: UploadAsync
    path: ../../Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
    startLine: 36
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Transferring.Requesting
  syntax:
    content: >-
      [Multipart("----MyGreatBoundary")]

      [Post("/{path}")]

      [QueryUriFormat(UriFormat.Unescaped)]

      Task<TApiResultData> UploadAsync([AliasAs("file")] StreamPart streamPart, string path)
    parameters:
    - id: streamPart
      type: Refit.StreamPart
      attributes:
      - type: Refit.AliasAsAttribute
        ctor: Refit.AliasAsAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: file
    - id: path
      type: System.String
    return:
      type: System.Threading.Tasks.Task{{TApiResultData}}
    content.vb: >-
      <Multipart("----MyGreatBoundary")>

      <Post("/{path}")>

      <QueryUriFormat(UriFormat.Unescaped)>

      Function UploadAsync(streamPart As StreamPart, path As String) As Task(Of TApiResultData)
  overload: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync*
  attributes:
  - type: Refit.MultipartAttribute
    ctor: Refit.MultipartAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: '----MyGreatBoundary'
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{path}
  - type: Refit.QueryUriFormatAttribute
    ctor: Refit.QueryUriFormatAttribute.#ctor(System.UriFormat)
    arguments:
    - type: System.UriFormat
      value: 2
  nameWithType.vb: IUploadApi(Of TApiResultData).UploadAsync(StreamPart, String)
  fullName.vb: Apizr.Transferring.Requesting.IUploadApi(Of TApiResultData).UploadAsync(Refit.StreamPart, System.String)
- uid: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.StreamPart,Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.StreamPart,Apizr.Configuring.Request.IApizrRequestOptions)
  id: UploadAsync(Refit.StreamPart,Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Transferring.Requesting.IUploadApi`1
  langs:
  - csharp
  - vb
  name: UploadAsync(StreamPart, IApizrRequestOptions)
  nameWithType: IUploadApi<TApiResultData>.UploadAsync(StreamPart, IApizrRequestOptions)
  fullName: Apizr.Transferring.Requesting.IUploadApi<TApiResultData>.UploadAsync(Refit.StreamPart, Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    remote:
      path: Apizr/Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: UploadAsync
    path: ../../Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
    startLine: 40
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Transferring.Requesting
  syntax:
    content: >-
      [Multipart("----MyGreatBoundary")]

      [Post("")]

      Task<TApiResultData> UploadAsync([AliasAs("file")] StreamPart streamPart, [RequestOptions] IApizrRequestOptions options)
    parameters:
    - id: streamPart
      type: Refit.StreamPart
      attributes:
      - type: Refit.AliasAsAttribute
        ctor: Refit.AliasAsAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: file
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{TApiResultData}}
    content.vb: >-
      <Multipart("----MyGreatBoundary")>

      <Post("")>

      Function UploadAsync(streamPart As StreamPart, options As IApizrRequestOptions) As Task(Of TApiResultData)
  overload: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync*
  attributes:
  - type: Refit.MultipartAttribute
    ctor: Refit.MultipartAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: '----MyGreatBoundary'
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: IUploadApi(Of TApiResultData).UploadAsync(StreamPart, IApizrRequestOptions)
  fullName.vb: Apizr.Transferring.Requesting.IUploadApi(Of TApiResultData).UploadAsync(Refit.StreamPart, Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.StreamPart,System.String,Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.StreamPart,System.String,Apizr.Configuring.Request.IApizrRequestOptions)
  id: UploadAsync(Refit.StreamPart,System.String,Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Transferring.Requesting.IUploadApi`1
  langs:
  - csharp
  - vb
  name: UploadAsync(StreamPart, String, IApizrRequestOptions)
  nameWithType: IUploadApi<TApiResultData>.UploadAsync(StreamPart, String, IApizrRequestOptions)
  fullName: Apizr.Transferring.Requesting.IUploadApi<TApiResultData>.UploadAsync(Refit.StreamPart, System.String, Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    remote:
      path: Apizr/Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: UploadAsync
    path: ../../Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
    startLine: 44
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Transferring.Requesting
  syntax:
    content: >-
      [Multipart("----MyGreatBoundary")]

      [Post("/{path}")]

      [QueryUriFormat(UriFormat.Unescaped)]

      Task<TApiResultData> UploadAsync([AliasAs("file")] StreamPart streamPart, string path, [RequestOptions] IApizrRequestOptions options)
    parameters:
    - id: streamPart
      type: Refit.StreamPart
      attributes:
      - type: Refit.AliasAsAttribute
        ctor: Refit.AliasAsAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: file
    - id: path
      type: System.String
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{TApiResultData}}
    content.vb: >-
      <Multipart("----MyGreatBoundary")>

      <Post("/{path}")>

      <QueryUriFormat(UriFormat.Unescaped)>

      Function UploadAsync(streamPart As StreamPart, path As String, options As IApizrRequestOptions) As Task(Of TApiResultData)
  overload: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync*
  attributes:
  - type: Refit.MultipartAttribute
    ctor: Refit.MultipartAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: '----MyGreatBoundary'
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{path}
  - type: Refit.QueryUriFormatAttribute
    ctor: Refit.QueryUriFormatAttribute.#ctor(System.UriFormat)
    arguments:
    - type: System.UriFormat
      value: 2
  nameWithType.vb: IUploadApi(Of TApiResultData).UploadAsync(StreamPart, String, IApizrRequestOptions)
  fullName.vb: Apizr.Transferring.Requesting.IUploadApi(Of TApiResultData).UploadAsync(Refit.StreamPart, System.String, Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.FileInfoPart)
  commentId: M:Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.FileInfoPart)
  id: UploadAsync(Refit.FileInfoPart)
  parent: Apizr.Transferring.Requesting.IUploadApi`1
  langs:
  - csharp
  - vb
  name: UploadAsync(FileInfoPart)
  nameWithType: IUploadApi<TApiResultData>.UploadAsync(FileInfoPart)
  fullName: Apizr.Transferring.Requesting.IUploadApi<TApiResultData>.UploadAsync(Refit.FileInfoPart)
  type: Method
  source:
    remote:
      path: Apizr/Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: UploadAsync
    path: ../../Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
    startLine: 52
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Transferring.Requesting
  syntax:
    content: >-
      [Multipart("----MyGreatBoundary")]

      [Post("")]

      Task<TApiResultData> UploadAsync([AliasAs("file")] FileInfoPart fileInfoPart)
    parameters:
    - id: fileInfoPart
      type: Refit.FileInfoPart
      attributes:
      - type: Refit.AliasAsAttribute
        ctor: Refit.AliasAsAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: file
    return:
      type: System.Threading.Tasks.Task{{TApiResultData}}
    content.vb: >-
      <Multipart("----MyGreatBoundary")>

      <Post("")>

      Function UploadAsync(fileInfoPart As FileInfoPart) As Task(Of TApiResultData)
  overload: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync*
  attributes:
  - type: Refit.MultipartAttribute
    ctor: Refit.MultipartAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: '----MyGreatBoundary'
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: IUploadApi(Of TApiResultData).UploadAsync(FileInfoPart)
  fullName.vb: Apizr.Transferring.Requesting.IUploadApi(Of TApiResultData).UploadAsync(Refit.FileInfoPart)
- uid: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.FileInfoPart,System.String)
  commentId: M:Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.FileInfoPart,System.String)
  id: UploadAsync(Refit.FileInfoPart,System.String)
  parent: Apizr.Transferring.Requesting.IUploadApi`1
  langs:
  - csharp
  - vb
  name: UploadAsync(FileInfoPart, String)
  nameWithType: IUploadApi<TApiResultData>.UploadAsync(FileInfoPart, String)
  fullName: Apizr.Transferring.Requesting.IUploadApi<TApiResultData>.UploadAsync(Refit.FileInfoPart, System.String)
  type: Method
  source:
    remote:
      path: Apizr/Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: UploadAsync
    path: ../../Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
    startLine: 56
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Transferring.Requesting
  syntax:
    content: >-
      [Multipart("----MyGreatBoundary")]

      [Post("/{filePath}")]

      [QueryUriFormat(UriFormat.Unescaped)]

      Task<TApiResultData> UploadAsync([AliasAs("file")] FileInfoPart fileInfoPart, string filePath)
    parameters:
    - id: fileInfoPart
      type: Refit.FileInfoPart
      attributes:
      - type: Refit.AliasAsAttribute
        ctor: Refit.AliasAsAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: file
    - id: filePath
      type: System.String
    return:
      type: System.Threading.Tasks.Task{{TApiResultData}}
    content.vb: >-
      <Multipart("----MyGreatBoundary")>

      <Post("/{filePath}")>

      <QueryUriFormat(UriFormat.Unescaped)>

      Function UploadAsync(fileInfoPart As FileInfoPart, filePath As String) As Task(Of TApiResultData)
  overload: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync*
  attributes:
  - type: Refit.MultipartAttribute
    ctor: Refit.MultipartAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: '----MyGreatBoundary'
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{filePath}
  - type: Refit.QueryUriFormatAttribute
    ctor: Refit.QueryUriFormatAttribute.#ctor(System.UriFormat)
    arguments:
    - type: System.UriFormat
      value: 2
  nameWithType.vb: IUploadApi(Of TApiResultData).UploadAsync(FileInfoPart, String)
  fullName.vb: Apizr.Transferring.Requesting.IUploadApi(Of TApiResultData).UploadAsync(Refit.FileInfoPart, System.String)
- uid: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.FileInfoPart,Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.FileInfoPart,Apizr.Configuring.Request.IApizrRequestOptions)
  id: UploadAsync(Refit.FileInfoPart,Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Transferring.Requesting.IUploadApi`1
  langs:
  - csharp
  - vb
  name: UploadAsync(FileInfoPart, IApizrRequestOptions)
  nameWithType: IUploadApi<TApiResultData>.UploadAsync(FileInfoPart, IApizrRequestOptions)
  fullName: Apizr.Transferring.Requesting.IUploadApi<TApiResultData>.UploadAsync(Refit.FileInfoPart, Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    remote:
      path: Apizr/Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: UploadAsync
    path: ../../Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
    startLine: 60
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Transferring.Requesting
  syntax:
    content: >-
      [Multipart("----MyGreatBoundary")]

      [Post("")]

      Task<TApiResultData> UploadAsync([AliasAs("file")] FileInfoPart fileInfoPart, [RequestOptions] IApizrRequestOptions options)
    parameters:
    - id: fileInfoPart
      type: Refit.FileInfoPart
      attributes:
      - type: Refit.AliasAsAttribute
        ctor: Refit.AliasAsAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: file
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{TApiResultData}}
    content.vb: >-
      <Multipart("----MyGreatBoundary")>

      <Post("")>

      Function UploadAsync(fileInfoPart As FileInfoPart, options As IApizrRequestOptions) As Task(Of TApiResultData)
  overload: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync*
  attributes:
  - type: Refit.MultipartAttribute
    ctor: Refit.MultipartAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: '----MyGreatBoundary'
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ''
  nameWithType.vb: IUploadApi(Of TApiResultData).UploadAsync(FileInfoPart, IApizrRequestOptions)
  fullName.vb: Apizr.Transferring.Requesting.IUploadApi(Of TApiResultData).UploadAsync(Refit.FileInfoPart, Apizr.Configuring.Request.IApizrRequestOptions)
- uid: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.FileInfoPart,System.String,Apizr.Configuring.Request.IApizrRequestOptions)
  commentId: M:Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync(Refit.FileInfoPart,System.String,Apizr.Configuring.Request.IApizrRequestOptions)
  id: UploadAsync(Refit.FileInfoPart,System.String,Apizr.Configuring.Request.IApizrRequestOptions)
  parent: Apizr.Transferring.Requesting.IUploadApi`1
  langs:
  - csharp
  - vb
  name: UploadAsync(FileInfoPart, String, IApizrRequestOptions)
  nameWithType: IUploadApi<TApiResultData>.UploadAsync(FileInfoPart, String, IApizrRequestOptions)
  fullName: Apizr.Transferring.Requesting.IUploadApi<TApiResultData>.UploadAsync(Refit.FileInfoPart, System.String, Apizr.Configuring.Request.IApizrRequestOptions)
  type: Method
  source:
    remote:
      path: Apizr/Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
      branch: feat/resilience
      repo: https://github.com/Respawnsive/Apizr.git
    id: UploadAsync
    path: ../../Src/Transferring/Apizr.Integrations.FileTransfer/Transferring/Requesting/IUploadApi.cs
    startLine: 64
  assemblies:
  - Apizr.Integrations.FileTransfer
  namespace: Apizr.Transferring.Requesting
  syntax:
    content: >-
      [Multipart("----MyGreatBoundary")]

      [Post("/{filePath}")]

      [QueryUriFormat(UriFormat.Unescaped)]

      Task<TApiResultData> UploadAsync([AliasAs("file")] FileInfoPart fileInfoPart, string filePath, [RequestOptions] IApizrRequestOptions options)
    parameters:
    - id: fileInfoPart
      type: Refit.FileInfoPart
      attributes:
      - type: Refit.AliasAsAttribute
        ctor: Refit.AliasAsAttribute.#ctor(System.String)
        arguments:
        - type: System.String
          value: file
    - id: filePath
      type: System.String
    - id: options
      type: Apizr.Configuring.Request.IApizrRequestOptions
      attributes:
      - type: Apizr.Configuring.Request.RequestOptionsAttribute
        ctor: Apizr.Configuring.Request.RequestOptionsAttribute.#ctor
        arguments: []
    return:
      type: System.Threading.Tasks.Task{{TApiResultData}}
    content.vb: >-
      <Multipart("----MyGreatBoundary")>

      <Post("/{filePath}")>

      <QueryUriFormat(UriFormat.Unescaped)>

      Function UploadAsync(fileInfoPart As FileInfoPart, filePath As String, options As IApizrRequestOptions) As Task(Of TApiResultData)
  overload: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync*
  attributes:
  - type: Refit.MultipartAttribute
    ctor: Refit.MultipartAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: '----MyGreatBoundary'
  - type: Refit.PostAttribute
    ctor: Refit.PostAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: /{filePath}
  - type: Refit.QueryUriFormatAttribute
    ctor: Refit.QueryUriFormatAttribute.#ctor(System.UriFormat)
    arguments:
    - type: System.UriFormat
      value: 2
  nameWithType.vb: IUploadApi(Of TApiResultData).UploadAsync(FileInfoPart, String, IApizrRequestOptions)
  fullName.vb: Apizr.Transferring.Requesting.IUploadApi(Of TApiResultData).UploadAsync(Refit.FileInfoPart, System.String, Apizr.Configuring.Request.IApizrRequestOptions)
references:
- uid: Apizr.Transferring.Requesting
  commentId: N:Apizr.Transferring.Requesting
  name: Apizr.Transferring.Requesting
  nameWithType: Apizr.Transferring.Requesting
  fullName: Apizr.Transferring.Requesting
- uid: Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync*
  commentId: Overload:Apizr.Transferring.Requesting.IUploadApi`1.UploadAsync
  name: UploadAsync
  nameWithType: IUploadApi<TApiResultData>.UploadAsync
  fullName: Apizr.Transferring.Requesting.IUploadApi<TApiResultData>.UploadAsync
  nameWithType.vb: IUploadApi(Of TApiResultData).UploadAsync
  fullName.vb: Apizr.Transferring.Requesting.IUploadApi(Of TApiResultData).UploadAsync
- uid: Refit.ByteArrayPart
  commentId: T:Refit.ByteArrayPart
  parent: Refit
  isExternal: true
  name: ByteArrayPart
  nameWithType: ByteArrayPart
  fullName: Refit.ByteArrayPart
- uid: System.Threading.Tasks.Task{{TApiResultData}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TApiResultData>
  nameWithType: Task<TApiResultData>
  fullName: System.Threading.Tasks.Task<TApiResultData>
  nameWithType.vb: Task(Of TApiResultData)
  fullName.vb: System.Threading.Tasks.Task(Of TApiResultData)
  name.vb: Task(Of TApiResultData)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TApiResultData
    nameWithType: TApiResultData
    fullName: TApiResultData
  - name: )
    nameWithType: )
    fullName: )
- uid: Refit
  commentId: N:Refit
  isExternal: true
  name: Refit
  nameWithType: Refit
  fullName: Refit
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Apizr.Configuring.Request.IApizrRequestOptions
  commentId: T:Apizr.Configuring.Request.IApizrRequestOptions
  parent: Apizr.Configuring.Request
  name: IApizrRequestOptions
  nameWithType: IApizrRequestOptions
  fullName: Apizr.Configuring.Request.IApizrRequestOptions
- uid: Apizr.Configuring.Request
  commentId: N:Apizr.Configuring.Request
  name: Apizr.Configuring.Request
  nameWithType: Apizr.Configuring.Request
  fullName: Apizr.Configuring.Request
- uid: Refit.StreamPart
  commentId: T:Refit.StreamPart
  parent: Refit
  isExternal: true
  name: StreamPart
  nameWithType: StreamPart
  fullName: Refit.StreamPart
- uid: Refit.FileInfoPart
  commentId: T:Refit.FileInfoPart
  parent: Refit
  isExternal: true
  name: FileInfoPart
  nameWithType: FileInfoPart
  fullName: Refit.FileInfoPart
