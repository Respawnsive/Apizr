/***************************************************************************************************************
* This is an api service interface generated by Apizr.Tools.NSwag
* As you asked for following optional features, please make sure to install each corresponding Nuget packages:
* - Akavache cache provider:      Apizr.Integrations.Akavache
* - Logs:                         any Nuget package of your choice compatible with Microsoft Logging Extensions
****************************************************************************************************************/

using System.Threading.Tasks;
using System.Collections.Generic;
using System;
using Refit;
using Apizr;
using Apizr.Configuring.Request;
using Polly;
using Apizr.Policing;
using Apizr.Logging.Attributes;
using Apizr.Caching.Attributes;

namespace Apizr.Sample.Tools.NSwag
{
    [WebApi]
    public interface IPetstoreOpenApi
    {
        /// <summary>
        /// Update an existing pet
        /// </summary>
        /// <param name="body">Update an existent pet in the store</param>
        /// <returns>Successful operation</returns>
        [Put("pet")]
        System.Threading.Tasks.Task<Pet> UpdatePetAsync([Body] Pet body);
        
        /// <summary>
        /// Update an existing pet
        /// </summary>
        /// <param name="body">Update an existent pet in the store</param>
        /// <param name="options">The request options</param>
        /// <returns>Successful operation</returns>
        [Put("pet")]
        System.Threading.Tasks.Task<Pet> UpdatePetAsync([Body] Pet body, [RequestOptions] IApizrRequestOptions options);

        /// <summary>
        /// Add a new pet to the store
        /// </summary>
        /// <param name="body">Create a new pet in the store</param>
        /// <returns>Successful operation</returns>
        [Post("pet")]
        System.Threading.Tasks.Task<Pet> AddPetAsync([Body] Pet body);
        
        /// <summary>
        /// Add a new pet to the store
        /// </summary>
        /// <param name="body">Create a new pet in the store</param>
        /// <param name="options">The request options</param>
        /// <returns>Successful operation</returns>
        [Post("pet")]
        System.Threading.Tasks.Task<Pet> AddPetAsync([Body] Pet body, [RequestOptions] IApizrRequestOptions options);

        /// <summary>
        /// Finds Pets by status
        /// </summary>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <returns>successful operation</returns>
        [Get("pet/findByStatus")]
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Pet>> FindPetsByStatusAsync([Query] Status status);
        
        /// <summary>
        /// Finds Pets by status
        /// </summary>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <param name="options">The request options</param>
        /// <returns>successful operation</returns>
        [Get("pet/findByStatus")]
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Pet>> FindPetsByStatusAsync([Query] Status status, [RequestOptions] IApizrRequestOptions options);

        /// <summary>
        /// Finds Pets by tags
        /// </summary>
        /// <param name="tags">Tags to filter by</param>
        /// <returns>successful operation</returns>
        [Get("pet/findByTags")]
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Pet>> FindPetsByTagsAsync([Query] System.Collections.Generic.IEnumerable<string> tags);
        
        /// <summary>
        /// Finds Pets by tags
        /// </summary>
        /// <param name="tags">Tags to filter by</param>
        /// <param name="options">The request options</param>
        /// <returns>successful operation</returns>
        [Get("pet/findByTags")]
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Pet>> FindPetsByTagsAsync([Query] System.Collections.Generic.IEnumerable<string> tags, [RequestOptions] IApizrRequestOptions options);

        /// <summary>
        /// Find pet by ID
        /// </summary>
        /// <param name="petId">ID of pet to return</param>
        /// <returns>successful operation</returns>
        [Get("pet/{petId}")]
        System.Threading.Tasks.Task<Pet> GetPetByIdAsync(long petId);
        
        /// <summary>
        /// Find pet by ID
        /// </summary>
        /// <param name="petId">ID of pet to return</param>
        /// <param name="options">The request options</param>
        /// <returns>successful operation</returns>
        [Get("pet/{petId}")]
        System.Threading.Tasks.Task<Pet> GetPetByIdAsync(long petId, [RequestOptions] IApizrRequestOptions options);

        /// <summary>
        /// Updates a pet in the store with form data
        /// </summary>
        /// <param name="petId">ID of pet that needs to be updated</param>
        /// <param name="name">Name of pet that needs to be updated</param>
        /// <param name="status">Status of pet that needs to be updated</param>
        [Post("pet/{petId}")]
        System.Threading.Tasks.Task UpdatePetWithFormAsync(long petId, [Query] string name, [Query] string status);
        
        /// <summary>
        /// Updates a pet in the store with form data
        /// </summary>
        /// <param name="petId">ID of pet that needs to be updated</param>
        /// <param name="name">Name of pet that needs to be updated</param>
        /// <param name="status">Status of pet that needs to be updated</param>
        /// <param name="options">The request options</param>
        [Post("pet/{petId}")]
        System.Threading.Tasks.Task UpdatePetWithFormAsync(long petId, [Query] string name, [Query] string status, [RequestOptions] IApizrRequestOptions options);

        /// <summary>
        /// Deletes a pet
        /// </summary>
        /// <param name="petId">Pet id to delete</param>
        [Delete("pet/{petId}")]
        [Headers("api_key")] 
        System.Threading.Tasks.Task DeletePetAsync(long petId);
        
        /// <summary>
        /// Deletes a pet
        /// </summary>
        /// <param name="petId">Pet id to delete</param>
        /// <param name="options">The request options</param>
        [Delete("pet/{petId}")]
        [Headers("api_key")] 
        System.Threading.Tasks.Task DeletePetAsync(long petId, [RequestOptions] IApizrRequestOptions options);

        /// <summary>
        /// uploads an image
        /// </summary>
        /// <param name="petId">ID of pet to update</param>
        /// <param name="additionalMetadata">Additional Metadata</param>
        /// <returns>successful operation</returns>
        [Post("pet/{petId}/uploadImage")]
        System.Threading.Tasks.Task<ApiResponse> UploadFileAsync(long petId, [Query] string additionalMetadata, [Body] System.IO.Stream body);
        
        /// <summary>
        /// uploads an image
        /// </summary>
        /// <param name="petId">ID of pet to update</param>
        /// <param name="additionalMetadata">Additional Metadata</param>
        /// <param name="options">The request options</param>
        /// <returns>successful operation</returns>
        [Post("pet/{petId}/uploadImage")]
        System.Threading.Tasks.Task<ApiResponse> UploadFileAsync(long petId, [Query] string additionalMetadata, [Body] System.IO.Stream body, [RequestOptions] IApizrRequestOptions options);

        /// <summary>
        /// Returns pet inventories by status
        /// </summary>
        /// <returns>successful operation</returns>
        [Get("store/inventory")]
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string,Int>> GetInventoryAsync();
        
        /// <summary>
        /// Returns pet inventories by status
        /// </summary>
        /// <param name="options">The request options</param>
        /// <returns>successful operation</returns>
        [Get("store/inventory")]
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string,Int>> GetInventoryAsync([RequestOptions] IApizrRequestOptions options);

        /// <summary>
        /// Place an order for a pet
        /// </summary>
        /// <returns>successful operation</returns>
        [Post("store/order")]
        System.Threading.Tasks.Task<Order> PlaceOrderAsync([Body] Order body);
        
        /// <summary>
        /// Place an order for a pet
        /// </summary>
        /// <param name="options">The request options</param>
        /// <returns>successful operation</returns>
        [Post("store/order")]
        System.Threading.Tasks.Task<Order> PlaceOrderAsync([Body] Order body, [RequestOptions] IApizrRequestOptions options);

        /// <summary>
        /// Find purchase order by ID
        /// </summary>
        /// <param name="orderId">ID of order that needs to be fetched</param>
        /// <returns>successful operation</returns>
        [Get("store/order/{orderId}")]
        System.Threading.Tasks.Task<Order> GetOrderByIdAsync(long orderId);
        
        /// <summary>
        /// Find purchase order by ID
        /// </summary>
        /// <param name="orderId">ID of order that needs to be fetched</param>
        /// <param name="options">The request options</param>
        /// <returns>successful operation</returns>
        [Get("store/order/{orderId}")]
        System.Threading.Tasks.Task<Order> GetOrderByIdAsync(long orderId, [RequestOptions] IApizrRequestOptions options);

        /// <summary>
        /// Delete purchase order by ID
        /// </summary>
        /// <param name="orderId">ID of the order that needs to be deleted</param>
        [Delete("store/order/{orderId}")]
        System.Threading.Tasks.Task DeleteOrderAsync(long orderId);
        
        /// <summary>
        /// Delete purchase order by ID
        /// </summary>
        /// <param name="orderId">ID of the order that needs to be deleted</param>
        /// <param name="options">The request options</param>
        [Delete("store/order/{orderId}")]
        System.Threading.Tasks.Task DeleteOrderAsync(long orderId, [RequestOptions] IApizrRequestOptions options);

        /// <summary>
        /// Create user
        /// </summary>
        /// <param name="body">Created user object</param>
        /// <returns>successful operation</returns>
        [Post("user")]
        System.Threading.Tasks.Task<User> CreateUserAsync([Body] User body);
        
        /// <summary>
        /// Create user
        /// </summary>
        /// <param name="body">Created user object</param>
        /// <param name="options">The request options</param>
        /// <returns>successful operation</returns>
        [Post("user")]
        System.Threading.Tasks.Task<User> CreateUserAsync([Body] User body, [RequestOptions] IApizrRequestOptions options);

        /// <summary>
        /// Creates list of users with given input array
        /// </summary>
        /// <returns>Successful operation</returns>
        [Post("user/createWithList")]
        System.Threading.Tasks.Task<User> CreateUsersWithListInputAsync([Body] System.Collections.Generic.IEnumerable<User> body);
        
        /// <summary>
        /// Creates list of users with given input array
        /// </summary>
        /// <param name="options">The request options</param>
        /// <returns>Successful operation</returns>
        [Post("user/createWithList")]
        System.Threading.Tasks.Task<User> CreateUsersWithListInputAsync([Body] System.Collections.Generic.IEnumerable<User> body, [RequestOptions] IApizrRequestOptions options);

        /// <summary>
        /// Logs user into the system
        /// </summary>
        /// <param name="username">The user name for login</param>
        /// <param name="password">The password for login in clear text</param>
        /// <returns>successful operation</returns>
        [Get("user/login")]
        System.Threading.Tasks.Task<string> LoginUserAsync([Query] string username, [Query] string password);
        
        /// <summary>
        /// Logs user into the system
        /// </summary>
        /// <param name="username">The user name for login</param>
        /// <param name="password">The password for login in clear text</param>
        /// <param name="options">The request options</param>
        /// <returns>successful operation</returns>
        [Get("user/login")]
        System.Threading.Tasks.Task<string> LoginUserAsync([Query] string username, [Query] string password, [RequestOptions] IApizrRequestOptions options);

        /// <summary>
        /// Logs out current logged in user session
        /// </summary>
        /// <returns>successful operation</returns>
        [Get("user/logout")]
        System.Threading.Tasks.Task LogoutUserAsync();
        
        /// <summary>
        /// Logs out current logged in user session
        /// </summary>
        /// <param name="options">The request options</param>
        /// <returns>successful operation</returns>
        [Get("user/logout")]
        System.Threading.Tasks.Task LogoutUserAsync([RequestOptions] IApizrRequestOptions options);

        /// <summary>
        /// Get user by user name
        /// </summary>
        /// <param name="username">The name that needs to be fetched. Use user1 for testing.</param>
        /// <returns>successful operation</returns>
        [Get("user/{username}")]
        System.Threading.Tasks.Task<User> GetUserByNameAsync(string username);
        
        /// <summary>
        /// Get user by user name
        /// </summary>
        /// <param name="username">The name that needs to be fetched. Use user1 for testing.</param>
        /// <param name="options">The request options</param>
        /// <returns>successful operation</returns>
        [Get("user/{username}")]
        System.Threading.Tasks.Task<User> GetUserByNameAsync(string username, [RequestOptions] IApizrRequestOptions options);

        /// <summary>
        /// Update user
        /// </summary>
        /// <param name="username">name that need to be deleted</param>
        /// <param name="body">Update an existent user in the store</param>
        /// <returns>successful operation</returns>
        [Put("user/{username}")]
        System.Threading.Tasks.Task UpdateUserAsync(string username, [Body] User body);
        
        /// <summary>
        /// Update user
        /// </summary>
        /// <param name="username">name that need to be deleted</param>
        /// <param name="body">Update an existent user in the store</param>
        /// <param name="options">The request options</param>
        /// <returns>successful operation</returns>
        [Put("user/{username}")]
        System.Threading.Tasks.Task UpdateUserAsync(string username, [Body] User body, [RequestOptions] IApizrRequestOptions options);

        /// <summary>
        /// Delete user
        /// </summary>
        /// <param name="username">The name that needs to be deleted</param>
        [Delete("user/{username}")]
        System.Threading.Tasks.Task DeleteUserAsync(string username);
        
        /// <summary>
        /// Delete user
        /// </summary>
        /// <param name="username">The name that needs to be deleted</param>
        /// <param name="options">The request options</param>
        [Delete("user/{username}")]
        System.Threading.Tasks.Task DeleteUserAsync(string username, [RequestOptions] IApizrRequestOptions options);

    }
}