<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Apizr.Extensions.Microsoft.DependencyInjection</name>
    </assembly>
    <members>
        <member name="T:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions">
            <inheritdoc cref="T:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions"/>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.ConnectivityHandlerType">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.CacheHandlerType">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.MappingHandlerType">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.BaseUriFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.BaseAddressFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.BasePathFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.HttpTracerModeFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.TrafficVerbosityFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.LogLevelsFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.HttpClientHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.RefitSettingsFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.ConnectivityHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.CacheHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.MappingHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.HttpClientBuilder">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.HeadersExtendedFactories">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.OperationTimeoutFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.RequestTimeoutFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.DelegatingHandlersExtendedFactories">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.HttpMessageHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.WebApis">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.ObjectMappings">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.PostRegistries">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.PostRegistrationActions">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.Apizr#Extending#Configuring#Shared#IApizrExtendedSharedOptions#ResiliencePropertiesExtendedFactories">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder">
            <summary>
            Builder options available at common level for extended registration
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.Apizr#Extending#Configuring#Common#IApizrExtendedCommonOptionsBuilder#ApizrOptions">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithConfiguration(Microsoft.Extensions.Configuration.IConfiguration)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithConfiguration(Microsoft.Extensions.Configuration.IConfigurationSection)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithBaseAddress(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.Apizr#Configuring#Shared#IApizrGlobalSharedRegistrationOptionsBuilderBase{Apizr#Extending#Configuring#Common#IApizrExtendedCommonOptions,Apizr#Extending#Configuring#Common#IApizrExtendedCommonOptionsBuilder}#WithBaseAddress(System.String,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithBaseAddress(System.Func{System.IServiceProvider,System.String})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithBaseAddress(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithBaseAddress(System.Func{System.IServiceProvider,System.Uri})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithBasePath(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithBasePath(System.Func{System.IServiceProvider,System.String})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithHttpClientHandler(System.Net.Http.HttpClientHandler)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithHttpClientHandler(System.Func{System.IServiceProvider,System.Net.Http.HttpClientHandler})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithAuthenticationHandler(System.Func{System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithAuthenticationHandler``1(System.Func{System.IServiceProvider,Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithAuthenticationHandler``2(System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithAuthenticationHandler``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithAuthenticationHandler``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Func{System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithHeaders(System.Collections.Generic.IList{System.String},Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithHeaders(System.Func{System.IServiceProvider,System.Collections.Generic.IList{System.String}},Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrLifetimeScope,Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithHeaders``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}}[],Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrLifetimeScope,Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithOperationTimeout(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithOperationTimeout(System.Func{System.IServiceProvider,System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithRequestTimeout(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithRequestTimeout(System.Func{System.IServiceProvider,System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithDelegatingHandler``1(``0,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithDelegatingHandler``1(System.Func{System.IServiceProvider,``0},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithDelegatingHandler``1(System.Func{System.IServiceProvider,Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithHttpMessageHandler``1(System.Func{System.IServiceProvider,``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithHttpMessageHandler``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithHttpMessageHandler``1(System.Func{System.IServiceProvider,Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.ConfigureHttpClientBuilder(System.Action{Microsoft.Extensions.DependencyInjection.IHttpClientBuilder},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithExCatching(System.Action{Apizr.ApizrException},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithExCatching``1(System.Action{Apizr.ApizrException{``0}},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithHandlerParameter(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithResilienceProperty``1(Polly.ResiliencePropertyKey{``0},``0)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithResilienceProperty``1(Polly.ResiliencePropertyKey{``0},System.Func{System.IServiceProvider,``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithLogging(Apizr.Logging.HttpTracerMode,Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithLogging(System.Func{System.IServiceProvider,System.ValueTuple{Apizr.Logging.HttpTracerMode,Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[]}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithLogging(System.Func{System.IServiceProvider,Apizr.Logging.HttpTracerMode},System.Func{System.IServiceProvider,Apizr.Logging.HttpMessageParts},System.Func{System.IServiceProvider,Microsoft.Extensions.Logging.LogLevel[]})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithRefitSettings(Refit.RefitSettings)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithRefitSettings(System.Func{System.IServiceProvider,Refit.RefitSettings})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithConnectivityHandler(Apizr.Connecting.IConnectivityHandler)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithConnectivityHandler(System.Func{System.IServiceProvider,Apizr.Connecting.IConnectivityHandler})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithConnectivityHandler``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithConnectivityHandler(System.Func{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithConnectivityHandler``1">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithConnectivityHandler(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithCacheHandler(Apizr.Caching.ICacheHandler)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithCacheHandler(System.Func{System.IServiceProvider,Apizr.Caching.ICacheHandler})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithCacheHandler``1">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithCacheHandler(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithMappingHandler(Apizr.Mapping.IMappingHandler)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithMappingHandler(System.Func{System.IServiceProvider,Apizr.Mapping.IMappingHandler})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithMappingHandler``1">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithMappingHandler(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithResilienceContextOptions(System.Action{Apizr.Configuring.Shared.Context.IApizrResilienceContextOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithLoggedHeadersRedactionNames(System.Collections.Generic.IEnumerable{System.String},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithLoggedHeadersRedactionRule(System.Func{System.String,System.Boolean},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithResiliencePipelineKeys(System.String[],System.Collections.Generic.IEnumerable{Apizr.Configuring.ApizrRequestMethod},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.WithCaching(Apizr.Caching.CacheMode,System.Nullable{System.TimeSpan},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.Apizr#Configuring#Shared#IApizrInternalRegistrationOptionsBuilder#AddDelegatingHandler``1(System.Func{Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions">
            <summary>
            Options available at common level for extended registrations
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.ConnectivityHandlerType">
            <summary>
            Type of the connectivity handler
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.CacheHandlerType">
            <summary>
            Type of the cache handler
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.MappingHandlerType">
            <summary>
            Type of the mapping handler
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.RefitSettingsFactory">
            <summary>
            Refit settings factory
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.ConnectivityHandlerFactory">
            <summary>
            Connectivity handler factory
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.CacheHandlerFactory">
            <summary>
            Cache handler factory
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.MappingHandlerFactory">
            <summary>
            Mapping handler factory
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.WebApis">
            <summary>
            Web apis auto registered with <see cref="T:Apizr.IApizrManager`1"/>
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.ObjectMappings">
            <summary>
            Mappings between api request object and model object used for classic auto registration
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.PostRegistries">
            <summary>
            Other registries plugged during post registration actions
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.PostRegistrationActions">
            <summary>
            Post registration actions
            </summary>
        </member>
        <member name="T:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBase">
            <summary>
            Options available at common level for extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2">
            <summary>
            Builder options available at common level for extended registration
            </summary>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithRefitSettings(System.Func{System.IServiceProvider,Refit.RefitSettings})">
            <summary>
            Provide some Refit specific settings
            </summary>
            <param name="refitSettingsFactory">A <see cref="T:Refit.RefitSettings"/> instance factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithConnectivityHandler(System.Func{System.IServiceProvider,Apizr.Connecting.IConnectivityHandler})">
            <summary>
            Provide a connectivity handler to check connectivity before sending a request
            </summary>
            <param name="connectivityHandlerFactory">A <see cref="T:Apizr.Connecting.IConnectivityHandler"/> mapping implementation factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithConnectivityHandler``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Provide a connectivity handler to check connectivity before sending a request
            </summary>
            <typeparam name="TConnectivityHandler">Your connectivity checking service</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithConnectivityHandler``1">
            <summary>
            Provide a connectivity handler to check connectivity before sending a request
            </summary>
            <typeparam name="TConnectivityHandler">Your <see cref="T:Apizr.Connecting.IConnectivityHandler"/> mapping implementation</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithConnectivityHandler(System.Type)">
            <summary>
            Provide a connectivity handler to check connectivity before sending a request
            </summary>
            <param name="connectivityHandlerType">Type of your <see cref="T:Apizr.Connecting.IConnectivityHandler"/> mapping implementation</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithCacheHandler(System.Func{System.IServiceProvider,Apizr.Caching.ICacheHandler})">
            <summary>
            Provide a cache handler to cache data
            </summary>
            <param name="cacheHandlerFactory">A <see cref="T:Apizr.Caching.ICacheHandler"/> mapping implementation factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithCacheHandler``1">
            <summary>
            Provide a cache handler to cache data
            </summary>
            <typeparam name="TCacheHandler">Your <see cref="T:Apizr.Caching.ICacheHandler"/> mapping implementation</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithCacheHandler(System.Type)">
            <summary>
            Provide a cache handler to cache data
            </summary>
            <param name="cacheHandlerType">Type of your <see cref="T:Apizr.Caching.ICacheHandler"/> mapping implementation</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithMappingHandler(System.Func{System.IServiceProvider,Apizr.Mapping.IMappingHandler})">
            <summary>
            Provide a mapping handler to auto map entities during mediation
            </summary>
            <param name="mappingHandlerFactory">A <see cref="T:Apizr.Mapping.IMappingHandler"/> mapping implementation factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithMappingHandler``1">
            <summary>
            Provide a mapping handler to auto map entities during mediation
            </summary>
            <typeparam name="TMappingHandler">Your <see cref="T:Apizr.Mapping.IMappingHandler"/> mapping implementation</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder`2.WithMappingHandler(System.Type)">
            <summary>
            Provide a mapping handler to auto map entities during mediation
            </summary>
            <param name="mappingHandlerType">Type of your <see cref="T:Apizr.Mapping.IMappingHandler"/> mapping implementation</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder">
            <summary>
            Builder options available at common level for extended registration
            </summary>
        </member>
        <member name="T:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions">
            <inheritdoc cref="T:Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptions"/>
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.#ctor(Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions,Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptions)">
            <summary>
            The options constructor
            </summary>
            <param name="commonOptions">The common options</param>
            <param name="properOptions">The proper options</param>
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.CrudApiEntityKeyType">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.CrudApiReadAllResultType">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.CrudApiReadAllParamsType">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.ApizrManagerImplementationType">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.ConnectivityHandlerType">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.CacheHandlerType">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.MappingHandlerType">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.BaseUriFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.BaseAddressFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.BasePathFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.HttpTracerModeFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.TrafficVerbosityFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.LogLevelsFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.LoggerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.HttpClientHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.HttpMessageHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.RefitSettingsFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.ConnectivityHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.CacheHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.MappingHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.HttpClientBuilder">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.HeadersExtendedFactories">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.OperationTimeoutFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.RequestTimeoutFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.WebApis">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.ObjectMappings">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.PostRegistries">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.PostRegistrationActions">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.Apizr#Extending#Configuring#Shared#IApizrExtendedSharedOptions#ResiliencePropertiesExtendedFactories">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions`1">
            <inheritdoc cref="T:Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBase"/>
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions`1.HttpClientHandler">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions`1.DelegatingHandlersExtendedFactories">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBase">
            <inheritdoc cref="T:Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBase"/>
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBase.HttpClientHandler">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBase.DelegatingHandlersExtendedFactories">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder">
            <summary>
            Builder options available for extended registrations
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.Apizr#Extending#Configuring#Manager#IApizrExtendedManagerOptionsBuilder#ApizrOptions">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithBaseAddress(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.Apizr#Configuring#Shared#IApizrGlobalSharedRegistrationOptionsBuilderBase{Apizr#Extending#Configuring#Manager#IApizrExtendedManagerOptions,Apizr#Extending#Configuring#Manager#IApizrExtendedManagerOptionsBuilder}#WithBaseAddress(System.String,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithConfiguration(Microsoft.Extensions.Configuration.IConfiguration)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithConfiguration(Microsoft.Extensions.Configuration.IConfigurationSection)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithBaseAddress(System.Func{System.IServiceProvider,System.String})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithBaseAddress(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithBaseAddress(System.Func{System.IServiceProvider,System.Uri})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithBasePath(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithBasePath(System.Func{System.IServiceProvider,System.String})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithHttpClientHandler(System.Net.Http.HttpClientHandler)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithHttpClientHandler(System.Func{System.IServiceProvider,System.Net.Http.HttpClientHandler})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.ConfigureHttpClientBuilder(System.Action{Microsoft.Extensions.DependencyInjection.IHttpClientBuilder},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithDelegatingHandler``1(System.Func{System.IServiceProvider,``0},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithAuthenticationHandler(System.Func{System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithAuthenticationHandler``1(System.Func{System.IServiceProvider,Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithAuthenticationHandler``2(System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithAuthenticationHandler``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithAuthenticationHandler``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Func{System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithHeaders(System.Collections.Generic.IList{System.String},Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithHeaders(System.Func{System.IServiceProvider,System.Collections.Generic.IList{System.String}},Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrLifetimeScope,Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithHeaders``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}}[],Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrLifetimeScope,Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithOperationTimeout(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithOperationTimeout(System.Func{System.IServiceProvider,System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithRequestTimeout(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithRequestTimeout(System.Func{System.IServiceProvider,System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithDelegatingHandler``1(``0,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithDelegatingHandler``1(System.Func{System.IServiceProvider,Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithHttpMessageHandler``1(System.Func{System.IServiceProvider,``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithHttpMessageHandler``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithHttpMessageHandler``1(System.Func{System.IServiceProvider,Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithExCatching(System.Action{Apizr.ApizrException},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithExCatching``1(System.Action{Apizr.ApizrException{``0}},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithHandlerParameter(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithResilienceProperty``1(Polly.ResiliencePropertyKey{``0},``0)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithResilienceProperty``1(Polly.ResiliencePropertyKey{``0},System.Func{System.IServiceProvider,``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithLogging(Apizr.Logging.HttpTracerMode,Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithLogging(System.Func{System.IServiceProvider,System.ValueTuple{Apizr.Logging.HttpTracerMode,Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[]}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithLogging(System.Func{System.IServiceProvider,Apizr.Logging.HttpTracerMode},System.Func{System.IServiceProvider,Apizr.Logging.HttpMessageParts},System.Func{System.IServiceProvider,Microsoft.Extensions.Logging.LogLevel[]})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithRefitSettings(Refit.RefitSettings)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithRefitSettings(System.Func{System.IServiceProvider,Refit.RefitSettings})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithConnectivityHandler(Apizr.Connecting.IConnectivityHandler)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithConnectivityHandler(System.Func{System.IServiceProvider,Apizr.Connecting.IConnectivityHandler})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithConnectivityHandler``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithConnectivityHandler(System.Func{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithConnectivityHandler``1">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithConnectivityHandler(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithCacheHandler(Apizr.Caching.ICacheHandler)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithCacheHandler(System.Func{System.IServiceProvider,Apizr.Caching.ICacheHandler})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithCacheHandler``1">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithCacheHandler(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithMappingHandler(Apizr.Mapping.IMappingHandler)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithMappingHandler(System.Func{System.IServiceProvider,Apizr.Mapping.IMappingHandler})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithMappingHandler``1">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithMappingHandler(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithResilienceContextOptions(System.Action{Apizr.Configuring.Shared.Context.IApizrResilienceContextOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithLoggedHeadersRedactionNames(System.Collections.Generic.IEnumerable{System.String},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithLoggedHeadersRedactionRule(System.Func{System.String,System.Boolean},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithResiliencePipelineKeys(System.String[],System.Collections.Generic.IEnumerable{Apizr.Configuring.ApizrRequestMethod},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.WithCaching(Apizr.Caching.CacheMode,System.Nullable{System.TimeSpan},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.Apizr#Extending#Configuring#Manager#IApizrExtendedManagerOptionsBuilder#WithHeaders(System.Collections.Generic.IDictionary{System.ValueTuple{Apizr.Configuring.ApizrRegistrationMode,Apizr.Configuring.ApizrLifetimeScope},System.Func{System.Collections.Generic.IList{System.String}}})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptions">
            <summary>
            Options available for extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptions`1">
            <summary>
            Options available for extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBase">
            <summary>
            Options available for both static and extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder`2">
            <summary>
            Builder options available for extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder">
            <summary>
            Builder options available for extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilderBase">
            <summary>
            Builder options available for extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilderBase`2">
            <summary>
            Builder options available for extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions">
            <inheritdoc cref="T:Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptions"/>
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.#ctor(Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions,System.Type,System.Type,System.Type,System.Type,System.Type,System.Reflection.TypeInfo,System.Type,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{Apizr.Logging.HttpTracerMode},System.Nullable{Apizr.Logging.HttpMessageParts},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},Apizr.Resiliencing.Attributes.ResiliencePipelineAttributeBase[],Apizr.Resiliencing.Attributes.ResiliencePipelineAttributeBase[],Apizr.Caching.Attributes.CacheAttribute,Apizr.Caching.Attributes.CacheAttribute,System.Func{System.String,System.Boolean},Microsoft.Extensions.Logging.LogLevel[])">
            <summary>
            The proper options constructor
            </summary>
            <param name="sharedOptions">The shared options</param>
            <param name="webApiType">The web api type</param>
            <param name="crudApiEntityType">The crud api entity type if any</param>
            <param name="crudApiEntityKeyType">The crud api entity key type if any</param>
            <param name="crudApiReadAllResultType">The crud api read all result type if any</param>
            <param name="crudApiReadAllParamsType">The crud api read all params type if any</param>
            <param name="typeInfo">The type info</param>
            <param name="apizrManagerType">The manager type</param>
            <param name="baseAddress">The web api base address</param>
            <param name="basePath">The web api base path</param>
            <param name="handlersParameters">Some handlers parameters</param>
            <param name="httpTracerMode">The http tracer mode</param>
            <param name="trafficVerbosity">The traffic verbosity</param>
            <param name="operationTimeout">The operation timeout</param>
            <param name="requestTimeout">The request timeout</param>
            <param name="commonResiliencePipelineAttributes">Global resilience pipelines</param>
            <param name="properResiliencePipelineAttributes">Specific resilience pipeline</param>
            <param name="commonCacheAttribute">Global caching options</param>
            <param name="properCacheAttribute">Specific caching options</param>
            <param name="shouldRedactHeaderValue">Headers to redact value</param>
            <param name="logLevels">The log levels</param>
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.CrudApiEntityKeyType">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.CrudApiReadAllResultType">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.CrudApiReadAllParamsType">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.ApizrManagerImplementationType">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.BaseUriFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.BaseAddressFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.BasePathFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.HttpTracerModeFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.TrafficVerbosityFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.LogLevelsFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.LoggerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.HttpClientHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.HttpClientBuilder">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.HeadersExtendedFactories">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.OperationTimeoutFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.RequestTimeoutFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.DelegatingHandlersExtendedFactories">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.HttpMessageHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.Apizr#Extending#Configuring#Shared#IApizrExtendedSharedOptions#ResiliencePropertiesExtendedFactories">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder">
            <summary>
            Builder options available at proper level for extended registrations
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.Apizr#Extending#Configuring#Proper#IApizrExtendedProperOptionsBuilder#ApizrOptions">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithBaseAddress(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.Apizr#Configuring#Shared#IApizrGlobalSharedRegistrationOptionsBuilderBase{Apizr#Extending#Configuring#Proper#IApizrExtendedProperOptions,Apizr#Extending#Configuring#Proper#IApizrExtendedProperOptionsBuilder}#WithBaseAddress(System.String,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithBaseAddress(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithConfiguration(Microsoft.Extensions.Configuration.IConfiguration)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithConfiguration(Microsoft.Extensions.Configuration.IConfigurationSection)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithBaseAddress(System.Func{System.IServiceProvider,System.String})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithBaseAddress(System.Func{System.IServiceProvider,System.Uri})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithBasePath(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithBasePath(System.Func{System.IServiceProvider,System.String})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithHttpClientHandler(System.Net.Http.HttpClientHandler)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithHttpClientHandler(System.Func{System.IServiceProvider,System.Net.Http.HttpClientHandler})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.ConfigureHttpClientBuilder(System.Action{Microsoft.Extensions.DependencyInjection.IHttpClientBuilder},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithDelegatingHandler``1(System.Func{System.IServiceProvider,``0},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithAuthenticationHandler(System.Func{System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithAuthenticationHandler``1(System.Func{System.IServiceProvider,Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithAuthenticationHandler``2(System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithAuthenticationHandler``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithAuthenticationHandler``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Func{System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithHeaders(System.Collections.Generic.IList{System.String},Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithHeaders(System.Func{System.IServiceProvider,System.Collections.Generic.IList{System.String}},Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrLifetimeScope,Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithHeaders``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}}[],Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrLifetimeScope,Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithOperationTimeout(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithOperationTimeout(System.Func{System.IServiceProvider,System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithRequestTimeout(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithRequestTimeout(System.Func{System.IServiceProvider,System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithDelegatingHandler``1(``0,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithDelegatingHandler``1(System.Func{System.IServiceProvider,Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithHttpMessageHandler``1(System.Func{System.IServiceProvider,``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithHttpMessageHandler``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithHttpMessageHandler``1(System.Func{System.IServiceProvider,Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithExCatching(System.Action{Apizr.ApizrException},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithExCatching``1(System.Action{Apizr.ApizrException{``0}},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithHandlerParameter(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithResilienceProperty``1(Polly.ResiliencePropertyKey{``0},``0)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithResilienceProperty``1(Polly.ResiliencePropertyKey{``0},System.Func{System.IServiceProvider,``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithLogging(Apizr.Logging.HttpTracerMode,Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithLogging(System.Func{System.IServiceProvider,System.ValueTuple{Apizr.Logging.HttpTracerMode,Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[]}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithLogging(System.Func{System.IServiceProvider,Apizr.Logging.HttpTracerMode},System.Func{System.IServiceProvider,Apizr.Logging.HttpMessageParts},System.Func{System.IServiceProvider,Microsoft.Extensions.Logging.LogLevel[]})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithResilienceContextOptions(System.Action{Apizr.Configuring.Shared.Context.IApizrResilienceContextOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithLoggedHeadersRedactionNames(System.Collections.Generic.IEnumerable{System.String},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithLoggedHeadersRedactionRule(System.Func{System.String,System.Boolean},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithResiliencePipelineKeys(System.String[],System.Collections.Generic.IEnumerable{Apizr.Configuring.ApizrRequestMethod},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.WithCaching(Apizr.Caching.CacheMode,System.Nullable{System.TimeSpan},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.Apizr#Configuring#Shared#IApizrInternalRegistrationOptionsBuilder#AddDelegatingHandler``1(System.Func{Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptions">
            <summary>
            Options available at proper level for extended registrations
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptions.CrudApiEntityKeyType">
            <summary>
            Type of the crud api entity key if any
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptions.CrudApiReadAllResultType">
            <summary>
            Type of the crud api read all result if any
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptions.CrudApiReadAllParamsType">
            <summary>
            Type of the crud api read all parameters if any
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptions.ApizrManagerImplementationType">
            <summary>
            Type of the implemented manager
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptions.LoggerFactory">
            <summary>
            The Logger factory
            </summary>
        </member>
        <member name="T:Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBase">
            <summary>
            Options available at proper level for extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder`2">
            <summary>
            Builder options available at proper level for extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder">
            <summary>
            Builder options available at proper level for extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistry">
            <summary>
            Registry options available for extended registrations
            </summary>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistry.AddOrUpdateManager(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder">
            <summary>
            Registry builder options available for extended registrations
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.ApizrRegistry">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddGroup(System.Action{Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder},System.Action{Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddCrudManagerFor``1(System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddCrudManagerFor``2(System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddCrudManagerFor``3(System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddCrudManagerFor``4(System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddCrudManagerFor``5(System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddCrudManagerFor(System.Type,System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddCrudManagerFor(System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddCrudManagerFor(System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddCrudManagerFor(System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddCrudManagerFor(System.Type,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddCrudManagerFor(System.Type[],System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddCrudManagerFor(System.Reflection.Assembly[],System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddCrudManagerFor(System.Type,System.Type[],System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddCrudManagerFor(System.Type,System.Reflection.Assembly[],System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddManagerFor``1(System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddManagerFor``2(System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddManagerFor(System.Type,System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddManagerFor(System.Type[],System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddManagerFor(System.Reflection.Assembly[],System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddManagerFor(System.Type,System.Type[],System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddManagerFor(System.Type,System.Reflection.Assembly[],System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.AddManagerFor(System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Extending.Configuring.Registry.IApizrExtendedConcurrentRegistry">
            <summary>
            Registry options available for extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Extending.Configuring.Registry.IApizrExtendedConcurrentRegistryBase">
            <summary>
            Registry options available for extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistry">
            <summary>
            Registry options available for extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`4">
            <summary>
            Registry builder options available for extended registrations
            </summary>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`4.AddCrudManagerFor``5(System.Action{`2})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for <typeparamref name="T"/> object type, 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <typeparamref name="TReadAllResult"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <typeparam name="T">The object type to manage with crud api calls</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters</typeparam>
            <typeparam name="TApizrManager">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation</typeparam>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`4.AddCrudManagerFor(System.Type,System.Action{`2})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <paramref name="apiEntityType"/> object type (class), 
            with key of type <see cref="T:System.Int32"/> and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <param name="apiEntityType">The object type to manage with crud api calls (class)</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`4.AddCrudManagerFor(System.Type,System.Type,System.Action{`2})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <paramref name="apiEntityType"/> object type (class), 
            with key of type <paramref name="apiEntityKeyType"/> (primitive) and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="apiEntityType">The object type to manage with crud api calls (class)</param>
            <param name="apiEntityKeyType">The object key type (primitive)</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`4.AddCrudManagerFor(System.Type,System.Type,System.Type,System.Action{`2})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <paramref name="apiEntityType"/> object type (class), 
            with key of type <paramref name="apiEntityKeyType"/> (primitive) and "ReadAll" query result of type <paramref name="apiEntityReadAllResultType"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <param name="apiEntityType">The object type to manage with crud api calls (class)</param>
            <param name="apiEntityKeyType">The object key type (primitive)</param>
            <param name="apiEntityReadAllResultType">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`4.AddCrudManagerFor(System.Type,System.Type,System.Type,System.Type,System.Action{`2})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <paramref name="apiEntityType"/> object type (class), 
            with key of type <paramref name="apiEntityKeyType"/> (primitive) and "ReadAll" query result of type <paramref name="apiEntityReadAllResultType"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <param name="apiEntityType">The object type to manage with crud api calls (class)</param>
            <param name="apiEntityKeyType">The object key type (primitive)</param>
            <param name="apiEntityReadAllResultType">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</param>
            <param name="apiEntityReadAllParamsType">ReadAll query parameters type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`4.AddCrudManagerFor(System.Type,System.Type,System.Type,System.Type,System.Type,System.Action{`2})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for <paramref name="apiEntityType"/> object type (class), 
            with key of type <paramref name="apiEntityKeyType"/> (primitive) and "ReadAll" query result of type <paramref name="apiEntityReadAllResultType"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <param name="apiEntityType">The object type to manage with crud api calls</param>
            <param name="apiEntityKeyType">The object key type</param>
            <param name="apiEntityReadAllResultType">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</param>
            <param name="apiEntityReadAllParamsType">ReadAll query parameters type</param>
            <param name="apizrManagerImplementationType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`4.AddCrudManagerFor(System.Type[],System.Action{`2})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="!:CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="!:CrudEntityAttribute"/></param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`4.AddCrudManagerFor(System.Reflection.Assembly[],System.Action{`2})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="!:CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="assemblies">Any assembly to scan for <see cref="!:CrudEntityAttribute"/></param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`4.AddCrudManagerFor(System.Type,System.Type[],System.Action{`2})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="!:CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="apizrManagerImplementationType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="!:CrudEntityAttribute"/></param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`4.AddCrudManagerFor(System.Type,System.Reflection.Assembly[],System.Action{`2})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="!:CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="apizrManagerImplementationType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="assemblies">Any assembly to scan for <see cref="!:CrudEntityAttribute"/></param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`4.AddManagerFor``2(System.Action{`2})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/>
            </summary>
            <typeparam name="TWebApi">The web api interface to manage</typeparam>
            <typeparam name="TApizrManager">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation</typeparam>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`4.AddManagerFor(System.Type,System.Action{`2})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/>
            </summary>
            <param name="webApiType">The web api interface type to manage</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`4.AddManagerFor(System.Type[],System.Action{`2})">
            <summary>
            Register a <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Configuring.BaseAddressAttribute"/> decorated interfaces
            </summary>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="T:Apizr.Configuring.BaseAddressAttribute"/></param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`4.AddManagerFor(System.Reflection.Assembly[],System.Action{`2})">
            <summary>
            Register a <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Configuring.BaseAddressAttribute"/> decorated interfaces
            </summary>
            <param name="assemblies">Any assembly to scan for <see cref="T:Apizr.Configuring.BaseAddressAttribute"/></param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`4.AddManagerFor(System.Type,System.Type[],System.Action{`2})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Configuring.BaseAddressAttribute"/> decorated interfaces
            </summary>
            <param name="apizrManagerImplementationType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="T:Apizr.Configuring.BaseAddressAttribute"/></param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`4.AddManagerFor(System.Type,System.Reflection.Assembly[],System.Action{`2})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Configuring.BaseAddressAttribute"/> decorated interfaces
            </summary>
            <param name="apizrManagerImplementationType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="assemblies">Any assembly to scan for <see cref="T:Apizr.Configuring.BaseAddressAttribute"/></param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder`4.AddManagerFor(System.Type,System.Type,System.Action{`2})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/>
            </summary>
            <param name="webApiType">The web api interface type to manage</param>
            <param name="apizrManagerImplementationType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder">
            <summary>
            Registry builder options available for extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions">
            <summary>
            Options available at both common and proper level for extended registrations
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.BaseUriFactory">
            <summary>
            Base Uri factory
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.BaseAddressFactory">
            <summary>
            Base address factory
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.BasePathFactory">
            <summary>
            Base path factory
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.HttpTracerModeFactory">
            <summary>
            Http traffic tracing mode factory
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.TrafficVerbosityFactory">
            <summary>
            Http traffic tracing verbosity factory
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.LogLevelsFactory">
            <summary>
            Log levels factory
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.HttpClientHandlerFactory">
            <summary>
            HttpClientHandler factory
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.HttpMessageHandlerFactory">
            <summary>
            HttpMessageHandler factory
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.HttpClientBuilder">
            <summary>
            HttpClient builder
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.OperationTimeoutFactory">
            <summary>
            The operation timeout factory (overall request tries)
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.RequestTimeoutFactory">
            <summary>
            The request timeout factory (each request try)
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.HeadersExtendedFactories">
            <summary>
            Headers factories
            </summary>
        </member>
        <member name="T:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBase">
            <summary>
            Options available at both common and proper level for extended registrations
            </summary>
        </member>
        <member name="P:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories">
            <summary>
            Delegating handlers factories
            </summary>
        </member>
        <member name="T:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2">
            <summary>
            Builder options available at both common and proper level for extended registrations
            </summary>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithBaseAddress(System.Func{System.IServiceProvider,System.String})">
            <summary>
            Define your web api base address (could be defined with WebApiAttribute)
            </summary>
            <param name="baseAddressFactory">Your web api base address factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithBaseAddress(System.Func{System.IServiceProvider,System.Uri})">
            <summary>
            Define your web api base address (could be defined with WebApiAttribute)
            </summary>
            <param name="baseAddressFactory">Your web api base address factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithBasePath(System.Func{System.IServiceProvider,System.String})">
            <summary>
            Define your web api base path (could be defined with WebApiAttribute)
            </summary>
            <param name="basePathFactory">Your web api base path factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithLogging(System.Func{System.IServiceProvider,Apizr.Logging.HttpTracerMode},System.Func{System.IServiceProvider,Apizr.Logging.HttpMessageParts},System.Func{System.IServiceProvider,Microsoft.Extensions.Logging.LogLevel[]})">
            <summary>
            Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute)
            </summary>
            <param name="httpTracerModeFactory">Http traffic tracing mode factory</param>
            <param name="trafficVerbosityFactory">Http traffic tracing verbosity factory</param>
            <param name="logLevelsFactory">Log levels factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithLogging(System.Func{System.IServiceProvider,System.ValueTuple{Apizr.Logging.HttpTracerMode,Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[]}})">
            <summary>
            Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute)
            </summary>
            <param name="loggingConfigurationFactory">Logging configuration factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithHttpClientHandler(System.Func{System.IServiceProvider,System.Net.Http.HttpClientHandler})">
            <summary>
            Provide a custom HttpClientHandler
            </summary>
            <param name="httpClientHandlerFactory">An <see cref="T:System.Net.Http.HttpClientHandler"/> instance factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.ConfigureHttpClientBuilder(System.Action{Microsoft.Extensions.DependencyInjection.IHttpClientBuilder},Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Adjust some HttpClient settings
            </summary>
            <param name="httpClientBuilder">The HttpClient builder</param>
            <param name="strategy">The duplicate strategy if there's another one already (default: Merge)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithDelegatingHandler``1(System.Func{System.IServiceProvider,``0},Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Add a custom delegating handler inheriting from <see cref="T:System.Net.Http.DelegatingHandler"/> (serial call)
            </summary>
            <param name="delegatingHandlerFactory">A delegating handler factory</param>
            <param name="strategy">The duplicate strategy if there's any other already (default: Add)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithDelegatingHandler``1(System.Func{System.IServiceProvider,Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0},Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Add a custom delegating handler inheriting from <see cref="T:System.Net.Http.DelegatingHandler"/> (serial call)
            </summary>
            <param name="delegatingHandlerFactory">A delegating handler factory</param>
            <param name="strategy">The duplicate strategy if there's any other already (default: Add)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithHttpMessageHandler``1(System.Func{System.IServiceProvider,``0})">
            <summary>
            Add a custom http message handler inheriting from <see cref="T:System.Net.Http.HttpMessageHandler"/> (last call)
            </summary>
            <param name="httpMessageHandlerFactory">A http message handler factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithHttpMessageHandler``1(System.Func{System.IServiceProvider,Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0})">
            <summary>
            Add a custom http message handler inheriting from <see cref="T:System.Net.Http.HttpMessageHandler"/> (last call)
            </summary>
            <param name="httpMessageHandlerFactory">A http message handler factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithAuthenticationHandler``1(System.Func{System.IServiceProvider,Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0})">
            <summary>
            Provide your own <see cref="T:Apizr.Authenticating.AuthenticationHandlerBase"/> implementation
            </summary>
            <typeparam name="TAuthenticationHandler">Your <see cref="T:Apizr.Authenticating.AuthenticationHandlerBase"/> implementation</typeparam>
            <param name="authenticationHandlerFactory">A <typeparamref name="TAuthenticationHandler"/> instance factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithAuthenticationHandler``2(System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.String}}})">
            <summary>
            Provide your own settings management and token management services
            </summary>
            <typeparam name="TSettingsService">Your settings management service (saving/getting token)</typeparam>
            <typeparam name="TTokenService">Your token management service (refreshing token)</typeparam>
            <param name="tokenProperty">The token property used for saving</param>
            <param name="refreshTokenMethod">The method called to refresh the token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithAuthenticationHandler``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <summary>
            Provide your own settings management service with its token property
            </summary>
            <typeparam name="TSettingsService">Your settings management service (getting token)</typeparam>
            <param name="tokenProperty">The token property to get from</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithAuthenticationHandler``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Func{System.Net.Http.HttpRequestMessage,System.Threading.Tasks.Task{System.String}})">
            <summary>
            Provide your own settings management service and a method to refresh the token
            </summary>
            <typeparam name="TSettingsService">Your settings management service (saving/getting token)</typeparam>
            <param name="tokenProperty">The token property used for saving</param>
            <param name="refreshTokenFactory">The method factory called to refresh the token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithHeaders(System.Func{System.IServiceProvider,System.Collections.Generic.IList{System.String}},Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrLifetimeScope,Apizr.Configuring.ApizrRegistrationMode)">
            <summary>
            Add some headers to the request
            </summary>
            <param name="headersFactory">Headers to add to the request</param>
            <param name="strategy">The duplicate strategy if there's another one already (default: Add)</param>
            <param name="scope">Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh)</param>
            <param name="mode">Set headers right the way or store it for further attribute key match use (default: Set)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithHeaders``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}}[],Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrLifetimeScope,Apizr.Configuring.ApizrRegistrationMode)">
            <summary>
            Add some headers to the request loaded from service properties
            </summary>
            <typeparam name="TSettingsService">Your settings management service (getting headers)</typeparam>
            <param name="headerProperties">The header properties to get from</param>
            <param name="strategy">The duplicate strategy if there's another one already (default: Add)</param>
            <param name="scope">Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh)</param>
            <param name="mode">Set headers right the way or store it for further attribute key match use (default: Set)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithOperationTimeout(System.Func{System.IServiceProvider,System.TimeSpan})">
            <summary>
            Set a timeout to the operation (overall request tries)
            </summary>
            <param name="timeoutFactory">The operation timeout factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithRequestTimeout(System.Func{System.IServiceProvider,System.TimeSpan})">
            <summary>
            Set a timeout to the request (each request try)
            </summary>
            <param name="timeoutFactory">The request timeout factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder`2.WithResilienceProperty``1(Polly.ResiliencePropertyKey{``0},System.Func{System.IServiceProvider,``0})">
            <summary>
            Set some resilience properties to the resilience context
            </summary>
            <param name="key">The resilience property's key</param>
            <param name="valueFactory">The resilience property's value factory</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.ServiceCollectionExtensions">
            <summary>
            Apizr service collection extensions
            </summary>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizr(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder},System.Action{Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder})">
            <summary>
            Create a registry with all managers built with both common and proper options
            </summary>
            <param name="services">The service collection</param>
            <param name="registryBuilder">The registry builder with access to proper options</param>
            <param name="optionsBuilder">The common options shared by all managers</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <typeparamref name="T"/> object type (class),
            with key of type <see cref="T:System.Int32"/> and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <typeparam name="T">The object type to manage with crud api calls</typeparam>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <typeparamref name="T"/> object type (class), 
            with key of type <typeparamref name="TKey"/> and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <typeparam name="T">The object type to manage with crud api calls</typeparam>
            <typeparam name="TKey">The object key type</typeparam>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``3(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <typeparamref name="T"/> object type (class), 
            with key of type <typeparamref name="TKey"/> and "ReadAll" query result of type <typeparamref name="TReadAllResult"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``4(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <typeparamref name="T"/> object type (class), 
            with key of type <typeparamref name="TKey"/> and "ReadAll" query result of type <typeparamref name="TReadAllResult"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters</typeparam>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor``5(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for <typeparamref name="T"/> object type, 
            with key of type <typeparamref name="TKey"/> and "ReadAll" query result of type <typeparamref name="TReadAllResult"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <typeparam name="T">The object type to manage with crud api calls</typeparam>
            <typeparam name="TKey">The object key type</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters</typeparam>
            <typeparam name="TApizrManager">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation</typeparam>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <paramref name="apiEntityType"/> object type (class), 
            with key of type <see cref="T:System.Int32"/> and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <param name="services">The service collection</param>
            <param name="apiEntityType">The object type to manage with crud api calls (class)</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <paramref name="apiEntityType"/> object type (class), 
            with key of type <paramref name="apiEntityKeyType"/> and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="services">The service collection</param>
            <param name="apiEntityType">The object type to manage with crud api calls (class)</param>
            <param name="apiEntityKeyType">The object key type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <paramref name="apiEntityType"/> object type (class), 
            with key of type <paramref name="apiEntityKeyType"/> and "ReadAll" query result of type <paramref name="apiEntityReadAllResultType"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <param name="services">The service collection</param>
            <param name="apiEntityType">The object type to manage with crud api calls (class)</param>
            <param name="apiEntityKeyType">The object key type</param>
            <param name="apiEntityReadAllResultType">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for <paramref name="apiEntityType"/> object type (class), 
            with key of type <paramref name="apiEntityKeyType"/> and "ReadAll" query result of type <paramref name="apiEntityReadAllResultType"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <param name="services">The service collection</param>
            <param name="apiEntityType">The object type to manage with crud api calls (class)</param>
            <param name="apiEntityKeyType">The object key type</param>
            <param name="apiEntityReadAllResultType">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</param>
            <param name="apiEntityReadAllParamsType">ReadAll query parameters type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Type,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for <paramref name="apiEntityType"/> object type (class), 
            with key of type <paramref name="apiEntityKeyType"/> and "ReadAll" query result of type <paramref name="apiEntityReadAllResultType"/>
            (inheriting from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <param name="services">The service collection</param>
            <param name="apiEntityType">The object type to manage with crud api calls</param>
            <param name="apiEntityKeyType">The object key type</param>
            <param name="apiEntityReadAllResultType">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</param>
            <param name="apiEntityReadAllParamsType">ReadAll query parameters type</param>
            <param name="apizrManagerImplementationType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type[],System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="!:CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="!:CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[],System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="!:CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblies">Any assembly to scan for <see cref="!:CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type[],System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="!:CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="services">The service collection</param>
            <param name="apizrManagerImplementationType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="!:CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrCrudManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Reflection.Assembly[],System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="!:CrudEntityAttribute"/> decorated classes
            </summary>
            <param name="services">The service collection</param>
            <param name="apizrManagerImplementationType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblies">Any assembly to scan for <see cref="!:CrudEntityAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/>
            </summary>
            <typeparam name="TWebApi">The web api interface to manage</typeparam>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/>
            </summary>
            <typeparam name="TWebApi">The web api interface to manage</typeparam>
            <typeparam name="TApizrManager">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation</typeparam>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register <see cref="T:Apizr.IApizrManager`1"/>
            </summary>
            <param name="services">The service collection</param>
            <param name="webApiType">The web api interface type to manage</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type[],System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register a <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Configuring.BaseAddressAttribute"/> decorated interfaces
            </summary>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="T:Apizr.Configuring.BaseAddressAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[],System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register a <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Configuring.BaseAddressAttribute"/> decorated interfaces
            </summary>
            <param name="services">The service collection</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblies">Any assembly to scan for <see cref="T:Apizr.Configuring.BaseAddressAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type[],System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Configuring.BaseAddressAttribute"/> decorated interfaces
            </summary>
            <param name="services">The service collection</param>
            <param name="apizrManagerImplementationType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblyMarkerTypes">Any type contained in assembly to scan for <see cref="T:Apizr.Configuring.BaseAddressAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Reflection.Assembly[],System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/> for each <see cref="T:Apizr.Configuring.BaseAddressAttribute"/> decorated interfaces
            </summary>
            <param name="services">The service collection</param>
            <param name="apizrManagerImplementationType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <param name="assemblies">Any assembly to scan for <see cref="T:Apizr.Configuring.BaseAddressAttribute"/></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.ServiceCollectionExtensions.AddApizrManagerFor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type,System.Action{Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder})">
            <summary>
            Register a custom <see cref="T:Apizr.IApizrManager`1"/>
            </summary>
            <param name="services">The service collection</param>
            <param name="webApiType">The web api interface type to manage</param>
            <param name="apizrManagerImplementationType">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation type</param>
            <param name="optionsBuilder">The builder defining specific Apizr options</param>
            <returns></returns>
        </member>
    </members>
</doc>
