<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Apizr</name>
    </assembly>
    <members>
        <member name="T:Apizr.ApizrBuilder">
            <summary>
            The builder
            </summary>
        </member>
        <member name="P:Apizr.ApizrBuilder.Current">
            <summary>
            Current Apizr builder instance
            </summary>
        </member>
        <member name="M:Apizr.ApizrBuilder.CreateRegistry(System.Action{Apizr.Configuring.Registry.IApizrRegistryBuilder},System.Action{Apizr.Configuring.Common.IApizrCommonOptionsBuilder})">
            <inheritdoc/>
        </member>
        <member name="M:Apizr.ApizrBuilder.CreateCrudManagerFor``1(System.Action{Apizr.Configuring.Manager.IApizrManagerOptionsBuilder})">
            <inheritdoc/>
        </member>
        <member name="M:Apizr.ApizrBuilder.CreateCrudManagerFor``2(System.Action{Apizr.Configuring.Manager.IApizrManagerOptionsBuilder})">
            <inheritdoc/>
        </member>
        <member name="M:Apizr.ApizrBuilder.CreateCrudManagerFor``3(System.Action{Apizr.Configuring.Manager.IApizrManagerOptionsBuilder})">
            <inheritdoc/>
        </member>
        <member name="M:Apizr.ApizrBuilder.CreateCrudManagerFor``4(System.Action{Apizr.Configuring.Manager.IApizrManagerOptionsBuilder})">
            <inheritdoc/>
        </member>
        <member name="M:Apizr.ApizrBuilder.CreateCrudManagerFor``5(System.Func{Apizr.ILazyFactory{Apizr.Requesting.ICrudApi{``0,``1,``2,``3}},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Apizr.ILazyFactory{Polly.Registry.ResiliencePipelineRegistry{System.String}},Apizr.Configuring.Manager.IApizrManagerOptions{Apizr.Requesting.ICrudApi{``0,``1,``2,``3}},``4},System.Action{Apizr.Configuring.Manager.IApizrManagerOptionsBuilder})">
            <inheritdoc/>
        </member>
        <member name="M:Apizr.ApizrBuilder.CreateManagerFor``1(System.Action{Apizr.Configuring.Manager.IApizrManagerOptionsBuilder})">
            <inheritdoc/>
        </member>
        <member name="M:Apizr.ApizrBuilder.CreateManagerFor``2(System.Func{Apizr.ILazyFactory{``0},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Apizr.ILazyFactory{Polly.Registry.ResiliencePipelineRegistry{System.String}},Apizr.Configuring.Manager.IApizrManagerOptions{``0},``1},System.Action{Apizr.Configuring.Manager.IApizrManagerOptionsBuilder})">
            <inheritdoc/>
        </member>
        <member name="T:Apizr.ApizrException">
            <summary>
            An exception with optional cached object
            </summary>
        </member>
        <member name="P:Apizr.ApizrException.Handled">
            <summary>
            Indicates whether the exception has been handled yet by callback thanks to WithExCatching option.
            </summary>
        </member>
        <member name="T:Apizr.ApizrException`1">
            <summary>
            An exception with optional cached <typeparamref name="TResult"/>
            </summary>
        </member>
        <member name="M:Apizr.ApizrExceptionHandler.HandleAsync(Apizr.ApizrException)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.ApizrManager`1">
            <summary>
            The manager
            </summary>
        </member>
        <member name="M:Apizr.ApizrManager`1.#ctor(Apizr.ILazyFactory{`0},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Apizr.ILazyFactory{Polly.Registry.ResiliencePipelineRegistry{System.String}},Apizr.Configuring.Manager.IApizrManagerOptions{`0})">
            <summary>
            Apizr manager constructor
            </summary>
            <param name="lazyWebApi">The managed web api</param>
            <param name="connectivityHandler">The connectivity handler</param>
            <param name="cacheHandler">The cache handler</param>
            <param name="mappingHandler">The mapping handler</param>
            <param name="lazyResiliencePipelineRegistry">The resilience pipeline registry</param>
            <param name="apizrOptions">The web api dedicated options</param>
        </member>
        <member name="P:Apizr.ApizrManager`1.Api">
            <inheritdoc />
        </member>
        <member name="P:Apizr.ApizrManager`1.Options">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``1,System.Threading.Tasks.Task}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{Refit.IApiResponse}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{Refit.ApiResponse{``0}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{Refit.IApiResponse{``0}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{Refit.IApiResponse}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``1(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{``0}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``1(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{Refit.ApiResponse{``0}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``1(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{Refit.IApiResponse{``0}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{Refit.ApiResponse{``1}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{Refit.IApiResponse{``1}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{Refit.ApiResponse{``1}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{Refit.IApiResponse{``1}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task{Refit.IApiResponse}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task{``1}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task{Refit.ApiResponse{``1}}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task{Refit.IApiResponse{``1}}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``1,System.Threading.Tasks.Task{Refit.IApiResponse}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``1,System.Threading.Tasks.Task{``1}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``1,System.Threading.Tasks.Task{Refit.ApiResponse{``1}}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``1,System.Threading.Tasks.Task{Refit.IApiResponse{``1}}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``4(System.Linq.Expressions.Expression{System.Func{`0,``2,System.Threading.Tasks.Task{``1}}},``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``4(System.Linq.Expressions.Expression{System.Func{`0,``2,System.Threading.Tasks.Task{Refit.ApiResponse{``1}}}},``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``4(System.Linq.Expressions.Expression{System.Func{`0,``2,System.Threading.Tasks.Task{Refit.IApiResponse{``1}}}},``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``4(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``2,System.Threading.Tasks.Task{``1}}},``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``4(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``2,System.Threading.Tasks.Task{Refit.ApiResponse{``1}}}},``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ExecuteAsync``4(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``2,System.Threading.Tasks.Task{Refit.IApiResponse{``1}}}},``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ClearCacheAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ClearCacheAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ClearCacheAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{Refit.ApiResponse{``0}}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrManager`1.ClearCacheAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{Refit.IApiResponse{``0}}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.ApizrResponse">
            <inheritdoc />
        </member>
        <member name="P:Apizr.ApizrResponse.IsSuccess">
            <inheritdoc />
        </member>
        <member name="P:Apizr.ApizrResponse.ApiResponse">
            <inheritdoc />
        </member>
        <member name="P:Apizr.ApizrResponse.Exception">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrResponse.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Apizr.ApizrResponse`1">
            <inheritdoc cref="T:Apizr.IApizrResponse`1" />
        </member>
        <member name="M:Apizr.ApizrResponse`1.#ctor(Refit.IApiResponse,`0,Apizr.ApizrResponseDataSource)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.ApizrResponse`1.#ctor(Refit.IApiResponse,Apizr.ApizrException{`0})">
            <inheritdoc />
        </member>
        <member name="P:Apizr.ApizrResponse`1.Result">
            <inheritdoc />
        </member>
        <member name="P:Apizr.ApizrResponse`1.DataSource">
            <inheritdoc />
        </member>
        <member name="T:Apizr.ApizrResponseExtensions">
            <summary>
            ApizrResponse extensions methods
            </summary>
        </member>
        <member name="M:Apizr.ApizrResponseExtensions.EnsureSuccessStatusCode(Apizr.IApizrResponse)">
            <summary>
            Ensures the request was successful by throwing an exception in case of failure
            </summary>
            <returns>The current <see cref="T:Apizr.IApizrResponse"/></returns>
            <exception cref="T:Apizr.ApizrException"></exception>
        </member>
        <member name="M:Apizr.ApizrResponseExtensions.EnsureSuccessStatusCode``1(Apizr.IApizrResponse{``0})">
            <summary>
            Ensures the request was successful by throwing an exception in case of failure
            </summary>
            <returns>The current <see cref="T:Apizr.IApizrResponse`1"/> with optional cached <typeparamref name="T"/> data</returns>
            <exception cref="T:Apizr.ApizrException"></exception>
        </member>
        <member name="T:Apizr.Authenticating.AuthenticationHandler">
            <summary>
            The authentication handler implementation refreshing token
            </summary>
        </member>
        <member name="M:Apizr.Authenticating.AuthenticationHandler.#ctor(Apizr.Configuring.Manager.IApizrManagerOptionsBase,System.Func{System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}})">
            <summary>
            The authentication handler constructor
            </summary>
            <param name="apizrOptions">The Apizr options</param>
            <param name="getTokenFactory">The get token factory</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Apizr.Authenticating.AuthenticationHandler.#ctor(Apizr.Configuring.Manager.IApizrManagerOptionsBase,System.Func{System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}},System.Func{System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            The authentication handler constructor
            </summary>
            <param name="apizrOptions">The Apizr options</param>
            <param name="getTokenFactory">The get token factory</param>
            <param name="setTokenFactory">The set token factory</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Apizr.Authenticating.AuthenticationHandler.#ctor(Apizr.Configuring.Manager.IApizrManagerOptionsBase,System.Func{System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}})">
            <summary>
            The authentication handler constructor
            </summary>
            <param name="apizrOptions">The Apizr options</param>
            <param name="refreshTokenFactory">The refresh token factory</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Apizr.Authenticating.AuthenticationHandler.#ctor(Apizr.Configuring.Manager.IApizrManagerOptionsBase,System.Func{System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}},System.Func{System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}})">
            <summary>
            The authentication handler constructor
            </summary>
            <param name="apizrOptions">The Apizr options</param>
            <param name="refreshTokenFactory">The refresh token factory</param>
            <param name="getTokenFactory">The get token factory</param>
            <param name="setTokenFactory">The set token factory</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Apizr.Authenticating.AuthenticationHandler.GetTokenAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <param name="request"></param>
            <param name="ct"></param>
            <inheritdoc />
        </member>
        <member name="M:Apizr.Authenticating.AuthenticationHandler.SetTokenAsync(System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Authenticating.AuthenticationHandler.RefreshTokenAsync(System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Authenticating.AuthenticationHandlerBase">
            <summary>
            The authentication handler base implementation
            </summary>
        </member>
        <member name="M:Apizr.Authenticating.AuthenticationHandlerBase.#ctor(Apizr.Configuring.Manager.IApizrManagerOptionsBase)">
            <summary>
            The authentication handler constructor
            </summary>
            <param name="apizrOptions">The Apizr options</param>
        </member>
        <member name="M:Apizr.Authenticating.AuthenticationHandlerBase.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Apizr.Authenticating.AuthenticationHandlerBase.GetTokenAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Authenticating.AuthenticationHandlerBase.SetTokenAsync(System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Authenticating.AuthenticationHandlerBase.RefreshTokenAsync(System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Authenticating.AuthenticationHandlerBase.CloneHttpRequestMessageAsync(System.Net.Http.HttpRequestMessage)">
            <summary>
            Clone a HttpRequestMessage
            </summary>
            <param name="request">The request</param>
            <returns>A copy of the request</returns>
        </member>
        <member name="T:Apizr.Authenticating.IAuthenticationHandler">
            <summary>
            The authentication handler definition
            </summary>
        </member>
        <member name="M:Apizr.Authenticating.IAuthenticationHandler.GetTokenAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            The method called to get local token
            </summary>
            <param name="request">The request to authenticate</param>
            <param name="ct">The cancellation token</param>
            <returns>The saved token</returns>
        </member>
        <member name="M:Apizr.Authenticating.IAuthenticationHandler.SetTokenAsync(System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken)">
            <summary>
            The method called to set local token
            </summary>
            <param name="request">The request to authenticate</param>
            <param name="token">The token to save</param>
            <param name="ct">The cancellation token</param>
        </member>
        <member name="M:Apizr.Authenticating.IAuthenticationHandler.RefreshTokenAsync(System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken)">
            <summary>
            The method called to refresh token when rejected or empty
            </summary>
            <param name="request">The request to authenticate</param>
            <param name="token">The former token</param>
            <param name="ct">The cancellation token</param>
            <returns>The refreshed token</returns>
        </member>
        <member name="T:Apizr.AutoRegisterAttribute">
            <summary>
            Tells Apizr to auto register a Manager for the provided api (works only with IServiceCollection extensions registration)
            </summary>
        </member>
        <member name="M:Apizr.AutoRegisterAttribute.#ctor(System.String)">
            <summary>
            Auto register a manager for the decorated api or crud entity
            </summary>
            <param name="baseAddressOrPath">The web api base absolute address or relative path</param>
        </member>
        <member name="M:Apizr.AutoRegisterAttribute.#ctor(System.Type,System.String)">
            <summary>
            Auto register a manager for the provided api
            </summary>
            <param name="webApiType">The web api interface type to manage</param>
            <param name="baseAddressOrPath">The web api base absolute address or relative path</param>
        </member>
        <member name="T:Apizr.Caching.Attributes.CacheAttribute">
            <summary>
            Tells Apizr to cache all methods returning result when decorating an interface or a specific one when decorating a method
            You have to provide an <see cref="T:Apizr.Caching.ICacheHandler"/> mapping implementation to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttribute.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttribute.#ctor(Apizr.Caching.CacheMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttribute.#ctor(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttribute.#ctor(Apizr.Caching.CacheMode,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttribute.#ctor(Apizr.Caching.CacheMode,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttribute.#ctor(System.TimeSpan,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttribute.#ctor(Apizr.Caching.CacheMode,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Caching.Attributes.CacheAttributeBase">
            <summary>
            Tells Apizr to cache all methods returning result when decorating an interface or a specific one when decorating a method
            You have to provide an <see cref="T:Apizr.Caching.ICacheHandler"/> mapping implementation to Apizr to use this feature
            </summary>
        </member>
        <member name="P:Apizr.Caching.Attributes.CacheAttributeBase.LifeSpan">
            <summary>
            This specific caching lifetime
            </summary>
        </member>
        <member name="P:Apizr.Caching.Attributes.CacheAttributeBase.Mode">
            <summary>
            Define the caching behaviour (default: FetchOrGet = api data first otherwise cache)
            </summary>
        </member>
        <member name="P:Apizr.Caching.Attributes.CacheAttributeBase.ShouldInvalidateOnError">
            <summary>
            Tells Apizr to remove the cache on error
            </summary>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttributeBase.#ctor">
            <summary>
            Cache with no specific lifetime, default FetchOrGet mode and no invalidation on error
            </summary>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttributeBase.#ctor(Apizr.Caching.CacheMode)">
            <summary>
            Cache with no specific lifetime, no invalidation on error but a specific cache mode
            </summary>
            <param name="mode">FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one</param>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttributeBase.#ctor(System.String)">
            <summary>
            Cache with default FetchOrGet mode, no invalidation on error but with a specific lifetime
            </summary>
            <param name="lifeSpanRepresentation">TimeSpan representation to parse</param>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttributeBase.#ctor(System.Boolean)">
            <summary>
            Cache with no specific lifetime, default FetchOrGet mode but with or without invalidation on error
            </summary>
            <param name="shouldInvalidateOnError">Should invalidate on error</param>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttributeBase.#ctor(Apizr.Caching.CacheMode,System.String)">
            <summary>
            Cache with a specific cache and mode specific lifetime, but no invalidation on error
            </summary>
            <param name="mode">FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one</param>
            <param name="lifeSpanRepresentation">TimeSpan representation to parse</param>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttributeBase.#ctor(Apizr.Caching.CacheMode,System.Boolean)">
            <summary>
            Cache with a specific cache and invalidation on error, but no specific lifetime
            </summary>
            <param name="mode">FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one</param>
            <param name="shouldInvalidateOnError">Should invalidate on error</param>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttributeBase.#ctor(System.TimeSpan,System.Boolean)">
            <summary>
            Cache with a specific lifetime and invalidation on error, but default FetchOrGet mode
            </summary>
            <param name="lifeSpan">This specific caching lifetime</param>
            <param name="shouldInvalidateOnError">Should invalidate on error</param>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheAttributeBase.#ctor(Apizr.Caching.CacheMode,System.String,System.Boolean)">
            <summary>
            Cache with a specific cache mode, a specific lifetime and invalidation on error
            </summary>
            <param name="mode">FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one</param>
            <param name="lifeSpanRepresentation">This specific caching lifetime</param>
            <param name="shouldInvalidateOnError">Should invalidate on error</param>
        </member>
        <member name="T:Apizr.Caching.Attributes.CacheKeyAttribute">
            <summary>
            The decorated parameter will be used as cache key
            </summary>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheKeyAttribute.#ctor">
            <summary>
            The decorated parameter will be used as cache key
            </summary>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheKeyAttribute.#ctor(System.String[])">
            <summary>
            If you decorate a complex type as cache key, you may want to provide 
            its properties to include by name or to override its ToString() method.
            Otherwise, Apizr will take all its non-null properties.
            </summary>
            <param name="propertyNames">Properties to include as cache key (default: all non-null properties).</param>
        </member>
        <member name="P:Apizr.Caching.Attributes.CacheKeyAttribute.PropertyNames">
            <summary>
            Properties of to include as cache key (default: all non-null properties).
            </summary>
        </member>
        <member name="T:Apizr.Caching.Attributes.CacheReadAllAttribute">
            <summary>
            Tells Apizr to cache ReadAll method
            You have to provide an <see cref="T:Apizr.Caching.ICacheHandler"/> mapping implementation to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheReadAllAttribute.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheReadAllAttribute.#ctor(Apizr.Caching.CacheMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheReadAllAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheReadAllAttribute.#ctor(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheReadAllAttribute.#ctor(Apizr.Caching.CacheMode,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheReadAllAttribute.#ctor(Apizr.Caching.CacheMode,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheReadAllAttribute.#ctor(System.TimeSpan,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheReadAllAttribute.#ctor(Apizr.Caching.CacheMode,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Caching.Attributes.CacheReadAttribute">
            <summary>
            Tells Apizr to cache Read method
            You have to provide an <see cref="T:Apizr.Caching.ICacheHandler"/> mapping implementation to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheReadAttribute.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheReadAttribute.#ctor(Apizr.Caching.CacheMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheReadAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheReadAttribute.#ctor(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheReadAttribute.#ctor(Apizr.Caching.CacheMode,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheReadAttribute.#ctor(Apizr.Caching.CacheMode,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheReadAttribute.#ctor(System.TimeSpan,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.Attributes.CacheReadAttribute.#ctor(Apizr.Caching.CacheMode,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Caching.CacheMode">
            <summary>
            Define the caching behaviour
            </summary>
        </member>
        <member name="F:Apizr.Caching.CacheMode.None">
            <summary>
            Returns fresh data when request succeed (api data only)
            </summary>
        </member>
        <member name="F:Apizr.Caching.CacheMode.FetchOrGet">
            <summary>
            Returns fresh data when request succeed otherwise cached one if exist (api data first)
            </summary>
        </member>
        <member name="F:Apizr.Caching.CacheMode.GetOrFetch">
            <summary>
            Returns cached data if we get some otherwise fresh one if request succeed (cache data first)
            </summary>
        </member>
        <member name="F:Apizr.Caching.CacheMode.SetByHeader">
            <summary>
            <para>Relies on one of the following response header presence, ordered by precedence (otherwise None):</para>
            <para>1. Cache-Control (GetOrFetch): Controls how Apizr should cache the data (e.g., max-age, no-store, immutable, etc.).</para>
            <para>2. Expires (GetOrFetch): Specifies a date after which Apizr should fetch api data again.</para>
            <para>3. ETag (FetchOrGet): Ask Apizr to use the If-None-Match header to check if the data has been modified and handle any 304 Not Modified response.</para>
            <para>4. Last-Modified (FetchOrGet): Ask Apizr to use the If-Modified-Since header to check if the resource has been modified and handle any 304 Not Modified response.</para>
            </summary>
            <remarks>REQUIRED: Works only with <see cref="T:Refit.IApiResponse`1"/> result while designing api interface</remarks>
        </member>
        <member name="T:Apizr.Caching.ICacheHandler">
            <summary>
            The cache handler method mapping interface
            Implement it to provide some caching features to Apizr
            </summary>
        </member>
        <member name="M:Apizr.Caching.ICacheHandler.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Map Apizr cache saving method to your cache handler method
            </summary>
            <param name="key">The key to cache at</param>
            <param name="value">The value to cache</param>
            <param name="lifeSpan">The optional life span</param>
            <param name="cancellationToken">An optional cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Caching.ICacheHandler.GetAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Map Apizr cache getting method to your cache handler method
            </summary>
            <typeparam name="T">The expected value type</typeparam>
            <param name="key">The key to get from</param>
            <param name="cancellationToken">An optional cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Caching.ICacheHandler.RemoveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Map Apizr cache removing method to your cache handler method
            </summary>
            <param name="key">The key to remove from</param>
            <param name="cancellationToken">An optional cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Caching.ICacheHandler.ClearAsync(System.Threading.CancellationToken)">
            <summary>
            Map Apizr cache clearing method to your cache handler method
            </summary>
            <param name="cancellationToken">An optional cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Caching.VoidCacheHandler">
            <summary>
            The cache handler method mapping void implementation
            </summary>
        </member>
        <member name="M:Apizr.Caching.VoidCacheHandler.GetAsync``1(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.VoidCacheHandler.SetAsync(System.String,System.Object,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.VoidCacheHandler.ClearAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Caching.VoidCacheHandler.RemoveAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Cancelling.Attributes.Operation.CreateOperationTimeoutAttribute">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Cancelling.Attributes.Operation.CreateOperationTimeoutAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Cancelling.Attributes.Operation.DeleteOperationTimeoutAttribute">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Cancelling.Attributes.Operation.DeleteOperationTimeoutAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Cancelling.Attributes.Operation.OperationTimeoutAttribute">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Cancelling.Attributes.Operation.OperationTimeoutAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Cancelling.Attributes.Operation.ReadAllOperationTimeoutAttribute">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Cancelling.Attributes.Operation.ReadAllOperationTimeoutAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Cancelling.Attributes.Operation.ReadOperationTimeoutAttribute">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Cancelling.Attributes.Operation.ReadOperationTimeoutAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Cancelling.Attributes.Operation.UpdateOperationTimeoutAttribute">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Cancelling.Attributes.Operation.UpdateOperationTimeoutAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Cancelling.Attributes.Request.CreateRequestTimeoutAttribute">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Cancelling.Attributes.Request.CreateRequestTimeoutAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Cancelling.Attributes.Request.DeleteRequestTimeoutAttribute">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Cancelling.Attributes.Request.DeleteRequestTimeoutAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Cancelling.Attributes.Request.ReadAllRequestTimeoutAttribute">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Cancelling.Attributes.Request.ReadAllRequestTimeoutAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Cancelling.Attributes.Request.ReadRequestTimeoutAttribute">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Cancelling.Attributes.Request.ReadRequestTimeoutAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Cancelling.Attributes.Request.RequestTimeoutAttribute">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Cancelling.Attributes.Request.RequestTimeoutAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Cancelling.Attributes.Request.UpdateRequestTimeoutAttribute">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Cancelling.Attributes.Request.UpdateRequestTimeoutAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Cancelling.Attributes.TimeoutAttributeBase">
            <summary>
            Tells Apizr to set a timeout to the request
            </summary>
        </member>
        <member name="P:Apizr.Cancelling.Attributes.TimeoutAttributeBase.Timeout">
            <summary>
            This request timeout
            </summary>
        </member>
        <member name="M:Apizr.Cancelling.Attributes.TimeoutAttributeBase.#ctor(System.String)">
            <summary>
            Request times out after a specific duration
            </summary>
            <param name="timeoutRepresentation">TimeSpan representation to parse</param>
        </member>
        <member name="T:Apizr.Configuring.ApizrDuplicateStrategy">
            <summary>
            Duplicate strategy about options registration
            </summary>
        </member>
        <member name="F:Apizr.Configuring.ApizrLifetimeScope.Api">
            <summary>
            Set once for all api requests (static values)
            </summary>
        </member>
        <member name="F:Apizr.Configuring.ApizrLifetimeScope.Request">
            <summary>
            Refresh values for each api request (dynamic values)
            </summary>
        </member>
        <member name="M:Apizr.Configuring.ApizrRequestMethod.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.ApizrRequestMethod.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.BaseAddressAttribute">
            <summary>
            Set a base absolute address or relative path (could be defined with options builder)
            </summary>
        </member>
        <member name="M:Apizr.Configuring.BaseAddressAttribute.#ctor(System.String)">
            <summary>
            Set a base absolute address or relative path (if path, base address has to be defined fluently)
            </summary>
            <param name="baseAddressOrPath">The web api base absolute address or relative path</param>
        </member>
        <member name="P:Apizr.Configuring.BaseAddressAttribute.BaseAddressOrPath">
            <summary>
            The web api base absolute address or relative path
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Common.ApizrCommonOptions">
            <inheritdoc cref="T:Apizr.Configuring.Common.IApizrCommonOptions"/>
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptions.#ctor(Apizr.Configuring.Common.IApizrCommonOptions)">
            <summary>
            The Apizr common options constructor
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptions.BaseUriFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptions.BaseAddressFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptions.BasePathFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptions.LoggerFactoryFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptions.ResiliencePipelineRegistryFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptions.HttpClientHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptions.HttpClientConfigurationBuilder">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptions.RefitSettingsFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptions.ConnectivityHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptions.CacheHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptions.MappingHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptions.DelegatingHandlersFactories">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptions.HttpMessageHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptions.OperationTimeoutFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptions.RequestTimeoutFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptions.HttpTracerModeFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptions.TrafficVerbosityFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptions.LogLevelsFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptions.ExceptionHandlersFactory">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.Common.ApizrCommonOptionsBase">
            <inheritdoc cref="T:Apizr.Configuring.Common.IApizrCommonOptionsBase" />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBase.#ctor(Apizr.Configuring.Common.IApizrCommonOptionsBase)">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptionsBase.RefitSettings">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptionsBase.ApizrConfigurationSection">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.Common.ApizrCommonOptionsBuilder">
            <summary>
            Builder options available at common level for static registrations
            </summary>
        </member>
        <member name="F:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.Options">
            <summary>
            The common options
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.Apizr#Configuring#Common#IApizrCommonOptionsBuilder#ApizrOptions">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithConfiguration(Microsoft.Extensions.Configuration.IConfiguration)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithConfiguration(Microsoft.Extensions.Configuration.IConfigurationSection)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithBaseAddress(System.String,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithBaseAddress(System.Func{System.String},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithBaseAddress(System.Uri,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithBaseAddress(System.Func{System.Uri},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithBasePath(System.String,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithBasePath(System.Func{System.String},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithHttpClientHandler(System.Net.Http.HttpClientHandler)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithHttpClientHandler(System.Func{System.Net.Http.HttpClientHandler})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.ConfigureHttpClient(System.Action{System.Net.Http.HttpClient},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithAuthenticationHandler``1(System.Func{Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithAuthenticationHandler(System.Func{System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithAuthenticationHandler(System.Func{System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}},System.Func{System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithAuthenticationHandler(System.Func{System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithAuthenticationHandler(System.Func{System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}},System.Func{System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithAuthenticationHandler``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}},``1,System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithAuthenticationHandler``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}},``1,System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithAuthenticationHandler``2(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}},System.Func{``1},System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithAuthenticationHandler``2(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Func{``1},System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithDelegatingHandler``1(``0,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithDelegatingHandler``1(System.Func{Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithHttpMessageHandler``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithHttpMessageHandler``1(System.Func{Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithResiliencePipelineRegistry(Polly.Registry.ResiliencePipelineRegistry{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithResiliencePipelineRegistry(System.Func{Polly.Registry.ResiliencePipelineRegistry{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithRefitSettings(Refit.RefitSettings)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithRefitSettings(System.Func{Refit.RefitSettings})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithConnectivityHandler(Apizr.Connecting.IConnectivityHandler)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithConnectivityHandler(System.Func{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithConnectivityHandler(System.Func{Apizr.Connecting.IConnectivityHandler})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithCacheHandler(Apizr.Caching.ICacheHandler)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithCacheHandler(System.Func{Apizr.Caching.ICacheHandler})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithExCatching(System.Action{Apizr.ApizrException},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithExCatching``1(System.Action{Apizr.ApizrException{``0}},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithExCatching(System.Func{Apizr.ApizrException,System.Boolean},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithExCatching``1(System.Func{Apizr.ApizrException{``0},System.Boolean},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithExCatching(System.Func{Apizr.ApizrException,System.Threading.Tasks.Task{System.Boolean}},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithExCatching``1(``0,System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithExCatching``1(System.Func{Apizr.ApizrException{``0},System.Threading.Tasks.Task{System.Boolean}},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithExCatching``1(System.Func{``0},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithHandlerParameter(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithLogging(Apizr.Logging.HttpTracerMode,Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithLogging(System.Func{Apizr.Logging.HttpTracerMode},System.Func{Apizr.Logging.HttpMessageParts},System.Func{Microsoft.Extensions.Logging.LogLevel[]})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithLogging(System.Func{System.ValueTuple{Apizr.Logging.HttpTracerMode,Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[]}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithHeaders(System.Collections.Generic.IList{System.String},Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithHeaders(System.Func{System.Collections.Generic.IList{System.String}},Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrLifetimeScope,Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithHeaders``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}}[],Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrLifetimeScope,Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithHeaders``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}}[],Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrLifetimeScope,Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithOperationTimeout(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithOperationTimeout(System.Func{System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithRequestTimeout(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithRequestTimeout(System.Func{System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithResilienceProperty``1(Polly.ResiliencePropertyKey{``0},``0)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithResilienceProperty``1(Polly.ResiliencePropertyKey{``0},System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithLoggerFactory(Microsoft.Extensions.Logging.ILoggerFactory)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithLoggerFactory(System.Func{Microsoft.Extensions.Logging.ILoggerFactory})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithMappingHandler(Apizr.Mapping.IMappingHandler)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithMappingHandler(System.Func{Apizr.Mapping.IMappingHandler})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithResilienceContextOptions(System.Action{Apizr.Configuring.Shared.Context.IApizrResilienceContextOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithLoggedHeadersRedactionNames(System.Collections.Generic.IEnumerable{System.String},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithLoggedHeadersRedactionRule(System.Func{System.String,System.Boolean},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithResiliencePipelineKeys(System.String[],System.Collections.Generic.IEnumerable{Apizr.Configuring.ApizrRequestMethod},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.WithCaching(Apizr.Caching.CacheMode,System.Nullable{System.TimeSpan},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Common.ApizrCommonOptionsBuilder.Apizr#Configuring#Shared#IApizrInternalRegistrationOptionsBuilder#AddDelegatingHandler``1(System.Func{Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.Common.IApizrCommonOptions">
            <summary>
            Options available at common level for static registrations
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Common.IApizrCommonOptions.LoggerFactoryFactory">
            <summary>
            The LoggerFactory factory (I know, I know...)
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Common.IApizrCommonOptions.ResiliencePipelineRegistryFactory">
            <summary>
            Resilience pipeline registry factory
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Common.IApizrCommonOptions.RefitSettingsFactory">
            <summary>
            Refit settings factory
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Common.IApizrCommonOptions.ConnectivityHandlerFactory">
            <summary>
            Connectivity handler factory
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Common.IApizrCommonOptions.CacheHandlerFactory">
            <summary>
            Cache handler factory
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Common.IApizrCommonOptions.MappingHandlerFactory">
            <summary>
            Mapping handler factory
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Common.IApizrCommonOptionsBase">
            <summary>
            Options available at common level for both static and extended registrations
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Common.IApizrCommonOptionsBase.RefitSettings">
            <summary>
            Refit settings
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Common.IApizrCommonOptionsBase.ApizrConfigurationSection">
            <summary>
            Configuration section for Apizr
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Common.IApizrCommonOptionsBuilder`2">
            <summary>
            Builder options available at common level for static registrations
            </summary>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrCommonOptionsBuilder`2.WithResiliencePipelineRegistry(Polly.Registry.ResiliencePipelineRegistry{System.String})">
            <summary>
            Provide a resilience pipeline registry
            </summary>
            <param name="resiliencePipelineRegistry">A resilience pipeline registry instance</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrCommonOptionsBuilder`2.WithResiliencePipelineRegistry(System.Func{Polly.Registry.ResiliencePipelineRegistry{System.String}})">
            <summary>
            Provide a resilience pipeline registry
            </summary>
            <param name="resiliencePipelineRegistryFactory">A resilience pipeline registry instance factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrCommonOptionsBuilder`2.WithRefitSettings(System.Func{Refit.RefitSettings})">
            <summary>
            Provide some Refit specific settings
            </summary>
            <param name="refitSettingsFactory">A <see cref="T:Refit.RefitSettings"/> instance factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrCommonOptionsBuilder`2.WithConnectivityHandler(System.Func{Apizr.Connecting.IConnectivityHandler})">
            <summary>
            Provide a connectivity handler
            </summary>
            <param name="connectivityHandlerFactory">An <see cref="T:Apizr.Connecting.IConnectivityHandler"/> mapping implementation instance factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrCommonOptionsBuilder`2.WithCacheHandler(System.Func{Apizr.Caching.ICacheHandler})">
            <summary>
            Provide a cache handler to cache data
            </summary>
            <param name="cacheHandlerFactory">An <see cref="T:Apizr.Caching.ICacheHandler"/> mapping implementation instance factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrCommonOptionsBuilder`2.WithLoggerFactory(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Provide a logger factory
            </summary>
            <param name="loggerFactory">The logger factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrCommonOptionsBuilder`2.WithLoggerFactory(System.Func{Microsoft.Extensions.Logging.ILoggerFactory})">
            <summary>
            Provide a logger factory
            </summary>
            <param name="loggerFactory">The logger factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrCommonOptionsBuilder`2.WithMappingHandler(System.Func{Apizr.Mapping.IMappingHandler})">
            <summary>
            Provide a mapping handler to map entities
            </summary>
            <param name="mappingHandlerFactory">An <see cref="T:Apizr.Mapping.IMappingHandler"/> mapping implementation instance factory</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Configuring.Common.IApizrCommonOptionsBuilder">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.Common.IApizrCommonOptionsBuilderBase">
            <summary>
            Builder options available at common level for both static and extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Common.IApizrCommonOptionsBuilderBase`2">
            <summary>
            Builder options available at common level for both static and extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Common.IApizrExtendedCommonOptionsBuilderBase">
            <summary>
            Builder options available at common level for extended registration
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase">
            <summary>
            Builder options available at common level for both static and extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase`2">
            <summary>
            Builder options available at common level for both static and extended registrations
            </summary>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase`2.WithRefitSettings(Refit.RefitSettings)">
            <summary>
            Provide some Refit specific settings
            </summary>
            <param name="refitSettings">A <see cref="T:Refit.RefitSettings"/> instance</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase`2.WithConnectivityHandler(Apizr.Connecting.IConnectivityHandler)">
            <summary>
            Provide a connectivity handler to check connectivity before sending a request
            </summary>
            <param name="connectivityHandler">An <see cref="T:Apizr.Connecting.IConnectivityHandler"/> mapping implementation instance</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase`2.WithConnectivityHandler(System.Func{System.Boolean})">
            <summary>
            Provide a function to invoke while checking connectivity
            </summary>
            <param name="connectivityCheckingFunction">A function to invoke while checking connectivity</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase`2.WithCacheHandler(Apizr.Caching.ICacheHandler)">
            <summary>
            Provide a cache handler to cache data
            </summary>
            <param name="cacheHandler">An <see cref="T:Apizr.Caching.ICacheHandler"/> mapping implementation instance</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase`2.WithMappingHandler(Apizr.Mapping.IMappingHandler)">
            <summary>
            Provide a mapping handler to map entities
            </summary>
            <param name="mappingHandler">An <see cref="T:Apizr.Mapping.IMappingHandler"/> mapping implementation instance</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.CrudHandlerParameterAttribute.#ctor(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.ReadAllHandlerParameterAttribute.#ctor(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.ReadHandlerParameterAttribute.#ctor(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.CreateHandlerParameterAttribute.#ctor(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.UpdateHandlerParameterAttribute.#ctor(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.DeleteHandlerParameterAttribute.#ctor(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.Manager.ApizrManagerOptions">
            <inheritdoc cref="T:Apizr.Configuring.Manager.IApizrManagerOptions"/>
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptions.#ctor(Apizr.Configuring.Common.IApizrCommonOptions,Apizr.Configuring.Proper.IApizrProperOptions)">
            <summary>
            The options constructor
            </summary>
            <param name="commonOptions">The common options</param>
            <param name="properOptions">The proper options</param>
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions.BaseUriFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions.BaseAddressFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions.BasePathFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions.HttpTracerModeFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions.TrafficVerbosityFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions.LogLevelsFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions.LoggerFactoryFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions.LoggerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions.HttpClientHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions.HttpClientConfigurationBuilder">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions.ResiliencePipelineRegistryFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions.RefitSettingsFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions.ConnectivityHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions.CacheHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions.MappingHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions.DelegatingHandlersFactories">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions.HttpMessageHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions.OperationTimeoutFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions.RequestTimeoutFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions.ExceptionHandlersFactory">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.Manager.ApizrManagerOptions`1">
            <inheritdoc cref="T:Apizr.Configuring.Manager.IApizrManagerOptions`1"/>
        </member>
        <member name="F:Apizr.Configuring.Manager.ApizrManagerOptions`1.Options">
            <summary>
            The options
            </summary>
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptions`1.#ctor(Apizr.Configuring.Manager.IApizrManagerOptionsBase)">
            <summary>
            The options constructor
            </summary>
            <param name="apizrOptions">The base options</param>
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.WebApiType">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.CrudApiEntityType">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.TypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.RequestNames">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.IsCrudApi">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.BaseUri">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.BaseAddress">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.BasePath">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.PrimaryHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.HttpTracerMode">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.TrafficVerbosity">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.LogLevels">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.ExceptionHandlers">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.LetThrowOnHandledException">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.HandlersParameters">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.Headers">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.HeadersFactories">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.OperationTimeout">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.RequestTimeout">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.ShouldRedactHeaderValue">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.ResiliencePipelineOptions">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.CacheOptions">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.Apizr#Configuring#Shared#IApizrGlobalSharedOptionsBase#ContextOptionsBuilder">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.Apizr#Configuring#Shared#IApizrGlobalSharedOptionsBase#ResiliencePropertiesFactories">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.Logger">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.RequestOptionsBuilders">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.RefitSettings">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptions`1.ApizrConfigurationSection">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.Manager.ApizrManagerOptionsBase">
            <inheritdoc cref="T:Apizr.Configuring.Manager.IApizrManagerOptionsBase" />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBase.#ctor(Apizr.Configuring.Common.IApizrCommonOptionsBase,Apizr.Configuring.Proper.IApizrProperOptionsBase)">
            <summary>
            The options constructor
            </summary>
            <param name="commonOptions">The common options</param>
            <param name="properOptions">The proper options</param>
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptionsBase.WebApiType">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptionsBase.CrudApiEntityType">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptionsBase.TypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptionsBase.RequestNames">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptionsBase.IsCrudApi">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptionsBase.Logger">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptionsBase.RequestOptionsBuilders">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptionsBase.RefitSettings">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptionsBase.ApizrConfigurationSection">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder">
            <summary>
            Builder options available for static registrations
            </summary>
        </member>
        <member name="F:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.Options">
            <summary>
            The options
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.Apizr#Configuring#Manager#IApizrManagerOptionsBuilder#ApizrOptions">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithConfiguration(Microsoft.Extensions.Configuration.IConfiguration)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithConfiguration(Microsoft.Extensions.Configuration.IConfigurationSection)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithBaseAddress(System.String,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithBaseAddress(System.Func{System.String},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithBaseAddress(System.Uri,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithBaseAddress(System.Func{System.Uri},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithBasePath(System.String,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithBasePath(System.Func{System.String},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithHttpClientHandler(System.Net.Http.HttpClientHandler)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithHttpClientHandler(System.Func{System.Net.Http.HttpClientHandler})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.ConfigureHttpClient(System.Action{System.Net.Http.HttpClient},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithAuthenticationHandler``1(System.Func{Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithAuthenticationHandler(System.Func{System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithAuthenticationHandler(System.Func{System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}},System.Func{System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithAuthenticationHandler(System.Func{System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithAuthenticationHandler(System.Func{System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}},System.Func{System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithAuthenticationHandler``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}},``1,System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithAuthenticationHandler``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}},``1,System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithAuthenticationHandler``2(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}},System.Func{``1},System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithAuthenticationHandler``2(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Func{``1},System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithDelegatingHandler``1(``0,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithDelegatingHandler``1(System.Func{Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithHttpMessageHandler``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithHttpMessageHandler``1(System.Func{Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithRefitSettings(Refit.RefitSettings)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithRefitSettings(System.Func{Refit.RefitSettings})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithResiliencePipelineRegistry(Polly.Registry.ResiliencePipelineRegistry{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithResiliencePipelineRegistry(System.Func{Polly.Registry.ResiliencePipelineRegistry{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithConnectivityHandler(System.Func{System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithConnectivityHandler(Apizr.Connecting.IConnectivityHandler)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithConnectivityHandler(System.Func{Apizr.Connecting.IConnectivityHandler})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithCacheHandler(Apizr.Caching.ICacheHandler)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithCacheHandler(System.Func{Apizr.Caching.ICacheHandler})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithExCatching(System.Action{Apizr.ApizrException},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithExCatching``1(System.Action{Apizr.ApizrException{``0}},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithExCatching(System.Func{Apizr.ApizrException,System.Boolean},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithExCatching``1(System.Func{Apizr.ApizrException{``0},System.Boolean},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithExCatching(System.Func{Apizr.ApizrException,System.Threading.Tasks.Task{System.Boolean}},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithExCatching``1(``0,System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithExCatching``1(System.Func{Apizr.ApizrException{``0},System.Threading.Tasks.Task{System.Boolean}},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithExCatching``1(System.Func{``0},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithHandlerParameter(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithLogging(Apizr.Logging.HttpTracerMode,Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithLogging(System.Func{Apizr.Logging.HttpTracerMode},System.Func{Apizr.Logging.HttpMessageParts},System.Func{Microsoft.Extensions.Logging.LogLevel[]})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithLogging(System.Func{System.ValueTuple{Apizr.Logging.HttpTracerMode,Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[]}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithHeaders(System.Collections.Generic.IList{System.String},Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithHeaders(System.Func{System.Collections.Generic.IList{System.String}},Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrLifetimeScope,Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithHeaders``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}}[],Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrLifetimeScope,Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithHeaders``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}}[],Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrLifetimeScope,Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithOperationTimeout(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithOperationTimeout(System.Func{System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithRequestTimeout(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithRequestTimeout(System.Func{System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithResilienceProperty``1(Polly.ResiliencePropertyKey{``0},``0)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithResilienceProperty``1(Polly.ResiliencePropertyKey{``0},System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithLoggerFactory(Microsoft.Extensions.Logging.ILoggerFactory)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithLoggerFactory(System.Func{Microsoft.Extensions.Logging.ILoggerFactory})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithMappingHandler(Apizr.Mapping.IMappingHandler)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithMappingHandler(System.Func{Apizr.Mapping.IMappingHandler})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithResilienceContextOptions(System.Action{Apizr.Configuring.Shared.Context.IApizrResilienceContextOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithLoggedHeadersRedactionNames(System.Collections.Generic.IEnumerable{System.String},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithLoggedHeadersRedactionRule(System.Func{System.String,System.Boolean},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithResiliencePipelineKeys(System.String[],System.Collections.Generic.IEnumerable{Apizr.Configuring.ApizrRequestMethod},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithCaching(Apizr.Caching.CacheMode,System.Nullable{System.TimeSpan},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.Apizr#Configuring#Shared#IApizrInternalRegistrationOptionsBuilder#AddDelegatingHandler``1(System.Func{Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithRequestOptions(System.String,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.WithRequestOptions(System.String[],System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.Manager.IApizrExtendedManagerOptionsBuilderBase">
            <summary>
            Builder options available for extended registration
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Manager.IApizrGlobalManagerOptionsBuilderBase">
            <summary>
            Builder options available for both static and extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Manager.IApizrGlobalManagerOptionsBuilderBase`2">
            <summary>
            Builder options available for both static and extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Manager.IApizrManagerOptions">
            <summary>
            Options available for static registrations
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Manager.IApizrManagerOptions`1">
            <summary>
            Options available for static registrations
            </summary>
            <typeparam name="TWebApi"></typeparam>
        </member>
        <member name="T:Apizr.Configuring.Manager.IApizrManagerOptionsBase">
            <summary>
            Options available for both static and extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Manager.IApizrManagerOptionsBuilder`2">
            <summary>
            Builder options available for static registrations
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Manager.IApizrManagerOptionsBuilder">
            <summary>
            Builder options available for static registrations
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Manager.IApizrManagerOptionsBuilderBase">
            <summary>
            Builder options available for both static and extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Manager.IApizrManagerOptionsBuilderBase`2">
            <summary>
            Builder options available for both static and extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Proper.ApizrProperOptions">
            <inheritdoc cref="T:Apizr.Configuring.Proper.IApizrProperOptions"/>
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptions.#ctor(Apizr.Configuring.Shared.IApizrSharedRegistrationOptions,System.Type,System.Type,System.Reflection.TypeInfo,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Nullable{Apizr.Logging.HttpTracerMode},System.Nullable{Apizr.Logging.HttpMessageParts},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},Apizr.Resiliencing.Attributes.ResiliencePipelineAttributeBase[],Apizr.Resiliencing.Attributes.ResiliencePipelineAttributeBase[],Apizr.Caching.Attributes.CacheAttribute,Apizr.Caching.Attributes.CacheAttribute,System.Func{System.String,System.Boolean},Microsoft.Extensions.Logging.LogLevel[])">
            <summary>
            The proper options constructor
            </summary>
            <param name="sharedOptions">The shared options</param>
            <param name="webApiType">The web api type</param>
            <param name="crudApiEntityType">The crud api entity type if any</param>
            <param name="typeInfo">The type info</param>
            <param name="baseAddress">The web api base address</param>
            <param name="basePath">The web api base path</param>
            <param name="handlersParameters">Some handlers parameters</param>
            <param name="httpTracerMode">The http tracer mode</param>
            <param name="trafficVerbosity">The traffic verbosity</param>
            <param name="operationTimeout">The operation timeout</param>
            <param name="requestTimeout">The request timeout</param>
            <param name="commonResiliencePipelineAttributes">Global resilience pipelines</param>
            <param name="properResiliencePipelineAttributes">Specific resilience pipeline</param>
            <param name="commonCacheAttribute">Global caching options</param>
            <param name="properCacheAttribute">Specific caching options</param>
            <param name="shouldRedactHeaderValue">Headers to redact value</param>
            <param name="logLevels">The log levels</param>
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptions.BaseUriFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptions.BaseAddressFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptions.BasePathFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptions.HttpTracerModeFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptions.TrafficVerbosityFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptions.LogLevelsFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptions.LoggerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptions.HttpClientHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptions.HttpClientConfigurationBuilder">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptions.DelegatingHandlersFactories">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptions.HttpMessageHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptions.OperationTimeoutFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptions.RequestTimeoutFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptions.ExceptionHandlersFactory">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.Proper.ApizrProperOptionsBase">
            <inheritdoc cref="T:Apizr.Configuring.Proper.IApizrProperOptionsBase" />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBase.#ctor(Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBase,System.Type,System.Type,System.Reflection.TypeInfo,System.String,System.String,System.Nullable{Apizr.Logging.HttpTracerMode},System.Nullable{Apizr.Logging.HttpMessageParts},Apizr.Resiliencing.Attributes.ResiliencePipelineAttributeBase[],Apizr.Resiliencing.Attributes.ResiliencePipelineAttributeBase[],Apizr.Caching.Attributes.CacheAttribute,Apizr.Caching.Attributes.CacheAttribute,System.Func{System.String,System.Boolean},Microsoft.Extensions.Logging.LogLevel[])">
            <summary>
            The proper options constructor
            </summary>
            <param name="sharedOptions">The shared options</param>
            <param name="webApiType">The web api type</param>
            <param name="crudApiEntityType">The crud api entity type if any</param>
            <param name="typeInfo">The type info</param>
            <param name="baseAddress">The web api base address</param>
            <param name="basePath">The web api base path</param>
            <param name="httpTracerMode">The http tracer mode</param>
            <param name="trafficVerbosity">The traffic verbosity</param>
            <param name="commonResiliencePipelineAttributes">Global resilience pipelines</param>
            <param name="properResiliencePipelineAttributes">Specific resilience pipelines</param>
            <param name="commonCacheAttribute">Global caching options</param>
            <param name="properCacheAttribute">Specific caching options</param>
            <param name="shouldRedactHeaderValue">Headers to redact value</param>
            <param name="logLevels">The log levels</param>
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptionsBase.WebApiType">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptionsBase.CrudApiEntityType">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptionsBase.TypeInfo">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptionsBase.RequestNames">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptionsBase.IsCrudApi">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptionsBase.Logger">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptionsBase.RequestOptionsBuilders">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.Proper.ApizrProperOptionsBuilder">
            <summary>
            Builder options available at proper level for static registrations
            </summary>
        </member>
        <member name="F:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.Options">
            <summary>
            The proper options
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.Apizr#Configuring#Proper#IApizrProperOptionsBuilder#ApizrOptions">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithConfiguration(Microsoft.Extensions.Configuration.IConfiguration)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithConfiguration(Microsoft.Extensions.Configuration.IConfigurationSection)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithBaseAddress(System.String,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithBaseAddress(System.Func{System.String},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithBaseAddress(System.Uri,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithBaseAddress(System.Func{System.Uri},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithBasePath(System.String,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithBasePath(System.Func{System.String},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithHttpClientHandler(System.Net.Http.HttpClientHandler)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithHttpClientHandler(System.Func{System.Net.Http.HttpClientHandler})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.ConfigureHttpClient(System.Action{System.Net.Http.HttpClient},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithAuthenticationHandler``1(System.Func{Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithAuthenticationHandler(System.Func{System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithAuthenticationHandler(System.Func{System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}},System.Func{System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithAuthenticationHandler(System.Func{System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithAuthenticationHandler(System.Func{System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}},System.Func{System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithAuthenticationHandler``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}},``1,System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithAuthenticationHandler``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}},``1,System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithAuthenticationHandler``2(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}},System.Func{``1},System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithAuthenticationHandler``2(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Func{``1},System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithDelegatingHandler``1(``0,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithDelegatingHandler``1(System.Func{Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithHttpMessageHandler``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithHttpMessageHandler``1(System.Func{Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithExCatching(System.Action{Apizr.ApizrException},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithExCatching``1(System.Action{Apizr.ApizrException{``0}},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithExCatching(System.Func{Apizr.ApizrException,System.Boolean},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithExCatching``1(System.Func{Apizr.ApizrException{``0},System.Boolean},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithExCatching(System.Func{Apizr.ApizrException,System.Threading.Tasks.Task{System.Boolean}},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithExCatching``1(``0,System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithExCatching``1(System.Func{Apizr.ApizrException{``0},System.Threading.Tasks.Task{System.Boolean}},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithExCatching``1(System.Func{``0},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithHandlerParameter(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithLogging(Apizr.Logging.HttpTracerMode,Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithLogging(System.Func{Apizr.Logging.HttpTracerMode},System.Func{Apizr.Logging.HttpMessageParts},System.Func{Microsoft.Extensions.Logging.LogLevel[]})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithLogging(System.Func{System.ValueTuple{Apizr.Logging.HttpTracerMode,Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[]}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithHeaders(System.Collections.Generic.IList{System.String},Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithHeaders(System.Func{System.Collections.Generic.IList{System.String}},Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrLifetimeScope,Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithHeaders``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}}[],Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrLifetimeScope,Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithHeaders``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}}[],Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrLifetimeScope,Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithOperationTimeout(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithOperationTimeout(System.Func{System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithRequestTimeout(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithRequestTimeout(System.Func{System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithResilienceProperty``1(Polly.ResiliencePropertyKey{``0},``0)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithResilienceProperty``1(Polly.ResiliencePropertyKey{``0},System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithResilienceContextOptions(System.Action{Apizr.Configuring.Shared.Context.IApizrResilienceContextOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithLoggedHeadersRedactionNames(System.Collections.Generic.IEnumerable{System.String},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithLoggedHeadersRedactionRule(System.Func{System.String,System.Boolean},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithResiliencePipelineKeys(System.String[],System.Collections.Generic.IEnumerable{Apizr.Configuring.ApizrRequestMethod},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithCaching(Apizr.Caching.CacheMode,System.Nullable{System.TimeSpan},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithRequestOptions(System.String,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.WithRequestOptions(System.String[],System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Proper.ApizrProperOptionsBuilder.Apizr#Configuring#Shared#IApizrInternalRegistrationOptionsBuilder#AddDelegatingHandler``1(System.Func{Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.Proper.IApizrExtendedProperOptionsBuilderBase">
            <summary>
            Builder options available at proper level for extended registration
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Proper.IApizrGlobalProperOptionsBuilderBase">
            <summary>
            Builder options available at proper level for both static and extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Proper.IApizrGlobalProperOptionsBuilderBase`2">
            <summary>
            Builder options available at proper level for both static and extended registrations
            </summary>
        </member>
        <member name="M:Apizr.Configuring.Proper.IApizrGlobalProperOptionsBuilderBase`2.WithRequestOptions(System.String,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder},Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Configure options for specific requests
            </summary>
            <param name="requestName">The name of the request to configure</param>
            <param name="optionsBuilder">The configuration builder</param>
            <param name="duplicateStrategy">The duplicate strategy if there's any other already (default: Add)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Proper.IApizrGlobalProperOptionsBuilderBase`2.WithRequestOptions(System.String[],System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder},Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Configure options for specific requests
            </summary>
            <param name="requestNames">The name of the requests to configure</param>
            <param name="optionsBuilder">The configuration builder</param>
            <param name="duplicateStrategy">The duplicate strategy if there's any other already (default: Add)</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Configuring.Proper.IApizrProperOptions">
            <summary>
            Options available at proper level for static registrations
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Proper.IApizrProperOptions.LoggerFactory">
            <summary>
            The Logger factory
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Proper.IApizrProperOptionsBase">
            <summary>
            Options available at proper level for both static and extended registrations
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Proper.IApizrProperOptionsBase.WebApiType">
            <summary>
            Web api interface type
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Proper.IApizrProperOptionsBase.CrudApiEntityType">
            <summary>
            Crud api entity type if any
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Proper.IApizrProperOptionsBase.TypeInfo">
            <summary>
            Web api interface or Crud api entity class type info
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Proper.IApizrProperOptionsBase.RequestNames">
            <summary>
            Web api request names
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Proper.IApizrProperOptionsBase.IsCrudApi">
            <summary>
            True if it's a CRUD api
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Proper.IApizrProperOptionsBase.Logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Proper.IApizrProperOptionsBase.RequestOptionsBuilders">
            <summary>
            The request options builders
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Proper.IApizrProperOptionsBuilder`2">
            <summary>
            Builder options available at proper level for static registrations
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Proper.IApizrProperOptionsBuilder">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.Proper.IApizrProperOptionsBuilderBase">
            <summary>
            Builder options available at proper level for both static and extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Proper.IApizrProperOptionsBuilderBase`2">
            <summary>
            Builder options available at proper level for both static and extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Registry.ApizrRegistry">
            <summary>
            Registry options available for static registrations
            </summary>
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistry.AddOrUpdateManagerFor``1(System.Func{Apizr.IApizrManager{``0}})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistry.AddOrUpdateManager(System.Type,System.Func{Apizr.IApizrManager})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistry.Populate(System.Action{System.Type,System.Func{System.Object}})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.Registry.ApizrRegistryBase">
            <summary>
            Registry options available for both static and extended registrations
            </summary>
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBase.GetEnumerator">
            <summary>
            Get factory enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBase.GetCrudManagerFor``1">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBase.GetCrudManagerFor``2">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBase.GetCrudManagerFor``3">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBase.GetCrudManagerFor``4">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBase.GetManagerFor``1">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBase.Apizr#Configuring#Registry#IApizrInternalEnumerableRegistry#GetManagerInternal``1">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBase.TryGetCrudManagerFor``1(Apizr.IApizrManager{Apizr.Requesting.ICrudApi{``0,System.Int32,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{System.String,System.Object}}}@)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBase.TryGetCrudManagerFor``2(Apizr.IApizrManager{Apizr.Requesting.ICrudApi{``0,``1,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{System.String,System.Object}}}@)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBase.TryGetCrudManagerFor``3(Apizr.IApizrManager{Apizr.Requesting.ICrudApi{``0,``1,``2,System.Collections.Generic.IDictionary{System.String,System.Object}}}@)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBase.TryGetCrudManagerFor``4(Apizr.IApizrManager{Apizr.Requesting.ICrudApi{``0,``1,``2,``3}}@)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBase.TryGetManagerFor``1(Apizr.IApizrManager{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBase.Apizr#Configuring#Registry#IApizrInternalEnumerableRegistry#TryGetManagerInternal``1(``0@)">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Registry.ApizrRegistryBase.Count">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBase.ContainsCrudManagerFor``1">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBase.ContainsCrudManagerFor``2">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBase.ContainsCrudManagerFor``3">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBase.ContainsCrudManagerFor``4">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBase.ContainsManagerFor``1">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBase.Apizr#Configuring#Registry#IApizrInternalEnumerableRegistry#ContainsManagerInternal``1">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.Registry.ApizrRegistryBuilder">
            <summary>
            Registry builder options available for static registrations
            </summary>
        </member>
        <member name="F:Apizr.Configuring.Registry.ApizrRegistryBuilder.Registry">
            <summary>
            The registry
            </summary>
        </member>
        <member name="F:Apizr.Configuring.Registry.ApizrRegistryBuilder.CommonOptions">
            <summary>
            The common options
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Registry.ApizrRegistryBuilder.ApizrRegistry">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBuilder.AddGroup(System.Action{Apizr.Configuring.Registry.IApizrRegistryBuilder},System.Action{Apizr.Configuring.Common.IApizrCommonOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBuilder.AddCrudManagerFor``1(System.Action{Apizr.Configuring.Proper.IApizrProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBuilder.AddCrudManagerFor``2(System.Action{Apizr.Configuring.Proper.IApizrProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBuilder.AddCrudManagerFor``3(System.Action{Apizr.Configuring.Proper.IApizrProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBuilder.AddCrudManagerFor``4(System.Action{Apizr.Configuring.Proper.IApizrProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBuilder.AddCrudManagerFor``5(System.Func{Apizr.ILazyFactory{Apizr.Requesting.ICrudApi{``0,``1,``2,``3}},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Apizr.ILazyFactory{Polly.Registry.ResiliencePipelineRegistry{System.String}},Apizr.Configuring.Manager.IApizrManagerOptions{Apizr.Requesting.ICrudApi{``0,``1,``2,``3}},``4},System.Action{Apizr.Configuring.Proper.IApizrProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBuilder.AddManagerFor``1(System.Action{Apizr.Configuring.Proper.IApizrProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBuilder.AddManagerFor``2(System.Func{Apizr.ILazyFactory{``0},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Apizr.ILazyFactory{Polly.Registry.ResiliencePipelineRegistry{System.String}},Apizr.Configuring.Manager.IApizrManagerOptions{``0},``1},System.Action{Apizr.Configuring.Proper.IApizrProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBuilder.Apizr#Configuring#Registry#IApizrInternalRegistryBuilder{Apizr#Configuring#Proper#IApizrProperOptionsBuilder}#AddWrappingManagerFor``2(System.Func{Apizr.IApizrManager{``0},``1},System.Action{Apizr.Configuring.Proper.IApizrProperOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Registry.ApizrRegistryBuilder.Apizr#Configuring#Registry#IApizrInternalGlobalRegistryBuilder#AddAliasingManagerFor``2">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.Registry.IApizrEnumerableRegistry">
            <summary>
            Registry options available for both static and extended registrations
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Registry.IApizrEnumerableRegistry.Count">
            <summary>
            Managers count
            </summary>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.ContainsCrudManagerFor``1">
            <summary>
            Check if registry contains a manager for <typeparamref name="T"/> entity type
            </summary>
            <typeparam name="T">The entity type to manage</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.ContainsCrudManagerFor``2">
            <summary>
            Check if registry contains a manager for <typeparamref name="T"/> entity type with <typeparamref name="TKey"/> key type
            </summary>
            <typeparam name="T">The entity type to manage</typeparam>
            <typeparam name="TKey">The entity key type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.ContainsCrudManagerFor``3">
            <summary>
            Check if registry contains a manager for <typeparamref name="T"/> entity type with <typeparamref name="TKey"/> key type and <typeparamref name="TReadAllResult"/> ReadAll result type
            </summary>
            <typeparam name="T">The entity type to manage</typeparam>
            <typeparam name="TKey">The entity key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.ContainsCrudManagerFor``4">
            <summary>
            Check if registry contains a manager for <typeparamref name="T"/> entity type with <typeparamref name="TKey"/> key type,
            <typeparamref name="TReadAllResult"/> ReadAll result type and <typeparamref name="TReadAllParams"/> ReadAll params type
            </summary>
            <typeparam name="T">The entity type to manage</typeparam>
            <typeparam name="TKey">The entity key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll params type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.ContainsManagerFor``1">
            <summary>
            Check if registry contains a manager for <typeparamref name="TWebApi"/> api type
            </summary>
            <typeparam name="TWebApi">The api type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.GetCrudManagerFor``1">
            <summary>
            Get a Crud manager instance for an entity type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.GetCrudManagerFor``2">
            <summary>
            Get a Crud manager instance for an entity type with a specific key type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.GetCrudManagerFor``3">
            <summary>
            Get a Crud manager instance for an entity type with a specific key type and ReadAll result type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.GetCrudManagerFor``4">
            <summary>
            Get a Crud manager instance for an entity type with a specific key type, ReadAll result type and ReadAll params type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll request params type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.GetManagerFor``1">
            <summary>
            Get an api manager instance
            </summary>
            <typeparam name="TWebApi">The managed api type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.TryGetCrudManagerFor``1(Apizr.IApizrManager{Apizr.Requesting.ICrudApi{``0,System.Int32,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{System.String,System.Object}}}@)">
            <summary>
            Try to get a Crud manager instance for an entity type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.TryGetCrudManagerFor``2(Apizr.IApizrManager{Apizr.Requesting.ICrudApi{``0,``1,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{System.String,System.Object}}}@)">
            <summary>
            Try to get a Crud manager instance for an entity type with a specific key type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.TryGetCrudManagerFor``3(Apizr.IApizrManager{Apizr.Requesting.ICrudApi{``0,``1,``2,System.Collections.Generic.IDictionary{System.String,System.Object}}}@)">
            <summary>
            Try to get a Crud manager instance for an entity type with a specific key type and ReadAll result type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.TryGetCrudManagerFor``4(Apizr.IApizrManager{Apizr.Requesting.ICrudApi{``0,``1,``2,``3}}@)">
            <summary>
            Try to get a Crud manager instance for an entity type with a specific key type, ReadAll result type and ReadAll params type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll request params type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrEnumerableRegistry.TryGetManagerFor``1(Apizr.IApizrManager{``0}@)">
            <summary>
            Try to get an api manager instance
            </summary>
            <typeparam name="TWebApi">The managed api type</typeparam>
            <returns></returns>
        </member>
        <member name="T:Apizr.Configuring.Registry.IApizrRegistry">
            <summary>
            Registry options available for static registrations
            </summary>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrRegistry.Populate(System.Action{System.Type,System.Func{System.Object}})">
            <summary>
            Populate all registered types and its factories
            </summary>
            <param name="populateAction">The action to execute when populating</param>
        </member>
        <member name="T:Apizr.Configuring.Registry.IApizrRegistryBuilder`4">
            <summary>
            Registry builder options available for static registrations
            </summary>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrRegistryBuilder`4.AddCrudManagerFor``5(System.Func{Apizr.ILazyFactory{Apizr.Requesting.ICrudApi{``0,``1,``2,``3}},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Apizr.ILazyFactory{Polly.Registry.ResiliencePipelineRegistry{System.String}},Apizr.Configuring.Manager.IApizrManagerOptions{Apizr.Requesting.ICrudApi{``0,``1,``2,``3}},``4},System.Action{`2})">
            <summary>
            Create a <typeparamref name="TApizrManager"/> instance for a managed crud api for <typeparamref name="T"/> object (class), 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <typeparamref name="TReadAllResult"/>
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <typeparam name="TApizrManager">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters</typeparam>
            <param name="apizrManagerFactory">The custom manager implementation instance factory</param>
            <param name="properOptionsBuilder">The builder defining some api proper options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrRegistryBuilder`4.AddManagerFor``2(System.Func{Apizr.ILazyFactory{``0},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Apizr.ILazyFactory{Polly.Registry.ResiliencePipelineRegistry{System.String}},Apizr.Configuring.Manager.IApizrManagerOptions{``0},``1},System.Action{`2})">
            <summary>
            Create a <typeparamref name="TApizrManager"/> instance for a managed <typeparamref name="TWebApi"/>
            </summary>
            <typeparam name="TWebApi">The web api interface to manage</typeparam>
            <typeparam name="TApizrManager">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation</typeparam>
            <param name="apizrManagerFactory">The custom manager implementation instance factory</param>
            <param name="properOptionsBuilder">The builder defining some api proper options</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Configuring.Registry.IApizrRegistryBuilder">
            <summary>
            Registry builder options available for static registrations
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Registry.IApizrRegistryBuilderBase">
            <summary>
            Registry builder options available for both static and extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Registry.IApizrRegistryBuilderBase`4">
            <summary>
            Registry builder options available for both static and extended registrations
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Registry.IApizrRegistryBuilderBase`4.ApizrRegistry">
            <summary>
            Apizr registry
            </summary>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrRegistryBuilderBase`4.AddGroup(System.Action{`1},System.Action{`3})">
            <summary>
            Group registrations sharing specific common options
            </summary>
            <param name="registryGroupBuilder">The registry group</param>
            <param name="commonOptionsBuilder">The group common options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrRegistryBuilderBase`4.AddCrudManagerFor``1(System.Action{`2})">
            <summary>
            Create a <see cref="T:Apizr.ApizrManager`1"/> instance for <typeparamref name="T"/> object type (class), 
            with key of type <see cref="T:System.Int32"/> and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <param name="optionsBuilder">The builder defining some api proper options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrRegistryBuilderBase`4.AddCrudManagerFor``2(System.Action{`2})">
            <summary>
            Create a <see cref="T:Apizr.ApizrManager`1"/> instance for <typeparamref name="T"/> object type (class), 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <param name="optionsBuilder">The builder defining some api proper options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrRegistryBuilderBase`4.AddCrudManagerFor``3(System.Action{`2})">
            <summary>
            Create a <see cref="T:Apizr.ApizrManager`1"/> instance for <typeparamref name="T"/> object type (class), 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <typeparamref name="TReadAllResult"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <param name="optionsBuilder">The builder defining some api proper options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrRegistryBuilderBase`4.AddCrudManagerFor``4(System.Action{`2})">
            <summary>
            Create a <see cref="T:Apizr.ApizrManager`1"/> instance for <typeparamref name="T"/> object type (class), 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <typeparamref name="TReadAllResult"/>
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters</typeparam>
            <param name="optionsBuilder">The builder defining some api proper options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Registry.IApizrRegistryBuilderBase`4.AddManagerFor``1(System.Action{`2})">
            <summary>
            Create a <see cref="T:Apizr.ApizrManager`1"/> instance
            </summary>
            <typeparam name="TWebApi">The web api interface to manage</typeparam>
            <param name="optionsBuilder">The builder defining some api proper options</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Configuring.Request.ApizrRequestOptions">
            <inheritdoc cref="T:Apizr.Configuring.Request.IApizrRequestOptions" />
        </member>
        <member name="P:Apizr.Configuring.Request.ApizrRequestOptions.CancellationToken">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Request.ApizrRequestOptions.ClearCache">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Request.ApizrRequestOptions.ResilienceContextOptions">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Request.ApizrRequestOptions.Headers">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Request.ApizrRequestOptions.Apizr#Configuring#Request#IApizrRequestOptions#HeadersStore">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Request.ApizrRequestOptions.Apizr#Configuring#Request#IApizrRequestOptions#OriginalExpression">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.Request.ApizrRequestOptionsBase">
            <inheritdoc cref="T:Apizr.Configuring.Request.IApizrRequestOptionsBase" />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBase.#ctor(Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBase,System.Nullable{Apizr.Logging.HttpTracerMode},System.Nullable{Apizr.Logging.HttpMessageParts},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},Apizr.Resiliencing.Attributes.ResiliencePipelineAttributeBase,Apizr.Caching.Attributes.CacheAttributeBase,Apizr.Configuring.ApizrRequestMethod,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Request.ApizrRequestOptionsBase.ResilienceContext">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Request.ApizrRequestOptionsBase.RequestMethod">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.Request.ApizrRequestOptionsBuilder">
            <inheritdoc cref="T:Apizr.Configuring.Request.IApizrRequestOptionsBuilder" />
        </member>
        <member name="P:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.Apizr#Configuring#Request#IApizrRequestOptionsBuilder#ApizrOptions">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.WithLogging(Apizr.Logging.HttpTracerMode,Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.WithHeaders(System.Collections.Generic.IList{System.String},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.WithOperationTimeout(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.WithRequestTimeout(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.WithCancellation(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.WithCacheClearing(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.WithExCatching(System.Action{Apizr.ApizrException},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.WithExCatching``1(System.Action{Apizr.ApizrException{``0}},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.WithExCatching(System.Func{Apizr.ApizrException,System.Boolean},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.WithExCatching``1(System.Func{Apizr.ApizrException{``0},System.Boolean},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.WithExCatching(System.Func{Apizr.ApizrException,System.Threading.Tasks.Task{System.Boolean}},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.WithExCatching``1(``0,System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.WithExCatching``1(System.Func{Apizr.ApizrException{``0},System.Threading.Tasks.Task{System.Boolean}},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.WithHandlerParameter(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.WithResilienceProperty``1(Polly.ResiliencePropertyKey{``0},``0)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.WithResilienceContextOptions(System.Action{Apizr.Configuring.Shared.Context.IApizrResilienceContextOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.WithLoggedHeadersRedactionNames(System.Collections.Generic.IEnumerable{System.String},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.WithLoggedHeadersRedactionRule(System.Func{System.String,System.Boolean},Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.WithResiliencePipelineKeys(System.String[],Apizr.Configuring.ApizrDuplicateStrategy)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.WithCaching(Apizr.Caching.CacheMode,System.Nullable{System.TimeSpan},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.Apizr#Configuring#Request#IApizrRequestOptionsBuilder{Apizr#Configuring#Request#IApizrRequestOptions,Apizr#Configuring#Request#IApizrRequestOptionsBuilder}#WithHeaders(System.Collections.Generic.IList{System.String},Apizr.Configuring.ApizrRegistrationMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.Apizr#Configuring#Request#IApizrRequestOptionsBuilder{Apizr#Configuring#Request#IApizrRequestOptions,Apizr#Configuring#Request#IApizrRequestOptionsBuilder}#WithOriginalExpression(System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.Apizr#Configuring#Request#IApizrRequestOptionsBuilder{Apizr#Configuring#Request#IApizrRequestOptions,Apizr#Configuring#Request#IApizrRequestOptionsBuilder}#WithResilienceContextOptions(Apizr.Configuring.Shared.Context.IApizrResilienceContextOptions)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.Apizr#Configuring#Request#IApizrRequestOptionsBuilder{Apizr#Configuring#Request#IApizrRequestOptions,Apizr#Configuring#Request#IApizrRequestOptionsBuilder}#WithContext(Polly.ResilienceContext)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Request.ApizrRequestOptionsBuilder.Apizr#Configuring#Request#IApizrRequestOptionsBuilder{Apizr#Configuring#Request#IApizrRequestOptions,Apizr#Configuring#Request#IApizrRequestOptionsBuilder}#WithResiliencePipelineOptions(System.Collections.Generic.IDictionary{Apizr.Configuring.ApizrConfigurationSource,Apizr.Resiliencing.Attributes.ResiliencePipelineAttributeBase[]})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.Request.IApizrRequestOptions">
            <inheritdoc cref="T:Apizr.Configuring.Request.IApizrRequestOptionsBase" />
        </member>
        <member name="P:Apizr.Configuring.Request.IApizrRequestOptions.CancellationToken">
            <summary>
            A cancellation token to pass through it all
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Request.IApizrRequestOptions.ClearCache">
            <summary>
            Clear request cache before executing (default: false)
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Request.IApizrRequestOptions.ResilienceContextOptions">
            <summary>
            Options set to resilience context
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Request.IApizrRequestOptions.Headers">
            <summary>
            Headers to add to the request
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Request.IApizrRequestOptionsBase">
            <summary>
            Options available at request levels and for all (static and extended) registration types
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Request.IApizrRequestOptionsBase.ResilienceContext">
            <summary>
            The Polly resilience context to pass through it all
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Request.IApizrRequestOptionsBase.RequestMethod">
            <summary>
            The Apizr request method
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Request.IApizrRequestOptionsBuilder`2">
            <summary>
            Builder options available at request level
            </summary>
        </member>
        <member name="M:Apizr.Configuring.Request.IApizrRequestOptionsBuilder`2.WithCancellation(System.Threading.CancellationToken)">
            <summary>
            Set the cancellation token
            </summary>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Request.IApizrRequestOptionsBuilder`2.WithCacheClearing(System.Boolean)">
            <summary>
            Tells if you want to clear the potential cached data before requesting
            </summary>
            <param name="clearCache">Clear cache or not</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Request.IApizrRequestOptionsBuilder`2.WithHeaders(System.Collections.Generic.IList{System.String},Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Add some headers to the request
            </summary>
            <param name="headers">Headers to add to the request</param>
            <param name="strategy">The duplicate strategy if there's any other already (default: Add)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Request.IApizrRequestOptionsBuilder`2.WithResiliencePipelineKeys(System.String[],Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Apply some resilience strategies by getting pipelines from registry with key matching.
            </summary>
            <param name="resiliencePipelineKeys">Resilience pipeline keys from the registry.</param>
            <param name="duplicateStrategy">The duplicate strategy if there's any other names already (default: Add)</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Configuring.Request.IApizrRequestOptionsBuilder">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.Request.IApizrRequestOptionsBuilderBase`2">
            <summary>
            Builder options available at request level
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Request.RequestOptionsAttribute">
            <summary>
            The Apizr request options property attribute
            </summary>
        </member>
        <member name="M:Apizr.Configuring.Request.RequestOptionsAttribute.#ctor">
            <summary>
            Create some Apizr request options
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Shared.ApizrGlobalSharedOptionsBase">
            <summary>
            Options available at every level for both static and extended registrations
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.ApizrGlobalSharedOptionsBase.HttpTracerMode">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Shared.ApizrGlobalSharedOptionsBase.TrafficVerbosity">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Shared.ApizrGlobalSharedOptionsBase.LogLevels">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Shared.ApizrGlobalSharedOptionsBase.ExceptionHandlers">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Shared.ApizrGlobalSharedOptionsBase.LetThrowOnHandledException">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Shared.ApizrGlobalSharedOptionsBase.HandlersParameters">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Shared.ApizrGlobalSharedOptionsBase.OperationTimeout">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Shared.ApizrGlobalSharedOptionsBase.RequestTimeout">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Shared.ApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Shared.ApizrGlobalSharedOptionsBase.ResiliencePipelineOptions">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Shared.ApizrGlobalSharedOptionsBase.CacheOptions">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Shared.ApizrGlobalSharedOptionsBase.Apizr#Configuring#Shared#IApizrGlobalSharedOptionsBase#ContextOptionsBuilder">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Shared.ApizrGlobalSharedOptionsBase.Apizr#Configuring#Shared#IApizrGlobalSharedOptionsBase#ResiliencePropertiesFactories">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Configuring.Shared.ApizrGlobalSharedRegistrationOptionsBase">
            <summary>
            Options available at both common and proper level for both static and extended registrations
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.ApizrGlobalSharedRegistrationOptionsBase.BaseUri">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Shared.ApizrGlobalSharedRegistrationOptionsBase.BaseAddress">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Shared.ApizrGlobalSharedRegistrationOptionsBase.BasePath">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Shared.ApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Shared.ApizrGlobalSharedRegistrationOptionsBase.HeadersFactories">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Shared.ApizrGlobalSharedRegistrationOptionsBase.Headers">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Shared.Context.ApizrResilienceContextOptions.ContinueOnCapturedContext">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Shared.Context.ApizrResilienceContextOptions.ReturnToPoolOnComplete">
            <inheritdoc />
        </member>
        <member name="F:Apizr.Configuring.Shared.Context.ApizrResilienceContextOptionsBuilder.Options">
            <summary>
            The common options
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.Context.ApizrResilienceContextOptionsBuilder.Apizr#Configuring#Shared#Context#IApizrResilienceContextOptionsBuilder#ResilienceContextOptions">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Shared.Context.ApizrResilienceContextOptionsBuilder.ContinueOnCapturedContext(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Shared.Context.ApizrResilienceContextOptionsBuilder.ReturnToPoolOnComplete(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Configuring.Shared.Context.IApizrResilienceContextOptions.ContinueOnCapturedContext">
            <summary>
            Gets the value indicating whether to continue on captured context, if any.
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.Context.IApizrResilienceContextOptions.ReturnToPoolOnComplete">
            <summary>
            Gets the value indicating whether to return the context to the pool, when request completes.
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Shared.IApizrExtendedSharedRegistrationOptionsBuilderBase">
            <summary>
            Builder options available at both common and proper level for extended registration
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Shared.IApizrGlobalSharedOptions">
            <summary>
            Options available at all (common, proper and request) levels and for static registration type
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBase">
            <summary>
            Options available at all (common, proper and request) levels and for all (static and extended) registration types
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBase.HttpTracerMode">
            <summary>
            Http traffic tracing mode
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBase.TrafficVerbosity">
            <summary>
            Http traffic tracing verbosity
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBase.LogLevels">
            <summary>
            Log levels while writing
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBase.ExceptionHandlers">
            <summary>
            Catching potential exception if defined
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBase.LetThrowOnHandledException">
            <summary>
            Let throw potential exception even if it's handled (default: true)
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBase.HandlersParameters">
            <summary>
            Parameters passed through delegating handlers
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBase.OperationTimeout">
            <summary>
            The operation timeout (overall request tries)
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBase.RequestTimeout">
            <summary>
            The request timeout (each request try)
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBase.ShouldRedactHeaderValue">
            <summary>
            The <see cref="T:System.Func`2"/> which determines whether to redact the HTTP header value before logging.
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBase.ResiliencePipelineOptions">
            <summary>
            Resilience pipeline keys from the registry
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBase.CacheOptions">
            <summary>
            The caching options to apply
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBase.ContextOptionsBuilder">
            <summary>
            The resilience context options builder
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase">
            <summary>
            Builder options available at all (common, proper and request) levels and for all (static and extended) registration types
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2.WithExCatching(System.Action{Apizr.ApizrException},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Catch potential exceptions
            </summary>
            <param name="onException">The exception callback</param>
            <param name="letThrowOnException">Let throw potential exception (default: true)</param>
            <param name="strategy">The duplicate strategy if there's another callback already (default: Replace)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2.WithExCatching``1(System.Action{Apizr.ApizrException{``0}},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Catch potential exceptions
            </summary>
            <param name="onException">The exception callback</param>
            <param name="letThrowOnException">Let throw potential exception (default: true)</param>
            <param name="strategy">The duplicate strategy if there's another callback already (default: Replace)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2.WithExCatching(System.Func{Apizr.ApizrException,System.Boolean},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Catch potential exceptions
            </summary>
            <param name="onException">The exception callback returning handled boolean flag</param>
            <param name="letThrowOnHandledException">Let throw potential exception even if it's handled (default: true)</param>
            <param name="strategy">The duplicate strategy if there's another callback already (default: Replace)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2.WithExCatching``1(System.Func{Apizr.ApizrException{``0},System.Boolean},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Catch potential exceptions
            </summary>
            <param name="onException">The exception callback returning handled boolean flag</param>
            <param name="letThrowOnHandledException">Let throw potential exception even if it's handled (default: true)</param>
            <param name="strategy">The duplicate strategy if there's another callback already (default: Replace)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2.WithExCatching(System.Func{Apizr.ApizrException,System.Threading.Tasks.Task{System.Boolean}},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Catch potential exceptions
            </summary>
            <param name="onException">The exception callback returning handled boolean flag Task</param>
            <param name="letThrowOnHandledException">Let throw potential exception even if it's handled (default: true)</param>
            <param name="strategy">The duplicate strategy if there's another callback already (default: Replace)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2.WithExCatching``1(System.Func{Apizr.ApizrException{``0},System.Threading.Tasks.Task{System.Boolean}},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Catch potential exceptions
            </summary>
            <param name="onException">The exception callback returning a handled boolean flag Task</param>
            <param name="letThrowOnHandledException">Let throw potential exception even if it's handled (default: true)</param>
            <param name="strategy">The duplicate strategy if there's another callback already (default: Replace)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2.WithExCatching``1(``0,System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Catch potential exceptions
            </summary>
            <param name="exceptionHandler">The exception handler called back and returning handled boolean flag Task</param>
            <param name="letThrowOnHandledException">Let throw potential exception even if it's handled (default: true)</param>
            <param name="strategy">The duplicate strategy if there's another callback already (default: Replace)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2.WithHandlerParameter(System.String,System.Object)">
            <summary>
            Set some parameters passed through all delegating handlers
            </summary>
            <param name="key">The parameter's key</param>
            <param name="value">The parameter's value</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2.WithResilienceProperty``1(Polly.ResiliencePropertyKey{``0},``0)">
            <summary>
            Set some resilience properties to the resilience context
            </summary>
            <param name="key">The resilience property's key</param>
            <param name="value">The resilience property's value</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2.WithLogging(Apizr.Logging.HttpTracerMode,Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[])">
            <summary>
            Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute)
            </summary>
            <param name="httpTracerMode"></param>
            <param name="trafficVerbosity">Http traffic tracing verbosity (default: All)</param>
            <param name="logLevels">Log levels to apply while writing (default: Information)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2.WithOperationTimeout(System.TimeSpan)">
            <summary>
            Set a timeout to the operation (overall request tries)
            </summary>
            <param name="timeout">The operation timeout</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2.WithRequestTimeout(System.TimeSpan)">
            <summary>
            Set a timeout to the request (each request try)
            </summary>
            <param name="timeout">The request timeout</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2.WithResilienceContextOptions(System.Action{Apizr.Configuring.Shared.Context.IApizrResilienceContextOptionsBuilder})">
            <summary>
            Set some options to the resilience context
            </summary>
            <param name="contextOptionsBuilder">The resilience context options builder</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2.WithLoggedHeadersRedactionNames(System.Collections.Generic.IEnumerable{System.String},Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Sets the collection of HTTP headers names for which values should be redacted before logging.
            </summary>
            <param name="redactedLoggedHeaderNames">The collection of HTTP headers names for which values should be redacted before logging.</param>
            <param name="strategy">The duplicate strategy if there's any other names already (default: Add)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2.WithLoggedHeadersRedactionRule(System.Func{System.String,System.Boolean},Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Sets the <see cref="T:System.Func`2"/> which determines whether to redact the HTTP header value before logging.
            </summary>
            <param name="shouldRedactHeaderValue">The <see cref="T:System.Func`2"/> which determines whether to redact the HTTP header value before logging</param>
            <param name="strategy">The duplicate strategy if there's any other names already (default: Add)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase`2.WithCaching(Apizr.Caching.CacheMode,System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
            Cache data.
            </summary>
            <param name="mode">FetchOrGet returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one</param>
            <param name="lifeSpan">This specific caching lifetime (Default: null = cache handler lifetime</param>
            <param name="shouldInvalidateOnError">Should invalidate on error (Default: false)</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBase">
            <summary>
            Options available at both common and proper level (not request) and for all (static and extended) registration types
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBase.BaseUri">
            <summary>
            Base address
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBase.BaseAddress">
            <summary>
            Base address
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBase.BasePath">
            <summary>
            Base path
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory">
            <summary>
            The primary Http message handler factory (set internally)
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBase.HeadersFactories">
            <summary>
            Headers factories
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBase.Headers">
            <summary>
            Headers to add to the request
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase">
            <summary>
            Builder options available at both common and proper level for both static and extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase`2">
            <inheritdoc cref="T:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase" />
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase`2.WithConfiguration(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Set options from configuration
            </summary>
            <param name="configuration">The configuration to set options from</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase`2.WithConfiguration(Microsoft.Extensions.Configuration.IConfigurationSection)">
            <summary>
            Set options from a specific configuration section
            </summary>
            <param name="configurationSection">The configuration section to set options from</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase`2.WithBaseAddress(System.String,Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Define your web api base address (could be defined with WebApiAttribute)
            </summary>
            <param name="baseAddress">Your web api base address</param>
            <param name="strategy">The duplicate strategy if there's any other already (default: Replace)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase`2.WithBaseAddress(System.Uri,Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Define your web api base address (could be defined with WebApiAttribute)
            </summary>
            <param name="baseAddress">Your web api base address</param>
            <param name="strategy">The duplicate strategy if there's any other already (default: Replace)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase`2.WithBasePath(System.String,Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Define your web api base path (could be defined with WebApiAttribute)
            </summary>
            <param name="basePath">Your web api base path</param>
            <param name="strategy">The duplicate strategy if there's any other already (default: Replace)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase`2.WithHttpClientHandler(System.Net.Http.HttpClientHandler)">
            <summary>
            Provide a custom HttpClientHandler
            </summary>
            <param name="httpClientHandler">An <see cref="T:System.Net.Http.HttpClientHandler"/> instance</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase`2.WithAuthenticationHandler(System.Func{System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}})">
            <summary>
            Provide methods to only get the authorization constant token when needed
            </summary>
            <param name="getTokenFactory">The method called to get local constant token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase`2.WithAuthenticationHandler(System.Func{System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}},System.Func{System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Provide methods to get and set the authorization token when needed
            </summary>
            <param name="getTokenFactory">The method called to get local token</param>
            <param name="setTokenFactory">The method called to set local token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase`2.WithAuthenticationHandler(System.Func{System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}})">
            <summary>
            Provide a method to refresh the authorization token when needed
            </summary>
            <param name="refreshTokenFactory">Refresh token method called when expired or empty</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase`2.WithAuthenticationHandler(System.Func{System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}},System.Func{System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}})">
            <summary>
            Provide methods to get, set and refresh the authorization token when needed
            </summary>
            <param name="getTokenFactory">The method called to get local token</param>
            <param name="setTokenFactory">The method called to get local token</param>
            <param name="refreshTokenFactory">Refresh token method called when expired or empty</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase`2.WithDelegatingHandler``1(``0,Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Add a custom delegating handler inheriting from <see cref="T:System.Net.Http.DelegatingHandler"/> (serial call)
            </summary>
            <param name="delegatingHandler">A delegating handler</param>
            <param name="strategy">The duplicate strategy if there's any other already (default: Add)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase`2.WithHttpMessageHandler``1(``0)">
            <summary>
            Add a custom http message handler inheriting from <see cref="T:System.Net.Http.HttpMessageHandler"/> (last call)
            </summary>
            <param name="httpMessageHandler">A http message handler</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase`2.WithHeaders(System.Collections.Generic.IList{System.String},Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrRegistrationMode)">
            <summary>
            Add some headers to the request
            </summary>
            <param name="headers">Headers to add to the request</param>
            <param name="strategy">The duplicate strategy if there's any other already (default: Add)</param>
            <param name="mode">Set headers right the way or store it for further attribute key match use (default: Set)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase`2.WithResiliencePipelineKeys(System.String[],System.Collections.Generic.IEnumerable{Apizr.Configuring.ApizrRequestMethod},Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Apply some resilience strategies by getting pipelines from registry with key matching.
            </summary>
            <param name="resiliencePipelineKeys">Resilience pipeline keys from the registry.</param>
            <param name="methodScope">Http or Crud methods to apply pipelines on (default: null = All)</param>
            <param name="duplicateStrategy">The duplicate strategy if there's any other names already (default: Add)</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Configuring.Shared.IApizrSharedRegistrationOptions">
            <summary>
            Options available at both common and proper level for static registrations
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrSharedRegistrationOptions.BaseUriFactory">
            <summary>
            Base uri factory
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrSharedRegistrationOptions.BaseAddressFactory">
            <summary>
            Base address factory
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrSharedRegistrationOptions.BasePathFactory">
            <summary>
            Base path factory
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrSharedRegistrationOptions.HttpTracerModeFactory">
            <summary>
            Http traffic tracing mode factory
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrSharedRegistrationOptions.TrafficVerbosityFactory">
            <summary>
            Http traffic tracing verbosity factory
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrSharedRegistrationOptions.LogLevelsFactory">
            <summary>
            Log levels factory
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrSharedRegistrationOptions.HttpClientHandlerFactory">
            <summary>
            HttpClientHandler factory
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrSharedRegistrationOptions.HttpClientConfigurationBuilder">
            <summary>
            HttpClient configuration builder
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrSharedRegistrationOptions.DelegatingHandlersFactories">
            <summary>
            DelegatingHandler factories
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrSharedRegistrationOptions.HttpMessageHandlerFactory">
            <summary>
            HttpMessageHandler factory
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrSharedRegistrationOptions.OperationTimeoutFactory">
            <summary>
            The operation timeout factory (overall request tries)
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrSharedRegistrationOptions.RequestTimeoutFactory">
            <summary>
            The request timeout factory (each request try)
            </summary>
        </member>
        <member name="P:Apizr.Configuring.Shared.IApizrSharedRegistrationOptions.ExceptionHandlersFactory">
            <summary>
            Exception handlers factory
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBase">
            <summary>
            Options available at both common and proper level for both static and extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder">
            <summary>
            Builder options available at both common and proper level for static registrations
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2">
            <inheritdoc cref="T:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder" />
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithBaseAddress(System.Func{System.String},Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Define your web api base address (could be defined with WebApiAttribute)
            </summary>
            <param name="baseAddressFactory">Your web api base address factory</param>
            <param name="strategy">The duplicate strategy if there's any other already (default: Replace)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithBaseAddress(System.Func{System.Uri},Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Define your web api base address (could be defined with WebApiAttribute)
            </summary>
            <param name="baseAddressFactory">Your web api base address factory</param>
            <param name="strategy">The duplicate strategy if there's any other already (default: Replace)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithBasePath(System.Func{System.String},Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Define your web api base path (could be defined with WebApiAttribute)
            </summary>
            <param name="basePathFactory">Your web api base path factory</param>
            <param name="strategy">The duplicate strategy if there's any other already (default: Replace)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithHttpClientHandler(System.Func{System.Net.Http.HttpClientHandler})">
            <summary>
            Provide a custom HttpClientHandler
            </summary>
            <param name="httpClientHandlerFactory">An <see cref="T:System.Net.Http.HttpClientHandler"/> instance factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.ConfigureHttpClient(System.Action{System.Net.Http.HttpClient},Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Configure HttpClient
            </summary>
            <param name="configureHttpClient">The configuration builder</param>
            <param name="strategy">The duplicate strategy if there's another one already (default: Merge)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithAuthenticationHandler``1(System.Func{Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0})">
            <summary>
            Provide your own <see cref="T:Apizr.Authenticating.AuthenticationHandlerBase"/> implementation factory
            </summary>
            <typeparam name="TAuthenticationHandler">Your <see cref="T:Apizr.Authenticating.AuthenticationHandlerBase"/> implementation</typeparam>
            <param name="authenticationHandlerFactory">A <typeparamref name="TAuthenticationHandler"/> instance factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <summary>
            Provide your own settings management service
            </summary>
            <typeparam name="TSettingsService">Your settings management service (getting constant token)</typeparam>
            <param name="settingsService">A <typeparamref name="TSettingsService"/> instance</param>
            <param name="getTokenExpression">The get only token expression</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}})">
            <summary>
            Provide your own settings management service
            </summary>
            <typeparam name="TSettingsService">Your settings management service (saving/getting token)</typeparam>
            <param name="settingsService">A <typeparamref name="TSettingsService"/> instance</param>
            <param name="getTokenExpression">The get token expression</param>
            <param name="setTokenExpression">The set token expression</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <summary>
            Provide your own token management services
            </summary>
            <typeparam name="TTokenService">Your token management service (refreshing token)</typeparam>
            <param name="tokenService">A <typeparamref name="TTokenService"/> instance</param>
            <param name="refreshTokenExpression">The method called to refresh the token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithAuthenticationHandler``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}},``1,System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <summary>
            Provide your own settings management and token management services
            </summary>
            <typeparam name="TSettingsService">Your settings management service (saving/getting token)</typeparam>
            <typeparam name="TTokenService">Your token management service (refreshing token)</typeparam>
            <param name="settingsService">A <typeparamref name="TSettingsService"/> instance</param>
            <param name="getTokenExpression">The get token expression</param>
            <param name="setTokenExpression">The set token expression</param>
            <param name="tokenService">A <typeparamref name="TTokenService"/> instance</param>
            <param name="refreshTokenExpression">The method called to refresh the token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <summary>
            Provide your own settings management and token management services
            </summary>
            <typeparam name="TAuthService">Your auth management service (saving/getting/refreshing token)</typeparam>
            <param name="authService">A <typeparamref name="TAuthService"/> instance</param>
            <param name="getTokenExpression">The get token expression</param>
            <param name="setTokenExpression">The set token expression</param>
            <param name="refreshTokenExpression">The method called to refresh the token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <summary>
            Provide your own settings management service with its token source
            </summary>
            <typeparam name="TSettingsService">Your settings management service (getting token)</typeparam>
            <param name="settingsService">A <typeparamref name="TSettingsService"/> instance</param>
            <param name="tokenPropertyExpression">The token property to get from and set to</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithAuthenticationHandler``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}},``1,System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <summary>
            Provide your own settings management and token management services
            </summary>
            <typeparam name="TSettingsService">Your settings management service (saving/getting token)</typeparam>
            <typeparam name="TTokenService">Your token management service (refreshing token)</typeparam>
            <param name="settingsService">A <typeparamref name="TSettingsService"/> instance</param>
            <param name="tokenPropertyExpression">The token property to get from and set to</param>
            <param name="tokenService">A <typeparamref name="TTokenService"/> instance</param>
            <param name="refreshTokenMethod">The method called to refresh the token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithAuthenticationHandler``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <summary>
            Provide your own auth management service
            </summary>
            <typeparam name="TAuthService">Your auth management service (saving/getting/refreshing token)</typeparam>
            <param name="authService">A <typeparamref name="TAuthService"/> instance</param>
            <param name="tokenPropertyExpression">The token property to get from and set to</param>
            <param name="refreshTokenMethod">The method called to refresh the token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <summary>
            Provide your own settings management service
            </summary>
            <typeparam name="TSettingsService">Your settings management service (getting constant token)</typeparam>
            <param name="settingsServiceFactory">A <typeparamref name="TSettingsService"/> instance factory</param>
            <param name="getTokenExpression">The get only token expression</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}})">
            <summary>
            Provide your own settings management service
            </summary>
            <typeparam name="TSettingsService">Your settings management service (saving/getting token)</typeparam>
            <param name="settingsServiceFactory">A <typeparamref name="TSettingsService"/> instance factory</param>
            <param name="getTokenExpression">The get token expression</param>
            <param name="setTokenExpression">The set token expression</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <summary>
            Provide your own token management services
            </summary>
            <typeparam name="TTokenService">Your token management service (refreshing token)</typeparam>
            <param name="tokenServiceFactory">A <typeparamref name="TTokenService"/> instance factory</param>
            <param name="refreshTokenExpression">The method called to refresh the token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithAuthenticationHandler``2(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}},System.Func{``1},System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <summary>
            Provide your own settings management and token management services
            </summary>
            <typeparam name="TSettingsService">Your settings management service (saving/getting token)</typeparam>
            <typeparam name="TTokenService">Your token management service (refreshing token)</typeparam>
            <param name="settingsServiceFactory">A <typeparamref name="TSettingsService"/> instance factory</param>
            <param name="getTokenExpression">The get token expression</param>
            <param name="setTokenExpression">The set token expression</param>
            <param name="tokenServiceFactory">A <typeparamref name="TTokenService"/> instance factory</param>
            <param name="refreshTokenExpression">The method called to refresh the token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <summary>
            Provide your own auth management service
            </summary>
            <typeparam name="TAuthService">Your auth management service (saving/getting/refreshing token)</typeparam>
            <param name="authServiceFactory">A <typeparamref name="TAuthService"/> instance factory</param>
            <param name="getTokenExpression">The get token expression</param>
            <param name="setTokenExpression">The set token expression</param>
            <param name="refreshTokenExpression">The method called to refresh the token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <summary>
            Provide your own settings management service with its token source
            </summary>
            <typeparam name="TSettingsService">Your settings management service (getting token)</typeparam>
            <param name="settingsServiceFactory">A <typeparamref name="TSettingsService"/> instance factory</param>
            <param name="tokenPropertyExpression">The token property to get from and set to</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithAuthenticationHandler``2(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Func{``1},System.Linq.Expressions.Expression{System.Func{``1,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <summary>
            Provide your own settings management and token management services
            </summary>
            <typeparam name="TSettingsService">Your settings management service (saving/getting token)</typeparam>
            <typeparam name="TTokenService">Your token management service (refreshing token)</typeparam>
            <param name="settingsServiceFactory">A <typeparamref name="TSettingsService"/> instance factory</param>
            <param name="tokenPropertyExpression">The token property to get from and set to</param>
            <param name="tokenServiceFactory">A <typeparamref name="TTokenService"/> instance factory</param>
            <param name="refreshTokenMethod">The method called to refresh the token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithAuthenticationHandler``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Linq.Expressions.Expression{System.Func{``0,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.String}}})">
            <summary>
            Provide your own auth management service
            </summary>
            <typeparam name="TAuthService">Your auth management service (saving/getting/refreshing token)</typeparam>
            <param name="authServiceFactory">A <typeparamref name="TAuthService"/> instance factory</param>
            <param name="tokenPropertyExpression">The token property to get from and set to</param>
            <param name="refreshTokenMethod">The method called to refresh the token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithDelegatingHandler``1(System.Func{Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0},Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Add a custom delegating handler inheriting from <see cref="T:System.Net.Http.DelegatingHandler"/> (serial call)
            </summary>
            <param name="delegatingHandlerFactory">A delegating handler factory</param>
            <param name="strategy">The duplicate strategy if there's any other already (default: Add)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithHttpMessageHandler``1(System.Func{Apizr.Configuring.Manager.IApizrManagerOptionsBase,``0})">
            <summary>
            Add a custom http message handler inheriting from <see cref="T:System.Net.Http.HttpMessageHandler"/> (last call)
            </summary>
            <param name="httpMessageHandlerFactory">A http message handler factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithLogging(System.Func{Apizr.Logging.HttpTracerMode},System.Func{Apizr.Logging.HttpMessageParts},System.Func{Microsoft.Extensions.Logging.LogLevel[]})">
            <summary>
            Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute)
            </summary>
            <param name="httpTracerModeFactory">Http traffic tracing mode</param>
            <param name="trafficVerbosityFactory">Http traffic tracing verbosity factory</param>
            <param name="logLevelsFactory">Log levels factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithLogging(System.Func{System.ValueTuple{Apizr.Logging.HttpTracerMode,Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[]}})">
            <summary>
            Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute)
            </summary>
            <param name="loggingConfigurationFactory">Logging configuration factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithHeaders(System.Func{System.Collections.Generic.IList{System.String}},Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrLifetimeScope,Apizr.Configuring.ApizrRegistrationMode)">
            <summary>
            Add some headers to the request
            </summary>
            <param name="headersFactory">Headers factory</param>
            <param name="strategy">The duplicate strategy if there's another one already (default: Add)</param>
            <param name="scope">Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh)</param>
            <param name="mode">Set headers right the way or store it for further attribute key match use (default: Set)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithHeaders``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}}[],Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrLifetimeScope,Apizr.Configuring.ApizrRegistrationMode)">
            <summary>
            Add some headers to the request loaded from service properties
            </summary>
            <typeparam name="TSettingsService">Your settings management service (getting headers)</typeparam>
            <param name="settingsService">A <typeparamref name="TSettingsService"/> instance</param>
            <param name="headerProperties">The header properties to get from</param>
            <param name="strategy">The duplicate strategy if there's another one already (default: Add)</param>
            <param name="scope">Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh)</param>
            <param name="mode">Set headers right the way or store it for further attribute key match use (default: Set)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithHeaders``1(System.Func{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}}[],Apizr.Configuring.ApizrDuplicateStrategy,Apizr.Configuring.ApizrLifetimeScope,Apizr.Configuring.ApizrRegistrationMode)">
            <summary>
            Add some headers to the request loaded from service properties
            </summary>
            <typeparam name="TSettingsService">Your settings management service (getting headers)</typeparam>
            <param name="settingsServiceFactory">A <typeparamref name="TSettingsService"/> instance factory</param>
            <param name="headerProperties">The header properties to get from</param>
            <param name="strategy">The duplicate strategy if there's another one already (default: Add)</param>
            <param name="scope">Tells Apizr if you want to refresh or not headers values at request time (default: Api = no refresh)</param>
            <param name="mode">Set headers right the way or store it for further attribute key match use (default: Set)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithOperationTimeout(System.Func{System.TimeSpan})">
            <summary>
            Set a timeout to the operation (overall request tries)
            </summary>
            <param name="timeoutFactory">The operation timeout factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithRequestTimeout(System.Func{System.TimeSpan})">
            <summary>
            Set a timeout to the request (each request try)
            </summary>
            <param name="timeoutFactory">The request timeout factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithResilienceProperty``1(Polly.ResiliencePropertyKey{``0},System.Func{``0})">
            <summary>
            Set some resilience properties to the resilience context
            </summary>
            <param name="key">The resilience property's key</param>
            <param name="valueFactory">The resilience property's value factory</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder`2.WithExCatching``1(System.Func{``0},System.Boolean,Apizr.Configuring.ApizrDuplicateStrategy)">
            <summary>
            Catch potential exceptions
            </summary>
            <param name="exceptionHandlerFactory">The exception handler called back and returning handled boolean flag Task</param>
            <param name="letThrowOnHandledException">Let throw potential exception even if it's handled (default: true)</param>
            <param name="strategy">The duplicate strategy if there's another callback already (default: Replace)</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilderBase">
            <summary>
            Builder options available at both common and proper level for both static and extended registrations
            </summary>
        </member>
        <member name="T:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilderBase`2">
            <inheritdoc cref="T:Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilderBase" />
        </member>
        <member name="T:Apizr.Connecting.DefaultConnectivityHandler">
            <summary>
            The connectivity handler method mapping default implementation
            </summary>
        </member>
        <member name="M:Apizr.Connecting.DefaultConnectivityHandler.#ctor(System.Func{System.Boolean})">
            <summary>
            The connectivity handler constructor
            </summary>
            <param name="connectivityChecker"></param>
        </member>
        <member name="M:Apizr.Connecting.DefaultConnectivityHandler.IsConnected">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Connecting.IConnectivityHandler">
            <summary>
            The connectivity handler method mapping interface
            Implement it to provide some connectivity features to Apizr
            </summary>
        </member>
        <member name="M:Apizr.Connecting.IConnectivityHandler.IsConnected">
            <summary>
            Map Apizr connectivity check to your connectivity handler
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``2,System.Threading.Tasks.Task}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{Refit.IApiResponse}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TApiData">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{Refit.ApiResponse{``1}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a response result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TApiData">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{Refit.IApiResponse{``1}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a response result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TApiData">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{Refit.IApiResponse}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TApiData">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{Refit.ApiResponse{``1}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a response result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TApiData">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{Refit.IApiResponse{``1}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a response result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TApiData">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{Refit.ApiResponse{``2}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{Refit.IApiResponse{``2}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{``2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{Refit.ApiResponse{``2}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{Refit.IApiResponse{``2}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{Refit.IApiResponse}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{Refit.ApiResponse{``2}}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{Refit.IApiResponse{``2}}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``2,System.Threading.Tasks.Task{Refit.IApiResponse}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``2,System.Threading.Tasks.Task{Refit.ApiResponse{``2}}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``2,System.Threading.Tasks.Task{Refit.IApiResponse{``2}}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``5(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelResultData">The mapped model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The mapped api request data type</typeparam>
            <typeparam name="TModelRequestData">The model request data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``5(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{Refit.ApiResponse{``2}}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelResultData">The mapped model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The mapped api request data type</typeparam>
            <typeparam name="TModelRequestData">The model request data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``5(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{Refit.IApiResponse{``2}}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelResultData">The mapped model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The mapped api request data type</typeparam>
            <typeparam name="TModelRequestData">The model request data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``5(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelResultData">The mapped model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The mapped api request data type</typeparam>
            <typeparam name="TModelRequestData">The model request data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``5(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``3,System.Threading.Tasks.Task{Refit.ApiResponse{``2}}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelResultData">The mapped model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The mapped api request data type</typeparam>
            <typeparam name="TModelRequestData">The model request data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ExecuteAsync``5(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``3,System.Threading.Tasks.Task{Refit.IApiResponse{``2}}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TModelResultData">The mapped model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The mapped api request data type</typeparam>
            <typeparam name="TModelRequestData">The model request data type</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.CreateAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a Create request
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="registry">The registry</param>
            <param name="entity">The entity to create</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.SafeCreateAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a Create request
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="registry">The registry</param>
            <param name="entity">The entity to create</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.CreateAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped Create request, returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="registry">The registry</param>
            <param name="entity">The entity to create</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.SafeCreateAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped Create request, returning a mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="registry">The registry</param>
            <param name="entity">The entity to create</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a ReadAll request
            </summary>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="registry">The registry</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.SafeReadAllAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a ReadAll request
            </summary>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="registry">The registry</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync``4(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a ReadAll request, returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="registry">The registry</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.SafeReadAllAsync``4(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a ReadAll request, returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="registry">The registry</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync``4(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a ReadAll request with some parameters
            </summary>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="registry">The registry</param>
            <param name="readAllParams">The read all filters</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.SafeReadAllAsync``4(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a ReadAll request with some parameters
            </summary>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="registry">The registry</param>
            <param name="readAllParams">The read all filters</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ReadAllAsync``5(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a ReadAll request with some parameters, returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="registry">The registry</param>
            <param name="readAllParams">The read all filters</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.SafeReadAllAsync``5(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a ReadAll request with some parameters, returning mapped result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="registry">The registry</param>
            <param name="readAllParams">The read all filters</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ReadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a Read request
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="registry">The registry</param>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.SafeReadAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a Read request
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="registry">The registry</param>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ReadAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a Read request
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="registry">The registry</param>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.SafeReadAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a Read request
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="registry">The registry</param>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ReadAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a Read request, returning mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="registry">The registry</param>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.SafeReadAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a Read request, returning mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="registry">The registry</param>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ReadAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``2,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a Read request, returning mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="registry">The registry</param>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.SafeReadAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``2,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a Read request, returning mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="registry">The registry</param>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.UpdateAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an Update request
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="registry">The registry</param>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.SafeUpdateAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an Update request
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="registry">The registry</param>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.UpdateAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``1,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an Update request
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="registry">The registry</param>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.SafeUpdateAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``1,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an Update request
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="registry">The registry</param>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.UpdateAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped Update request, returning mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="registry">The registry</param>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.SafeUpdateAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped Update request, returning mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="registry">The registry</param>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.UpdateAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``2,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped Update request, returning mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="registry">The registry</param>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.SafeUpdateAsync``3(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``2,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped Update request, returning mapped result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="registry">The registry</param>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.DeleteAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an Delete request
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="registry">The registry</param>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.SafeDeleteAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an Delete request
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="registry">The registry</param>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.DeleteAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an Delete request
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="registry">The registry</param>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.SafeDeleteAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an Delete request
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="registry">The registry</param>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync``1(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Threading.CancellationToken)">
            <summary>
            Clear all cache
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <param name="registry">The registry</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken)">
            <summary>
            Clear the cache of a specific request
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TResult">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The specific <typeparamref name="TWebApi"/>'s task to clear cache for</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{Refit.ApiResponse{``1}}}},System.Threading.CancellationToken)">
            <summary>
            Clear the cache of a specific request
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TResult">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The specific <typeparamref name="TWebApi"/>'s task to clear cache for</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.ApizrRegistryExtensions.ClearCacheAsync``2(Apizr.Configuring.Registry.IApizrEnumerableRegistry,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{Refit.IApiResponse{``1}}}},System.Threading.CancellationToken)">
            <summary>
            Clear the cache of a specific request
            </summary>
            <typeparam name="TWebApi">The web api to manage</typeparam>
            <typeparam name="TResult">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="registry">The registry</param>
            <param name="executeApiMethod">The specific <typeparamref name="TWebApi"/>'s task to clear cache for</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Extending.EnumerableExtensions">
            <summary>
            Some enumerable extensions
            </summary>
        </member>
        <member name="M:Apizr.Extending.EnumerableExtensions.Low(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.LogLevel})">
            <summary>
            Return the lowest value
            </summary>
            <param name="enumerable">The source enumerable</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.EnumerableExtensions.Medium(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.LogLevel})">
            <summary>
            Return the closest value to the middle
            </summary>
            <param name="enumerable">The source enumerable</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.EnumerableExtensions.High(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.LogLevel})">
            <summary>
            Return the highest value
            </summary>
            <param name="enumerable">The source enumerable</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.HttpRequestMessageExtensions.TrySetHeader(System.Net.Http.Headers.HttpHeaders,System.String,System.String,System.Boolean)">
            <summary>
            Cloned from Refit repository
            </summary>
        </member>
        <member name="M:Apizr.Extending.HttpRequestMessageExtensions.TrySetHeader(System.Net.Http.Headers.HttpHeaders,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Cloned from Refit repository
            </summary>
        </member>
        <member name="T:Apizr.Extending.TypeExtensions">
            <summary>
            Some Type extensions
            </summary>
        </member>
        <member name="M:Apizr.Extending.TypeExtensions.IsAssignableFromGenericType(System.Type,System.Type)">
            <summary>
            Checks if the generic type is assignable from the given type
            </summary>
            <param name="genericType">The generic type</param>
            <param name="givenType">The given type</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.TypeExtensions.MakeGenericTypeIfNeeded(System.Type,System.Type[])">
            <summary>
            Returns a closed generic type based on provided type arguments
            </summary>
            <param name="type">The open generic type</param>
            <param name="typeArguments">The type arguments</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.TypeExtensions.IsOpenGeneric(System.Type)">
            <summary>
            Checks if the type is open generic
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Extending.TypeExtensions.GetFriendlyName(System.Type)">
            <summary>
            Returns a more friendly readable type name
            </summary>
            <param name="type">The type to get friendly name of</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Helping.UrlHelper">
            <summary>
            Some url helpers
            </summary>
        </member>
        <member name="M:Apizr.Helping.UrlHelper.Combine(System.String,System.String)">
            <summary>
            Combines the url base and the relative url into one, consolidating the '/' between them
            </summary>
            <param name="baseUrl">Base url that will be combined</param>
            <param name="relativePath">The relative path to combine</param>
            <returns>The merged url</returns>
        </member>
        <member name="M:Apizr.Helping.UrlHelper.Combine(System.String,System.String[])">
            <summary>
            Combines the url base and the array of relatives urls into one, consolidating the '/' between them
            </summary>
            <param name="baseUrl">Base url that will be combined</param>
            <param name="relativePaths">The array of relative paths to combine</param>
            <returns>The merged url</returns>
        </member>
        <member name="T:Apizr.IApizrBuilder">
            <summary>
            The builder
            </summary>
        </member>
        <member name="M:Apizr.IApizrBuilder.CreateRegistry(System.Action{Apizr.Configuring.Registry.IApizrRegistryBuilder},System.Action{Apizr.Configuring.Common.IApizrCommonOptionsBuilder})">
            <summary>
            Create a registry with all managers built with both common and proper options
            </summary>
            <param name="registryBuilder">The registry builder with access to proper options</param>
            <param name="commonOptionsBuilder">The common options shared by all managers</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrBuilder.CreateCrudManagerFor``1(System.Action{Apizr.Configuring.Manager.IApizrManagerOptionsBuilder})">
            <summary>
            Create a <see cref="T:Apizr.ApizrManager`1"/> instance for <typeparamref name="T"/> object type (class), 
            with key of type <see cref="T:System.Int32"/> and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrBuilder.CreateCrudManagerFor``2(System.Action{Apizr.Configuring.Manager.IApizrManagerOptionsBuilder})">
            <summary>
            Create a <see cref="T:Apizr.ApizrManager`1"/> instance for <typeparamref name="T"/> object type (class), 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrBuilder.CreateCrudManagerFor``3(System.Action{Apizr.Configuring.Manager.IApizrManagerOptionsBuilder})">
            <summary>
            Create a <see cref="T:Apizr.ApizrManager`1"/> instance for <typeparamref name="T"/> object type (class), 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <typeparamref name="TReadAllResult"/>
            and ReadAll query parameters of type IDictionary{string,object}
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrBuilder.CreateCrudManagerFor``4(System.Action{Apizr.Configuring.Manager.IApizrManagerOptionsBuilder})">
            <summary>
            Create a <see cref="T:Apizr.ApizrManager`1"/> instance for <typeparamref name="T"/> object type (class), 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <typeparamref name="TReadAllResult"/>
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters</typeparam>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrBuilder.CreateCrudManagerFor``5(System.Func{Apizr.ILazyFactory{Apizr.Requesting.ICrudApi{``0,``1,``2,``3}},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Apizr.ILazyFactory{Polly.Registry.ResiliencePipelineRegistry{System.String}},Apizr.Configuring.Manager.IApizrManagerOptions{Apizr.Requesting.ICrudApi{``0,``1,``2,``3}},``4},System.Action{Apizr.Configuring.Manager.IApizrManagerOptionsBuilder})">
            <summary>
            Create a <typeparamref name="TApizrManager"/> instance for a managed crud api for <typeparamref name="T"/> object (class), 
            with key of type <typeparamref name="TKey"/> (primitive) and "ReadAll" query result of type <typeparamref name="TReadAllResult"/>
            and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type)
            </summary>
            <typeparam name="T">The object type to manage with crud api calls (class)</typeparam>
            <typeparam name="TKey">The object key type (primitive)</typeparam>
            <typeparam name="TApizrManager">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation</typeparam>
            <typeparam name="TReadAllResult">"ReadAll" query result type
            (should inherit from <see cref="T:System.Collections.Generic.IEnumerable`1"/> or be of class type)</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters</typeparam>
            <param name="apizrManagerFactory">The custom manager implementation instance factory</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrBuilder.CreateManagerFor``1(System.Action{Apizr.Configuring.Manager.IApizrManagerOptionsBuilder})">
            <summary>
            Create a <see cref="T:Apizr.ApizrManager`1"/> instance
            </summary>
            <typeparam name="TWebApi">The web api interface to manage</typeparam>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrBuilder.CreateManagerFor``2(System.Func{Apizr.ILazyFactory{``0},Apizr.Connecting.IConnectivityHandler,Apizr.Caching.ICacheHandler,Apizr.Mapping.IMappingHandler,Apizr.ILazyFactory{Polly.Registry.ResiliencePipelineRegistry{System.String}},Apizr.Configuring.Manager.IApizrManagerOptions{``0},``1},System.Action{Apizr.Configuring.Manager.IApizrManagerOptionsBuilder})">
            <summary>
            Create a <typeparamref name="TApizrManager"/> instance for a managed <typeparamref name="TWebApi"/>
            </summary>
            <typeparam name="TWebApi">The web api interface to manage</typeparam>
            <typeparam name="TApizrManager">A custom <see cref="T:Apizr.IApizrManager`1"/> implementation</typeparam>
            <param name="apizrManagerFactory">The custom manager implementation instance factory</param>
            <param name="optionsBuilder">The builder defining some options</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.IApizrManager">
            <summary>
            The manager definition
            </summary>
        </member>
        <member name="T:Apizr.IApizrManager`1">
            <summary>
            The manager encapsulating <typeparamref name="TWebApi"/>'s task
            </summary>
            <typeparam name="TWebApi">The web api interface to manage</typeparam>
        </member>
        <member name="P:Apizr.IApizrManager`1.Api">
            <summary>
            Original Refit Api without any Apizr management. You should use ExecuteAsync instead to get all the Apizr goodness :)
            </summary>
        </member>
        <member name="P:Apizr.IApizrManager`1.Options">
            <summary>
            Basic Apizr options
            </summary>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``1,System.Threading.Tasks.Task}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{Refit.IApiResponse}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <typeparam name="TApiData">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{Refit.ApiResponse{``0}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a response result
            </summary>
            <typeparam name="TApiData">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{Refit.IApiResponse{``0}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a response result
            </summary>
            <typeparam name="TApiData">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{Refit.IApiResponse}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``1(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{``0}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task
            </summary>
            <typeparam name="TApiData">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``1(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{Refit.ApiResponse{``0}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a response result
            </summary>
            <typeparam name="TApiData">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``1(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{Refit.IApiResponse{``0}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a response result
            </summary>
            <typeparam name="TApiData">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/>'s task to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{Refit.ApiResponse{``1}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{Refit.IApiResponse{``1}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{Refit.ApiResponse{``1}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{Refit.IApiResponse{``1}}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task{Refit.IApiResponse}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task{``1}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task{Refit.ApiResponse{``1}}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task{Refit.IApiResponse{``1}}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``1,System.Threading.Tasks.Task{Refit.IApiResponse}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``1,System.Threading.Tasks.Task{``1}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``1,System.Threading.Tasks.Task{Refit.ApiResponse{``1}}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``1,System.Threading.Tasks.Task{Refit.IApiResponse{``1}}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``4(System.Linq.Expressions.Expression{System.Func{`0,``2,System.Threading.Tasks.Task{``1}}},``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TModelResultData">The mapped model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The mapped api request data type</typeparam>
            <typeparam name="TModelRequestData">The model request data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``4(System.Linq.Expressions.Expression{System.Func{`0,``2,System.Threading.Tasks.Task{Refit.ApiResponse{``1}}}},``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TModelResultData">The mapped model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The mapped api request data type</typeparam>
            <typeparam name="TModelRequestData">The model request data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``4(System.Linq.Expressions.Expression{System.Func{`0,``2,System.Threading.Tasks.Task{Refit.IApiResponse{``1}}}},``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TModelResultData">The mapped model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The mapped api request data type</typeparam>
            <typeparam name="TModelRequestData">The model request data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``4(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``2,System.Threading.Tasks.Task{``1}}},``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped result
            </summary>
            <typeparam name="TModelResultData">The mapped model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The mapped api request data type</typeparam>
            <typeparam name="TModelRequestData">The model request data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``4(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``2,System.Threading.Tasks.Task{Refit.ApiResponse{``1}}}},``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TModelResultData">The mapped model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The mapped api request data type</typeparam>
            <typeparam name="TModelRequestData">The model request data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ExecuteAsync``4(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``2,System.Threading.Tasks.Task{Refit.IApiResponse{``1}}}},``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Execute a managed <typeparamref name="TWebApi"/>'s task returning a mapped response result
            </summary>
            <typeparam name="TModelResultData">The mapped model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The mapped api request data type</typeparam>
            <typeparam name="TModelRequestData">The model request data type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ClearCacheAsync(System.Threading.CancellationToken)">
            <summary>
            Clear all cache
            </summary>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ClearCacheAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}},System.Threading.CancellationToken)">
            <summary>
            Clear the cache of a specific request
            </summary>
            <typeparam name="TResult">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="executeApiMethod">The specific <typeparamref name="TWebApi"/>'s task to clear cache for</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ClearCacheAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{Refit.ApiResponse{``0}}}},System.Threading.CancellationToken)">
            <summary>
            Clear the cache of a specific request
            </summary>
            <typeparam name="TResult">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="executeApiMethod">The specific <typeparamref name="TWebApi"/>'s task to clear cache for</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.IApizrManager`1.ClearCacheAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{Refit.IApiResponse{``0}}}},System.Threading.CancellationToken)">
            <summary>
            Clear the cache of a specific request
            </summary>
            <typeparam name="TResult">The <typeparamref name="TWebApi"/>'s task result</typeparam>
            <param name="executeApiMethod">The specific <typeparamref name="TWebApi"/>'s task to clear cache for</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.IApizrResponse">
            <summary>
            Base interface used to represent an API response managed by Apizr.
            </summary>
        </member>
        <member name="P:Apizr.IApizrResponse.IsSuccess">
            <summary>
            Indicates whether the request was successful.
            </summary>
        </member>
        <member name="P:Apizr.IApizrResponse.ApiResponse">
            <summary>
            Base interface used to represent an API response.
            </summary>
        </member>
        <member name="P:Apizr.IApizrResponse.Exception">
            <summary>
            The <see cref="T:Apizr.ApizrException"/> object in case of unsuccessful response.
            </summary>
        </member>
        <member name="T:Apizr.IApizrResponse`1">
            <summary>
            Interface used to represent an API response managed by Apizr.
            </summary>
            <typeparam name="TResult">Deserialized request content as <typeparamref name="TResult"/></typeparam>
        </member>
        <member name="P:Apizr.IApizrResponse`1.Result">
            <summary>
            Deserialized request or cache content as <typeparamref name="TResult"/>.
            </summary>
        </member>
        <member name="P:Apizr.IApizrResponse`1.DataSource">
            <summary>
            The source of the result data (might be from the request or the cache).
            </summary>
        </member>
        <member name="T:Apizr.ILazyFactory`1">
            <summary>
            A lazy instance
            </summary>
            <typeparam name="TInstance">Type of your instance</typeparam>
        </member>
        <member name="P:Apizr.ILazyFactory`1.Value">
            <summary>
            The lazy instance
            </summary>
        </member>
        <member name="T:Apizr.LazyFactory`1">
            <inheritdoc cref="T:Apizr.ILazyFactory`1"/>
        </member>
        <member name="M:Apizr.LazyFactory`1.#ctor(System.Func{`0})">
            <summary>
            Lazy factory constructor
            </summary>
            <param name="instanceFactory">The factory to be lazy</param>
        </member>
        <member name="M:Apizr.LazyFactory`1.#ctor(System.Func{System.Object})">
            <summary>
            Lazy factory constructor
            </summary>
            <param name="instanceFactory">The factory to be lazy</param>
        </member>
        <member name="T:Apizr.Logging.Attributes.LogAttribute">
            <summary>
            Tells Apizr to trace and log HTTP(s) traffic
            </summary>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttribute.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttribute.#ctor(Apizr.Logging.HttpMessageParts)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttribute.#ctor(Apizr.Logging.HttpTracerMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttribute.#ctor(Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttribute.#ctor(Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttribute.#ctor(Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttribute.#ctor(Apizr.Logging.HttpTracerMode,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttribute.#ctor(Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Logging.Attributes.LogAttributeBase">
            <summary>
            Tells Apizr to trace and log HTTP(s) traffic
            </summary>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttributeBase.#ctor">
            <summary>
            Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical)
            </summary>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttributeBase.#ctor(Apizr.Logging.HttpMessageParts)">
            <summary>
            Trace http traffic at specified verbosity and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical)
            </summary>
            <param name="trafficVerbosity">Http traffic tracing verbosity (default: all)</param>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttributeBase.#ctor(Apizr.Logging.HttpTracerMode)">
            <summary>
            Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical)
            </summary>
            <param name="httpTracerMode">Http traffic tracing mode (default: Everything)</param>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttributeBase.#ctor(Microsoft.Extensions.Logging.LogLevel[])">
            <summary>
            Trace All http traffic and log Apizr execution steps at specified log levels
            </summary>
            <param name="logLevels">Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical)</param>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttributeBase.#ctor(Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode)">
            <summary>
            Trace http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical)
            </summary>
            <param name="trafficVerbosity">Http traffic tracing verbosity (default: all)</param>
            <param name="httpTracerMode">Http traffic tracing mode (default: Everything)</param>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttributeBase.#ctor(Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[])">
            <summary>
            Trace All http traffic and log Apizr execution steps at specified log levels
            </summary>
            <param name="trafficVerbosity">Http traffic tracing verbosity (default: all)</param>
            <param name="logLevels">Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical)</param>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttributeBase.#ctor(Apizr.Logging.HttpTracerMode,Microsoft.Extensions.Logging.LogLevel[])">
            <summary>
            Trace All http traffic and log Apizr execution steps at specified log levels
            </summary>
            <param name="httpTracerMode">Http traffic tracing mode (default: Everything)</param>
            <param name="logLevels">Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical)</param>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogAttributeBase.#ctor(Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode,Microsoft.Extensions.Logging.LogLevel[])">
            <summary>
            Trace All http traffic and log Apizr execution steps at specified log levels
            </summary>
            <param name="trafficVerbosity">Http traffic tracing verbosity (default: all)</param>
            <param name="httpTracerMode">Http traffic tracing mode (default: Everything)</param>
            <param name="logLevels">Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical)</param>
        </member>
        <member name="P:Apizr.Logging.Attributes.LogAttributeBase.HttpTracerMode">
            <summary>
            Http traffic tracing mode (default: Everything)
            </summary>
        </member>
        <member name="P:Apizr.Logging.Attributes.LogAttributeBase.TrafficVerbosity">
            <summary>
            Http traffic tracing verbosity (default: All)
            </summary>
        </member>
        <member name="P:Apizr.Logging.Attributes.LogAttributeBase.LogLevels">
            <summary>
            Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical)
            </summary>
        </member>
        <member name="T:Apizr.Logging.Attributes.LogCreateAttribute">
            <summary>
            Tells Apizr to trace and log HTTP(s) traffic on Create method
            </summary>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogCreateAttribute.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogCreateAttribute.#ctor(Apizr.Logging.HttpMessageParts)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogCreateAttribute.#ctor(Apizr.Logging.HttpTracerMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogCreateAttribute.#ctor(Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogCreateAttribute.#ctor(Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogCreateAttribute.#ctor(Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogCreateAttribute.#ctor(Apizr.Logging.HttpTracerMode,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogCreateAttribute.#ctor(Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Logging.Attributes.LogDeleteAttribute">
            <summary>
            Tells Apizr to trace and log HTTP(s) traffic on Delete method
            </summary>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogDeleteAttribute.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogDeleteAttribute.#ctor(Apizr.Logging.HttpMessageParts)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogDeleteAttribute.#ctor(Apizr.Logging.HttpTracerMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogDeleteAttribute.#ctor(Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogDeleteAttribute.#ctor(Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogDeleteAttribute.#ctor(Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogDeleteAttribute.#ctor(Apizr.Logging.HttpTracerMode,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogDeleteAttribute.#ctor(Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Logging.Attributes.LogReadAllAttribute">
            <summary>
            Tells Apizr to trace and log HTTP(s) traffic on ReadAll method
            </summary>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogReadAllAttribute.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogReadAllAttribute.#ctor(Apizr.Logging.HttpMessageParts)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogReadAllAttribute.#ctor(Apizr.Logging.HttpTracerMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogReadAllAttribute.#ctor(Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogReadAllAttribute.#ctor(Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogReadAllAttribute.#ctor(Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogReadAllAttribute.#ctor(Apizr.Logging.HttpTracerMode,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogReadAllAttribute.#ctor(Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Logging.Attributes.LogReadAttribute">
            <summary>
            Tells Apizr to trace and log HTTP(s) traffic on Read method
            </summary>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogReadAttribute.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogReadAttribute.#ctor(Apizr.Logging.HttpMessageParts)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogReadAttribute.#ctor(Apizr.Logging.HttpTracerMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogReadAttribute.#ctor(Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogReadAttribute.#ctor(Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogReadAttribute.#ctor(Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogReadAttribute.#ctor(Apizr.Logging.HttpTracerMode,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogReadAttribute.#ctor(Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Logging.Attributes.LogUpdateAttribute">
            <summary>
            Tells Apizr to trace and log HTTP(s) traffic on Update method
            </summary>
        </member>
        <member name="M:Apizr.Logging.Attributes.LogUpdateAttribute.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogUpdateAttribute.#ctor(Apizr.Logging.HttpMessageParts)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogUpdateAttribute.#ctor(Apizr.Logging.HttpTracerMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogUpdateAttribute.#ctor(Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogUpdateAttribute.#ctor(Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogUpdateAttribute.#ctor(Apizr.Logging.HttpMessageParts,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogUpdateAttribute.#ctor(Apizr.Logging.HttpTracerMode,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Logging.Attributes.LogUpdateAttribute.#ctor(Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode,Microsoft.Extensions.Logging.LogLevel[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Logging.ExtendedHttpHandlerBuilder">
            <summary>
            HttpHandler builder
            </summary>
        </member>
        <member name="P:Apizr.Logging.ExtendedHttpHandlerBuilder.HttpTracerHandler">
            <summary>
            Underlying instance of the <typeparamref name="T:HttpTracer.HttpHandlerBuilder:HttpTracer.HttpHandlerBuilder"/> class.
            </summary>
        </member>
        <member name="M:Apizr.Logging.ExtendedHttpHandlerBuilder.#ctor(Apizr.Configuring.Manager.IApizrManagerOptionsBase)">
            <summary>
            Initializes a new instance of the <typeparamref name="T:ExtendedHttpTracerHandler:ExtendedHttpTracerHandler"/> class.
            </summary>
            <param name="apizrOptions"></param>
        </member>
        <member name="M:Apizr.Logging.ExtendedHttpHandlerBuilder.#ctor(System.Net.Http.HttpClientHandler,Apizr.Configuring.Manager.IApizrManagerOptionsBase)">
            <summary>
            Initializes a new instance of the <typeparamref name="T:ExtendedHttpTracerHandler:ExtendedHttpTracerHandler"/> class.
            </summary>
            <param name="innerHandler">HttpClientHandler.</param>
            <param name="apizrOptions"></param>
        </member>
        <member name="M:Apizr.Logging.ExtendedHttpHandlerBuilder.#ctor(Apizr.Logging.ExtendedHttpTracerHandler)">
            <summary>
            Initializes a new instance of the <typeparamref name="T:ExtendedHttpTracerHandler:ExtendedHttpTracerHandler"/> class.
            </summary>
            <param name="tracerHandler">Tracer handler.</param>
        </member>
        <member name="M:Apizr.Logging.ExtendedHttpHandlerBuilder.AddHandler(System.Net.Http.HttpMessageHandler)">
            <summary>
            Adds a <see cref="T:System.Net.Http.HttpMessageHandler"/> to the chain of handlers.
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Logging.ExtendedHttpHandlerBuilder.Build">
            <summary>
            Adds <see cref="T:System.Net.Http.DelegatingHandler"/> as the last link of the chain.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Apizr.Logging.ExtendedHttpTracerHandler">
            <summary>
            The Http tracer delegating handler
            </summary>
        </member>
        <member name="P:Apizr.Logging.ExtendedHttpTracerHandler.DefaultDurationFormat">
            <summary>
            Duration string format. Defaults to "Duration: {0:ss\\:fffffff}"
            </summary>
            <remarks>
            <para>
            Receives a <typeparamref name="TimeSpan"/> at the [0] index.
            </para>
            <para>
            See <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings">https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings</a> for more details on TimeSpan formatting.
            </para>
            </remarks>
        </member>
        <member name="M:Apizr.Logging.ExtendedHttpTracerHandler.#ctor(Apizr.Configuring.Manager.IApizrManagerOptionsBase)">
            <summary> Constructs the <see cref="T:Apizr.Logging.ExtendedHttpTracerHandler"/> with a custom <see cref="T:Microsoft.Extensions.Logging.ILogger"/> and a custom <see cref="T:System.Net.Http.HttpMessageHandler"/></summary>
            <param name="apizrOptions">Apizr options</param>
        </member>
        <member name="M:Apizr.Logging.ExtendedHttpTracerHandler.#ctor(System.Net.Http.HttpMessageHandler,Apizr.Configuring.Manager.IApizrManagerOptionsBase)">
            <summary> Constructs the <see cref="T:Apizr.Logging.ExtendedHttpTracerHandler"/> with a custom <see cref="T:Microsoft.Extensions.Logging.ILogger"/> and a custom <see cref="T:System.Net.Http.HttpMessageHandler"/></summary>
            <param name="handler">User defined <see cref="T:System.Net.Http.HttpMessageHandler"/></param>
            <param name="apizrOptions">Apizr options</param>
        </member>
        <member name="M:Apizr.Logging.ExtendedHttpTracerHandler.LogHttpRequest(System.Net.Http.HttpRequestMessage,Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.LogLevel[],Apizr.Logging.HttpMessageParts,System.Func{System.String,System.Boolean})">
            <summary>
            Logs Http request
            </summary>
            <param name="request">The request</param>
            <param name="logger">The logger</param>
            <param name="logLevels">The log levels</param>
            <param name="verbosity">The verbosity</param>
            <param name="shouldRedactHeaderValue">Header values redaction rules</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Logging.ExtendedHttpTracerHandler.LogHttpResponse(System.Net.Http.HttpResponseMessage,System.TimeSpan,Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.LogLevel[],Apizr.Logging.HttpMessageParts,System.Func{System.String,System.Boolean})">
            <summary>
            Logs Http response
            </summary>
            <param name="response">The response</param>
            <param name="duration">The duration</param>
            <param name="logger">The logger</param>
            <param name="logLevels">The log levels</param>
            <param name="verbosity">The verbosity</param>
            <param name="shouldRedactHeaderValue">Header values redaction rules</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Logging.ExtendedHttpTracerHandler.LogHttpException(System.Net.Http.HttpRequestMessage,System.Exception,Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.LogLevel[])">
            <summary>
            Logs Http exceptions
            </summary>
            <param name="request">The request</param>
            <param name="ex">The exception</param>
            <param name="logger">The logger</param>
            <param name="logLevels">The log levels</param>
        </member>
        <member name="M:Apizr.Logging.ExtendedHttpTracerHandler.GetRequestBody(System.Net.Http.HttpRequestMessage)">
            <summary>
            Get the request body
            </summary>
            <param name="request">The request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Logging.ExtendedHttpTracerHandler.GetResponseBody(System.Net.Http.HttpResponseMessage)">
            <summary>
            Get the response body
            </summary>
            <param name="response">The response</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Logging.HttpMessageParts">
            <summary>
            Http message parts to log
            </summary>
        </member>
        <member name="F:Apizr.Logging.HttpMessageParts.Unspecified">
            <summary>
            Unspecified
            </summary>
        </member>
        <member name="F:Apizr.Logging.HttpMessageParts.None">
            <summary>
            Logs no parts
            </summary>
        </member>
        <member name="F:Apizr.Logging.HttpMessageParts.RequestBody">
            <summary>
            Logs request body only
            </summary>
        </member>
        <member name="F:Apizr.Logging.HttpMessageParts.RequestHeaders">
            <summary>
            Logs request headers only
            </summary>
        </member>
        <member name="F:Apizr.Logging.HttpMessageParts.RequestCookies">
            <summary>
            Logs request cookies only
            </summary>
        </member>
        <member name="F:Apizr.Logging.HttpMessageParts.RequestAllButBody">
            <summary>
            Logs request headers and cookies only
            </summary>
        </member>
        <member name="F:Apizr.Logging.HttpMessageParts.RequestAll">
            <summary>
            Logs request body, headers and cookies only
            </summary>
        </member>
        <member name="F:Apizr.Logging.HttpMessageParts.ResponseBody">
            <summary>
            Logs response body only
            </summary>
        </member>
        <member name="F:Apizr.Logging.HttpMessageParts.ResponseHeaders">
            <summary>
            Logs response headers only
            </summary>
        </member>
        <member name="F:Apizr.Logging.HttpMessageParts.ResponseAll">
            <summary>
            Logs response body and headers only
            </summary>
        </member>
        <member name="F:Apizr.Logging.HttpMessageParts.HeadersOnly">
            <summary>
            Logs response body and headers only
            </summary>
        </member>
        <member name="F:Apizr.Logging.HttpMessageParts.AllButRequestBody">
            <summary>
            Logs all parts but request body
            </summary>
        </member>
        <member name="F:Apizr.Logging.HttpMessageParts.AllButResponseBody">
            <summary>
            Logs all parts but response body
            </summary>
        </member>
        <member name="F:Apizr.Logging.HttpMessageParts.AllButBodies">
            <summary>
            Logs all parts but bodies
            </summary>
        </member>
        <member name="F:Apizr.Logging.HttpMessageParts.All">
            <summary>
            Logs all parts
            </summary>
        </member>
        <member name="T:Apizr.Logging.HttpTracerMode">
            <summary>
            The Http tracer logging mode
            </summary>
        </member>
        <member name="F:Apizr.Logging.HttpTracerMode.ExceptionsOnly">
            <summary>
            Logs given parts only when an exception occurs
            </summary>
        </member>
        <member name="F:Apizr.Logging.HttpTracerMode.ErrorsAndExceptionsOnly">
            <summary>
            Logs given parts only when an exception or an error occurs
            </summary>
        </member>
        <member name="F:Apizr.Logging.HttpTracerMode.Everything">
            <summary>
            Logs given parts anytime
            </summary>
        </member>
        <member name="T:Apizr.Mapping.IMappingHandler">
            <summary>
            The mapping handler definition
            </summary>
        </member>
        <member name="M:Apizr.Mapping.IMappingHandler.Map``1(System.Object)">
            <summary>
            Execute a mapping from the source object to a new destination object.
            The source type is inferred from the source object.
            </summary>
            <typeparam name="TDestination">Destination type to create</typeparam>
            <param name="source">Source object to map from</param>
            <returns>Mapped destination object</returns>
        </member>
        <member name="M:Apizr.Mapping.IMappingHandler.Map``2(``0)">
            <summary>
            Execute a mapping from the source object to a new destination object.
            </summary>
            <typeparam name="TSource">Source type to use, regardless of the runtime type</typeparam>
            <typeparam name="TDestination">Destination type to create</typeparam>
            <param name="source">Source object to map from</param>
            <returns>Mapped destination object</returns>
        </member>
        <member name="M:Apizr.Mapping.IMappingHandler.Map``2(``0,``1)">
            <summary>
            Execute a mapping from the source object to the existing destination object.
            </summary>
            <typeparam name="TSource">Source type to use</typeparam>
            <typeparam name="TDestination">Destination type</typeparam>
            <param name="source">Source object to map from</param>
            <param name="destination">Destination object to map into</param>
            <returns>The mapped destination object, same instance as the <paramref name="destination"/> object</returns>
        </member>
        <member name="M:Apizr.Mapping.IMappingHandler.Map(System.Object,System.Type,System.Type)">
            <summary>
            Execute a mapping from the source object to a new destination object with explicit <see cref="T:System.Type"/> objects
            </summary>
            <param name="source">Source object to map from</param>
            <param name="sourceType">Source type to use</param>
            <param name="destinationType">Destination type to create</param>
            <returns>Mapped destination object</returns>
        </member>
        <member name="M:Apizr.Mapping.IMappingHandler.Map(System.Object,System.Object,System.Type,System.Type)">
            <summary>
            Execute a mapping from the source object to existing destination object with explicit <see cref="T:System.Type"/> objects
            </summary>
            <param name="source">Source object to map from</param>
            <param name="destination">Destination object to map into</param>
            <param name="sourceType">Source type to use</param>
            <param name="destinationType">Destination type to use</param>
            <returns>Mapped destination object, same instance as the <paramref name="destination"/> object</returns>
        </member>
        <member name="T:Apizr.Mapping.MappedWithAttribute">
            <summary>
            Tells Apizr to map api request object with model object
            </summary>
        </member>
        <member name="M:Apizr.Mapping.MappedWithAttribute.#ctor(System.Type)">
            <summary>
            Tells Apizr to map api response to a model response
            </summary>
            <param name="secondEntityType"></param>
        </member>
        <member name="P:Apizr.Mapping.MappedWithAttribute.SecondEntityType">
            <summary>
            The model object to map with
            </summary>
        </member>
        <member name="T:Apizr.Mapping.MappedWithAttribute`1">
            <summary>
            Tells Apizr to map api request object with model object
            </summary>
        </member>
        <member name="M:Apizr.Mapping.MappedWithAttribute`1.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Mapping.VoidMappingHandler">
            <summary>
            Void mapping should never be used and will just be ignored
            </summary>
        </member>
        <member name="M:Apizr.Mapping.VoidMappingHandler.Map``1(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mapping.VoidMappingHandler.Map``2(``0)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mapping.VoidMappingHandler.Map``2(``0,``1)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mapping.VoidMappingHandler.Map(System.Object,System.Type,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Mapping.VoidMappingHandler.Map(System.Object,System.Object,System.Type,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.PreserveAttribute">
            <inheritdoc />
        </member>
        <member name="M:Apizr.PreserveAttribute.#ctor(System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.PreserveAttribute.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Requesting.Attributes.CreateHeadersAttribute">
            <summary>
            Tells Apizr to set headers on Create method
            </summary>
        </member>
        <member name="T:Apizr.Requesting.Attributes.DeleteHeadersAttribute">
            <summary>
            Tells Apizr to set headers on Delete method
            </summary>
        </member>
        <member name="T:Apizr.Requesting.Attributes.ReadAllHeadersAttribute">
            <summary>
            Tells Apizr to set headers on ReadAll method
            </summary>
        </member>
        <member name="T:Apizr.Requesting.Attributes.ReadHeadersAttribute">
            <summary>
            Tells Apizr to set headers on Read method
            </summary>
        </member>
        <member name="T:Apizr.Requesting.Attributes.UpdateHeadersAttribute">
            <summary>
            Tells Apizr to set headers on Update method
            </summary>
        </member>
        <member name="T:Apizr.Requesting.ICrudApi`4">
            <summary>
            The crud api interface
            </summary>
            <typeparam name="T">The entity type</typeparam>
            <typeparam name="TKey">The entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.Create(`0)">
            <summary>
            Send a Create request with a <typeparamref name="T"/> payload
            </summary>
            <param name="payload">The payload</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.SafeCreate(`0)">
            <summary>
            Send a Create request with a <typeparamref name="T"/> payload
            </summary>
            <param name="payload">The payload</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.Create(`0,Apizr.Configuring.Request.IApizrRequestOptions)">
            <summary>
            Send a Create request with a <typeparamref name="T"/> payload, passing a Polly context and a cancellation token through the request
            </summary>
            <param name="payload">The payload</param>
            <param name="options">The request options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.SafeCreate(`0,Apizr.Configuring.Request.IApizrRequestOptions)">
            <summary>
            Send a Create request with a <typeparamref name="T"/> payload, passing a Polly context and a cancellation token through the request
            </summary>
            <param name="payload">The payload</param>
            <param name="options">The request options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.ReadAll">
            <summary>
            Send a ReadAll request
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.SafeReadAll">
            <summary>
            Send a ReadAll request
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.ReadAll(Apizr.Configuring.Request.IApizrRequestOptions)">
            <summary>
            Send a ReadAll request
            </summary>
            <param name="options">The request options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.SafeReadAll(Apizr.Configuring.Request.IApizrRequestOptions)">
            <summary>
            Send a ReadAll request
            </summary>
            <param name="options">The request options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.ReadAll(`3)">
            <summary>
            Send a ReadAll request with some query params used as cache key
            </summary>
            <param name="readAllParams">Query params used as cache key</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.SafeReadAll(`3)">
            <summary>
            Send a ReadAll request with some query params used as cache key
            </summary>
            <param name="readAllParams">Query params used as cache key</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.ReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions)">
            <summary>
            Send a ReadAll request with some query params used as cache key
            </summary>
            <param name="readAllParams">Query params used as cache key</param>
            <param name="options">The request options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.SafeReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions)">
            <summary>
            Send a ReadAll request with some query params used as cache key
            </summary>
            <param name="readAllParams">Query params used as cache key</param>
            <param name="options">The request options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.Read(`1)">
            <summary>
            Send a Read request with a key param
            </summary>
            <param name="key">The key</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.SafeRead(`1)">
            <summary>
            Send a Read request with a key param
            </summary>
            <param name="key">The key</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.Read(`1,Apizr.Configuring.Request.IApizrRequestOptions)">
            <summary>
            Send a Read request with a key param
            </summary>
            <param name="key">The key</param>
            <param name="options">The request options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.SafeRead(`1,Apizr.Configuring.Request.IApizrRequestOptions)">
            <summary>
            Send a Read request with a key param
            </summary>
            <param name="key">The key</param>
            <param name="options">The request options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.Update(`1,`0)">
            <summary>
            Send an Update request with a key and a payload
            </summary>
            <param name="key">The key</param>
            <param name="payload">The payload</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.SafeUpdate(`1,`0)">
            <summary>
            Send an Update request with a key and a payload
            </summary>
            <param name="key">The key</param>
            <param name="payload">The payload</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.Update(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions)">
            <summary>
            Send an Update request with a key and a payload
            </summary>
            <param name="key">The key</param>
            <param name="payload">The payload</param>
            <param name="options">The request options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.SafeUpdate(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions)">
            <summary>
            Send an Update request with a key and a payload
            </summary>
            <param name="key">The key</param>
            <param name="payload">The payload</param>
            <param name="options">The request options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.Delete(`1)">
            <summary>
            Send a Delete request with a key param
            </summary>
            <param name="key">The key</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.SafeDelete(`1)">
            <summary>
            Send a Delete request with a key param
            </summary>
            <param name="key">The key</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.Delete(`1,Apizr.Configuring.Request.IApizrRequestOptions)">
            <summary>
            Send a Delete request with a key param
            </summary>
            <param name="key">The key</param>
            <param name="options">The request options</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Requesting.ICrudApi`4.SafeDelete(`1,Apizr.Configuring.Request.IApizrRequestOptions)">
            <summary>
            Send a Delete request with a key param
            </summary>
            <param name="key">The key</param>
            <param name="options">The request options</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Resiliencing.ApizrResilienceContextSettings">
            <summary>
            Settings used by Apizr when dealing with <see cref="T:Polly.ResilienceContext"/>.
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.ApizrResilienceContextSettings.#ctor(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Apizr.Resiliencing.ApizrResilienceContextSettings"/> struct.
            </summary>
            <param name="continueOnCapturedContext">Value indicating whether to continue on captured context.</param>
            <param name="returnToPoolOnComplete"></param>
        </member>
        <member name="P:Apizr.Resiliencing.ApizrResilienceContextSettings.ContinueOnCapturedContext">
            <summary>
            Gets the value indicating whether to continue on captured context, if any.
            </summary>
        </member>
        <member name="P:Apizr.Resiliencing.ApizrResilienceContextSettings.ReturnToPoolOnComplete">
            <summary>
            Gets the value indicating whether to return the context to the pool, when request completes.
            </summary>
        </member>
        <member name="T:Apizr.Resiliencing.Attributes.Crud.CreateResiliencePipelineAttribute">
            <summary>
            Tells Apizr to apply some policies to Create method
            You have to provide a strategy registry to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.Attributes.Crud.CreateResiliencePipelineAttribute.#ctor(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Resiliencing.Attributes.Crud.DeleteResiliencePipelineAttribute">
            <summary>
            Tells Apizr to apply some resilience strategies to Delete method
            You have to provide a strategy registry to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.Attributes.Crud.DeleteResiliencePipelineAttribute.#ctor(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Resiliencing.Attributes.Crud.ReadAllResiliencePipelineAttribute">
            <summary>
            Tells Apizr to apply some resilience strategies to ReadAll method
            You have to provide a strategy registry to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.Attributes.Crud.ReadAllResiliencePipelineAttribute.#ctor(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Resiliencing.Attributes.Crud.ReadResiliencePipelineAttribute">
            <summary>
            Tells Apizr to apply some resilience strategies to Read method
            You have to provide a strategy registry to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.Attributes.Crud.ReadResiliencePipelineAttribute.#ctor(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Resiliencing.Attributes.Crud.SafeCreateResiliencePipelineAttribute">
            <summary>
            Tells Apizr to apply some policies to Create method
            You have to provide a strategy registry to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.Attributes.Crud.SafeCreateResiliencePipelineAttribute.#ctor(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Resiliencing.Attributes.Crud.SafeDeleteResiliencePipelineAttribute">
            <summary>
            Tells Apizr to apply some resilience strategies to Delete method
            You have to provide a strategy registry to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.Attributes.Crud.SafeDeleteResiliencePipelineAttribute.#ctor(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Resiliencing.Attributes.Crud.SafeReadAllResiliencePipelineAttribute">
            <summary>
            Tells Apizr to apply some resilience strategies to ReadAll method
            You have to provide a strategy registry to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.Attributes.Crud.SafeReadAllResiliencePipelineAttribute.#ctor(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Resiliencing.Attributes.Crud.SafeReadResiliencePipelineAttribute">
            <summary>
            Tells Apizr to apply some resilience strategies to Read method
            You have to provide a strategy registry to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.Attributes.Crud.SafeReadResiliencePipelineAttribute.#ctor(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Resiliencing.Attributes.Crud.SafeUpdateResiliencePipelineAttribute">
            <summary>
            Tells Apizr to apply some resilience strategies to Update method
            You have to provide a strategy registry to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.Attributes.Crud.SafeUpdateResiliencePipelineAttribute.#ctor(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Resiliencing.Attributes.Crud.UpdateResiliencePipelineAttribute">
            <summary>
            Tells Apizr to apply some resilience strategies to Update method
            You have to provide a strategy registry to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.Attributes.Crud.UpdateResiliencePipelineAttribute.#ctor(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Resiliencing.Attributes.Http.DeleteResiliencePipelineAttribute">
            <summary>
            Tells Apizr to apply some policies to Delete http method
            You have to provide a strategy registry to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.Attributes.Http.DeleteResiliencePipelineAttribute.#ctor(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Resiliencing.Attributes.Http.GetResiliencePipelineAttribute">
            <summary>
            Tells Apizr to apply some policies to Get http method
            You have to provide a strategy registry to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.Attributes.Http.GetResiliencePipelineAttribute.#ctor(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Resiliencing.Attributes.Http.HeadResiliencePipelineAttribute">
            <summary>
            Tells Apizr to apply some policies to Head http method
            You have to provide a strategy registry to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.Attributes.Http.HeadResiliencePipelineAttribute.#ctor(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Resiliencing.Attributes.Http.OptionsResiliencePipelineAttribute">
            <summary>
            Tells Apizr to apply some policies to Options http method
            You have to provide a strategy registry to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.Attributes.Http.OptionsResiliencePipelineAttribute.#ctor(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Resiliencing.Attributes.Http.PatchResiliencePipelineAttribute">
            <summary>
            Tells Apizr to apply some policies to Patch http method
            You have to provide a strategy registry to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.Attributes.Http.PatchResiliencePipelineAttribute.#ctor(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Resiliencing.Attributes.Http.PostResiliencePipelineAttribute">
            <summary>
            Tells Apizr to apply some policies to Post http method
            You have to provide a strategy registry to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.Attributes.Http.PostResiliencePipelineAttribute.#ctor(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Resiliencing.Attributes.Http.PutResiliencePipelineAttribute">
            <summary>
            Tells Apizr to apply some policies to Put http method
            You have to provide a strategy registry to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.Attributes.Http.PutResiliencePipelineAttribute.#ctor(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Resiliencing.Attributes.ResilienceContextAttribute">
            <summary>
            The Polly's resilience context property attribute
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.Attributes.ResilienceContextAttribute.#ctor">
            <summary>
            Create a Polly context
            </summary>
        </member>
        <member name="T:Apizr.Resiliencing.Attributes.ResiliencePipelineAttribute">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Resiliencing.Attributes.ResiliencePipelineAttribute.#ctor(System.String[])">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Resiliencing.Attributes.ResiliencePipelineAttributeBase">
            <summary>
            Tells Apizr to apply some strategies to all method when decorating an assembly or an interface or a specific one when decorating a method
            You have to provide a strategy registry to Apizr to use this feature
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.Attributes.ResiliencePipelineAttributeBase.#ctor(System.String[])">
            <summary>
            Apply strategies with keys
            </summary>
            <param name="registryKeys">Strategy registry keys</param>
        </member>
        <member name="P:Apizr.Resiliencing.Attributes.ResiliencePipelineAttributeBase.RegistryKeys">
            <summary>
            Strategy registry keys
            </summary>
        </member>
        <member name="T:Apizr.Resiliencing.HttpRequestMessageApizrExtensions">
            <summary>
            Extension methods for <see cref="T:System.Net.Http.HttpRequestMessage"/> Polly integration.
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.HttpRequestMessageApizrExtensions.GetOrBuildApizrResilienceContext(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:Polly.ResilienceContext"/> associated with the provided <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/>.</param>
            <param name="cancellationToken">A cancellation token</param>
            <returns>The <see cref="T:Polly.ResilienceContext"/> if set, otherwise <c>null</c>.</returns>
            <remarks>
            The <see cref="T:Apizr.Resiliencing.ResilienceHttpMessageHandler"/> will attach a context to the <see cref="T:System.Net.Http.HttpResponseMessage"/> prior
            to executing a <see cref="T:Polly.ResiliencePipeline"/>, if one does not already exist. The <see cref="T:Polly.ResilienceContext"/> will be provided
            to the resilience pipeline for use inside the <see cref="T:Polly.ResilienceContext"/> and in other message handlers.
            </remarks>
        </member>
        <member name="M:Apizr.Resiliencing.HttpRequestMessageApizrExtensions.GetApizrResilienceContext(System.Net.Http.HttpRequestMessage)">
            <summary>
            Gets the <see cref="T:Polly.ResilienceContext"/> associated with the provided <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/>.</param>
            <returns>The <see cref="T:Polly.ResilienceContext"/> if set, otherwise <c>null</c>.</returns>
            <remarks>
            The <see cref="T:Apizr.Resiliencing.ResilienceHttpMessageHandler"/> will attach a context to the <see cref="T:System.Net.Http.HttpResponseMessage"/> prior
            to executing a <see cref="T:Polly.ResiliencePipeline"/>, if one does not already exist. The <see cref="T:Polly.ResilienceContext"/> will be provided
            to the Resilience Pipeline for use inside the <see cref="T:Polly.ResiliencePipeline"/> and in other message handlers.
            </remarks>
        </member>
        <member name="M:Apizr.Resiliencing.HttpRequestMessageApizrExtensions.GetApizrRequestOptions(System.Net.Http.HttpRequestMessage)">
            <summary>
            Gets the <see cref="T:Apizr.Configuring.Request.IApizrRequestOptions"/> associated with the provided <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/>.</param>
            <returns>The <see cref="T:Apizr.Configuring.Request.IApizrRequestOptions"/> if set, otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Apizr.Resiliencing.HttpRequestMessageApizrExtensions.TryGetApizrRequestOptions(System.Net.Http.HttpRequestMessage,Apizr.Configuring.Request.IApizrRequestOptions@)">
            <summary>
            Try to get the <see cref="T:Apizr.Configuring.Request.IApizrRequestOptions"/> associated with the provided <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/>.</param>
            <param name="options">The <see cref="T:Apizr.Configuring.Request.IApizrRequestOptions"/> if set, otherwise <c>null</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Resiliencing.HttpRequestMessageApizrExtensions.SetApizrResilienceContext(System.Net.Http.HttpRequestMessage,Polly.ResilienceContext)">
            <summary>
            Sets the <see cref="T:Polly.ResilienceContext"/> associated with the provided <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/>.</param>
            <param name="context">The <see cref="T:Polly.ResilienceContext"/>, may be <c>null</c>.</param>
            <remarks>
            The <see cref="T:Apizr.Resiliencing.ResilienceHttpMessageHandler"/> will attach a context to the <see cref="T:System.Net.Http.HttpResponseMessage"/> prior
            to executing a <see cref="T:Polly.ResiliencePipeline"/>, if one does not already exist. The <see cref="T:Polly.ResilienceContext"/> will be provided
            to the strategy for use inside the <see cref="T:Polly.ResiliencePipeline"/> and in other message handlers.
            </remarks>
        </member>
        <member name="T:Apizr.Resiliencing.ResilienceContextExtensions">
            <summary>
            Polly logging extensions
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.ResilienceContextExtensions.WithLogger(Polly.ResilienceContext,Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.LogLevel[],Apizr.Logging.HttpMessageParts,Apizr.Logging.HttpTracerMode)">
            <summary>
            Passing your <see cref="T:Microsoft.Extensions.Logging.ILogger"/> mapping implementation to Polly context
            </summary>
            <param name="context">Polly context</param>
            <param name="logger">Your <see cref="T:Microsoft.Extensions.Logging.ILogger"/> mapping implementation</param>
            <param name="logLevels"></param>
            <param name="verbosity"></param>
            <param name="tracerMode"></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Resiliencing.ResilienceContextExtensions.TryGetLogger(Polly.ResilienceContext,Microsoft.Extensions.Logging.ILogger@,Microsoft.Extensions.Logging.LogLevel[]@,Apizr.Logging.HttpMessageParts@,Apizr.Logging.HttpTracerMode@)">
            <summary>
            Trying to get your <see cref="T:Microsoft.Extensions.Logging.ILogger"/> mapping implementation from Polly context
            </summary>
            <param name="context">Polly context</param>
            <param name="logger">Your <see cref="T:Microsoft.Extensions.Logging.ILogger"/> mapping implementation</param>
            <param name="logLevels"></param>
            <param name="verbosity"></param>
            <param name="tracerMode"></param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Resiliencing.ResilienceHttpMessageHandler">
            <summary>
            Base class for resilience handler, i.e. handlers that use resilience strategies to send the requests.
            </summary>
        </member>
        <member name="M:Apizr.Resiliencing.ResilienceHttpMessageHandler.#ctor(System.Func{System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,Polly.ResiliencePipeline{System.Net.Http.HttpResponseMessage}},Apizr.Configuring.Manager.IApizrManagerOptionsBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Apizr.Resiliencing.ResilienceHttpMessageHandler"/> class.
            </summary>
            <param name="pipelineProvider">The pipeline provider that supplies pipelines in response to an http message.</param>
            <param name="apizrOptions">The Apizr options</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="pipelineProvider"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Apizr.Resiliencing.ResilienceHttpMessageHandler.#ctor(Polly.ResiliencePipeline{System.Net.Http.HttpResponseMessage},Apizr.Configuring.Manager.IApizrManagerOptionsBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Apizr.Resiliencing.ResilienceHttpMessageHandler"/> class.
            </summary>
            <param name="pipeline">The pipeline to use for the message.</param>
            <param name="apizrOptions">The Apizr options</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="pipeline"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Apizr.Resiliencing.ResilienceHttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Sends an HTTP request to the inner handler to send to the server as an asynchronous operation.
            </summary>
            <param name="request">The HTTP request message to send to the server.</param>
            <param name="cancellationToken">A cancellation token to cancel operation.</param>
            <returns>The task object representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="request"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Refit.Implementation.Generated">
            <inheritdoc />
        </member>
        <member name="T:Refit.Implementation.Generated.ApizrRequestingICrudApi`4">
            <inheritdoc />
        </member>
        <member name="P:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Client">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.#ctor(System.Net.Http.HttpClient,Refit.IRequestBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Create(`0)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.SafeCreate(`0)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Create(`0,Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.SafeCreate(`0,Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.ReadAll">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.SafeReadAll">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.ReadAll(Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.SafeReadAll(Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.ReadAll(`3)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.SafeReadAll(`3)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.ReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.SafeReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Read(`1)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.SafeRead(`1)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Read(`1,Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.SafeRead(`1,Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Update(`1,`0)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.SafeUpdate(`1,`0)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Update(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.SafeUpdate(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Delete(`1)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.SafeDelete(`1)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Delete(`1,Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.SafeDelete(`1,Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Create(`0)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#SafeCreate(`0)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Create(`0,Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#SafeCreate(`0,Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#ReadAll">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#SafeReadAll">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#ReadAll(Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#SafeReadAll(Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#ReadAll(`3)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#SafeReadAll(`3)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#ReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#SafeReadAll(`3,Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Read(`1)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#SafeRead(`1)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Read(`1,Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#SafeRead(`1,Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Update(`1,`0)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#SafeUpdate(`1,`0)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Update(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#SafeUpdate(`1,`0,Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Delete(`1)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#SafeDelete(`1)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#Delete(`1,Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Refit.Implementation.Generated.ApizrRequestingICrudApi`4.Apizr#Requesting#ICrudApi{T,TKey,TReadAllResult,TReadAllParams}#SafeDelete(`1,Apizr.Configuring.Request.IApizrRequestOptions)">
            <inheritdoc />
        </member>
    </members>
</doc>
