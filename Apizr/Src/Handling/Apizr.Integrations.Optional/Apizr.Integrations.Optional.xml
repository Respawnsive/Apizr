<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Apizr.Integrations.Optional</name>
    </assembly>
    <members>
        <member name="T:Apizr.OptionalOptionsBuilderExtensions">
            <summary>
            Optional with MediatR options builder extensions
            </summary>
        </member>
        <member name="M:Apizr.OptionalOptionsBuilderExtensions.WithOptionalMediation(Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder)">
            <summary>
            Let Apizr handle requests execution with some mediation and optional result
            </summary>
            <param name="optionsBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.OptionalOptionsBuilderExtensions.WithOptionalMediation(Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder)">
            <summary>
            Let Apizr handle requests execution with some mediation and optional result
            </summary>
            <param name="optionsBuilder"></param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Optional.Commanding.IOptionalCommand`1">
            <summary>
            A mediation command returning an optional error
            </summary>
            <typeparam name="TError">The optional error</typeparam>
        </member>
        <member name="T:Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistry">
            <summary>
            Registry options available for extended registrations with optional mediation
            </summary>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistry.AddOrUpdate(System.Type,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase">
            <summary>
            Registry options available for extended registrations with optional mediation
            </summary>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.GetEnumerator">
            <summary>
            Get factory enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get factory enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.GetCrudOptionalMediatorFor``1">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.GetCrudOptionalMediatorFor``2">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.GetCrudOptionalMediatorFor``3">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.GetCrudOptionalMediatorFor``4">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.GetOptionalMediatorFor``1">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.TryGetCrudOptionalMediatorFor``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,System.Int32,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{System.String,System.Object}}@)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.TryGetCrudOptionalMediatorFor``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{System.String,System.Object}}@)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.TryGetCrudOptionalMediatorFor``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,System.Collections.Generic.IDictionary{System.String,System.Object}}@)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.TryGetCrudOptionalMediatorFor``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3}@)">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.TryGetOptionalMediatorFor``1(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0}@)">
            <inheritdoc />
        </member>
        <member name="P:Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.Count">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.ContainsCrudOptionalMediatorFor``1">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.ContainsCrudOptionalMediatorFor``2">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.ContainsCrudOptionalMediatorFor``3">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.ContainsCrudOptionalMediatorFor``4">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.ContainsOptionalMediatorFor``1">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationConcurrentRegistry">
            <inheritdoc cref="T:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationRegistry" />
        </member>
        <member name="T:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry">
            <summary>
            Registry options available for extended registrations with optional mediation
            </summary>
        </member>
        <member name="P:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.Count">
            <summary>
            Optional mediators count
            </summary>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor``1">
            <summary>
            Check if registry contains an optional mediator for <typeparamref name="T"/> entity type
            </summary>
            <typeparam name="T">The entity type to manage</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor``2">
            <summary>
            Check if registry contains an optional mediator for <typeparamref name="T"/> entity type with <typeparamref name="TKey"/> key type
            </summary>
            <typeparam name="T">The entity type to manage</typeparam>
            <typeparam name="TKey">The entity key type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor``3">
            <summary>
            Check if registry contains an optional mediator for <typeparamref name="T"/> entity type with <typeparamref name="TKey"/> key type and <typeparamref name="TReadAllResult"/> ReadAll result type
            </summary>
            <typeparam name="T">The entity type to manage</typeparam>
            <typeparam name="TKey">The entity key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor``4">
            <summary>
            Check if registry contains an optional mediator for <typeparamref name="T"/> entity type with <typeparamref name="TKey"/> key type,
            <typeparamref name="TReadAllResult"/> ReadAll result type and <typeparamref name="TReadAllParams"/> ReadAll params type
            </summary>
            <typeparam name="T">The entity type to manage</typeparam>
            <typeparam name="TKey">The entity key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll params type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.ContainsOptionalMediatorFor``1">
            <summary>
            Check if registry contains an optional mediator for <typeparamref name="TWebApi"/> api type
            </summary>
            <typeparam name="TWebApi">The api type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor``1">
            <summary>
            Get a Crud optional mediator instance for an entity type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor``2">
            <summary>
            Get a Crud optional mediator instance for an entity type with a specific key type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor``3">
            <summary>
            Get a Crud optional mediator instance for an entity type with a specific key type and ReadAll result type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor``4">
            <summary>
            Get a Crud optional mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll request params type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.GetOptionalMediatorFor``1">
            <summary>
            Get an api optional mediator instance
            </summary>
            <typeparam name="TWebApi">The managed api type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,System.Int32,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{System.String,System.Object}}@)">
            <summary>
            Try to get a Crud optional mediator instance for an entity type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{System.String,System.Object}}@)">
            <summary>
            Try to get a Crud optional mediator instance for an entity type with a specific key type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,System.Collections.Generic.IDictionary{System.String,System.Object}}@)">
            <summary>
            Try to get a Crud optional mediator instance for an entity type with a specific key type and ReadAll result type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3}@)">
            <summary>
            Try to get a Crud optional mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type
            </summary>
            <typeparam name="T">The managed entity type</typeparam>
            <typeparam name="TKey">The entity's key type</typeparam>
            <typeparam name="TReadAllResult">The ReadAll request result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll request params type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.TryGetOptionalMediatorFor``1(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0}@)">
            <summary>
            Try to get an api optional mediator instance
            </summary>
            <typeparam name="TWebApi">The managed api type</typeparam>
            <returns></returns>
        </member>
        <member name="T:Apizr.Optional.Configuring.Registry.IApizrOptionalMediationRegistry">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Optional.Cruding.CreateOptionalCommand`1">
            <summary>
            The mediation Create optional command
            </summary>
            <typeparam name="TModelData">The data type</typeparam>
        </member>
        <member name="M:Apizr.Optional.Cruding.CreateOptionalCommand`1.#ctor(`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation Create optional command constructor
            </summary>
            <param name="modelData">The request data to send</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Optional.Cruding.DeleteOptionalCommand`2">
            <summary>
            The mediation Delete optional command
            </summary>
            <typeparam name="T">The api entity type</typeparam>
            <typeparam name="TKey">The entity's crud key type</typeparam>
        </member>
        <member name="M:Apizr.Optional.Cruding.DeleteOptionalCommand`2.#ctor(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation Delete optional command constructor
            </summary>
            <param name="key">The entity's crud key</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Optional.Cruding.DeleteOptionalCommand`1">
            <summary>
            The mediation Delete optional command
            </summary>
            <typeparam name="T">The api entity type</typeparam>
        </member>
        <member name="M:Apizr.Optional.Cruding.DeleteOptionalCommand`1.#ctor(System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation Delete optional command constructor
            </summary>
            <param name="key">The entity's crud key</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Optional.Cruding.Handling.CreateOptionalCommandHandler`5">
            <summary>
            The Create optional command handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params</typeparam>
        </member>
        <member name="T:Apizr.Optional.Cruding.Handling.DeleteOptionalCommandHandler`5">
            <summary>
            The Delete optional command handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params type</typeparam>
        </member>
        <member name="T:Apizr.Optional.Cruding.Handling.DeleteOptionalCommandHandler`4">
            <summary>
            The Delete optional command handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params type</typeparam>
        </member>
        <member name="T:Apizr.Optional.Cruding.Handling.ReadAllOptionalQueryHandler`5">
            <summary>
            The ReadAll optional query handler
            </summary>
            <typeparam name="TApiEntity"></typeparam>
            <typeparam name="TApiEntityKey">The api entity type</typeparam>
            <typeparam name="TModelEntityReadAllResult">The returned model result type</typeparam>
            <typeparam name="TApiEntityReadAllResult">The received api result type</typeparam>
            <typeparam name="TReadAllParams">The query parameters type</typeparam>
        </member>
        <member name="T:Apizr.Optional.Cruding.Handling.ReadAllOptionalQueryHandler`4">
            <summary>
            The ReadAll optional query handler
            </summary>
            <typeparam name="TApiEntity"></typeparam>
            <typeparam name="TApiEntityKey">The api entity type</typeparam>
            <typeparam name="TModelEntityReadAllResult">The returned model result type</typeparam>
            <typeparam name="TApiEntityReadAllResult">The received api result type</typeparam>
        </member>
        <member name="T:Apizr.Optional.Cruding.Handling.ReadOptionalQueryHandler`5">
            <summary>
            The Read optional query handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params type</typeparam>
        </member>
        <member name="T:Apizr.Optional.Cruding.Handling.ReadOptionalQueryHandler`4">
            <summary>
            The Read optional query handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params type</typeparam>
        </member>
        <member name="T:Apizr.Optional.Cruding.Handling.UpdateOptionalCommandHandler`5">
            <summary>
            The Update optional command handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params type</typeparam>
        </member>
        <member name="T:Apizr.Optional.Cruding.Handling.UpdateOptionalCommandHandler`4">
            <summary>
            The Update optional command handler
            </summary>
            <typeparam name="TModelEntity">The model entity type</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TReadAllResult">The returned result type</typeparam>
            <typeparam name="TReadAllParams">The read all params type</typeparam>
        </member>
        <member name="T:Apizr.Optional.Cruding.ReadAllOptionalQuery`2">
            <summary>
            The mediation ReadAll optional query
            </summary>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <typeparam name="TReadAllResult">The api result type</typeparam>
        </member>
        <member name="M:Apizr.Optional.Cruding.ReadAllOptionalQuery`2.#ctor(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation ReadAll optional query constructor
            </summary>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Optional.Cruding.ReadAllOptionalQuery`2.#ctor(`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation ReadAll optional query constructor
            </summary>
            <param name="parameters">The query parameters to send</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Optional.Cruding.ReadAllOptionalQuery`1">
            <summary>
            The mediation ReadAll optional query
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
        </member>
        <member name="M:Apizr.Optional.Cruding.ReadAllOptionalQuery`1.#ctor(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation ReadAll optional query constructor
            </summary>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Optional.Cruding.ReadAllOptionalQuery`1.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation ReadAll optional query constructor
            </summary>
            <param name="parameters">The query parameters to send</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Optional.Cruding.ReadOptionalQuery`2">
            <summary>
            The mediation Read optional query
            </summary>
            <typeparam name="TResultData">The result entity type</typeparam>
            <typeparam name="TKey">The entity's crud key type</typeparam>
        </member>
        <member name="M:Apizr.Optional.Cruding.ReadOptionalQuery`2.#ctor(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation Read optional query constructor
            </summary>
            <param name="key">The entity's crud key</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Optional.Cruding.ReadOptionalQuery`1">
            <summary>
            The mediation Read optional query
            </summary>
            <typeparam name="TResultData">The result entity type</typeparam>
        </member>
        <member name="M:Apizr.Optional.Cruding.ReadOptionalQuery`1.#ctor(System.Int32,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation Read optional query constructor
            </summary>
            <param name="key">The entity's crud key</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator">
            <summary>
            Apizr mediator dedicated to cruding and with optional result
            </summary>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator.SendCreateOptionalCommand``1(``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator.SendCreateOptionalCommand``2(``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator.SendUpdateOptionalCommand``2(``1,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator.SendUpdateOptionalCommand``3(``2,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator.SendDeleteOptionalCommand``2(``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator`4">
            <summary>
            Apizr mediator dedicated to cruding and with optional result
            </summary>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator`4.SendCreateOptionalCommand(`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator`4.SendCreateOptionalCommand``1(``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator`4.SendUpdateOptionalCommand(`1,`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator`4.SendUpdateOptionalCommand``1(`1,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator`4.SendDeleteOptionalCommand(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator">
            <summary>
            Apizr mediator dedicated to cruding and with optional result
            </summary>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``1(``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Optional.Cruding.CreateOptionalCommand`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendCreateOptionalCommand``2(``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="entity">The entity to create</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``1(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning mapped optional result
            </summary>
            <param name="optionsBuilder">Options provided to the request</param>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``2(``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadAllOptionalQuery``3(``2,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``2(``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendReadOptionalQuery``3(``2,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``2(``1,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendUpdateOptionalCommand``3(``2,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.SendDeleteOptionalCommand``2(``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4">
            <summary>
            <see cref="T:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator"/> but dedicated to <typeparamref name="TApiEntity"/> cruding with optional result, getting all shorter
            </summary>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand(`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Optional.Cruding.CreateOptionalCommand`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="payload">The entity to create</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendCreateOptionalCommand``1(``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="payload">The entity to create</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult">The mapped result</typeparam>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery(`3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="readAllParams">The read all filters</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadAllOptionalQuery``1(`3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntityReadAllResult"></typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendReadOptionalQuery``1(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand(`1,`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="payload">The entity to update</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendUpdateOptionalCommand``1(`1,``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TModelEntity"></typeparam>
            <param name="key">The entity key</param>
            <param name="payload">The entity to update</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator`4.SendDeleteOptionalCommand(`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <param name="key">The entity key</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediatorBase">
            <summary>
            Apizr base optional mediator dedicated to cruding
            </summary>
        </member>
        <member name="T:Apizr.Optional.Cruding.UpdateOptionalCommand`2">
            <summary>
            The mediation Update optional command
            </summary>
            <typeparam name="TKey">The entity's crud key type</typeparam>
            <typeparam name="TRequestData">The request data type</typeparam>
        </member>
        <member name="M:Apizr.Optional.Cruding.UpdateOptionalCommand`2.#ctor(`0,`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation Update optional command constructor
            </summary>
            <param name="key">The entity's crud key</param>
            <param name="requestData">The request data to send</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Optional.Cruding.UpdateOptionalCommand`1">
            <summary>
            The mediation Update optional command
            </summary>
            <typeparam name="TRequestData">The request data type</typeparam>
        </member>
        <member name="M:Apizr.Optional.Cruding.UpdateOptionalCommand`1.#ctor(System.Int32,`0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation Update optional command constructor
            </summary>
            <param name="key">The entity's crud key</param>
            <param name="requestData">The request data to send</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,Polly.Context)">
            <summary>
            Send a <see cref="T:Apizr.Optional.Cruding.CreateOptionalCommand`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Optional.Cruding.CreateOptionalCommand`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Optional.Cruding.CreateOptionalCommand`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,Polly.Context)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="entity">The entity to create</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``0,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``1(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning mapped optional result
            </summary>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,Polly.Context,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The api result type</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,Polly.Context,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiReadAllResult">The api result type to map from</typeparam>
            <typeparam name="TReadAllParams">The ReadAll parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,``0,Polly.Context)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,``0,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,``0,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,``0,Polly.Context)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,``0,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``3(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``2,``0,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type to map to</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``2(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator,``1,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The entity's crud key type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``1(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``1(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``1(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1)">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and a cancellation token and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="token">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context)">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and a Polly Context and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="token">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``2(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api result type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``2(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``2(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``2(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="token">A cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="token">A cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``5(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``5(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``5(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.SendFor``5(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator,System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="context">The Polly context</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``0,Polly.Context)">
            <summary>
            Send a <see cref="T:Apizr.Optional.Cruding.CreateOptionalCommand`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``0,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Optional.Cruding.CreateOptionalCommand`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``0,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Optional.Cruding.CreateOptionalCommand`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``0,Polly.Context)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``0,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``0,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.CreateCommand`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="entity">The entity to create</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Int32,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning mapped optional result
            </summary>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},Polly.Context,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Int32,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Int32,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``3,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,Polly.Context,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Int32,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``4,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.ReadAllQuery`1"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelReadAllResult">The model result type to map to</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="readAllParams">The read all filters</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Int32,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Int32,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Int32,Polly.Context,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Int32,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,System.Int32,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.ReadQuery`2"/> to Apizr using MediatR with priority and returning a mapped optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="priority">The execution priority</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,``0,Polly.Context)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,``0,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,``0,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,``0,Polly.Context)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,``0,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand``5(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``1,``2,``3,``4},``2,``0,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send a mapped <see cref="T:Apizr.Mediation.Cruding.UpdateCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TModelEntity">The model entity type to map from</typeparam>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="entity">The entity to update</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,Polly.Context)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand``4(Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator{``0,``1,``2,``3},``1,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send a <see cref="T:Apizr.Mediation.Cruding.DeleteCommand`2"/> to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiEntity">The api entity type</typeparam>
            <typeparam name="TApiEntityKey">The api entity's crud key type</typeparam>
            <typeparam name="TReadAllResult">The "ReadAll" query result type</typeparam>
            <typeparam name="TReadAllParams">ReadAll query parameters type</typeparam>
            <param name="key">The entity key</param>
            <param name="context">The Polly context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``1(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task}},Polly.Context)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``1(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``1(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task}},Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="token">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1)">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and a cancellation token and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="token">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context)">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and a Polly Context and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task}},``1,Polly.Context,System.Threading.CancellationToken)">
            <summary>
            Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="token">A cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``2(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api result type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``2(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``2(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``2(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``1}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api response</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,System.Threading.Tasks.Task{``2}}},Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="context">The Polly context</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="token">A cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``3(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``2,System.Threading.Tasks.Task{``2}}},``1,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="context">The Polly Context to pass through it all</param>
            <param name="token">A cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``5(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``5(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``5(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="context">The Polly context</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.SendFor``5(Apizr.Optional.Requesting.Sending.IApizrOptionalMediator{``0},System.Linq.Expressions.Expression{System.Func{Polly.Context,System.Threading.CancellationToken,``0,``3,System.Threading.Tasks.Task{``2}}},``4,Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="context">The Polly context</param>
            <param name="token">The cancellation token</param>
            <param name="clearCache">Clear request cache before executing (default: false)</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Optional.Extending.OptionalMediationExtensions">
            <summary>
            Optional request extensions
            </summary>
        </member>
        <member name="M:Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Action{``0})">
            <summary>
            The action will be invoked just before throwing any exception that might have occurred during request execution
            </summary>
            <typeparam name="TResult">The returned result (from fetch if succeed or cache if failed)</typeparam>
            <param name="option"></param>
            <param name="onResult">The action to invoke</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Func{``0,Apizr.ApizrException{``0},System.Boolean})">
            <summary>
            The function will be invoked with the returned result and potential occurred exception.
            You might decide to throw from the function itself, or to return the success boolean.
            </summary>
            <typeparam name="TResult">The returned result (from fetch if succeed or cache if failed)</typeparam>
            <param name="option"></param>
            <param name="onResult">The function to invoke</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Extending.OptionalMediationExtensions.OnResultAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Func{``0,Apizr.ApizrException{``0},System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            The function will be invoked with the returned result and potential occurred exception.
            Checking exception, you might decide to throw it from the function itself, or to return the success boolean.
            </summary>
            <typeparam name="TResult">The returned result (from fetch if succeed or cache if failed)</typeparam>
            <param name="option"></param>
            <param name="onResult">The function to invoke</param>
        </member>
        <member name="M:Apizr.Optional.Extending.OptionalMediationExtensions.CatchAsync``1(System.Threading.Tasks.Task{Optional.Option{``0,Apizr.ApizrException{``0}}},System.Action{System.Exception},System.Boolean)">
            <summary>
            Return <typeparamref name="TResult"/> (from fetch or cache), no matter of exception (handled by <paramref name="onException"/>).
            Could throw if you ask to with <paramref name="letThrowOnExceptionWithEmptyCache"/> in case of exception with empty cache (<paramref name="onException"/> won't be called),
            otherwise return the empty cache (have to be managed) after calling <paramref name="onException"/> action.
            </summary>
            <typeparam name="TResult">The returned result (from fetch if succeed or cache if failed)</typeparam>
            <param name="option"></param>
            <param name="onException">Action to call to handle exception (like informing the user) before returning result from cache</param>
            <param name="letThrowOnExceptionWithEmptyCache">True to let it throw the inner exception in case of empty cache, False to handle it with <paramref name="onException"/> action and return empty cache result</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase`7">
            <summary>
            The top level base mediation execute result request (returning optional result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The api request type</typeparam>
            <typeparam name="TModelRequestData">The model request type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase`7.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`2}}},System.Action{`6})">
            <summary>
            The top level base mediation execute optional result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase`7.#ctor(System.Linq.Expressions.Expression{System.Func{`5,`0,System.Threading.Tasks.Task{`2}}},System.Action{`6})">
            <summary>
            The top level base mediation execute optional result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase`7.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`3,System.Threading.Tasks.Task{`2}}},`4,System.Action{`6})">
            <summary>
            The top level base mediation execute optional result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase`7.#ctor(System.Linq.Expressions.Expression{System.Func{`5,`0,`3,System.Threading.Tasks.Task{`2}}},`4,System.Action{`6})">
            <summary>
            The top level base mediation execute optional result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase`5">
            <summary>
            The top level base mediation execute result request (returning optional result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`2}}},System.Action{`4})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{`3,`0,System.Threading.Tasks.Task{`2}}},System.Action{`4})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`2,System.Threading.Tasks.Task{`2}}},`1,System.Action{`4})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{`3,`0,`2,System.Threading.Tasks.Task{`2}}},`1,System.Action{`4})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase`4">
            <summary>
            The top level base mediation execute result request (returning optional result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase`4.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`1}}},System.Action{`3})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase`4.#ctor(System.Linq.Expressions.Expression{System.Func{`2,`0,System.Threading.Tasks.Task{`1}}},System.Action{`3})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Optional.Requesting.Base.ExecuteOptionalUnitRequestBase`5">
            <summary>
            The top level base mediation execute optional unit request (returning no result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Optional.Requesting.Base.ExecuteOptionalUnitRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`2,System.Threading.Tasks.Task}},`1,System.Action{`4})">
            <summary>
            The top level base mediation execute optional unit request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Optional.Requesting.Base.ExecuteOptionalUnitRequestBase`5.#ctor(System.Linq.Expressions.Expression{System.Func{`3,`0,`2,System.Threading.Tasks.Task}},`1,System.Action{`4})">
            <summary>
            The top level base mediation execute optional unit request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Optional.Requesting.Base.ExecuteOptionalUnitRequestBase`3">
            <summary>
            The top level base mediation execute optional unit request (returning no result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="M:Apizr.Optional.Requesting.Base.ExecuteOptionalUnitRequestBase`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Action{`2})">
            <summary>
            The top level base mediation execute optional unit request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Optional.Requesting.Base.ExecuteOptionalUnitRequestBase`3.#ctor(System.Linq.Expressions.Expression{System.Func{`1,`0,System.Threading.Tasks.Task}},System.Action{`2})">
            <summary>
            The top level base mediation execute optional unit request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Optional.Requesting.ExecuteOptionalResultRequest`5">
            <summary>
            The mediation execute optional result request (returning result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The api request type</typeparam>
            <typeparam name="TModelRequestData">The model request type</typeparam>
        </member>
        <member name="M:Apizr.Optional.Requesting.ExecuteOptionalResultRequest`5.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute optional result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Optional.Requesting.ExecuteOptionalResultRequest`5.#ctor(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{`2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute optional result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Optional.Requesting.ExecuteOptionalResultRequest`5.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`3,System.Threading.Tasks.Task{`2}}},`4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute optional result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Optional.Requesting.ExecuteOptionalResultRequest`5.#ctor(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,`3,System.Threading.Tasks.Task{`2}}},`4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute optional result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Optional.Requesting.ExecuteOptionalResultRequest`3">
            <summary>
            The mediation execute optional result request (returning result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
        </member>
        <member name="M:Apizr.Optional.Requesting.ExecuteOptionalResultRequest`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute optional result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Optional.Requesting.ExecuteOptionalResultRequest`3.#ctor(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{`2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute optional result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Optional.Requesting.ExecuteOptionalResultRequest`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`2,System.Threading.Tasks.Task{`2}}},`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute optional result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Optional.Requesting.ExecuteOptionalResultRequest`3.#ctor(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,`2,System.Threading.Tasks.Task{`2}}},`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute optional result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Optional.Requesting.ExecuteOptionalResultRequest`2">
            <summary>
            The mediation execute optional result request (returning result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
        </member>
        <member name="M:Apizr.Optional.Requesting.ExecuteOptionalResultRequest`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{`1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute optional result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Optional.Requesting.ExecuteOptionalResultRequest`2.#ctor(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{`1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute optional result request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Optional.Requesting.ExecuteOptionalUnitRequest`3">
            <summary>
            The mediation execute optional unit request (returning no result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
        </member>
        <member name="M:Apizr.Optional.Requesting.ExecuteOptionalUnitRequest`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`2,System.Threading.Tasks.Task}},`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute optional unit request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Optional.Requesting.ExecuteOptionalUnitRequest`3.#ctor(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,`2,System.Threading.Tasks.Task}},`1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute optional unit request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="modelData">The data provided to the request</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Optional.Requesting.ExecuteOptionalUnitRequest`1">
            <summary>
            The mediation execute optional unit request (returning no result)
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
        </member>
        <member name="M:Apizr.Optional.Requesting.ExecuteOptionalUnitRequest`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute optional unit request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="M:Apizr.Optional.Requesting.ExecuteOptionalUnitRequest`1.#ctor(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            The mediation execute optional unit request constructor
            </summary>
            <param name="executeApiMethod">The request to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
        </member>
        <member name="T:Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalResultRequestHandlerBase`8">
            <summary>
            The top level base mediation execute optional result request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The api request type</typeparam>
            <typeparam name="TModelRequestData">The model request type</typeparam>
            <typeparam name="TRequest">The request to handle</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="T:Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalResultRequestHandlerBase`6">
            <summary>
            The top level base mediation execute optional result request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <typeparam name="TRequest">The request to handle</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="T:Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalResultRequestHandlerBase`5">
            <summary>
            The top level base mediation execute optional result request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <typeparam name="TRequest">The request to handle</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="T:Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase`6">
            <summary>
            The top level base mediation execute optional unit request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
            <typeparam name="TRequest">The execute unit request to handle</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="T:Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase`4">
            <summary>
            The top level base mediation execute optional unit request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TRequest">The execute unit request to handle</typeparam>
            <typeparam name="TApizrRequestOptions">Options provided to the request</typeparam>
            <typeparam name="TApizrRequestOptionsBuilder">The request options builder</typeparam>
        </member>
        <member name="T:Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler`5">
            <summary>
            The mediation execute optional result request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type</typeparam>
            <typeparam name="TApiResultData">The api result type</typeparam>
            <typeparam name="TApiRequestData">The api request type</typeparam>
            <typeparam name="TModelRequestData">The model request type</typeparam>
        </member>
        <member name="M:Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler`5.Handle(Apizr.Optional.Requesting.ExecuteOptionalResultRequest{`0,`1,`2,`3,`4},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler`3">
            <summary>
            The mediation execute optional result request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
        </member>
        <member name="M:Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler`3.Handle(Apizr.Optional.Requesting.ExecuteOptionalResultRequest{`0,`1,`2},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler`2">
            <summary>
            The mediation execute optional result request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
        </member>
        <member name="M:Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler`2.Handle(Apizr.Optional.Requesting.ExecuteOptionalResultRequest{`0,`1},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler`3">
            <summary>
            The mediation execute optional unit request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model data type</typeparam>
            <typeparam name="TApiData">The api data type</typeparam>
        </member>
        <member name="M:Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler`3.Handle(Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{`0,`1,`2},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler`1">
            <summary>
            The mediation execute optional unit request handler
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
        </member>
        <member name="M:Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler`1.Handle(Apizr.Optional.Requesting.ExecuteOptionalUnitRequest{`0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator">
            <summary>
            Apizr mediator to send request using MediatR by calling expression and returning optional result
            </summary>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``2,System.Threading.Tasks.Task}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{``2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator`1">
            <summary>
            <see cref="T:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator"/> but dedicated to <typeparamref name="TWebApi"/> with optional result, getting all shorter
            </summary>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator`1.SendFor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator`1.SendFor(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``1,System.Threading.Tasks.Task}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator`1.SendFor``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator`1.SendFor``1(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{``0}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task{``1}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``1,System.Threading.Tasks.Task{``1}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator`1.SendFor``4(System.Linq.Expressions.Expression{System.Func{`0,``2,System.Threading.Tasks.Task{``1}}},``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.ApizrOptionalMediator`1.SendFor``4(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``2,System.Threading.Tasks.Task{``1}}},``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <inheritdoc />
        </member>
        <member name="T:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator">
            <summary>
            Apizr mediator to send request using MediatR by calling expression and returning optional result
            </summary>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``1(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``2,System.Threading.Tasks.Task}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api result type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TApiData">The api result type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,System.Threading.Tasks.Task{``2}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``3(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``2,System.Threading.Tasks.Task{``2}}},``1,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.SendFor``5(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,``0,``3,System.Threading.Tasks.Task{``2}}},``4,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result
            </summary>
            <typeparam name="TWebApi">The web api type</typeparam>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1">
            <summary>
            <see cref="T:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator"/> but dedicated to <typeparamref name="TWebApi"/> with optional result, getting all shorter
            </summary>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR and returning an optional result
            </summary>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR and returning an optional result
            </summary>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and returning an optional result
            </summary>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``1,System.Threading.Tasks.Task}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with mapped request and returning an optional result
            </summary>
            <typeparam name="TModelData">The model request type to map from</typeparam>
            <typeparam name="TApiData">The api request type to map to</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``1(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``0}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiData">The api result type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``1(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{``0}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR and returning an optional result
            </summary>
            <typeparam name="TApiData">The api result type</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR returning an optional mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,System.Threading.Tasks.Task{``1}}},System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR returning an optional mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map to</typeparam>
            <typeparam name="TApiData">The api result type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{`0,``1,System.Threading.Tasks.Task{``1}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``2(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``1,System.Threading.Tasks.Task{``1}}},``0,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result
            </summary>
            <typeparam name="TModelData">The mapped model type to map request from and result to</typeparam>
            <typeparam name="TApiData">The api result type to map request to and result from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelData">The model data to map</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``4(System.Linq.Expressions.Expression{System.Func{`0,``2,System.Threading.Tasks.Task{``1}}},``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result
            </summary>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="M:Apizr.Optional.Requesting.Sending.IApizrOptionalMediator`1.SendFor``4(System.Linq.Expressions.Expression{System.Func{Apizr.Configuring.Request.IApizrRequestOptions,`0,``2,System.Threading.Tasks.Task{``1}}},``3,System.Action{Apizr.Configuring.Request.IApizrRequestOptionsBuilder})">
            <summary>
            Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result
            </summary>
            <typeparam name="TModelResultData">The model result type to map to</typeparam>
            <typeparam name="TApiRequestData">The api result type to map from</typeparam>
            <typeparam name="TApiResultData">The api request type to map to</typeparam>
            <typeparam name="TModelRequestData">The model request type to map from</typeparam>
            <param name="executeApiMethod">The <typeparamref name="TWebApi"/> call to execute</param>
            <param name="modelRequestData">The model request data</param>
            <param name="optionsBuilder">Options provided to the request</param>
            <returns></returns>
        </member>
        <member name="T:Apizr.Optional.Requesting.Sending.IApizrOptionalMediatorBase">
            <summary>
            Apizr base optional mediator
            </summary>
        </member>
    </members>
</doc>
