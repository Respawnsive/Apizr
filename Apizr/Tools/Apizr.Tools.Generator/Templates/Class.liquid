using System.Threading.Tasks;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Refit;

namespace {{ Namespace }}
{
    /// <summary>
    /// {% if HasDescription -%} {{ Description }}{% else -%}{{ ClassName }}
{% endif -%}
    /// </summary>    
    {{ TypeAccessModifier }} class {{ ClassName }}
    {
{% for property in Properties -%}
{%   if property.HasDescription -%}
        /// <summary>
        /// {{ property.Description | csharpdocs }}
        /// </summary>{% else -%}    
        /// <summary>
        /// {{ property.PropertyName | csharpdocs }}
        /// </summary> 
{%   endif -%}
{%   if property.RenderRequiredAttribute -%}
        [Required{% if property.AllowEmptyStrings %}(AllowEmptyStrings = true){% endif %}]
{%   endif -%}
{%   if property.RenderRangeAttribute -%}
        [Range({{ property.RangeMinimumValue }}, {{ property.RangeMaximumValue }})]
{%   endif -%}
{%   if property.RenderStringLengthAttribute -%}
        [StringLength({{ property.StringLengthMaximumValue }}{% if property.StringLengthMinimumValue > 0 %}, MinimumLength = {{ property.StringLengthMinimumValue }}{% endif %})]
{%   endif -%}
{%   if property.RenderMinLengthAttribute -%}
        [MinLength({{ property.MinLengthAttribute }})]
{%   endif -%}
{%-  if property.RenderMaxLengthAttribute -%}
        [MaxLength({{ property.MaxLengthAttribute }})]
{%- endif -%}

        [AliasAs("{{ property.Name }}")]
        public {{ property.Type }} {{ property.PropertyName }}{% if RenderInpc == false and RenderPrism == false %} { get; {% if property.HasSetter and RenderRecord == false %}set; {% endif %}}{% if property.HasDefaultValue and RenderRecord == false %} = {{ property.DefaultValue }};{% elsif GenerateNullableReferenceTypes and RenderRecord == false -%} = default!;{% endif %}
{% else %}
        {
                get { return {{ property.FieldName }}; }
{%     if property.HasSetter -%}
{%         if RenderInpc -%}
                {{PropertySetterAccessModifier}}set 
                {
        if ({{ property.FieldName }} != value)
                {
                        {{ property.FieldName }} = value; 
                        RaisePropertyChanged();
                }
                }
        {%         else -%}
                {{PropertySetterAccessModifier}}set { SetProperty(ref {{ property.FieldName }}, value); }
{%         endif -%}
{%     endif -%}
        }
{%   endif -%}

{% endfor -%}
    }
}