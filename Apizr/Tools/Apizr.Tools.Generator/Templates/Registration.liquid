using Apizr;
{% if HasManyServices -%}
using Apizr.Configuring.Registry;
{% endif -%}
using Microsoft.Extensions.DependencyInjection;
{% if WithRetry -%}
using System;
using Apizr.Policing;
using Polly;
using Polly.Extensions.Http;
using Polly.Registry;
{% endif -%}
{% if WithLogs -%}
using Apizr.Logging.Attributes;
{% endif -%}
{% if WithCacheProvider != 'None' -%}
using Apizr.Caching.Attributes;
{% endif -%}
{% if WithCacheProvider == 'Akavache' -%}
using Akavache;
{% elsif WithCacheProvider == 'MonkeyCache' -%}
using MonkeyCache.FileStore;
{% endif -%}

{% if WithRetry -%}
[assembly:Policy("TransientHttpError")] // Adjust policies if needed
{% endif -%}
{% if WithLogs -%}
[assembly:Log] // Adjust log levels if needed
{% endif -%}
{% if WithCacheProvider != 'None' -%}
[assembly:Cache] // Adjust cache mode and duration if needed
{% endif -%}
namespace {{ NameSpace }}
{
    public static class ApizrRegistration
    {
{%      if WithRetry -%}
        // Define your PolicyRegistry
        public static PolicyRegistry ApizrPolicyRegistry = new PolicyRegistry
        {
            {
                "TransientHttpError", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[]
                {
                    TimeSpan.FromSeconds(1),
                    TimeSpan.FromSeconds(5),
                    TimeSpan.FromSeconds(10)
                }, LoggedPolicies.OnLoggedRetry).WithPolicyKey("TransientHttpError")
            }
        };

{%      endif -%}
{%      if RegistrationType == 'Static' or RegistrationType == 'Both' -%}
        // Static
        public static {% if HasManyServices  -%}IApizrRegistry {% else -%}IApizrManager<I{{ LastService }}Service> {% endif -%} Build()
        {
{%          if WithCacheProvider == 'MonkeyCache' -%}
            Barrel.ApplicationId = "{{Title}}";

{%          elsif WithCacheProvider == 'InMemory' or WithCacheProvider == 'Distributed' -%}
            // Microsoft.Extensions.Caching.{{WithCacheProvider}} is not compatible with static registration

{%          endif -%}
{%          if HasManyServices -%}
            var apizrRegisry = ApizrBuilder.CreateRegistry(
                registry => registry
{%                  for service in Services -%}
                    .AddManagerFor<I{{ service }}Service>(){% if service == LastService %},{% endif %}
{%                  endfor -%}
                options => options.WithBaseAddress("{{BaseUrl}}")
{%                  if WithRetry -%}
                    .WithPolicyRegistry(ApizrPolicyRegistry)
{%                  endif -%}
{%                  if WithPriority -%}
                    .WithPriorityManagement()
{%                  endif -%}
{%                  if WithCacheProvider == 'Akavache' -%}
                    .WithAkavacheCacheHandler()
{%                  elsif WithCacheProvider == 'MonkeyCache' -%}
                    .WithCacheHandler(() => new MonkeyCacheHandler(Barrel.Current))
{%                  elsif WithCacheProvider == 'Custom' -%}
                    .WithCacheHandler(() => new YOUR_ICACHEHANDLER_CUSTOM_IMPLEMENTATION_HERE())
{%                  endif -%}
            );

            return apizrRegistry;
{%          else -%}
            var apizrManager = ApizrBuilder.CreateManagerFor<I{{ LastService }}Service>(
                options => options.WithBaseAddress("{{BaseUrl}}")
{%                  if WithRetry -%}
                    .WithPolicyRegistry(ApizrPolicyRegistry)
{%                  endif -%}
{%                  if WithPriority -%}
                    .WithPriorityManagement()
{%                  endif -%}
{%                  if WithCacheProvider == 'Akavache' -%}
                    .WithAkavacheCacheHandler()
{%                  elsif WithCacheProvider == 'MonkeyCache' -%}
                    .WithCacheHandler(() => new MonkeyCacheHandler(Barrel.Current))
{%                  elsif WithCacheProvider == 'Custom' -%}
                    .WithCacheHandler(() => new YOUR_ICACHEHANDLER_CUSTOM_IMPLEMENTATION_HERE())
{%                  endif -%}
            );

            return apizrManager;
{%          endif -%}
        }
{%      endif -%}
{%      if RegistrationType == 'Extended' or RegistrationType == 'Both' -%}
{%      if RegistrationType == 'Both' -%}

{%      endif -%}
        // Extended
        public static IServiceCollection AddApizr(this IServiceCollection services)
        {
{%          if WithRetry -%}
            services.AddPolicyRegistry(ApizrPolicyRegistry);

{%          endif -%}
{%          if WithCacheProvider == 'MonkeyCache' -%}
            Barrel.ApplicationId = "{{Title}}";

{%          elsif WithCacheProvider == 'Distributed' -%}
            // You selected Distributed cache so do not forget to register the distributed cache provider of your choice

{%          endif -%}
{%          if HasManyServices -%}
            services.AddApizr(
                registry => registry
{%                  for service in Services -%}
                    .AddManagerFor<I{{ service }}Service>(){% if service == LastService %},{% endif %}
{%                  endfor -%}
                options => options.WithBaseAddress("{{BaseUrl}}")
{%                  if WithPriority -%}
                    .WithPriorityManagement()
{%                  endif -%}
{%                  if WithCacheProvider == 'Akavache' -%}
                    .WithAkavacheCacheHandler()
{%                  elsif WithCacheProvider == 'MonkeyCache' -%}
                    .WithCacheHandler(() => new MonkeyCacheHandler(Barrel.Current))
{%                  elsif WithCacheProvider == 'InMemory' -%}
                    .WithInMemoryCacheHandler()
{%                  elsif WithCacheProvider == 'Distributed' -%}
                    .WithDistributedCacheHandler<CHOOSE_STRING_OR_BYTEARRAY_CACHE_TYPE>()
{%                  elsif WithCacheProvider == 'Custom' -%}
                    .WithCacheHandler(() => new YOUR_ICACHEHANDLER_CUSTOM_IMPLEMENTATION_HERE())
{%                  endif -%}
            );
{%          else -%}
            services.AddApizrManagerFor<I{{ LastService }}Service>(
                options => options.WithBaseAddress("{{BaseUrl}}")
{%                  if WithPriority -%}
                    .WithPriorityManagement()
{%                  endif -%}
{%                  if WithCacheProvider == 'Akavache' -%}
                    .WithAkavacheCacheHandler()
{%                  elsif WithCacheProvider == 'MonkeyCache' -%}
                    .WithCacheHandler(() => new MonkeyCacheHandler(Barrel.Current))
{%                  elsif WithCacheProvider == 'InMemory' -%}
                    .WithInMemoryCacheHandler()
{%                  elsif WithCacheProvider == 'Distributed' -%}
                    .WithDistributedCacheHandler<CHOOSE_STRING_OR_BYTEARRAY_CACHE_TYPE>()
{%                  elsif WithCacheProvider == 'Custom' -%}
                    .WithCacheHandler(() => new YOUR_ICACHEHANDLER_CUSTOM_IMPLEMENTATION_HERE())
{%                  endif -%}
            );
{%          endif -%}

            return services;
        }
{%      endif -%}
    }
}