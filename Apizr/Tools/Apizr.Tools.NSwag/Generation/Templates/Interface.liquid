/***************************************************************************************************************
* This is an api service interface generated by Apizr.Tools.NSwag
{%  if WithCacheProvider != 'None' or WithLogs -%}
* As you asked for following optional features, please make sure to install each corresponding Nuget packages:
{%  if WithCacheProvider == 'Akavache' -%}
* - Akavache cache provider:      Apizr.Integrations.Akavache
{%  elsif WithCacheProvider == 'MonkeyCache' -%}
* - MonkeyCache cache provider:   Apizr.Integrations.MonkeyCache
{%  elsif WithCacheProvider == 'InMemory' -%}
* - InMemory cache provider:      Apizr.Extensions.Microsoft.Caching and Microsoft.Extensions.Caching.Memory
{%  elsif WithCacheProvider == 'Distributed' -%}
* - Distributed cache provider:   Apizr.Extensions.Microsoft.Caching and any Nuget package of your choice compatible with Microsoft Distributed Caching Extensions
{%  endif -%}
{%  if WithLogs -%}
* - Logs:                         any Nuget package of your choice compatible with Microsoft Logging Extensions
{%  endif -%}
{%  endif -%}
****************************************************************************************************************/

using System.Threading.Tasks;
using System.Collections.Generic;
{% if HasSystemReferences -%}
using System;
{% endif -%}
{% if WithCancellationToken -%}
using System.Threading;
{% endif -%}
using Refit;
using Apizr;
{% if RegistrationType == 'None' -%}
{% if WithRetry -%}
using Polly;
using Apizr.Policing;
{% endif -%}
using Polly.Extensions.Http;
using Polly.Registry;
{% endif -%}
{% if WithLogs -%}
using Apizr.Logging.Attributes;
{% endif -%}
{% if WithCacheProvider != 'None' -%}
using Apizr.Caching.Attributes;
{% endif -%}

{% if WithRetry -%}
[assembly:Policy("TransientHttpError")]
{% endif -%}
{% if WithLogs -%}
[assembly:Log]
{% endif -%}
{% if WithCacheProvider != 'None' -%}
[assembly:Cache]
{% endif -%}

namespace {{ NameSpace }}
{
    [WebApi]
    public interface I{{ Class }}Api
    {
{%     for operation in Operations -%}
{%         if operation.HasSummary -%}
        /// <summary>
        /// {{ operation.Summary | csharpdocs }}
        /// </summary>
{%         endif -%}
{%         for parameter in operation.NoHeaderParameters -%}
{%             if parameter.HasDescription -%}
        /// <param name="{{ parameter.VariableName }}">{{ parameter.Description | csharpdocs }}</param>
{%             endif -%}
{%         endfor -%}
{%         if operation.HasResultDescription -%}
        /// <returns>{{ operation.ResultDescription | csharpdocs }}</returns>
{%         endif -%}
{%         if operation.IsDeprecated -%}
        [Obsolete]
{%         endif -%}
{%  assign httpMethodLower = operation.HttpMethodLower -%}
{%  case httpMethodLower -%}
{%      when 'post' -%}
        [Post("{{ operation.Path }}")]
{%      when 'get' -%}
        [Get("{{ operation.Path }}")]
{%      when 'put' -%}
        [Put("{{ operation.Path }}")]
{%      when 'delete' -%}
        [Delete("{{ operation.Path }}")]
{%  endcase -%}  
{%      if operation.ApizrHeaderParameters.size > 0 -%}
        [Headers({% for headerParameter in operation.ApizrHeaderParameters -%}"{{ headerParameter.Name }}"{% if operation.ApizrHeaderParameters.size > 1 and headerParameter.IsLast == false  -%}, {% endif -%}{%  endfor -%})] 
{%      endif -%}
        {{ operation.PascalizeResultType }} {{ operation.ActualOperationName }}Async({% for parameter in operation.NoHeaderParameters -%}{% assign kindName = parameter.KindName -%}{% case kindName -%}{% when 'Query' -%}[Query] {% when 'Body' -%}[Body] {% endcase -%}{{ parameter.TypeInControllerInterface }} {{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional and parameter.HasDefault == false -%}= null{% endif %}{% endfor -%}, [RequestOptions] IApizrRequestOptions options = null{% if WithCancellationToken -%}, CancellationToken cancellationToken = default{% endif -%});

{%  endfor -%}
    }
}