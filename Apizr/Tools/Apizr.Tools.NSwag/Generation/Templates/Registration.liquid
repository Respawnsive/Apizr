/***************************************************************************************************************
* This is a registration helper class generated by Apizr.Tools.NSwag with {% if RegistrationType == 'Both' -%}both {% endif -%}{% if RegistrationType == 'Static' or RegistrationType == 'Both' -%}the static builder {% endif -%}{% if RegistrationType == 'Both' -%}and {% endif -%}{% if RegistrationType == 'Extended' or RegistrationType == 'Both' -%}a service collection extension method {% endif -%}.
* As you asked for {% if RegistrationType == 'Static' -%}static {% elsif RegistrationType == 'Extended' -%}extended {% elsif RegistrationType == 'Both' -%}both static and extended {% endif -%}registration, make sure to get the {% if RegistrationType == 'Static' -%}Apizr {% else -%}Apizr.Extensions.Microsoft.DependencyInjection {% endif -%}Nuget package installed.
{%  if WithCacheProvider != 'None' or WithLogs or WithLogs or WithPriority or WithMapping != 'None' or WithMediation or WithOptionalMediation -%}
* As you asked for following optional features, please make sure to install each corresponding Nuget packages:
{%  if WithCacheProvider == 'Akavache' -%}
* - Akavache cache provider:      Apizr.Integrations.Akavache
{%  elsif WithCacheProvider == 'MonkeyCache' -%}
* - MonkeyCache cache provider:   Apizr.Integrations.MonkeyCache
{%  elsif WithCacheProvider == 'InMemory' -%}
* - InMemory cache provider:      Apizr.Extensions.Microsoft.Caching and Microsoft.Extensions.Caching.Memory
{%  elsif WithCacheProvider == 'Distributed' -%}
* - Distributed cache provider:   Apizr.Extensions.Microsoft.Caching and any Nuget package of your choice compatible with Microsoft Distributed Caching Extensions
{%  endif -%}
{%  if WithLogs -%}
* - Logs:                         any Nuget package of your choice compatible with Microsoft Logging Extensions
{%  endif -%}
{%  if WithPriority -%}
* - Priority management:          Apizr.Integrations.Fusillade
{%  endif -%}
{%  if WithMapping == 'AutoMapper' -%}
* - AutoMapper data mapper:       Apizr.Integrations.AutoMapper
{%  elsif WithMapping == 'Mapster' -%}
* - Mapster data mapper:          Apizr.Integrations.Mapster
{%  endif -%}
{%  if WithMediation -%}
* - Mediation:                    Apizr.Integrations.MediatR
{%  endif -%}
{%  if WithOptionalMediation -%}
* - Optional mediation:           Apizr.Integrations.Optional
{%  endif -%}
{%  endif -%}
****************************************************************************************************************/

using Apizr;
{% if HasManyApis -%}
using Apizr.Configuring.Registry;
{% endif -%}
{% if RegistrationType == 'Extended' or RegistrationType == 'Both' -%}
using Microsoft.Extensions.DependencyInjection;
{% endif -%}
{% if WithRetry -%}
using System;
using Apizr.Resiliencing;
using Apizr.Resiliencing.Attributes;
using Polly;
using Polly.Extensions.Http;
using Polly.Registry;
{% endif -%}
{% if WithLogs -%}
using Apizr.Logging.Attributes;
using Microsoft.Extensions.Logging;
{% endif -%}
{% if WithCacheProvider != 'None' -%}
using Apizr.Caching.Attributes;
{% endif -%}
{% if WithCacheProvider == 'Akavache' -%}
using Akavache;
{% elsif WithCacheProvider == 'MonkeyCache' -%}
using MonkeyCache.FileStore;
{% endif -%}
{% if WithMapping == 'AutoMapper' -%}
using AutoMapper;
{% elsif WithMapping == 'Mapster' -%}
using Mapster;
{% if RegistrationType == 'Extended' or RegistrationType == 'Both' -%}
using MapsterMapper;
{% endif -%}
{% endif -%}
{% if WithMediation or WithOptionalMediation -%}
using MediatR;
{% endif -%}
{% if WithMediation or WithOptionalMediation or WithOptionalMediation -%}
using System.Reflection;
{% endif -%}

{% if WithRetry -%}
[assembly:ResiliencePipeline("TransientHttpError")] // Adjust policies if needed
{% endif -%}
{% if WithLogs -%}
[assembly:Log] // Adjust log levels if needed
{% endif -%}
{% if WithCacheProvider != 'None' -%}
[assembly:Cache] // Adjust cache mode and duration if needed
{% endif -%}
namespace {{ NameSpace }}
{
    public static class ApizrRegistration
    {
{%      if WithRetry -%}
        // Define your ResiliencePipeline if not done yet somewhere else
        public static ResiliencePipelineBuilder<HttpResponseMessage> ApizrResiliencePipelineBuilder = new ResiliencePipelineBuilder<HttpResponseMessage>()
            .ConfigureTelemetry(lazyLoggerFactory.Value)
            .AddRetry(
                new RetryStrategyOptions<HttpResponseMessage>
                {
                    ShouldHandle = new PredicateBuilder<HttpResponseMessage>()
                        .Handle<HttpRequestException>()
                        .HandleResult(response =>
                            response.StatusCode is >= HttpStatusCode.InternalServerError
                                or HttpStatusCode.RequestTimeout),
                    Delay = TimeSpan.FromSeconds(1),
                    MaxRetryAttempts = 5,
                    UseJitter = true,
                    BackoffType = DelayBackoffType.Exponential
                });

{%      endif -%}
{%      if RegistrationType == 'Static' or RegistrationType == 'Both' -%}
        // Static
        public static {% if HasManyApis  -%}IApizrRegistry {% else -%}IApizrManager<{{ LastApi }}> {% endif -%} Build()
        {
{%          if WithRetry -%}
            var resiliencePipelineRegistry = new ResiliencePipelineRegistry<string>();
            resiliencePipelineRegistry.TryAddBuilder<HttpResponseMessage>("TransientHttpError", 
                (builder, _) => builder.AddPipeline(resiliencePipelineBuilder.Build()));
                
{%          endif -%}
{%          if WithCacheProvider == 'MonkeyCache' -%}
            Barrel.ApplicationId = "{{Title}}";

{%          elsif WithCacheProvider == 'InMemory' or WithCacheProvider == 'Distributed' -%}
            // Microsoft.Extensions.Caching.{{WithCacheProvider}} is not compatible with Apizr static registration (ignored)

{%          endif -%}
{%          if WithMediation or WithOptionalMediation -%}
            // MediatR is not compatible with Apizr static registration (ignored)

{%          endif -%}
{%          if WithMapping == 'AutoMapper' -%}
            var mapperConfig = new MapperConfiguration(config =>
            {
                // todo: replace with your own mapping profiles
                config.AddProfile<YOUR_FIRST_PROFILE_HERE>();
                config.AddProfile<YOUR_SECOND_PROFILE_HERE>();
                // and so on...
            });

            {% elsif WithMapping == 'Mapster' -%}
            // todo: replace with your own mapped entities
            TypeAdapterConfig<FROM_ENTITY, TO_ENTITY>
                .NewConfig()
                .TwoWays()
                .Map(toEntity => toEntity.Property, fromEntity => fromEntity.Property);
                // and so on...

{%          endif -%}
{%          if HasManyApis -%}
            var apizrRegisry = ApizrBuilder.Current.CreateRegistry(
                registry => registry
{%                  for api in Apis -%}
                    .AddManagerFor<{{ api }}>(){% if api == LastApi %},{% endif %}
{%                  endfor -%}
                options => options.WithBaseAddress("{{BaseUrl}}")
{%                  if WithLogs -%}
                    .WithLoggerFactory(() => LoggerFactory.Create(logging =>
                    {
                        // Add here whatever logger of your choice, like:
                        //logging.AddConsole();
                        //logging.AddDebug();
                        //logging.SetMinimumLevel(LogLevel.Trace);
                    }))
{%                  endif -%}
{%                  if WithRetry -%}
                    .WithResiliencePipelineRegistry(resiliencePipelineRegistry)
{%                  endif -%}
{%                  if WithPriority -%}
                    .WithPriority()
{%                  endif -%}
{%                  if WithCacheProvider == 'Akavache' -%}
                    .WithAkavacheCacheHandler()
{%                  elsif WithCacheProvider == 'MonkeyCache' -%}
                    .WithCacheHandler(() => new MonkeyCacheHandler(Barrel.Current))
{%                  elsif WithCacheProvider == 'Custom' -%}
                    .WithCacheHandler(() => new YOUR_ICACHEHANDLER_CUSTOM_IMPLEMENTATION_HERE())
{%                  endif -%}
{%                  if WithMapping == 'AutoMapper' -%}
                    .WithAutoMapperMappingHandler(mapperConfig)
                    {% elsif WithMapping == 'Mapster' -%}
                    .WithMapsterMappingHandler(new MapsterMapper.Mapper())
{%                  endif -%}
            );

            return apizrRegistry;
{%          else -%}
            var apizrManager = ApizrBuilder.Current.CreateManagerFor<{{ LastApi }}>(
                options => options.WithBaseAddress("{{BaseUrl}}")
{%                  if WithLogs -%}
                    .WithLoggerFactory(() => LoggerFactory.Create(logging =>
                    {
                        // Add here whatever logger of your choice, like:
                        //logging.AddConsole();
                        //logging.AddDebug();
                        //logging.SetMinimumLevel(LogLevel.Trace);
                    }))
{%                  endif -%}
{%                  if WithRetry -%}
                    .WithResiliencePipelineRegistry(resiliencePipelineRegistry)
{%                  endif -%}
{%                  if WithPriority -%}
                    .WithPriority()
{%                  endif -%}
{%                  if WithCacheProvider == 'Akavache' -%}
                    .WithAkavacheCacheHandler()
{%                  elsif WithCacheProvider == 'MonkeyCache' -%}
                    .WithCacheHandler(() => new MonkeyCacheHandler(Barrel.Current))
{%                  elsif WithCacheProvider == 'Custom' -%}
                    .WithCacheHandler(() => new YOUR_ICACHEHANDLER_CUSTOM_IMPLEMENTATION_HERE())
{%                  endif -%}
{%                  if WithMapping == 'AutoMapper' -%}
                    .WithAutoMapperMappingHandler(mapperConfig)
                    {% elsif WithMapping == 'Mapster' -%}
                    .WithMapsterMappingHandler(new MapsterMapper.Mapper())
{%                  endif -%}
            );

            return apizrManager;
{%          endif -%}
        }
{%      endif -%}
{%      if RegistrationType == 'Extended' or RegistrationType == 'Both' -%}
{%      if RegistrationType == 'Both' -%}

{%      endif -%}
        // Extended
        public static IServiceCollection AddApizr(this IServiceCollection services)
        {
{%          if WithLogs -%}
            // Don't forget to setup your logging layer somewhere to get logs from Apizr

{%          endif -%}
{%          if WithRetry -%}
            services.AddResiliencePipeline<string, HttpResponseMessage>("TransientHttpError",
                builder => builder.AddPipeline(resiliencePipelineBuilder.Build())); // Remove this line if already registered somewhere else

{%          endif -%}
{%          if WithCacheProvider == 'MonkeyCache' -%}
            Barrel.ApplicationId = "{{Title}}";

{%          elsif WithCacheProvider == 'Distributed' -%}
            // You selected Distributed cache so do not forget to register the distributed cache provider of your choice

{%          endif -%}
{%          if WithMediation or WithOptionalMediation -%}
            services.AddMediatR(Assembly.GetExecutingAssembly()); // Remove this line if already registered somewhere else

{%          endif -%}
{%          if WithMapping == 'AutoMapper' -%}
            services.AddAutoMapper(Assembly.GetExecutingAssembly()); // Remove this line if already registered somewhere else

            {% elsif WithMapping == 'Mapster' -%}
            var mapsterConfig = new TypeAdapterConfig();

            // todo: replace with your own mapped entities
            mapsterConfig.NewConfig<FROM_ENTITY, TO_ENTITY>()
                .TwoWays()
                .Map(toEntity => toEntity.Property, fromEntity => fromEntity.Property);
                // and so on...

            services.AddSingleton(mapsterConfig);
            services.AddScoped<IMapper, ServiceMapper>();

{%          endif -%}
{%          if HasManyApis -%}
            services.AddApizr(
                registry => registry
{%                  for api in Apis -%}
                    .AddManagerFor<{{ api }}>(){% if api == LastApi %},{% endif %}
{%                  endfor -%}
                options => options.WithBaseAddress("{{BaseUrl}}")
{%                  if WithPriority -%}
                    .WithPriority()
{%                  endif -%}
{%                  if WithCacheProvider == 'Akavache' -%}
                    .WithAkavacheCacheHandler()
{%                  elsif WithCacheProvider == 'MonkeyCache' -%}
                    .WithCacheHandler(() => new MonkeyCacheHandler(Barrel.Current))
{%                  elsif WithCacheProvider == 'InMemory' -%}
                    .WithInMemoryCacheHandler()
{%                  elsif WithCacheProvider == 'Distributed' -%}
                    .WithDistributedCacheHandler<CHOOSE_STRING_OR_BYTEARRAY_CACHE_TYPE>()
{%                  elsif WithCacheProvider == 'Custom' -%}
                    .WithCacheHandler(() => new YOUR_ICACHEHANDLER_CUSTOM_IMPLEMENTATION_HERE())
{%                  endif -%}
{%                  if WithMediation -%}
                    .WithMediation()
{%                  endif -%}
{%                  if WithOptionalMediation -%}
                    .WithOptionalMediation()
{%                  endif -%}
{%                  if WithMapping == 'AutoMapper' -%}
                    .WithAutoMapperMappingHandler()
                    {% elsif WithMapping == 'Mapster' -%}
                    .WithMapsterMappingHandler()
{%                  endif -%}
            );
{%          else -%}
            services.AddApizrManagerFor<{{ LastApi }}>(
                options => options.WithBaseAddress("{{BaseUrl}}")
{%                  if WithPriority -%}
                    .WithPriority()
{%                  endif -%}
{%                  if WithCacheProvider == 'Akavache' -%}
                    .WithAkavacheCacheHandler()
{%                  elsif WithCacheProvider == 'MonkeyCache' -%}
                    .WithCacheHandler(() => new MonkeyCacheHandler(Barrel.Current))
{%                  elsif WithCacheProvider == 'InMemory' -%}
                    .WithInMemoryCacheHandler()
{%                  elsif WithCacheProvider == 'Distributed' -%}
                    .WithDistributedCacheHandler<CHOOSE_STRING_OR_BYTEARRAY_CACHE_TYPE>()
{%                  elsif WithCacheProvider == 'Custom' -%}
                    .WithCacheHandler(() => new YOUR_ICACHEHANDLER_CUSTOM_IMPLEMENTATION_HERE())
{%                  endif -%}
{%                  if WithMediation -%}
                    .WithMediation()
{%                  endif -%}
{%                  if WithOptionalMediation -%}
                    .WithOptionalMediation()
{%                  endif -%}
{%                  if WithMapping == 'AutoMapper' -%}
                    .WithAutoMapperMappingHandler()
                    {% elsif WithMapping == 'Mapster' -%}
                    .WithMapsterMappingHandler()
{%                  endif -%}
            );
{%          endif -%}

            return services;
        }
{%      endif -%}
    }
}