{
  "api/Apizr.AkavacheCacheHandler.html": {
    "href": "api/Apizr.AkavacheCacheHandler.html",
    "title": "Class AkavacheCacheHandler | Apizr",
    "keywords": "Class AkavacheCacheHandler Akavache cache handler implementation Inheritance System.Object AkavacheCacheHandler Implements ICacheHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.Akavache.dll Syntax public class AkavacheCacheHandler : ICacheHandler Constructors AkavacheCacheHandler() Set Akavache as CacheHandler with LocalMachine blob cache and ApizrAkavacheCacheHandler name Declaration public AkavacheCacheHandler() AkavacheCacheHandler(Func<IBlobCache>) Set Akavache as CacheHandler with your blob cache and ApizrAkavacheCacheHandler name Declaration public AkavacheCacheHandler(Func<IBlobCache> blobCacheFactory) Parameters Type Name Description System.Func < Akavache.IBlobCache > blobCacheFactory The blob cache factory of your choice AkavacheCacheHandler(Func<IBlobCache>, String) Set Akavache as CacheHandler with your blob cache and your provided name Declaration public AkavacheCacheHandler(Func<IBlobCache> blobCacheFactory, string applicationName) Parameters Type Name Description System.Func < Akavache.IBlobCache > blobCacheFactory The blob cache factory of your choice System.String applicationName The application name used by Akavache AkavacheCacheHandler(String) Set Akavache as CacheHandler with LocalMachine blob cache and your provided name Declaration public AkavacheCacheHandler(string applicationName) Parameters Type Name Description System.String applicationName The application name used by Akavache Methods ClearAsync(CancellationToken) Map Apizr cache clearing method to your cache handler method Declaration public Task ClearAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task GetAsync<T>(String, CancellationToken) Map Apizr cache getting method to your cache handler method Declaration public Task<T> GetAsync<T>(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key The key to get from System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task <T> Type Parameters Name Description T The expected value type RemoveAsync(String, CancellationToken) Map Apizr cache removing method to your cache handler method Declaration public Task<bool> RemoveAsync(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key The key to remove from System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Boolean > SetAsync(String, Object, Nullable<TimeSpan>, CancellationToken) Map Apizr cache saving method to your cache handler method Declaration public Task SetAsync(string key, object value, TimeSpan? lifeSpan = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key The key to cache at System.Object value The value to cache System.Nullable < System.TimeSpan > lifeSpan The optional life span System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task Implements ICacheHandler"
  },
  "api/Apizr.AkavacheOptionsBuilderExtensions.html": {
    "href": "api/Apizr.AkavacheOptionsBuilderExtensions.html",
    "title": "Class AkavacheOptionsBuilderExtensions | Apizr",
    "keywords": "Class AkavacheOptionsBuilderExtensions Akavache options builder extensions Inheritance System.Object AkavacheOptionsBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.Akavache.dll Syntax public static class AkavacheOptionsBuilderExtensions Methods WithAkavacheCacheHandler<TBuilder>(TBuilder) Set Akavache as CacheHandler with LocalMachine blob cache and ApizrAkavacheCacheHandler name Declaration public static TBuilder WithAkavacheCacheHandler<TBuilder>(this TBuilder builder) where TBuilder : IApizrGlobalCommonOptionsBuilderBase Parameters Type Name Description TBuilder builder Returns Type Description TBuilder Type Parameters Name Description TBuilder WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) Set Akavache as CacheHandler with your blob cache and ApizrAkavacheCacheHandler name Declaration public static TBuilder WithAkavacheCacheHandler<TBuilder>(this TBuilder builder, Func<IBlobCache> blobCacheFactory) where TBuilder : IApizrGlobalCommonOptionsBuilderBase Parameters Type Name Description TBuilder builder System.Func < Akavache.IBlobCache > blobCacheFactory The blob cache factory of your choice Returns Type Description TBuilder Type Parameters Name Description TBuilder WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) Set Akavache as CacheHandler with your blob cache and your provided name Declaration public static TBuilder WithAkavacheCacheHandler<TBuilder>(this TBuilder builder, Func<IBlobCache> blobCacheFactory, string applicationName) where TBuilder : IApizrGlobalCommonOptionsBuilderBase Parameters Type Name Description TBuilder builder System.Func < Akavache.IBlobCache > blobCacheFactory The blob cache factory of your choice System.String applicationName The application name used by Akavache Returns Type Description TBuilder Type Parameters Name Description TBuilder WithAkavacheCacheHandler<TBuilder>(TBuilder, String) Set Akavache as CacheHandler with LocalMachine blob cache and your provided name Declaration public static TBuilder WithAkavacheCacheHandler<TBuilder>(this TBuilder builder, string applicationName) where TBuilder : IApizrGlobalCommonOptionsBuilderBase Parameters Type Name Description TBuilder builder System.String applicationName The application name used by Akavache Returns Type Description TBuilder Type Parameters Name Description TBuilder"
  },
  "api/Apizr.ApizrBuilder.html": {
    "href": "api/Apizr.ApizrBuilder.html",
    "title": "Class ApizrBuilder | Apizr",
    "keywords": "Class ApizrBuilder The builder Inheritance System.Object ApizrBuilder Implements IApizrBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.dll Syntax public class ApizrBuilder : IApizrBuilder Properties Current Declaration public static IApizrBuilder Current { get; } Property Value Type Description IApizrBuilder Methods CreateCrudManagerFor<T>(Action<IApizrManagerOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type System.Int32 and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration public IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> CreateCrudManagerFor<T>(Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrManager < ICrudApi <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> Type Parameters Name Description T The object type to manage with crud api calls (class) CreateCrudManagerFor<T, TKey>(Action<IApizrManagerOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration public IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> CreateCrudManagerFor<T, TKey>(Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrManager < ICrudApi <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) CreateCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrManagerOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters of type IDictionary{string,object} Declaration public IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> CreateCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >>> Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrManagerOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration public IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>> Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager>, Action<IApizrManagerOptionsBuilder>) Create a TApizrManager instance for a managed crud api for T object (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration public TApizrManager CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<string>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager> apizrManagerFactory, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where T : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Parameters Type Name Description System.Func < ILazyFactory < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler , ICacheHandler , IMappingHandler , Polly.Registry.IReadOnlyPolicyRegistry < System.String >, IApizrManagerOptions < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager> apizrManagerFactory The custom manager implementation instance factory System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description TApizrManager Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters TApizrManager A custom IApizrManager<TWebApi> implementation CreateManagerFor<TWebApi>(Action<IApizrManagerOptionsBuilder>) Create a ApizrManager<TWebApi> instance Declaration public IApizrManager<TWebApi> CreateManagerFor<TWebApi>(Action<IApizrManagerOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrManager <TWebApi> Type Parameters Name Description TWebApi The web api interface to manage CreateManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrManagerOptions<TWebApi>, TApizrManager>, Action<IApizrManagerOptionsBuilder>) Create a TApizrManager instance for a managed TWebApi Declaration public TApizrManager CreateManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<string>, IApizrManagerOptions<TWebApi>, TApizrManager> apizrManagerFactory, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where TApizrManager : IApizrManager<TWebApi> Parameters Type Name Description System.Func < ILazyFactory <TWebApi>, IConnectivityHandler , ICacheHandler , IMappingHandler , Polly.Registry.IReadOnlyPolicyRegistry < System.String >, IApizrManagerOptions <TWebApi>, TApizrManager> apizrManagerFactory The custom manager implementation instance factory System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description TApizrManager Type Parameters Name Description TWebApi The web api interface to manage TApizrManager A custom IApizrManager<TWebApi> implementation CreateRegistry(Action<IApizrRegistryBuilder>, Action<IApizrCommonOptionsBuilder>) Create a registry with all managers built with both common and proper options Declaration public IApizrRegistry CreateRegistry(Action<IApizrRegistryBuilder> registryBuilder, Action<IApizrCommonOptionsBuilder> commonOptionsBuilder = null) Parameters Type Name Description System.Action < IApizrRegistryBuilder > registryBuilder The registry builder with access to proper options System.Action < IApizrCommonOptionsBuilder > commonOptionsBuilder The common options shared by all managers Returns Type Description IApizrRegistry Implements IApizrBuilder Extension Methods FileTransferOptionsBuilderExtensions.CreateUploadManager(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateUploadManagerFor<TUploadApi>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateUploadManagerWith<TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateDownloadManager(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateDownloadManagerFor<TDownloadApi>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateDownloadManagerWith<TDownloadParams>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateTransferManager(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateTransferManagerFor<TTransferApi>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateTransferManagerFor<TTransferApi, TDownloadParams>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>)"
  },
  "api/Apizr.ApizrException.html": {
    "href": "api/Apizr.ApizrException.html",
    "title": "Class ApizrException | Apizr",
    "keywords": "Class ApizrException An exception with optional cached object Inheritance System.Object System.Exception ApizrException ApizrException<TResult> Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Apizr Assembly : Apizr.dll Syntax public class ApizrException : Exception, ISerializable Constructors ApizrException(Exception) Declaration public ApizrException(Exception innerException) Parameters Type Name Description System.Exception innerException ApizrException(Exception, Object) Declaration public ApizrException(Exception innerException, object cachedResult) Parameters Type Name Description System.Exception innerException System.Object cachedResult Properties CachedResult Declaration public object CachedResult { get; } Property Value Type Description System.Object Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Apizr.ApizrException-1.html": {
    "href": "api/Apizr.ApizrException-1.html",
    "title": "Class ApizrException<TResult> | Apizr",
    "keywords": "Class ApizrException<TResult> An exception with optional cached TResult Inheritance System.Object System.Exception ApizrException ApizrException<TResult> Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Apizr Assembly : Apizr.dll Syntax public class ApizrException<TResult> : ApizrException, ISerializable Type Parameters Name Description TResult Constructors ApizrException(Exception) Declaration public ApizrException(Exception innerException) Parameters Type Name Description System.Exception innerException ApizrException(Exception, TResult) Declaration public ApizrException(Exception innerException, TResult cachedResult) Parameters Type Name Description System.Exception innerException TResult cachedResult Properties CachedResult Declaration public TResult CachedResult { get; } Property Value Type Description TResult Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Apizr.ApizrManager.html": {
    "href": "api/Apizr.ApizrManager.html",
    "title": "Class ApizrManager | Apizr",
    "keywords": "Class ApizrManager Inheritance System.Object ApizrManager ApizrManager<TWebApi> Implements IApizrManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.dll Syntax public abstract class ApizrManager : IApizrManager Implements IApizrManager"
  },
  "api/Apizr.ApizrManager-1.html": {
    "href": "api/Apizr.ApizrManager-1.html",
    "title": "Class ApizrManager<TWebApi> | Apizr",
    "keywords": "Class ApizrManager<TWebApi> The manager Inheritance System.Object ApizrManager ApizrManager<TWebApi> Implements IApizrManager <TWebApi> IApizrManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.dll Syntax public class ApizrManager<TWebApi> : ApizrManager, IApizrManager<TWebApi>, IApizrManager Type Parameters Name Description TWebApi Constructors ApizrManager(ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrManagerOptions<TWebApi>) Apizr manager constructor Declaration public ApizrManager(ILazyFactory<TWebApi> lazyWebApi, IConnectivityHandler connectivityHandler, ICacheHandler cacheHandler, IMappingHandler mappingHandler, IReadOnlyPolicyRegistry<string> policyRegistry, IApizrManagerOptions<TWebApi> apizrOptions) Parameters Type Name Description ILazyFactory <TWebApi> lazyWebApi The managed web api IConnectivityHandler connectivityHandler The connectivity handler ICacheHandler cacheHandler The cache handler IMappingHandler mappingHandler The mapping handler Polly.Registry.IReadOnlyPolicyRegistry < System.String > policyRegistry The policy registry IApizrManagerOptions <TWebApi> apizrOptions The web api dedicated options Properties Api Original Refit Api without any Apizr management. You should use ExecuteAsync instead to get all the Apizr goodness :) Declaration public TWebApi Api { get; } Property Value Type Description TWebApi Options Basic Apizr options Declaration public IApizrManagerOptionsBase Options { get; } Property Value Type Description IApizrManagerOptionsBase Methods ClearCacheAsync(CancellationToken) Clear all cache Declaration public async Task<bool> ClearCacheAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < System.Boolean > ClearCacheAsync<TResult>(Expression<Func<TWebApi, Task<TResult>>>) Clear the cache of a specific request Declaration public Task<bool> ClearCacheAsync<TResult>(Expression<Func<TWebApi, Task<TResult>>> executeApiMethod) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TResult>>> executeApiMethod The specific TWebApi 's task to clear cache for Returns Type Description System.Threading.Tasks.Task < System.Boolean > Type Parameters Name Description TResult The TWebApi 's task result ClearCacheAsync<TResult>(Expression<Func<CancellationToken, TWebApi, Task<TResult>>>, CancellationToken) Clear the cache of a specific request Declaration public async Task<bool> ClearCacheAsync<TResult>(Expression<Func<CancellationToken, TWebApi, Task<TResult>>> executeApiMethod, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TResult>>> executeApiMethod The specific TWebApi 's task to clear cache for System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < System.Boolean > Type Parameters Name Description TResult The TWebApi 's task result ExecuteAsync(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task Declaration public virtual Task ExecuteAsync(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi 's task to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task ExecuteAsync(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task Declaration public virtual async Task ExecuteAsync(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi 's task to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task ExecuteAsync<TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task Declaration public virtual Task<TApiData> ExecuteAsync<TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi 's task to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TApiData The TWebApi 's task result ExecuteAsync<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task Declaration public virtual async Task<TApiData> ExecuteAsync<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi 's task to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TApiData The TWebApi 's task result ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task returning a mapped result Declaration public virtual Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task Declaration public virtual Task ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task returning a mapped result Declaration public virtual Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task returning a mapped result Declaration public virtual async Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task Declaration public virtual async Task ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task returning a mapped result Declaration public virtual async Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task returning a mapped result Declaration public virtual Task<TModelResultData> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task returning a mapped result Declaration public virtual async Task<TModelResultData> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type Implements IApizrManager<TWebApi> IApizrManager Extension Methods ApizrManagerExtensions.ExecuteAsync<TWebApi>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task>>, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean) ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>)"
  },
  "api/Apizr.Authenticating.AuthenticationHandler.html": {
    "href": "api/Apizr.Authenticating.AuthenticationHandler.html",
    "title": "Class AuthenticationHandler | Apizr",
    "keywords": "Class AuthenticationHandler Inheritance System.Object System.Net.Http.HttpMessageHandler System.Net.Http.DelegatingHandler AuthenticationHandlerBase AuthenticationHandler Implements System.IDisposable IAuthenticationHandler Inherited Members AuthenticationHandlerBase.SendAsync(HttpRequestMessage, CancellationToken) AuthenticationHandlerBase.CloneHttpRequestMessageAsync(HttpRequestMessage) System.Net.Http.DelegatingHandler.Dispose(System.Boolean) System.Net.Http.DelegatingHandler.InnerHandler System.Net.Http.HttpMessageHandler.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Authenticating Assembly : Apizr.dll Syntax public class AuthenticationHandler : AuthenticationHandlerBase, IDisposable, IAuthenticationHandler Constructors AuthenticationHandler(ILogger, IApizrManagerOptionsBase, Func<HttpRequestMessage, Task<String>>) Declaration public AuthenticationHandler(ILogger logger, IApizrManagerOptionsBase apizrOptions, Func<HttpRequestMessage, Task<string>> refreshToken) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger IApizrManagerOptionsBase apizrOptions System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshToken Methods GetToken() Declaration public override string GetToken() Returns Type Description System.String Overrides AuthenticationHandlerBase.GetToken() RefreshTokenAsync(HttpRequestMessage) Declaration public override Task<string> RefreshTokenAsync(HttpRequestMessage request) Parameters Type Name Description System.Net.Http.HttpRequestMessage request Returns Type Description System.Threading.Tasks.Task < System.String > Overrides AuthenticationHandlerBase.RefreshTokenAsync(HttpRequestMessage) SetToken(String) Declaration public override void SetToken(string token) Parameters Type Name Description System.String token Overrides AuthenticationHandlerBase.SetToken(String) Implements System.IDisposable IAuthenticationHandler"
  },
  "api/Apizr.Authenticating.AuthenticationHandler-1.html": {
    "href": "api/Apizr.Authenticating.AuthenticationHandler-1.html",
    "title": "Class AuthenticationHandler<TSettingsService> | Apizr",
    "keywords": "Class AuthenticationHandler<TSettingsService> Inheritance System.Object System.Net.Http.HttpMessageHandler System.Net.Http.DelegatingHandler AuthenticationHandlerBase AuthenticationHandler<TSettingsService> Implements System.IDisposable IAuthenticationHandler Inherited Members AuthenticationHandlerBase.SendAsync(HttpRequestMessage, CancellationToken) AuthenticationHandlerBase.CloneHttpRequestMessageAsync(HttpRequestMessage) System.Net.Http.DelegatingHandler.Dispose(System.Boolean) System.Net.Http.DelegatingHandler.InnerHandler System.Net.Http.HttpMessageHandler.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Authenticating Assembly : Apizr.dll Syntax public class AuthenticationHandler<TSettingsService> : AuthenticationHandlerBase, IDisposable, IAuthenticationHandler Type Parameters Name Description TSettingsService Constructors AuthenticationHandler(ILogger, IApizrManagerOptionsBase, Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Declaration public AuthenticationHandler(ILogger logger, IApizrManagerOptionsBase apizrOptions, Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> settingsTokenProperty, Func<HttpRequestMessage, Task<string>> refreshToken) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger IApizrManagerOptionsBase apizrOptions System.Func <TSettingsService> settingsServiceFactory System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> settingsTokenProperty System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshToken Methods GetToken() Declaration public override string GetToken() Returns Type Description System.String Overrides AuthenticationHandlerBase.GetToken() RefreshTokenAsync(HttpRequestMessage) Declaration public override Task<string> RefreshTokenAsync(HttpRequestMessage request) Parameters Type Name Description System.Net.Http.HttpRequestMessage request Returns Type Description System.Threading.Tasks.Task < System.String > Overrides AuthenticationHandlerBase.RefreshTokenAsync(HttpRequestMessage) SetToken(String) Declaration public override void SetToken(string token) Parameters Type Name Description System.String token Overrides AuthenticationHandlerBase.SetToken(String) Implements System.IDisposable IAuthenticationHandler"
  },
  "api/Apizr.Authenticating.AuthenticationHandler-2.html": {
    "href": "api/Apizr.Authenticating.AuthenticationHandler-2.html",
    "title": "Class AuthenticationHandler<TSettingsService, TTokenService> | Apizr",
    "keywords": "Class AuthenticationHandler<TSettingsService, TTokenService> Inheritance System.Object System.Net.Http.HttpMessageHandler System.Net.Http.DelegatingHandler AuthenticationHandlerBase AuthenticationHandler<TSettingsService, TTokenService> Implements System.IDisposable IAuthenticationHandler Inherited Members AuthenticationHandlerBase.SendAsync(HttpRequestMessage, CancellationToken) AuthenticationHandlerBase.CloneHttpRequestMessageAsync(HttpRequestMessage) System.Net.Http.DelegatingHandler.Dispose(System.Boolean) System.Net.Http.DelegatingHandler.InnerHandler System.Net.Http.HttpMessageHandler.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Authenticating Assembly : Apizr.dll Syntax public class AuthenticationHandler<TSettingsService, TTokenService> : AuthenticationHandlerBase, IDisposable, IAuthenticationHandler Type Parameters Name Description TSettingsService TTokenService Constructors AuthenticationHandler(ILogger, IApizrManagerOptionsBase, Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Declaration public AuthenticationHandler(ILogger logger, IApizrManagerOptionsBase apizrOptions, Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> settingsTokenProperty, Func<TTokenService> tokenServiceFactory, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger IApizrManagerOptionsBase apizrOptions System.Func <TSettingsService> settingsServiceFactory System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> settingsTokenProperty System.Func <TTokenService> tokenServiceFactory System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod Methods GetToken() Declaration public override string GetToken() Returns Type Description System.String Overrides AuthenticationHandlerBase.GetToken() RefreshTokenAsync(HttpRequestMessage) Declaration public override Task<string> RefreshTokenAsync(HttpRequestMessage request) Parameters Type Name Description System.Net.Http.HttpRequestMessage request Returns Type Description System.Threading.Tasks.Task < System.String > Overrides AuthenticationHandlerBase.RefreshTokenAsync(HttpRequestMessage) SetToken(String) Declaration public override void SetToken(string token) Parameters Type Name Description System.String token Overrides AuthenticationHandlerBase.SetToken(String) Implements System.IDisposable IAuthenticationHandler"
  },
  "api/Apizr.Authenticating.AuthenticationHandlerBase.html": {
    "href": "api/Apizr.Authenticating.AuthenticationHandlerBase.html",
    "title": "Class AuthenticationHandlerBase | Apizr",
    "keywords": "Class AuthenticationHandlerBase The authentication handler base implementation Inheritance System.Object System.Net.Http.HttpMessageHandler System.Net.Http.DelegatingHandler AuthenticationHandlerBase AuthenticationHandler AuthenticationHandler<TSettingsService> AuthenticationHandler<TSettingsService, TTokenService> Implements System.IDisposable IAuthenticationHandler Inherited Members System.Net.Http.DelegatingHandler.Dispose(System.Boolean) System.Net.Http.DelegatingHandler.InnerHandler System.Net.Http.HttpMessageHandler.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Authenticating Assembly : Apizr.dll Syntax public abstract class AuthenticationHandlerBase : DelegatingHandler, IDisposable, IAuthenticationHandler Constructors AuthenticationHandlerBase(ILogger, IApizrManagerOptionsBase) The authentication handler constructor Declaration protected AuthenticationHandlerBase(ILogger logger, IApizrManagerOptionsBase apizrOptions) Parameters Type Name Description Microsoft.Extensions.Logging.ILogger logger The logger IApizrManagerOptionsBase apizrOptions The Apizr options Methods CloneHttpRequestMessageAsync(HttpRequestMessage) Clone a HttpRequestMessage Credit: http://stackoverflow.com/questions/25044166/how-to-clone-a-httprequestmessage-when-the-original-request-has-content Declaration protected async Task<HttpRequestMessage> CloneHttpRequestMessageAsync(HttpRequestMessage req) Parameters Type Name Description System.Net.Http.HttpRequestMessage req The request Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpRequestMessage > A copy of the request GetToken() The method called to get token from settings Declaration public abstract string GetToken() Returns Type Description System.String RefreshTokenAsync(HttpRequestMessage) The method called to refresh token when rejected or empty Declaration public abstract Task<string> RefreshTokenAsync(HttpRequestMessage request) Parameters Type Name Description System.Net.Http.HttpRequestMessage request The request to authenticate Returns Type Description System.Threading.Tasks.Task < System.String > SendAsync(HttpRequestMessage, CancellationToken) Declaration protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters Type Name Description System.Net.Http.HttpRequestMessage request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > Overrides System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken) SetToken(String) The method called to save token into settings Declaration public abstract void SetToken(string token) Parameters Type Name Description System.String token The token to save Implements System.IDisposable IAuthenticationHandler"
  },
  "api/Apizr.Authenticating.html": {
    "href": "api/Apizr.Authenticating.html",
    "title": "Namespace Apizr.Authenticating | Apizr",
    "keywords": "Namespace Apizr.Authenticating Classes AuthenticationHandler AuthenticationHandler<TSettingsService> AuthenticationHandler<TSettingsService, TTokenService> AuthenticationHandlerBase The authentication handler base implementation Interfaces IAuthenticationHandler The authentication handler definition"
  },
  "api/Apizr.Authenticating.IAuthenticationHandler.html": {
    "href": "api/Apizr.Authenticating.IAuthenticationHandler.html",
    "title": "Interface IAuthenticationHandler | Apizr",
    "keywords": "Interface IAuthenticationHandler The authentication handler definition Namespace : Apizr.Authenticating Assembly : Apizr.dll Syntax public interface IAuthenticationHandler Methods GetToken() The method called to get token from settings Declaration string GetToken() Returns Type Description System.String RefreshTokenAsync(HttpRequestMessage) The method called to refresh token when rejected or empty Declaration Task<string> RefreshTokenAsync(HttpRequestMessage request) Parameters Type Name Description System.Net.Http.HttpRequestMessage request The request to authenticate Returns Type Description System.Threading.Tasks.Task < System.String > SetToken(String) The method called to save token into settings Declaration void SetToken(string token) Parameters Type Name Description System.String token The token to save"
  },
  "api/Apizr.AutoMapperMappingHandler.html": {
    "href": "api/Apizr.AutoMapperMappingHandler.html",
    "title": "Class AutoMapperMappingHandler | Apizr",
    "keywords": "Class AutoMapperMappingHandler AutoMapper mapping handler implementation Inheritance System.Object AutoMapperMappingHandler Implements IMappingHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.AutoMapper.dll Syntax public class AutoMapperMappingHandler : IMappingHandler Constructors AutoMapperMappingHandler(IMapper) Declaration public AutoMapperMappingHandler(IMapper mapper) Parameters Type Name Description AutoMapper.IMapper mapper Methods Map(Object, Object, Type, Type) Execute a mapping from the source object to existing destination object with explicit System.Type objects Declaration public object Map(object source, object destination, Type sourceType, Type destinationType) Parameters Type Name Description System.Object source Source object to map from System.Object destination Destination object to map into System.Type sourceType Source type to use System.Type destinationType Destination type to use Returns Type Description System.Object Mapped destination object, same instance as the destination object Map(Object, Type, Type) Execute a mapping from the source object to a new destination object with explicit System.Type objects Declaration public object Map(object source, Type sourceType, Type destinationType) Parameters Type Name Description System.Object source Source object to map from System.Type sourceType Source type to use System.Type destinationType Destination type to create Returns Type Description System.Object Mapped destination object Map<TDestination>(Object) Execute a mapping from the source object to a new destination object. The source type is inferred from the source object. Declaration public TDestination Map<TDestination>(object source) Parameters Type Name Description System.Object source Source object to map from Returns Type Description TDestination Mapped destination object Type Parameters Name Description TDestination Destination type to create Map<TSource, TDestination>(TSource) Execute a mapping from the source object to a new destination object. Declaration public TDestination Map<TSource, TDestination>(TSource source) Parameters Type Name Description TSource source Source object to map from Returns Type Description TDestination Mapped destination object Type Parameters Name Description TSource Source type to use, regardless of the runtime type TDestination Destination type to create Map<TSource, TDestination>(TSource, TDestination) Execute a mapping from the source object to the existing destination object. Declaration public TDestination Map<TSource, TDestination>(TSource source, TDestination destination) Parameters Type Name Description TSource source Source object to map from TDestination destination Destination object to map into Returns Type Description TDestination The mapped destination object, same instance as the destination object Type Parameters Name Description TSource Source type to use TDestination Destination type Implements IMappingHandler"
  },
  "api/Apizr.AutoMapperOptionsBuilderExtensions.html": {
    "href": "api/Apizr.AutoMapperOptionsBuilderExtensions.html",
    "title": "Class AutoMapperOptionsBuilderExtensions | Apizr",
    "keywords": "Class AutoMapperOptionsBuilderExtensions AutoMapper options builder extensions Inheritance System.Object AutoMapperOptionsBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.AutoMapper.dll Syntax public static class AutoMapperOptionsBuilderExtensions Methods WithAutoMapperMappingHandler<TBuilder>(TBuilder) Set AutoMapper as MappingHandler Declaration public static TBuilder WithAutoMapperMappingHandler<TBuilder>(this TBuilder builder) where TBuilder : IApizrExtendedCommonOptionsBuilderBase Parameters Type Name Description TBuilder builder Returns Type Description TBuilder Type Parameters Name Description TBuilder WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) Set AutoMapper as MappingHandler Declaration public static TBuilder WithAutoMapperMappingHandler<TBuilder>(this TBuilder builder, IConfigurationProvider configuration) where TBuilder : IApizrCommonOptionsBuilderBase Parameters Type Name Description TBuilder builder AutoMapper.IConfigurationProvider configuration Returns Type Description TBuilder Type Parameters Name Description TBuilder WithAutoMapperMappingHandler<TBuilder>(TBuilder, IMapper) Set AutoMapper as MappingHandler Declaration public static TBuilder WithAutoMapperMappingHandler<TBuilder>(this TBuilder builder, IMapper mapper) where TBuilder : IApizrCommonOptionsBuilderBase Parameters Type Name Description TBuilder builder AutoMapper.IMapper mapper Returns Type Description TBuilder Type Parameters Name Description TBuilder"
  },
  "api/Apizr.Caching.Attributes.CacheAttribute.html": {
    "href": "api/Apizr.Caching.Attributes.CacheAttribute.html",
    "title": "Class CacheAttribute | Apizr",
    "keywords": "Class CacheAttribute Tells Apizr to cache all methods returning result when decorating an interface or a specific one when decorating a method You have to provide an ICacheHandler mapping implementation to Apizr to use this feature Inheritance System.Object System.Attribute CacheAttributeBase CacheAttribute Inherited Members CacheAttributeBase.LifeSpan CacheAttributeBase.Mode CacheAttributeBase.ShouldInvalidateOnError System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Caching.Attributes Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Interface)] public class CacheAttribute : CacheAttributeBase Constructors CacheAttribute() Declaration public CacheAttribute() CacheAttribute(CacheMode) Cache with no specific lifetime, no invalidation on error but a specific cache mode Declaration public CacheAttribute(CacheMode mode) Parameters Type Name Description CacheMode mode GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one CacheAttribute(CacheMode, Boolean) Cache with a specific cache and invalidation on error, but no specific lifetime Declaration public CacheAttribute(CacheMode mode, bool shouldInvalidateOnError) Parameters Type Name Description CacheMode mode GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one System.Boolean shouldInvalidateOnError Should invalidate on error CacheAttribute(CacheMode, String) Cache with a specific cache and mode specific lifetime, but no invalidation on error Declaration public CacheAttribute(CacheMode mode, string lifeSpanRepresentation) Parameters Type Name Description CacheMode mode GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one System.String lifeSpanRepresentation TimeSpan representation to parse CacheAttribute(CacheMode, String, Boolean) Cache with a specific cache mode, a specific lifetime and invalidation on error Declaration public CacheAttribute(CacheMode mode, string lifeSpanRepresentation, bool shouldInvalidateOnError) Parameters Type Name Description CacheMode mode GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one System.String lifeSpanRepresentation This specific caching lifetime System.Boolean shouldInvalidateOnError Should invalidate on error CacheAttribute(Boolean) Cache with no specific lifetime, default GetAndFetch mode but with or without invalidation on error Declaration public CacheAttribute(bool shouldInvalidateOnError) Parameters Type Name Description System.Boolean shouldInvalidateOnError Should invalidate on error CacheAttribute(String) Cache with default GetAndFetch mode, no invalidation on error but with a specific lifetime Declaration public CacheAttribute(string lifeSpanRepresentation) Parameters Type Name Description System.String lifeSpanRepresentation TimeSpan representation to parse CacheAttribute(TimeSpan, Boolean) Cache with a specific lifetime and invalidation on error, but default GetAndFetch mode Declaration public CacheAttribute(TimeSpan lifeSpan, bool shouldInvalidateOnError) Parameters Type Name Description System.TimeSpan lifeSpan This specific caching lifetime System.Boolean shouldInvalidateOnError Should invalidate on error"
  },
  "api/Apizr.Caching.Attributes.CacheAttributeBase.html": {
    "href": "api/Apizr.Caching.Attributes.CacheAttributeBase.html",
    "title": "Class CacheAttributeBase | Apizr",
    "keywords": "Class CacheAttributeBase Tells Apizr to cache all methods returning result when decorating an interface or a specific one when decorating a method You have to provide an ICacheHandler mapping implementation to Apizr to use this feature Inheritance System.Object System.Attribute CacheAttributeBase CacheAttribute CacheReadAllAttribute CacheReadAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Caching.Attributes Assembly : Apizr.dll Syntax public abstract class CacheAttributeBase : Attribute Constructors CacheAttributeBase() Cache with no specific lifetime, default GetAndFetch mode and no invalidation on error Declaration protected CacheAttributeBase() CacheAttributeBase(CacheMode) Cache with no specific lifetime, no invalidation on error but a specific cache mode Declaration protected CacheAttributeBase(CacheMode mode) Parameters Type Name Description CacheMode mode GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one CacheAttributeBase(CacheMode, Boolean) Cache with a specific cache and invalidation on error, but no specific lifetime Declaration protected CacheAttributeBase(CacheMode mode, bool shouldInvalidateOnError) Parameters Type Name Description CacheMode mode GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one System.Boolean shouldInvalidateOnError Should invalidate on error CacheAttributeBase(CacheMode, String) Cache with a specific cache and mode specific lifetime, but no invalidation on error Declaration protected CacheAttributeBase(CacheMode mode, string lifeSpanRepresentation) Parameters Type Name Description CacheMode mode GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one System.String lifeSpanRepresentation TimeSpan representation to parse CacheAttributeBase(CacheMode, String, Boolean) Cache with a specific cache mode, a specific lifetime and invalidation on error Declaration protected CacheAttributeBase(CacheMode mode, string lifeSpanRepresentation, bool shouldInvalidateOnError) Parameters Type Name Description CacheMode mode GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one System.String lifeSpanRepresentation This specific caching lifetime System.Boolean shouldInvalidateOnError Should invalidate on error CacheAttributeBase(Boolean) Cache with no specific lifetime, default GetAndFetch mode but with or without invalidation on error Declaration protected CacheAttributeBase(bool shouldInvalidateOnError) Parameters Type Name Description System.Boolean shouldInvalidateOnError Should invalidate on error CacheAttributeBase(String) Cache with default GetAndFetch mode, no invalidation on error but with a specific lifetime Declaration protected CacheAttributeBase(string lifeSpanRepresentation) Parameters Type Name Description System.String lifeSpanRepresentation TimeSpan representation to parse CacheAttributeBase(TimeSpan, Boolean) Cache with a specific lifetime and invalidation on error, but default GetAndFetch mode Declaration protected CacheAttributeBase(TimeSpan lifeSpan, bool shouldInvalidateOnError) Parameters Type Name Description System.TimeSpan lifeSpan This specific caching lifetime System.Boolean shouldInvalidateOnError Should invalidate on error Properties LifeSpan This specific caching life time Declaration public TimeSpan? LifeSpan { get; } Property Value Type Description System.Nullable < System.TimeSpan > Mode Tells Apizr to return a value if we get a cached result for it (GetOrFetch) or to try fetching fresh data every time (GetAndFetch) Declaration public CacheMode Mode { get; } Property Value Type Description CacheMode ShouldInvalidateOnError Tells Apizr to remove the cache on error Declaration public bool ShouldInvalidateOnError { get; } Property Value Type Description System.Boolean"
  },
  "api/Apizr.Caching.Attributes.CacheKeyAttribute.html": {
    "href": "api/Apizr.Caching.Attributes.CacheKeyAttribute.html",
    "title": "Class CacheKeyAttribute | Apizr",
    "keywords": "Class CacheKeyAttribute Tells Apizr the key to cache value at Inheritance System.Object System.Attribute CacheKeyAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Caching.Attributes Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Parameter)] public class CacheKeyAttribute : Attribute Constructors CacheKeyAttribute() The decorated parameter will be used as cache key (should be primitive otherwise ToString() method will be used, unless providing a property name) Declaration public CacheKeyAttribute() CacheKeyAttribute(String) If you use non primitive type (like your ModelClass object) as Cache Primary key you should provide property name of primitive primary Id, otherwise ToString() method will be used. Declaration public CacheKeyAttribute(string propertyName) Parameters Type Name Description System.String propertyName Property name. Properties PropertyName Property name of primitive primary Id Declaration public string PropertyName { get; } Property Value Type Description System.String"
  },
  "api/Apizr.Caching.Attributes.CacheReadAllAttribute.html": {
    "href": "api/Apizr.Caching.Attributes.CacheReadAllAttribute.html",
    "title": "Class CacheReadAllAttribute | Apizr",
    "keywords": "Class CacheReadAllAttribute Tells Apizr to cache ReadAll method You have to provide an ICacheHandler mapping implementation to Apizr to use this feature Inheritance System.Object System.Attribute CacheAttributeBase CacheReadAllAttribute Inherited Members CacheAttributeBase.LifeSpan CacheAttributeBase.Mode CacheAttributeBase.ShouldInvalidateOnError System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Caching.Attributes Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class CacheReadAllAttribute : CacheAttributeBase Constructors CacheReadAllAttribute() Declaration public CacheReadAllAttribute() CacheReadAllAttribute(CacheMode) Cache with no specific lifetime, no invalidation on error but a specific cache mode Declaration public CacheReadAllAttribute(CacheMode mode) Parameters Type Name Description CacheMode mode GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one CacheReadAllAttribute(CacheMode, Boolean) Cache with a specific cache and invalidation on error, but no specific lifetime Declaration public CacheReadAllAttribute(CacheMode mode, bool shouldInvalidateOnError) Parameters Type Name Description CacheMode mode GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one System.Boolean shouldInvalidateOnError Should invalidate on error CacheReadAllAttribute(CacheMode, String) Cache with a specific cache and mode specific lifetime, but no invalidation on error Declaration public CacheReadAllAttribute(CacheMode mode, string lifeSpanRepresentation) Parameters Type Name Description CacheMode mode GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one System.String lifeSpanRepresentation TimeSpan representation to parse CacheReadAllAttribute(CacheMode, String, Boolean) Cache with a specific cache mode, a specific lifetime and invalidation on error Declaration public CacheReadAllAttribute(CacheMode mode, string lifeSpanRepresentation, bool shouldInvalidateOnError) Parameters Type Name Description CacheMode mode GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one System.String lifeSpanRepresentation This specific caching lifetime System.Boolean shouldInvalidateOnError Should invalidate on error CacheReadAllAttribute(Boolean) Cache with no specific lifetime, default GetAndFetch mode but with or without invalidation on error Declaration public CacheReadAllAttribute(bool shouldInvalidateOnError) Parameters Type Name Description System.Boolean shouldInvalidateOnError Should invalidate on error CacheReadAllAttribute(String) Cache with default GetAndFetch mode, no invalidation on error but with a specific lifetime Declaration public CacheReadAllAttribute(string lifeSpanRepresentation) Parameters Type Name Description System.String lifeSpanRepresentation TimeSpan representation to parse CacheReadAllAttribute(TimeSpan, Boolean) Cache with a specific lifetime and invalidation on error, but default GetAndFetch mode Declaration public CacheReadAllAttribute(TimeSpan lifeSpan, bool shouldInvalidateOnError) Parameters Type Name Description System.TimeSpan lifeSpan This specific caching lifetime System.Boolean shouldInvalidateOnError Should invalidate on error"
  },
  "api/Apizr.Caching.Attributes.CacheReadAttribute.html": {
    "href": "api/Apizr.Caching.Attributes.CacheReadAttribute.html",
    "title": "Class CacheReadAttribute | Apizr",
    "keywords": "Class CacheReadAttribute Tells Apizr to cache Read method You have to provide an ICacheHandler mapping implementation to Apizr to use this feature Inheritance System.Object System.Attribute CacheAttributeBase CacheReadAttribute Inherited Members CacheAttributeBase.LifeSpan CacheAttributeBase.Mode CacheAttributeBase.ShouldInvalidateOnError System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Caching.Attributes Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class CacheReadAttribute : CacheAttributeBase Constructors CacheReadAttribute() Declaration public CacheReadAttribute() CacheReadAttribute(CacheMode) Cache with no specific lifetime, no invalidation on error but a specific cache mode Declaration public CacheReadAttribute(CacheMode mode) Parameters Type Name Description CacheMode mode GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one CacheReadAttribute(CacheMode, Boolean) Cache with a specific cache and invalidation on error, but no specific lifetime Declaration public CacheReadAttribute(CacheMode mode, bool shouldInvalidateOnError) Parameters Type Name Description CacheMode mode GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one System.Boolean shouldInvalidateOnError Should invalidate on error CacheReadAttribute(CacheMode, String) Cache with a specific cache and mode specific lifetime, but no invalidation on error Declaration public CacheReadAttribute(CacheMode mode, string lifeSpanRepresentation) Parameters Type Name Description CacheMode mode GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one System.String lifeSpanRepresentation TimeSpan representation to parse CacheReadAttribute(CacheMode, String, Boolean) Cache with a specific cache mode, a specific lifetime and invalidation on error Declaration public CacheReadAttribute(CacheMode mode, string lifeSpanRepresentation, bool shouldInvalidateOnError) Parameters Type Name Description CacheMode mode GetAndFetch returns fresh data when request succeed otherwise cached one, where GetOrFetch returns cached data if we get some otherwise fresh one System.String lifeSpanRepresentation This specific caching lifetime System.Boolean shouldInvalidateOnError Should invalidate on error CacheReadAttribute(Boolean) Cache with no specific lifetime, default GetAndFetch mode but with or without invalidation on error Declaration public CacheReadAttribute(bool shouldInvalidateOnError) Parameters Type Name Description System.Boolean shouldInvalidateOnError Should invalidate on error CacheReadAttribute(String) Cache with default GetAndFetch mode, no invalidation on error but with a specific lifetime Declaration public CacheReadAttribute(string lifeSpanRepresentation) Parameters Type Name Description System.String lifeSpanRepresentation TimeSpan representation to parse CacheReadAttribute(TimeSpan, Boolean) Cache with a specific lifetime and invalidation on error, but default GetAndFetch mode Declaration public CacheReadAttribute(TimeSpan lifeSpan, bool shouldInvalidateOnError) Parameters Type Name Description System.TimeSpan lifeSpan This specific caching lifetime System.Boolean shouldInvalidateOnError Should invalidate on error"
  },
  "api/Apizr.Caching.Attributes.html": {
    "href": "api/Apizr.Caching.Attributes.html",
    "title": "Namespace Apizr.Caching.Attributes | Apizr",
    "keywords": "Namespace Apizr.Caching.Attributes Classes CacheAttribute Tells Apizr to cache all methods returning result when decorating an interface or a specific one when decorating a method You have to provide an ICacheHandler mapping implementation to Apizr to use this feature CacheAttributeBase Tells Apizr to cache all methods returning result when decorating an interface or a specific one when decorating a method You have to provide an ICacheHandler mapping implementation to Apizr to use this feature CacheKeyAttribute Tells Apizr the key to cache value at CacheReadAllAttribute Tells Apizr to cache ReadAll method You have to provide an ICacheHandler mapping implementation to Apizr to use this feature CacheReadAttribute Tells Apizr to cache Read method You have to provide an ICacheHandler mapping implementation to Apizr to use this feature"
  },
  "api/Apizr.Caching.CacheMode.html": {
    "href": "api/Apizr.Caching.CacheMode.html",
    "title": "Enum CacheMode | Apizr",
    "keywords": "Enum CacheMode Define the caching behaviour Namespace : Apizr.Caching Assembly : Apizr.dll Syntax public enum CacheMode Fields Name Description GetAndFetch Returns fresh data when request succeed otherwise cached one if exist (dynamic data) GetOrFetch Returns cached data if we get some otherwise fresh one if request succeed (static data) None Returns fresh data when request succeed (no cache)"
  },
  "api/Apizr.Caching.html": {
    "href": "api/Apizr.Caching.html",
    "title": "Namespace Apizr.Caching | Apizr",
    "keywords": "Namespace Apizr.Caching Classes VoidCacheHandler The cache handler method mapping void implementation Interfaces ICacheHandler The cache handler method mapping interface Implement it to provide some caching features to Apizr Enums CacheMode Define the caching behaviour"
  },
  "api/Apizr.Caching.ICacheHandler.html": {
    "href": "api/Apizr.Caching.ICacheHandler.html",
    "title": "Interface ICacheHandler | Apizr",
    "keywords": "Interface ICacheHandler The cache handler method mapping interface Implement it to provide some caching features to Apizr Namespace : Apizr.Caching Assembly : Apizr.dll Syntax public interface ICacheHandler Methods ClearAsync(CancellationToken) Map Apizr cache clearing method to your cache handler method Declaration Task ClearAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task GetAsync<T>(String, CancellationToken) Map Apizr cache getting method to your cache handler method Declaration Task<T> GetAsync<T>(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key The key to get from System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task <T> Type Parameters Name Description T The expected value type RemoveAsync(String, CancellationToken) Map Apizr cache removing method to your cache handler method Declaration Task<bool> RemoveAsync(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key The key to remove from System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Boolean > SetAsync(String, Object, Nullable<TimeSpan>, CancellationToken) Map Apizr cache saving method to your cache handler method Declaration Task SetAsync(string key, object value, TimeSpan? lifeSpan = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key The key to cache at System.Object value The value to cache System.Nullable < System.TimeSpan > lifeSpan The optional life span System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task"
  },
  "api/Apizr.Caching.VoidCacheHandler.html": {
    "href": "api/Apizr.Caching.VoidCacheHandler.html",
    "title": "Class VoidCacheHandler | Apizr",
    "keywords": "Class VoidCacheHandler The cache handler method mapping void implementation Inheritance System.Object VoidCacheHandler Implements ICacheHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Caching Assembly : Apizr.dll Syntax public class VoidCacheHandler : ICacheHandler Methods ClearAsync(CancellationToken) Map Apizr cache clearing method to your cache handler method Declaration public Task ClearAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task GetAsync<T>(String, CancellationToken) Map Apizr cache getting method to your cache handler method Declaration public Task<T> GetAsync<T>(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key The key to get from System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task <T> Type Parameters Name Description T The expected value type RemoveAsync(String, CancellationToken) Map Apizr cache removing method to your cache handler method Declaration public Task<bool> RemoveAsync(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key The key to remove from System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Boolean > SetAsync(String, Object, Nullable<TimeSpan>, CancellationToken) Map Apizr cache saving method to your cache handler method Declaration public Task SetAsync(string key, object obj, TimeSpan? timeSpan = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key The key to cache at System.Object obj System.Nullable < System.TimeSpan > timeSpan System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task Implements ICacheHandler"
  },
  "api/Apizr.Configuring.ApizrDuplicateStrategy.html": {
    "href": "api/Apizr.Configuring.ApizrDuplicateStrategy.html",
    "title": "Enum ApizrDuplicateStrategy | Apizr",
    "keywords": "Enum ApizrDuplicateStrategy Duplicate strategy about options registration Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public enum ApizrDuplicateStrategy Fields Name Description Add Ignore Merge Replace"
  },
  "api/Apizr.Configuring.Common.ApizrCommonOptions.html": {
    "href": "api/Apizr.Configuring.Common.ApizrCommonOptions.html",
    "title": "Class ApizrCommonOptions | Apizr",
    "keywords": "Class ApizrCommonOptions Options available at common level for static registrations Inheritance System.Object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase ApizrCommonOptionsBase ApizrCommonOptions Implements IApizrCommonOptions IApizrCommonOptionsBase IApizrSharedRegistrationOptions IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Inherited Members ApizrCommonOptionsBase.RefitSettings ApizrGlobalSharedRegistrationOptionsBase.BaseUri ApizrGlobalSharedRegistrationOptionsBase.BaseAddress ApizrGlobalSharedRegistrationOptionsBase.BasePath ApizrGlobalSharedRegistrationOptionsBase.ContextFactory ApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache ApizrGlobalSharedOptionsBase.HandlersParameters System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public class ApizrCommonOptions : ApizrCommonOptionsBase, IApizrCommonOptions, IApizrCommonOptionsBase, IApizrSharedRegistrationOptions, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Constructors ApizrCommonOptions() The Apizr common options constructor Declaration public ApizrCommonOptions() Properties BaseAddressFactory Base address factory Declaration public Func<string> BaseAddressFactory { get; set; } Property Value Type Description System.Func < System.String > BasePathFactory Base path factory Declaration public Func<string> BasePathFactory { get; set; } Property Value Type Description System.Func < System.String > BaseUriFactory Base uri factory Declaration public Func<Uri> BaseUriFactory { get; set; } Property Value Type Description System.Func < System.Uri > CacheHandlerFactory Cache handler factory Declaration public Func<ICacheHandler> CacheHandlerFactory { get; set; } Property Value Type Description System.Func < ICacheHandler > ConnectivityHandlerFactory Connectivity handler factory Declaration public Func<IConnectivityHandler> ConnectivityHandlerFactory { get; set; } Property Value Type Description System.Func < IConnectivityHandler > DelegatingHandlersFactories Delegating handlers factories Declaration public IDictionary<Type, Func<ILogger, IApizrManagerOptionsBase, DelegatingHandler>> DelegatingHandlersFactories { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , System.Func < Microsoft.Extensions.Logging.ILogger , IApizrManagerOptionsBase , System.Net.Http.DelegatingHandler >> HttpClientFactory HttpClient factory Declaration public Func<HttpMessageHandler, Uri, HttpClient> HttpClientFactory { get; set; } Property Value Type Description System.Func < System.Net.Http.HttpMessageHandler , System.Uri , System.Net.Http.HttpClient > HttpClientHandlerFactory HttpClientHandler factory Declaration public Func<HttpClientHandler> HttpClientHandlerFactory { get; set; } Property Value Type Description System.Func < System.Net.Http.HttpClientHandler > HttpTracerModeFactory Http traffic tracing mode factory Declaration public Func<HttpTracerMode> HttpTracerModeFactory { get; set; } Property Value Type Description System.Func < HttpTracerMode > LoggerFactoryFactory The LoggerFactory factory (I know, I know...) Declaration public Func<ILoggerFactory> LoggerFactoryFactory { get; set; } Property Value Type Description System.Func < Microsoft.Extensions.Logging.ILoggerFactory > LogLevelsFactory Log levels factory Declaration public Func<LogLevel[]> LogLevelsFactory { get; set; } Property Value Type Description System.Func < Microsoft.Extensions.Logging.LogLevel []> MappingHandlerFactory Mapping handler factory Declaration public Func<IMappingHandler> MappingHandlerFactory { get; set; } Property Value Type Description System.Func < IMappingHandler > PolicyRegistryFactory Policy registry factory Declaration public Func<IReadOnlyPolicyRegistry<string>> PolicyRegistryFactory { get; set; } Property Value Type Description System.Func < Polly.Registry.IReadOnlyPolicyRegistry < System.String >> RefitSettingsFactory Refit settings factory Declaration public Func<RefitSettings> RefitSettingsFactory { get; set; } Property Value Type Description System.Func < Refit.RefitSettings > TrafficVerbosityFactory Http traffic tracing verbosity factory Declaration public Func<HttpMessageParts> TrafficVerbosityFactory { get; set; } Property Value Type Description System.Func < HttpMessageParts > Implements IApizrCommonOptions IApizrCommonOptionsBase IApizrSharedRegistrationOptions IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Configuring.Common.ApizrCommonOptionsBase.html": {
    "href": "api/Apizr.Configuring.Common.ApizrCommonOptionsBase.html",
    "title": "Class ApizrCommonOptionsBase | Apizr",
    "keywords": "Class ApizrCommonOptionsBase Options available at common level for both static and extended registrations Inheritance System.Object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase ApizrCommonOptionsBase ApizrCommonOptions ApizrExtendedCommonOptions Implements IApizrCommonOptionsBase IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Inherited Members ApizrGlobalSharedRegistrationOptionsBase.BaseUri ApizrGlobalSharedRegistrationOptionsBase.BaseAddress ApizrGlobalSharedRegistrationOptionsBase.BasePath ApizrGlobalSharedRegistrationOptionsBase.ContextFactory ApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache ApizrGlobalSharedOptionsBase.HandlersParameters System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public abstract class ApizrCommonOptionsBase : ApizrGlobalSharedRegistrationOptionsBase, IApizrCommonOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Constructors ApizrCommonOptionsBase() Declaration protected ApizrCommonOptionsBase() Properties RefitSettings Refit settings Declaration public RefitSettings RefitSettings { get; protected set; } Property Value Type Description Refit.RefitSettings Implements IApizrCommonOptionsBase IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Configuring.Common.ApizrCommonOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Common.ApizrCommonOptionsBuilder.html",
    "title": "Class ApizrCommonOptionsBuilder | Apizr",
    "keywords": "Class ApizrCommonOptionsBuilder Builder options available at common level for static registrations Inheritance System.Object ApizrCommonOptionsBuilder Implements IApizrCommonOptionsBuilder IApizrCommonOptionsBuilder < IApizrCommonOptions , IApizrCommonOptionsBuilder > IApizrCommonOptionsBuilderBase < IApizrCommonOptions , IApizrCommonOptionsBuilder > IApizrGlobalCommonOptionsBuilderBase < IApizrCommonOptions , IApizrCommonOptionsBuilder > IApizrCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase IApizrSharedRegistrationOptionsBuilder < IApizrCommonOptions , IApizrCommonOptionsBuilder > IApizrSharedRegistrationOptionsBuilderBase < IApizrCommonOptions , IApizrCommonOptionsBuilder > IApizrGlobalSharedRegistrationOptionsBuilderBase < IApizrCommonOptions , IApizrCommonOptionsBuilder > IApizrGlobalSharedOptionsBuilderBase < IApizrCommonOptions , IApizrCommonOptionsBuilder > IApizrSharedRegistrationOptionsBuilder IApizrSharedRegistrationOptionsBuilderBase IApizrGlobalSharedRegistrationOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public class ApizrCommonOptionsBuilder : IApizrCommonOptionsBuilder, IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrSharedRegistrationOptionsBuilder, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Fields Options The common options Declaration protected readonly ApizrCommonOptions Options Field Value Type Description ApizrCommonOptions Methods AddDelegatingHandler<THandler>(THandler) Add a custom delegating handler Declaration public IApizrCommonOptionsBuilder AddDelegatingHandler<THandler>(THandler delegatingHandler) where THandler : DelegatingHandler Parameters Type Name Description THandler delegatingHandler A delegating handler Returns Type Description IApizrCommonOptionsBuilder Type Parameters Name Description THandler AddDelegatingHandler<THandler>(Func<ILogger, THandler>) Add a custom delegating handler Declaration public IApizrCommonOptionsBuilder AddDelegatingHandler<THandler>(Func<ILogger, THandler> delegatingHandlerFactory) where THandler : DelegatingHandler Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , THandler> delegatingHandlerFactory A delegating handler factory Returns Type Description IApizrCommonOptionsBuilder Type Parameters Name Description THandler AddDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>) Add a custom delegating handler Declaration public IApizrCommonOptionsBuilder AddDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler> delegatingHandlerFactory) where THandler : DelegatingHandler Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , IApizrManagerOptionsBase , THandler> delegatingHandlerFactory A delegating handler factory Returns Type Description IApizrCommonOptionsBuilder Type Parameters Name Description THandler WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) Provide a method to refresh the authorization token when needed Declaration public IApizrCommonOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory Refresh token method called when expired or empty Returns Type Description IApizrCommonOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Provide your own settings management service and a method to refresh the token Declaration public IApizrCommonOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description TSettingsService settingsService A TSettingsService instance System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory The method factory called to refresh the token Returns Type Description IApizrCommonOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Provide your own settings management service and a method to refresh the token Declaration public IApizrCommonOptionsBuilder WithAuthenticationHandler<TSettingsService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Func <TSettingsService> settingsServiceFactory A TSettingsService instance factory System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory The method factory called to refresh the token Returns Type Description IApizrCommonOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler>) Provide your own AuthenticationHandlerBase implementation factory Declaration public IApizrCommonOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , IApizrManagerOptionsBase , TAuthenticationHandler> authenticationHandlerFactory A TAuthenticationHandler instance factory Returns Type Description IApizrCommonOptionsBuilder Type Parameters Name Description TAuthenticationHandler Your AuthenticationHandlerBase implementation WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, String>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Provide your own settings management and token management services Declaration public IApizrCommonOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, TTokenService tokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description TSettingsService settingsService A TSettingsService instance System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving TTokenService tokenService A TTokenService instance System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod The method called to refresh the token Returns Type Description IApizrCommonOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Provide your own settings management and token management services Declaration public IApizrCommonOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<TTokenService> tokenServiceFactory, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description System.Func <TSettingsService> settingsServiceFactory A TSettingsService instance factory System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Func <TTokenService> tokenServiceFactory A TTokenService instance factory System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod The method called to refresh the token Returns Type Description IApizrCommonOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithBaseAddress(Func<String>) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrCommonOptionsBuilder WithBaseAddress(Func<string> baseAddressFactory) Parameters Type Name Description System.Func < System.String > baseAddressFactory Your web api base address factory Returns Type Description IApizrCommonOptionsBuilder WithBaseAddress(Func<Uri>) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrCommonOptionsBuilder WithBaseAddress(Func<Uri> baseAddressFactory) Parameters Type Name Description System.Func < System.Uri > baseAddressFactory Your web api base address factory Returns Type Description IApizrCommonOptionsBuilder WithBaseAddress(String) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrCommonOptionsBuilder WithBaseAddress(string baseAddress) Parameters Type Name Description System.String baseAddress Your web api base address Returns Type Description IApizrCommonOptionsBuilder WithBaseAddress(Uri) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrCommonOptionsBuilder WithBaseAddress(Uri baseAddress) Parameters Type Name Description System.Uri baseAddress Your web api base address Returns Type Description IApizrCommonOptionsBuilder WithBasePath(Func<String>) Define your web api base path (could be defined with WebApiAttribute) Declaration public IApizrCommonOptionsBuilder WithBasePath(Func<string> basePathFactory) Parameters Type Name Description System.Func < System.String > basePathFactory Your web api base path factory Returns Type Description IApizrCommonOptionsBuilder WithBasePath(String) Define your web api base path (could be defined with WebApiAttribute) Declaration public IApizrCommonOptionsBuilder WithBasePath(string basePath) Parameters Type Name Description System.String basePath Your web api base path Returns Type Description IApizrCommonOptionsBuilder WithCacheHandler(ICacheHandler) Provide a cache handler to cache data Declaration public IApizrCommonOptionsBuilder WithCacheHandler(ICacheHandler cacheHandler) Parameters Type Name Description ICacheHandler cacheHandler An ICacheHandler mapping implementation instance Returns Type Description IApizrCommonOptionsBuilder WithCacheHandler(Func<ICacheHandler>) Provide a cache handler to cache data Declaration public IApizrCommonOptionsBuilder WithCacheHandler(Func<ICacheHandler> cacheHandlerFactory) Parameters Type Name Description System.Func < ICacheHandler > cacheHandlerFactory An ICacheHandler mapping implementation instance factory Returns Type Description IApizrCommonOptionsBuilder WithConnectivityHandler(IConnectivityHandler) Provide a connectivity handler to check connectivity before sending a request Declaration public IApizrCommonOptionsBuilder WithConnectivityHandler(IConnectivityHandler connectivityHandler) Parameters Type Name Description IConnectivityHandler connectivityHandler An IConnectivityHandler mapping implementation instance Returns Type Description IApizrCommonOptionsBuilder WithConnectivityHandler(Func<IConnectivityHandler>) Provide a connectivity handler Declaration public IApizrCommonOptionsBuilder WithConnectivityHandler(Func<IConnectivityHandler> connectivityHandlerFactory) Parameters Type Name Description System.Func < IConnectivityHandler > connectivityHandlerFactory An IConnectivityHandler mapping implementation instance factory Returns Type Description IApizrCommonOptionsBuilder WithConnectivityHandler(Func<Boolean>) Provide a function to invoke while checking connectivity Declaration public IApizrCommonOptionsBuilder WithConnectivityHandler(Func<bool> connectivityCheckingFunction) Parameters Type Name Description System.Func < System.Boolean > connectivityCheckingFunction A function to invoke while checking connectivity Returns Type Description IApizrCommonOptionsBuilder WithContext(Func<Context>, ApizrDuplicateStrategy) Set the Polly Context Declaration public IApizrCommonOptionsBuilder WithContext(Func<Context> contextFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Merge) Parameters Type Name Description System.Func < Polly.Context > contextFactory The Polly Context to pass through it all ApizrDuplicateStrategy strategy The duplicate strategy if there's another one already (default: Merge) Returns Type Description IApizrCommonOptionsBuilder WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) Catch potential exceptions Declaration public IApizrCommonOptionsBuilder WithExCatching(Action<ApizrException> onException, bool letThrowOnExceptionWithEmptyCache = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters Type Name Description System.Action < ApizrException > onException The exception callback System.Boolean letThrowOnExceptionWithEmptyCache Let throw potential exception if there's no cached data to return (default: true) ApizrDuplicateStrategy strategy The duplicate strategy if there's another callback already (default: Replace) Returns Type Description IApizrCommonOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) Catch potential exceptions Declaration public IApizrCommonOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>> onException, bool letThrowOnExceptionWithEmptyCache = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters Type Name Description System.Action < ApizrException <TResult>> onException The exception callback System.Boolean letThrowOnExceptionWithEmptyCache Let throw potential exception if there's no cached data to return (default: true) ApizrDuplicateStrategy strategy The duplicate strategy if there's another callback already (default: Replace) Returns Type Description IApizrCommonOptionsBuilder Type Parameters Name Description TResult WithHandlerParameter(String, Object) Set some parameters passed through all delegating handlers Declaration public IApizrCommonOptionsBuilder WithHandlerParameter(string key, object value) Parameters Type Name Description System.String key The parameter's key System.Object value The parameter's value Returns Type Description IApizrCommonOptionsBuilder WithHttpClient(Func<HttpMessageHandler, Uri, HttpClient>) Provide a custom HttpClient Declaration public IApizrCommonOptionsBuilder WithHttpClient(Func<HttpMessageHandler, Uri, HttpClient> httpClientFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpMessageHandler , System.Uri , System.Net.Http.HttpClient > httpClientFactory An System.Net.Http.HttpClient instance factory Returns Type Description IApizrCommonOptionsBuilder WithHttpClientHandler(Func<HttpClientHandler>) Provide a custom HttpClientHandler Declaration public IApizrCommonOptionsBuilder WithHttpClientHandler(Func<HttpClientHandler> httpClientHandlerFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpClientHandler > httpClientHandlerFactory An System.Net.Http.HttpClientHandler instance factory Returns Type Description IApizrCommonOptionsBuilder WithHttpClientHandler(HttpClientHandler) Provide a custom HttpClientHandler Declaration public IApizrCommonOptionsBuilder WithHttpClientHandler(HttpClientHandler httpClientHandler) Parameters Type Name Description System.Net.Http.HttpClientHandler httpClientHandler An System.Net.Http.HttpClientHandler instance Returns Type Description IApizrCommonOptionsBuilder WithLoggerFactory(ILoggerFactory) Provide a logger factory Declaration public IApizrCommonOptionsBuilder WithLoggerFactory(ILoggerFactory loggerFactory) Parameters Type Name Description Microsoft.Extensions.Logging.ILoggerFactory loggerFactory The logger factory Returns Type Description IApizrCommonOptionsBuilder WithLoggerFactory(Func<ILoggerFactory>) Provide a logger factory Declaration public IApizrCommonOptionsBuilder WithLoggerFactory(Func<ILoggerFactory> loggerFactory) Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILoggerFactory > loggerFactory The logger factory Returns Type Description IApizrCommonOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration public IApizrCommonOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: All) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: Information) Returns Type Description IApizrCommonOptionsBuilder WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration public IApizrCommonOptionsBuilder WithLogging(Func<HttpTracerMode> httpTracerModeFactory, Func<HttpMessageParts> trafficVerbosityFactory, Func<LogLevel[]> logLevelsFactory) Parameters Type Name Description System.Func < HttpTracerMode > httpTracerModeFactory Http traffic tracing mode System.Func < HttpMessageParts > trafficVerbosityFactory Http traffic tracing verbosity factory System.Func < Microsoft.Extensions.Logging.LogLevel []> logLevelsFactory Log levels factory Returns Type Description IApizrCommonOptionsBuilder WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration public IApizrCommonOptionsBuilder WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])> loggingConfigurationFactory) Parameters Type Name Description System.Func < System.ValueTuple < HttpTracerMode , HttpMessageParts , Microsoft.Extensions.Logging.LogLevel []>> loggingConfigurationFactory Logging configuration factory Returns Type Description IApizrCommonOptionsBuilder WithMappingHandler(IMappingHandler) Provide a mapping handler to map entities Declaration public IApizrCommonOptionsBuilder WithMappingHandler(IMappingHandler mappingHandler) Parameters Type Name Description IMappingHandler mappingHandler An IMappingHandler mapping implementation instance Returns Type Description IApizrCommonOptionsBuilder WithMappingHandler(Func<IMappingHandler>) Provide a mapping handler to map entities Declaration public IApizrCommonOptionsBuilder WithMappingHandler(Func<IMappingHandler> mappingHandlerFactory) Parameters Type Name Description System.Func < IMappingHandler > mappingHandlerFactory An IMappingHandler mapping implementation instance factory Returns Type Description IApizrCommonOptionsBuilder WithPolicyRegistry(IReadOnlyPolicyRegistry<String>) Provide a policy registry Declaration public IApizrCommonOptionsBuilder WithPolicyRegistry(IReadOnlyPolicyRegistry<string> policyRegistry) Parameters Type Name Description Polly.Registry.IReadOnlyPolicyRegistry < System.String > policyRegistry A policy registry instance Returns Type Description IApizrCommonOptionsBuilder WithPolicyRegistry(Func<IReadOnlyPolicyRegistry<String>>) Provide a policy registry Declaration public IApizrCommonOptionsBuilder WithPolicyRegistry(Func<IReadOnlyPolicyRegistry<string>> policyRegistryFactory) Parameters Type Name Description System.Func < Polly.Registry.IReadOnlyPolicyRegistry < System.String >> policyRegistryFactory A policy registry instance factory Returns Type Description IApizrCommonOptionsBuilder WithRefitSettings(RefitSettings) Provide some Refit specific settings Declaration public IApizrCommonOptionsBuilder WithRefitSettings(RefitSettings refitSettings) Parameters Type Name Description Refit.RefitSettings refitSettings A Refit.RefitSettings instance Returns Type Description IApizrCommonOptionsBuilder WithRefitSettings(Func<RefitSettings>) Provide some Refit specific settings Declaration public IApizrCommonOptionsBuilder WithRefitSettings(Func<RefitSettings> refitSettingsFactory) Parameters Type Name Description System.Func < Refit.RefitSettings > refitSettingsFactory A Refit.RefitSettings instance factory Returns Type Description IApizrCommonOptionsBuilder Implements IApizrCommonOptionsBuilder IApizrCommonOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder> IApizrCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> IApizrCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> IApizrSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrSharedRegistrationOptionsBuilder IApizrSharedRegistrationOptionsBuilderBase IApizrGlobalSharedRegistrationOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IMapper) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper)"
  },
  "api/Apizr.Configuring.Common.html": {
    "href": "api/Apizr.Configuring.Common.html",
    "title": "Namespace Apizr.Configuring.Common | Apizr",
    "keywords": "Namespace Apizr.Configuring.Common Classes ApizrCommonOptions Options available at common level for static registrations ApizrCommonOptionsBase Options available at common level for both static and extended registrations ApizrCommonOptionsBuilder Builder options available at common level for static registrations Interfaces IApizrCommonOptions Options available at common level for static registrations IApizrCommonOptionsBase Options available at common level for both static and extended registrations IApizrCommonOptionsBuilder IApizrCommonOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder> Builder options available at common level for static registrations IApizrCommonOptionsBuilderBase Builder options available at common level for both static and extended registrations IApizrCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> Builder options available at common level for both static and extended registrations IApizrExtendedCommonOptionsBuilderBase Builder options available at common level for extended registration IApizrGlobalCommonOptionsBuilderBase Builder options available at common level for both static and extended registrations IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> Builder options available at common level for both static and extended registrations"
  },
  "api/Apizr.Configuring.Common.IApizrCommonOptions.html": {
    "href": "api/Apizr.Configuring.Common.IApizrCommonOptions.html",
    "title": "Interface IApizrCommonOptions | Apizr",
    "keywords": "Interface IApizrCommonOptions Options available at common level for static registrations Inherited Members IApizrCommonOptionsBase.RefitSettings IApizrSharedRegistrationOptions.BaseUriFactory IApizrSharedRegistrationOptions.BaseAddressFactory IApizrSharedRegistrationOptions.BasePathFactory IApizrSharedRegistrationOptions.HttpTracerModeFactory IApizrSharedRegistrationOptions.TrafficVerbosityFactory IApizrSharedRegistrationOptions.LogLevelsFactory IApizrSharedRegistrationOptions.HttpClientHandlerFactory IApizrSharedRegistrationOptions.HttpClientFactory IApizrSharedRegistrationOptions.DelegatingHandlersFactories IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.ContextFactory IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.OnException IApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache IApizrGlobalSharedOptionsBase.HandlersParameters Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public interface IApizrCommonOptions : IApizrCommonOptionsBase, IApizrSharedRegistrationOptions, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Properties CacheHandlerFactory Cache handler factory Declaration Func<ICacheHandler> CacheHandlerFactory { get; } Property Value Type Description System.Func < ICacheHandler > ConnectivityHandlerFactory Connectivity handler factory Declaration Func<IConnectivityHandler> ConnectivityHandlerFactory { get; } Property Value Type Description System.Func < IConnectivityHandler > LoggerFactoryFactory The LoggerFactory factory (I know, I know...) Declaration Func<ILoggerFactory> LoggerFactoryFactory { get; set; } Property Value Type Description System.Func < Microsoft.Extensions.Logging.ILoggerFactory > MappingHandlerFactory Mapping handler factory Declaration Func<IMappingHandler> MappingHandlerFactory { get; } Property Value Type Description System.Func < IMappingHandler > PolicyRegistryFactory Policy registry factory Declaration Func<IReadOnlyPolicyRegistry<string>> PolicyRegistryFactory { get; } Property Value Type Description System.Func < Polly.Registry.IReadOnlyPolicyRegistry < System.String >> RefitSettingsFactory Refit settings factory Declaration Func<RefitSettings> RefitSettingsFactory { get; } Property Value Type Description System.Func < Refit.RefitSettings >"
  },
  "api/Apizr.Configuring.Common.IApizrCommonOptionsBase.html": {
    "href": "api/Apizr.Configuring.Common.IApizrCommonOptionsBase.html",
    "title": "Interface IApizrCommonOptionsBase | Apizr",
    "keywords": "Interface IApizrCommonOptionsBase Options available at common level for both static and extended registrations Inherited Members IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.ContextFactory IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.OnException IApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache IApizrGlobalSharedOptionsBase.HandlersParameters Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public interface IApizrCommonOptionsBase : IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Properties RefitSettings Refit settings Declaration RefitSettings RefitSettings { get; } Property Value Type Description Refit.RefitSettings"
  },
  "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilder.html",
    "title": "Interface IApizrCommonOptionsBuilder | Apizr",
    "keywords": "Interface IApizrCommonOptionsBuilder Inherited Members IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithPolicyRegistry(IReadOnlyPolicyRegistry<String>) IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithPolicyRegistry(Func<IReadOnlyPolicyRegistry<String>>) IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithRefitSettings(Func<RefitSettings>) IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithConnectivityHandler(Func<IConnectivityHandler>) IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithCacheHandler(Func<ICacheHandler>) IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithLoggerFactory(ILoggerFactory) IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithLoggerFactory(Func<ILoggerFactory>) IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithMappingHandler(Func<IMappingHandler>) IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithBaseAddress(Func<String>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithBaseAddress(Func<Uri>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithBasePath(Func<String>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithHttpClientHandler(Func<HttpClientHandler>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithHttpClient(Func<HttpMessageHandler, Uri, HttpClient>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, String>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.AddDelegatingHandler<THandler>(Func<ILogger, THandler>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.AddDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithLogging(Func<(T1, T2, T3)<HttpTracerMode, HttpMessageParts, LogLevel[]>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public interface IApizrCommonOptionsBuilder : IApizrCommonOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilder<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrCommonOptions, IApizrCommonOptionsBuilder>, IApizrSharedRegistrationOptionsBuilder, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IMapper) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper)"
  },
  "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilder-2.html": {
    "href": "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilder-2.html",
    "title": "Interface IApizrCommonOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrCommonOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder> Builder options available at common level for static registrations Inherited Members IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(Func<String>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(Func<Uri>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBasePath(Func<String>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHttpClientHandler(Func<HttpClientHandler>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHttpClient(Func<HttpMessageHandler, Uri, HttpClient>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, String>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.AddDelegatingHandler<THandler>(Func<ILogger, THandler>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.AddDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithLogging(Func<(T1, T2, T3)<HttpTracerMode, HttpMessageParts, LogLevel[]>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public interface IApizrCommonOptionsBuilder<out TApizrCommonOptions, out TApizrCommonOptionsBuilder> : IApizrCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrSharedRegistrationOptionsBuilder, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrCommonOptions : IApizrCommonOptionsBase where TApizrCommonOptionsBuilder : IApizrCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> Type Parameters Name Description TApizrCommonOptions TApizrCommonOptionsBuilder Methods WithCacheHandler(Func<ICacheHandler>) Provide a cache handler to cache data Declaration TApizrCommonOptionsBuilder WithCacheHandler(Func<ICacheHandler> cacheHandlerFactory) Parameters Type Name Description System.Func < ICacheHandler > cacheHandlerFactory An ICacheHandler mapping implementation instance factory Returns Type Description TApizrCommonOptionsBuilder WithConnectivityHandler(Func<IConnectivityHandler>) Provide a connectivity handler Declaration TApizrCommonOptionsBuilder WithConnectivityHandler(Func<IConnectivityHandler> connectivityHandlerFactory) Parameters Type Name Description System.Func < IConnectivityHandler > connectivityHandlerFactory An IConnectivityHandler mapping implementation instance factory Returns Type Description TApizrCommonOptionsBuilder WithLoggerFactory(ILoggerFactory) Provide a logger factory Declaration TApizrCommonOptionsBuilder WithLoggerFactory(ILoggerFactory loggerFactory) Parameters Type Name Description Microsoft.Extensions.Logging.ILoggerFactory loggerFactory The logger factory Returns Type Description TApizrCommonOptionsBuilder WithLoggerFactory(Func<ILoggerFactory>) Provide a logger factory Declaration TApizrCommonOptionsBuilder WithLoggerFactory(Func<ILoggerFactory> loggerFactory) Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILoggerFactory > loggerFactory The logger factory Returns Type Description TApizrCommonOptionsBuilder WithMappingHandler(Func<IMappingHandler>) Provide a mapping handler to map entities Declaration TApizrCommonOptionsBuilder WithMappingHandler(Func<IMappingHandler> mappingHandlerFactory) Parameters Type Name Description System.Func < IMappingHandler > mappingHandlerFactory An IMappingHandler mapping implementation instance factory Returns Type Description TApizrCommonOptionsBuilder WithPolicyRegistry(IReadOnlyPolicyRegistry<String>) Provide a policy registry Declaration TApizrCommonOptionsBuilder WithPolicyRegistry(IReadOnlyPolicyRegistry<string> policyRegistry) Parameters Type Name Description Polly.Registry.IReadOnlyPolicyRegistry < System.String > policyRegistry A policy registry instance Returns Type Description TApizrCommonOptionsBuilder WithPolicyRegistry(Func<IReadOnlyPolicyRegistry<String>>) Provide a policy registry Declaration TApizrCommonOptionsBuilder WithPolicyRegistry(Func<IReadOnlyPolicyRegistry<string>> policyRegistryFactory) Parameters Type Name Description System.Func < Polly.Registry.IReadOnlyPolicyRegistry < System.String >> policyRegistryFactory A policy registry instance factory Returns Type Description TApizrCommonOptionsBuilder WithRefitSettings(Func<RefitSettings>) Provide some Refit specific settings Declaration TApizrCommonOptionsBuilder WithRefitSettings(Func<RefitSettings> refitSettingsFactory) Parameters Type Name Description System.Func < Refit.RefitSettings > refitSettingsFactory A Refit.RefitSettings instance factory Returns Type Description TApizrCommonOptionsBuilder Extension Methods FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IMapper) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper)"
  },
  "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilderBase.html",
    "title": "Interface IApizrCommonOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrCommonOptionsBuilderBase Builder options available at common level for both static and extended registrations Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public interface IApizrCommonOptionsBuilderBase : IApizrGlobalCommonOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IMapper) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper)"
  },
  "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Common.IApizrCommonOptionsBuilderBase-2.html",
    "title": "Interface IApizrCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> Builder options available at common level for both static and extended registrations Inherited Members IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public interface IApizrCommonOptionsBuilderBase<out TApizrCommonOptions, out TApizrCommonOptionsBuilder> : IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrCommonOptions : IApizrCommonOptionsBase where TApizrCommonOptionsBuilder : IApizrCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> Type Parameters Name Description TApizrCommonOptions TApizrCommonOptionsBuilder Extension Methods FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IMapper) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper)"
  },
  "api/Apizr.Configuring.Common.IApizrExtendedCommonOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Common.IApizrExtendedCommonOptionsBuilderBase.html",
    "title": "Interface IApizrExtendedCommonOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrExtendedCommonOptionsBuilderBase Builder options available at common level for extended registration Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public interface IApizrExtendedCommonOptionsBuilderBase : IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder)"
  },
  "api/Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase.html",
    "title": "Interface IApizrGlobalCommonOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrGlobalCommonOptionsBuilderBase Builder options available at common level for both static and extended registrations Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public interface IApizrGlobalCommonOptionsBuilderBase : IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Common.IApizrGlobalCommonOptionsBuilderBase-2.html",
    "title": "Interface IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> Builder options available at common level for both static and extended registrations Inherited Members IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Common Assembly : Apizr.dll Syntax public interface IApizrGlobalCommonOptionsBuilderBase<out TApizrCommonOptions, out TApizrCommonOptionsBuilder> : IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrCommonOptions : IApizrCommonOptionsBase where TApizrCommonOptionsBuilder : IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> Type Parameters Name Description TApizrCommonOptions TApizrCommonOptionsBuilder Methods WithCacheHandler(ICacheHandler) Provide a cache handler to cache data Declaration TApizrCommonOptionsBuilder WithCacheHandler(ICacheHandler cacheHandler) Parameters Type Name Description ICacheHandler cacheHandler An ICacheHandler mapping implementation instance Returns Type Description TApizrCommonOptionsBuilder WithConnectivityHandler(IConnectivityHandler) Provide a connectivity handler to check connectivity before sending a request Declaration TApizrCommonOptionsBuilder WithConnectivityHandler(IConnectivityHandler connectivityHandler) Parameters Type Name Description IConnectivityHandler connectivityHandler An IConnectivityHandler mapping implementation instance Returns Type Description TApizrCommonOptionsBuilder WithConnectivityHandler(Func<Boolean>) Provide a function to invoke while checking connectivity Declaration TApizrCommonOptionsBuilder WithConnectivityHandler(Func<bool> connectivityCheckingFunction) Parameters Type Name Description System.Func < System.Boolean > connectivityCheckingFunction A function to invoke while checking connectivity Returns Type Description TApizrCommonOptionsBuilder WithMappingHandler(IMappingHandler) Provide a mapping handler to map entities Declaration TApizrCommonOptionsBuilder WithMappingHandler(IMappingHandler mappingHandler) Parameters Type Name Description IMappingHandler mappingHandler An IMappingHandler mapping implementation instance Returns Type Description TApizrCommonOptionsBuilder WithRefitSettings(RefitSettings) Provide some Refit specific settings Declaration TApizrCommonOptionsBuilder WithRefitSettings(RefitSettings refitSettings) Parameters Type Name Description Refit.RefitSettings refitSettings A Refit.RefitSettings instance Returns Type Description TApizrCommonOptionsBuilder Extension Methods FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Configuring.CreateHandlerParameterAttribute.html": {
    "href": "api/Apizr.Configuring.CreateHandlerParameterAttribute.html",
    "title": "Class CreateHandlerParameterAttribute | Apizr",
    "keywords": "Class CreateHandlerParameterAttribute Inheritance System.Object System.Attribute Refit.PropertyAttribute HandlerParameterAttribute CrudHandlerParameterAttribute CreateHandlerParameterAttribute Inherited Members HandlerParameterAttribute.Value Refit.PropertyAttribute.Key System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public abstract class CreateHandlerParameterAttribute : CrudHandlerParameterAttribute Constructors CreateHandlerParameterAttribute(String, Object) Declaration protected CreateHandlerParameterAttribute(string key, object value) Parameters Type Name Description System.String key System.Object value"
  },
  "api/Apizr.Configuring.CrudHandlerParameterAttribute.html": {
    "href": "api/Apizr.Configuring.CrudHandlerParameterAttribute.html",
    "title": "Class CrudHandlerParameterAttribute | Apizr",
    "keywords": "Class CrudHandlerParameterAttribute Inheritance System.Object System.Attribute Refit.PropertyAttribute HandlerParameterAttribute CrudHandlerParameterAttribute CreateHandlerParameterAttribute DeleteHandlerParameterAttribute ReadAllHandlerParameterAttribute ReadHandlerParameterAttribute UpdateHandlerParameterAttribute Inherited Members HandlerParameterAttribute.Value Refit.PropertyAttribute.Key System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public abstract class CrudHandlerParameterAttribute : HandlerParameterAttribute Constructors CrudHandlerParameterAttribute(String, Object) Declaration protected CrudHandlerParameterAttribute(string key, object value) Parameters Type Name Description System.String key System.Object value"
  },
  "api/Apizr.Configuring.DeleteHandlerParameterAttribute.html": {
    "href": "api/Apizr.Configuring.DeleteHandlerParameterAttribute.html",
    "title": "Class DeleteHandlerParameterAttribute | Apizr",
    "keywords": "Class DeleteHandlerParameterAttribute Inheritance System.Object System.Attribute Refit.PropertyAttribute HandlerParameterAttribute CrudHandlerParameterAttribute DeleteHandlerParameterAttribute Inherited Members HandlerParameterAttribute.Value Refit.PropertyAttribute.Key System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public abstract class DeleteHandlerParameterAttribute : CrudHandlerParameterAttribute Constructors DeleteHandlerParameterAttribute(String, Object) Declaration protected DeleteHandlerParameterAttribute(string key, object value) Parameters Type Name Description System.String key System.Object value"
  },
  "api/Apizr.Configuring.HandlerParameterAttribute.html": {
    "href": "api/Apizr.Configuring.HandlerParameterAttribute.html",
    "title": "Class HandlerParameterAttribute | Apizr",
    "keywords": "Class HandlerParameterAttribute Inheritance System.Object System.Attribute Refit.PropertyAttribute HandlerParameterAttribute CrudHandlerParameterAttribute PriorityAttribute Inherited Members Refit.PropertyAttribute.Key System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public abstract class HandlerParameterAttribute : PropertyAttribute Constructors HandlerParameterAttribute(String, Object) Declaration protected HandlerParameterAttribute(string key, object value) Parameters Type Name Description System.String key System.Object value Properties Value Declaration public object Value { get; set; } Property Value Type Description System.Object"
  },
  "api/Apizr.Configuring.html": {
    "href": "api/Apizr.Configuring.html",
    "title": "Namespace Apizr.Configuring | Apizr",
    "keywords": "Namespace Apizr.Configuring Classes CreateHandlerParameterAttribute CrudHandlerParameterAttribute DeleteHandlerParameterAttribute HandlerParameterAttribute ReadAllHandlerParameterAttribute ReadHandlerParameterAttribute UpdateHandlerParameterAttribute Enums ApizrDuplicateStrategy Duplicate strategy about options registration"
  },
  "api/Apizr.Configuring.Manager.ApizrManagerOptions.html": {
    "href": "api/Apizr.Configuring.Manager.ApizrManagerOptions.html",
    "title": "Class ApizrManagerOptions | Apizr",
    "keywords": "Class ApizrManagerOptions Options available for static registrations Inheritance System.Object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase ApizrManagerOptionsBase ApizrManagerOptions Implements IApizrManagerOptions IApizrManagerOptionsBase IApizrCommonOptions IApizrCommonOptionsBase IApizrProperOptions IApizrProperOptionsBase IApizrSharedRegistrationOptions IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Inherited Members ApizrManagerOptionsBase.WebApiType ApizrManagerOptionsBase.PolicyRegistryKeys ApizrManagerOptionsBase.Logger ApizrManagerOptionsBase.RefitSettings ApizrGlobalSharedRegistrationOptionsBase.BaseUri ApizrGlobalSharedRegistrationOptionsBase.BaseAddress ApizrGlobalSharedRegistrationOptionsBase.BasePath ApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache ApizrGlobalSharedOptionsBase.HandlersParameters System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Manager Assembly : Apizr.dll Syntax public class ApizrManagerOptions : ApizrManagerOptionsBase, IApizrManagerOptions, IApizrManagerOptionsBase, IApizrCommonOptions, IApizrCommonOptionsBase, IApizrProperOptions, IApizrProperOptionsBase, IApizrSharedRegistrationOptions, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Constructors ApizrManagerOptions(IApizrCommonOptions, IApizrProperOptions) The options constructor Declaration public ApizrManagerOptions(IApizrCommonOptions commonOptions, IApizrProperOptions properOptions) Parameters Type Name Description IApizrCommonOptions commonOptions The common options IApizrProperOptions properOptions The proper options Properties BaseAddressFactory Base address factory Declaration public Func<string> BaseAddressFactory { get; set; } Property Value Type Description System.Func < System.String > BasePathFactory Base path factory Declaration public Func<string> BasePathFactory { get; set; } Property Value Type Description System.Func < System.String > BaseUriFactory Base uri factory Declaration public Func<Uri> BaseUriFactory { get; set; } Property Value Type Description System.Func < System.Uri > CacheHandlerFactory Cache handler factory Declaration public Func<ICacheHandler> CacheHandlerFactory { get; set; } Property Value Type Description System.Func < ICacheHandler > ConnectivityHandlerFactory Connectivity handler factory Declaration public Func<IConnectivityHandler> ConnectivityHandlerFactory { get; set; } Property Value Type Description System.Func < IConnectivityHandler > ContextFactory The Polly Context to pass through it all Declaration public Func<Context> ContextFactory { get; set; } Property Value Type Description System.Func < Polly.Context > DelegatingHandlersFactories Delegating handlers factories Declaration public IDictionary<Type, Func<ILogger, IApizrManagerOptionsBase, DelegatingHandler>> DelegatingHandlersFactories { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , System.Func < Microsoft.Extensions.Logging.ILogger , IApizrManagerOptionsBase , System.Net.Http.DelegatingHandler >> HttpClientFactory HttpClient factory Declaration public Func<HttpMessageHandler, Uri, HttpClient> HttpClientFactory { get; set; } Property Value Type Description System.Func < System.Net.Http.HttpMessageHandler , System.Uri , System.Net.Http.HttpClient > HttpClientHandlerFactory HttpClientHandler factory Declaration public Func<HttpClientHandler> HttpClientHandlerFactory { get; set; } Property Value Type Description System.Func < System.Net.Http.HttpClientHandler > HttpTracerModeFactory Http traffic tracing mode factory Declaration public Func<HttpTracerMode> HttpTracerModeFactory { get; set; } Property Value Type Description System.Func < HttpTracerMode > LoggerFactory The Logger factory Declaration public Func<ILoggerFactory, string, ILogger> LoggerFactory { get; } Property Value Type Description System.Func < Microsoft.Extensions.Logging.ILoggerFactory , System.String , Microsoft.Extensions.Logging.ILogger > LoggerFactoryFactory The LoggerFactory factory (I know, I know...) Declaration public Func<ILoggerFactory> LoggerFactoryFactory { get; set; } Property Value Type Description System.Func < Microsoft.Extensions.Logging.ILoggerFactory > LogLevelsFactory Log levels factory Declaration public Func<LogLevel[]> LogLevelsFactory { get; set; } Property Value Type Description System.Func < Microsoft.Extensions.Logging.LogLevel []> MappingHandlerFactory Mapping handler factory Declaration public Func<IMappingHandler> MappingHandlerFactory { get; set; } Property Value Type Description System.Func < IMappingHandler > PolicyRegistryFactory Policy registry factory Declaration public Func<IReadOnlyPolicyRegistry<string>> PolicyRegistryFactory { get; set; } Property Value Type Description System.Func < Polly.Registry.IReadOnlyPolicyRegistry < System.String >> RefitSettingsFactory Refit settings factory Declaration public Func<RefitSettings> RefitSettingsFactory { get; set; } Property Value Type Description System.Func < Refit.RefitSettings > TrafficVerbosityFactory Http traffic tracing verbosity factory Declaration public Func<HttpMessageParts> TrafficVerbosityFactory { get; set; } Property Value Type Description System.Func < HttpMessageParts > Implements IApizrManagerOptions IApizrManagerOptionsBase IApizrCommonOptions IApizrCommonOptionsBase IApizrProperOptions IApizrProperOptionsBase IApizrSharedRegistrationOptions IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Configuring.Manager.ApizrManagerOptions-1.html": {
    "href": "api/Apizr.Configuring.Manager.ApizrManagerOptions-1.html",
    "title": "Class ApizrManagerOptions<TWebApi> | Apizr",
    "keywords": "Class ApizrManagerOptions<TWebApi> Options available for static registrations Inheritance System.Object ApizrManagerOptions<TWebApi> ApizrExtendedManagerOptions<TWebApi> Implements IApizrManagerOptions <TWebApi> IApizrManagerOptionsBase IApizrCommonOptionsBase IApizrProperOptionsBase IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Manager Assembly : Apizr.dll Syntax public class ApizrManagerOptions<TWebApi> : IApizrManagerOptions<TWebApi>, IApizrManagerOptionsBase, IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Type Parameters Name Description TWebApi Constructors ApizrManagerOptions(IApizrManagerOptionsBase) The options constructor Declaration public ApizrManagerOptions(IApizrManagerOptionsBase apizrOptions) Parameters Type Name Description IApizrManagerOptionsBase apizrOptions The base options Fields Options The options Declaration protected readonly IApizrManagerOptionsBase Options Field Value Type Description IApizrManagerOptionsBase Properties BaseAddress Base address Declaration public string BaseAddress { get; } Property Value Type Description System.String BasePath Base path Declaration public string BasePath { get; } Property Value Type Description System.String BaseUri Base address Declaration public Uri BaseUri { get; } Property Value Type Description System.Uri ContextFactory The Polly Context to pass through it all Declaration public Func<Context> ContextFactory { get; } Property Value Type Description System.Func < Polly.Context > HandlersParameters Parameters passed through delegating handlers Declaration public IDictionary<string, object> HandlersParameters { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.Object > HttpTracerMode Http traffic tracing mode Declaration public HttpTracerMode HttpTracerMode { get; } Property Value Type Description HttpTracerMode LetThrowOnExceptionWithEmptyCache Let throw potential exception if there's no cached data to return Declaration public bool LetThrowOnExceptionWithEmptyCache { get; } Property Value Type Description System.Boolean Logger The logger instance Declaration public ILogger Logger { get; } Property Value Type Description Microsoft.Extensions.Logging.ILogger LogLevels Log levels while writing Declaration public LogLevel[] LogLevels { get; } Property Value Type Description Microsoft.Extensions.Logging.LogLevel [] OnException Catching potential exception if defined Declaration public Action<ApizrException> OnException { get; } Property Value Type Description System.Action < ApizrException > PolicyRegistryKeys Policy keys from the registry Declaration public string[] PolicyRegistryKeys { get; } Property Value Type Description System.String [] PrimaryHandlerFactory The primary Http message handler factory (set internally) Declaration public Func<DelegatingHandler, ILogger, IApizrManagerOptionsBase, HttpMessageHandler> PrimaryHandlerFactory { get; } Property Value Type Description System.Func < System.Net.Http.DelegatingHandler , Microsoft.Extensions.Logging.ILogger , IApizrManagerOptionsBase , System.Net.Http.HttpMessageHandler > RefitSettings Refit settings Declaration public RefitSettings RefitSettings { get; } Property Value Type Description Refit.RefitSettings TrafficVerbosity Http traffic tracing verbosity Declaration public HttpMessageParts TrafficVerbosity { get; } Property Value Type Description HttpMessageParts WebApiType Web api interface type Declaration public Type WebApiType { get; } Property Value Type Description System.Type Implements IApizrManagerOptions<TWebApi> IApizrManagerOptionsBase IApizrCommonOptionsBase IApizrProperOptionsBase IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Configuring.Manager.ApizrManagerOptionsBase.html": {
    "href": "api/Apizr.Configuring.Manager.ApizrManagerOptionsBase.html",
    "title": "Class ApizrManagerOptionsBase | Apizr",
    "keywords": "Class ApizrManagerOptionsBase Options available for both static and extended registrations Inheritance System.Object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase ApizrManagerOptionsBase ApizrManagerOptions ApizrExtendedManagerOptionsBase Implements IApizrManagerOptionsBase IApizrCommonOptionsBase IApizrProperOptionsBase IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Inherited Members ApizrGlobalSharedRegistrationOptionsBase.BaseUri ApizrGlobalSharedRegistrationOptionsBase.BaseAddress ApizrGlobalSharedRegistrationOptionsBase.BasePath ApizrGlobalSharedRegistrationOptionsBase.ContextFactory ApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache ApizrGlobalSharedOptionsBase.HandlersParameters System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Manager Assembly : Apizr.dll Syntax public abstract class ApizrManagerOptionsBase : ApizrGlobalSharedRegistrationOptionsBase, IApizrManagerOptionsBase, IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Constructors ApizrManagerOptionsBase(IApizrCommonOptionsBase, IApizrProperOptionsBase) The options constructor Declaration protected ApizrManagerOptionsBase(IApizrCommonOptionsBase commonOptions, IApizrProperOptionsBase properOptions) Parameters Type Name Description IApizrCommonOptionsBase commonOptions The common options IApizrProperOptionsBase properOptions The proper options Properties Logger The logger instance Declaration public ILogger Logger { get; protected set; } Property Value Type Description Microsoft.Extensions.Logging.ILogger PolicyRegistryKeys Policy keys from the registry Declaration public string[] PolicyRegistryKeys { get; } Property Value Type Description System.String [] RefitSettings Refit settings Declaration public RefitSettings RefitSettings { get; protected set; } Property Value Type Description Refit.RefitSettings WebApiType Web api interface type Declaration public Type WebApiType { get; } Property Value Type Description System.Type Implements IApizrManagerOptionsBase IApizrCommonOptionsBase IApizrProperOptionsBase IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Manager.ApizrManagerOptionsBuilder.html",
    "title": "Class ApizrManagerOptionsBuilder | Apizr",
    "keywords": "Class ApizrManagerOptionsBuilder Builder options available for static registrations Inheritance System.Object ApizrManagerOptionsBuilder Implements IApizrManagerOptionsBuilder IApizrManagerOptionsBuilder < IApizrManagerOptions , IApizrManagerOptionsBuilder > IApizrManagerOptionsBuilderBase < IApizrManagerOptions , IApizrManagerOptionsBuilder > IApizrGlobalManagerOptionsBuilderBase < IApizrManagerOptions , IApizrManagerOptionsBuilder > IApizrManagerOptionsBuilderBase IApizrGlobalManagerOptionsBuilderBase IApizrCommonOptionsBuilder < IApizrManagerOptions , IApizrManagerOptionsBuilder > IApizrCommonOptionsBuilderBase < IApizrManagerOptions , IApizrManagerOptionsBuilder > IApizrGlobalCommonOptionsBuilderBase < IApizrManagerOptions , IApizrManagerOptionsBuilder > IApizrCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase IApizrProperOptionsBuilder < IApizrManagerOptions , IApizrManagerOptionsBuilder > IApizrProperOptionsBuilderBase < IApizrManagerOptions , IApizrManagerOptionsBuilder > IApizrGlobalProperOptionsBuilderBase < IApizrManagerOptions , IApizrManagerOptionsBuilder > IApizrProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase IApizrSharedRegistrationOptionsBuilder < IApizrManagerOptions , IApizrManagerOptionsBuilder > IApizrSharedRegistrationOptionsBuilderBase < IApizrManagerOptions , IApizrManagerOptionsBuilder > IApizrGlobalSharedRegistrationOptionsBuilderBase < IApizrManagerOptions , IApizrManagerOptionsBuilder > IApizrGlobalSharedOptionsBuilderBase < IApizrManagerOptions , IApizrManagerOptionsBuilder > IApizrSharedRegistrationOptionsBuilder IApizrSharedRegistrationOptionsBuilderBase IApizrGlobalSharedRegistrationOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Manager Assembly : Apizr.dll Syntax public class ApizrManagerOptionsBuilder : IApizrManagerOptionsBuilder, IApizrManagerOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrManagerOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrGlobalManagerOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrManagerOptionsBuilderBase, IApizrGlobalManagerOptionsBuilderBase, IApizrCommonOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrCommonOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrProperOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrProperOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrSharedRegistrationOptionsBuilder, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Fields Options The options Declaration protected readonly ApizrManagerOptions Options Field Value Type Description ApizrManagerOptions Methods AddDelegatingHandler<THandler>(THandler) Add a custom delegating handler Declaration public IApizrManagerOptionsBuilder AddDelegatingHandler<THandler>(THandler delegatingHandler) where THandler : DelegatingHandler Parameters Type Name Description THandler delegatingHandler A delegating handler Returns Type Description IApizrManagerOptionsBuilder Type Parameters Name Description THandler AddDelegatingHandler<THandler>(Func<ILogger, THandler>) Add a custom delegating handler Declaration public IApizrManagerOptionsBuilder AddDelegatingHandler<THandler>(Func<ILogger, THandler> delegatingHandlerFactory) where THandler : DelegatingHandler Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , THandler> delegatingHandlerFactory A delegating handler factory Returns Type Description IApizrManagerOptionsBuilder Type Parameters Name Description THandler AddDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>) Add a custom delegating handler Declaration public IApizrManagerOptionsBuilder AddDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler> delegatingHandlerFactory) where THandler : DelegatingHandler Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , IApizrManagerOptionsBase , THandler> delegatingHandlerFactory A delegating handler factory Returns Type Description IApizrManagerOptionsBuilder Type Parameters Name Description THandler WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) Provide a method to refresh the authorization token when needed Declaration public IApizrManagerOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory Refresh token method called when expired or empty Returns Type Description IApizrManagerOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Provide your own settings management service and a method to refresh the token Declaration public IApizrManagerOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description TSettingsService settingsService A TSettingsService instance System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory The method factory called to refresh the token Returns Type Description IApizrManagerOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Provide your own settings management service and a method to refresh the token Declaration public IApizrManagerOptionsBuilder WithAuthenticationHandler<TSettingsService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Func <TSettingsService> settingsServiceFactory A TSettingsService instance factory System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory The method factory called to refresh the token Returns Type Description IApizrManagerOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler>) Provide your own AuthenticationHandlerBase implementation factory Declaration public IApizrManagerOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , IApizrManagerOptionsBase , TAuthenticationHandler> authenticationHandlerFactory A TAuthenticationHandler instance factory Returns Type Description IApizrManagerOptionsBuilder Type Parameters Name Description TAuthenticationHandler Your AuthenticationHandlerBase implementation WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, String>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Provide your own settings management and token management services Declaration public IApizrManagerOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, TTokenService tokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description TSettingsService settingsService A TSettingsService instance System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving TTokenService tokenService A TTokenService instance System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod The method called to refresh the token Returns Type Description IApizrManagerOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Provide your own settings management and token management services Declaration public IApizrManagerOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<TTokenService> tokenServiceFactory, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description System.Func <TSettingsService> settingsServiceFactory A TSettingsService instance factory System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Func <TTokenService> tokenServiceFactory A TTokenService instance factory System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod The method called to refresh the token Returns Type Description IApizrManagerOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithBaseAddress(Func<String>) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrManagerOptionsBuilder WithBaseAddress(Func<string> baseAddressFactory) Parameters Type Name Description System.Func < System.String > baseAddressFactory Your web api base address factory Returns Type Description IApizrManagerOptionsBuilder WithBaseAddress(Func<Uri>) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrManagerOptionsBuilder WithBaseAddress(Func<Uri> baseAddressFactory) Parameters Type Name Description System.Func < System.Uri > baseAddressFactory Your web api base address factory Returns Type Description IApizrManagerOptionsBuilder WithBaseAddress(String) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrManagerOptionsBuilder WithBaseAddress(string baseAddress) Parameters Type Name Description System.String baseAddress Your web api base address Returns Type Description IApizrManagerOptionsBuilder WithBaseAddress(Uri) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrManagerOptionsBuilder WithBaseAddress(Uri baseAddress) Parameters Type Name Description System.Uri baseAddress Your web api base address Returns Type Description IApizrManagerOptionsBuilder WithBasePath(Func<String>) Define your web api base path (could be defined with WebApiAttribute) Declaration public IApizrManagerOptionsBuilder WithBasePath(Func<string> basePathFactory) Parameters Type Name Description System.Func < System.String > basePathFactory Your web api base path factory Returns Type Description IApizrManagerOptionsBuilder WithBasePath(String) Define your web api base path (could be defined with WebApiAttribute) Declaration public IApizrManagerOptionsBuilder WithBasePath(string basePath) Parameters Type Name Description System.String basePath Your web api base path Returns Type Description IApizrManagerOptionsBuilder WithCacheHandler(ICacheHandler) Provide a cache handler to cache data Declaration public IApizrManagerOptionsBuilder WithCacheHandler(ICacheHandler cacheHandler) Parameters Type Name Description ICacheHandler cacheHandler An ICacheHandler mapping implementation instance Returns Type Description IApizrManagerOptionsBuilder WithCacheHandler(Func<ICacheHandler>) Provide a cache handler to cache data Declaration public IApizrManagerOptionsBuilder WithCacheHandler(Func<ICacheHandler> cacheHandlerFactory) Parameters Type Name Description System.Func < ICacheHandler > cacheHandlerFactory An ICacheHandler mapping implementation instance factory Returns Type Description IApizrManagerOptionsBuilder WithConnectivityHandler(IConnectivityHandler) Provide a connectivity handler to check connectivity before sending a request Declaration public IApizrManagerOptionsBuilder WithConnectivityHandler(IConnectivityHandler connectivityHandler) Parameters Type Name Description IConnectivityHandler connectivityHandler An IConnectivityHandler mapping implementation instance Returns Type Description IApizrManagerOptionsBuilder WithConnectivityHandler(Func<IConnectivityHandler>) Provide a connectivity handler Declaration public IApizrManagerOptionsBuilder WithConnectivityHandler(Func<IConnectivityHandler> connectivityHandlerFactory) Parameters Type Name Description System.Func < IConnectivityHandler > connectivityHandlerFactory An IConnectivityHandler mapping implementation instance factory Returns Type Description IApizrManagerOptionsBuilder WithConnectivityHandler(Func<Boolean>) Provide a function to invoke while checking connectivity Declaration public IApizrManagerOptionsBuilder WithConnectivityHandler(Func<bool> connectivityCheckingFunction) Parameters Type Name Description System.Func < System.Boolean > connectivityCheckingFunction A function to invoke while checking connectivity Returns Type Description IApizrManagerOptionsBuilder WithContext(Func<Context>, ApizrDuplicateStrategy) Set the Polly Context Declaration public IApizrManagerOptionsBuilder WithContext(Func<Context> contextFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Merge) Parameters Type Name Description System.Func < Polly.Context > contextFactory The Polly Context to pass through it all ApizrDuplicateStrategy strategy The duplicate strategy if there's another one already (default: Merge) Returns Type Description IApizrManagerOptionsBuilder WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) Catch potential exceptions Declaration public IApizrManagerOptionsBuilder WithExCatching(Action<ApizrException> onException, bool letThrowOnExceptionWithEmptyCache = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters Type Name Description System.Action < ApizrException > onException The exception callback System.Boolean letThrowOnExceptionWithEmptyCache Let throw potential exception if there's no cached data to return (default: true) ApizrDuplicateStrategy strategy The duplicate strategy if there's another callback already (default: Replace) Returns Type Description IApizrManagerOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) Catch potential exceptions Declaration public IApizrManagerOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>> onException, bool letThrowOnExceptionWithEmptyCache = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters Type Name Description System.Action < ApizrException <TResult>> onException The exception callback System.Boolean letThrowOnExceptionWithEmptyCache Let throw potential exception if there's no cached data to return (default: true) ApizrDuplicateStrategy strategy The duplicate strategy if there's another callback already (default: Replace) Returns Type Description IApizrManagerOptionsBuilder Type Parameters Name Description TResult WithHandlerParameter(String, Object) Set some parameters passed through all delegating handlers Declaration public IApizrManagerOptionsBuilder WithHandlerParameter(string key, object value) Parameters Type Name Description System.String key The parameter's key System.Object value The parameter's value Returns Type Description IApizrManagerOptionsBuilder WithHttpClient(Func<HttpMessageHandler, Uri, HttpClient>) Provide a custom HttpClient Declaration public IApizrManagerOptionsBuilder WithHttpClient(Func<HttpMessageHandler, Uri, HttpClient> httpClientFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpMessageHandler , System.Uri , System.Net.Http.HttpClient > httpClientFactory An System.Net.Http.HttpClient instance factory Returns Type Description IApizrManagerOptionsBuilder WithHttpClientHandler(Func<HttpClientHandler>) Provide a custom HttpClientHandler Declaration public IApizrManagerOptionsBuilder WithHttpClientHandler(Func<HttpClientHandler> httpClientHandlerFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpClientHandler > httpClientHandlerFactory An System.Net.Http.HttpClientHandler instance factory Returns Type Description IApizrManagerOptionsBuilder WithHttpClientHandler(HttpClientHandler) Provide a custom HttpClientHandler Declaration public IApizrManagerOptionsBuilder WithHttpClientHandler(HttpClientHandler httpClientHandler) Parameters Type Name Description System.Net.Http.HttpClientHandler httpClientHandler An System.Net.Http.HttpClientHandler instance Returns Type Description IApizrManagerOptionsBuilder WithLoggerFactory(ILoggerFactory) Provide a logger factory Declaration public IApizrManagerOptionsBuilder WithLoggerFactory(ILoggerFactory loggerFactory) Parameters Type Name Description Microsoft.Extensions.Logging.ILoggerFactory loggerFactory The logger factory Returns Type Description IApizrManagerOptionsBuilder WithLoggerFactory(Func<ILoggerFactory>) Provide a logger factory Declaration public IApizrManagerOptionsBuilder WithLoggerFactory(Func<ILoggerFactory> loggerFactory) Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILoggerFactory > loggerFactory The logger factory Returns Type Description IApizrManagerOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration public IApizrManagerOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: All) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: Information) Returns Type Description IApizrManagerOptionsBuilder WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration public IApizrManagerOptionsBuilder WithLogging(Func<HttpTracerMode> httpTracerModeFactory, Func<HttpMessageParts> trafficVerbosityFactory, Func<LogLevel[]> logLevelsFactory) Parameters Type Name Description System.Func < HttpTracerMode > httpTracerModeFactory Http traffic tracing mode System.Func < HttpMessageParts > trafficVerbosityFactory Http traffic tracing verbosity factory System.Func < Microsoft.Extensions.Logging.LogLevel []> logLevelsFactory Log levels factory Returns Type Description IApizrManagerOptionsBuilder WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration public IApizrManagerOptionsBuilder WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])> loggingConfigurationFactory) Parameters Type Name Description System.Func < System.ValueTuple < HttpTracerMode , HttpMessageParts , Microsoft.Extensions.Logging.LogLevel []>> loggingConfigurationFactory Logging configuration factory Returns Type Description IApizrManagerOptionsBuilder WithMappingHandler(IMappingHandler) Provide a mapping handler to map entities Declaration public IApizrManagerOptionsBuilder WithMappingHandler(IMappingHandler mappingHandler) Parameters Type Name Description IMappingHandler mappingHandler An IMappingHandler mapping implementation instance Returns Type Description IApizrManagerOptionsBuilder WithMappingHandler(Func<IMappingHandler>) Provide a mapping handler to map entities Declaration public IApizrManagerOptionsBuilder WithMappingHandler(Func<IMappingHandler> mappingHandlerFactory) Parameters Type Name Description System.Func < IMappingHandler > mappingHandlerFactory An IMappingHandler mapping implementation instance factory Returns Type Description IApizrManagerOptionsBuilder WithPolicyRegistry(IReadOnlyPolicyRegistry<String>) Provide a policy registry Declaration public IApizrManagerOptionsBuilder WithPolicyRegistry(IReadOnlyPolicyRegistry<string> policyRegistry) Parameters Type Name Description Polly.Registry.IReadOnlyPolicyRegistry < System.String > policyRegistry A policy registry instance Returns Type Description IApizrManagerOptionsBuilder WithPolicyRegistry(Func<IReadOnlyPolicyRegistry<String>>) Provide a policy registry Declaration public IApizrManagerOptionsBuilder WithPolicyRegistry(Func<IReadOnlyPolicyRegistry<string>> policyRegistryFactory) Parameters Type Name Description System.Func < Polly.Registry.IReadOnlyPolicyRegistry < System.String >> policyRegistryFactory A policy registry instance factory Returns Type Description IApizrManagerOptionsBuilder WithRefitSettings(RefitSettings) Provide some Refit specific settings Declaration public IApizrManagerOptionsBuilder WithRefitSettings(RefitSettings refitSettings) Parameters Type Name Description Refit.RefitSettings refitSettings A Refit.RefitSettings instance Returns Type Description IApizrManagerOptionsBuilder WithRefitSettings(Func<RefitSettings>) Provide some Refit specific settings Declaration public IApizrManagerOptionsBuilder WithRefitSettings(Func<RefitSettings> refitSettingsFactory) Parameters Type Name Description System.Func < Refit.RefitSettings > refitSettingsFactory A Refit.RefitSettings instance factory Returns Type Description IApizrManagerOptionsBuilder Implements IApizrManagerOptionsBuilder IApizrManagerOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> IApizrManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrGlobalManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrManagerOptionsBuilderBase IApizrGlobalManagerOptionsBuilderBase IApizrCommonOptionsBuilder<TApizrCommonOptions, TApizrCommonOptionsBuilder> IApizrCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> IApizrCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase IApizrProperOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder> IApizrProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> IApizrProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> IApizrSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrSharedRegistrationOptionsBuilder IApizrSharedRegistrationOptionsBuilderBase IApizrGlobalSharedRegistrationOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IMapper) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper)"
  },
  "api/Apizr.Configuring.Manager.html": {
    "href": "api/Apizr.Configuring.Manager.html",
    "title": "Namespace Apizr.Configuring.Manager | Apizr",
    "keywords": "Namespace Apizr.Configuring.Manager Classes ApizrManagerOptions Options available for static registrations ApizrManagerOptions<TWebApi> Options available for static registrations ApizrManagerOptionsBase Options available for both static and extended registrations ApizrManagerOptionsBuilder Builder options available for static registrations Interfaces IApizrExtendedManagerOptionsBuilderBase Builder options available for extended registration IApizrGlobalManagerOptionsBuilderBase Builder options available for both static and extended registrations IApizrGlobalManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Builder options available for both static and extended registrations IApizrManagerOptions Options available for static registrations IApizrManagerOptions<TWebApi> Options available for static registrations IApizrManagerOptionsBase Options available for both static and extended registrations IApizrManagerOptionsBuilder Builder options available for static registrations IApizrManagerOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> Builder options available for static registrations IApizrManagerOptionsBuilderBase Builder options available for both static and extended registrations IApizrManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Builder options available for both static and extended registrations"
  },
  "api/Apizr.Configuring.Manager.IApizrExtendedManagerOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Manager.IApizrExtendedManagerOptionsBuilderBase.html",
    "title": "Interface IApizrExtendedManagerOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrExtendedManagerOptionsBuilderBase Builder options available for extended registration Namespace : Apizr.Configuring.Manager Assembly : Apizr.dll Syntax public interface IApizrExtendedManagerOptionsBuilderBase : IApizrExtendedCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder)"
  },
  "api/Apizr.Configuring.Manager.IApizrGlobalManagerOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Manager.IApizrGlobalManagerOptionsBuilderBase.html",
    "title": "Interface IApizrGlobalManagerOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrGlobalManagerOptionsBuilderBase Builder options available for both static and extended registrations Namespace : Apizr.Configuring.Manager Assembly : Apizr.dll Syntax public interface IApizrGlobalManagerOptionsBuilderBase : IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Configuring.Manager.IApizrGlobalManagerOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Manager.IApizrGlobalManagerOptionsBuilderBase-2.html",
    "title": "Interface IApizrGlobalManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrGlobalManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Builder options available for both static and extended registrations Inherited Members IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Manager Assembly : Apizr.dll Syntax public interface IApizrGlobalManagerOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> : IApizrGlobalManagerOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrOptions : IApizrManagerOptionsBase where TApizrOptionsBuilder : IApizrGlobalManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Type Parameters Name Description TApizrOptions TApizrOptionsBuilder Extension Methods FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Configuring.Manager.IApizrManagerOptions.html": {
    "href": "api/Apizr.Configuring.Manager.IApizrManagerOptions.html",
    "title": "Interface IApizrManagerOptions | Apizr",
    "keywords": "Interface IApizrManagerOptions Options available for static registrations Inherited Members IApizrCommonOptions.LoggerFactoryFactory IApizrCommonOptions.PolicyRegistryFactory IApizrCommonOptions.RefitSettingsFactory IApizrCommonOptions.ConnectivityHandlerFactory IApizrCommonOptions.CacheHandlerFactory IApizrCommonOptions.MappingHandlerFactory IApizrCommonOptionsBase.RefitSettings IApizrProperOptions.LoggerFactory IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.PolicyRegistryKeys IApizrProperOptionsBase.Logger IApizrSharedRegistrationOptions.BaseUriFactory IApizrSharedRegistrationOptions.BaseAddressFactory IApizrSharedRegistrationOptions.BasePathFactory IApizrSharedRegistrationOptions.HttpTracerModeFactory IApizrSharedRegistrationOptions.TrafficVerbosityFactory IApizrSharedRegistrationOptions.LogLevelsFactory IApizrSharedRegistrationOptions.HttpClientHandlerFactory IApizrSharedRegistrationOptions.HttpClientFactory IApizrSharedRegistrationOptions.DelegatingHandlersFactories IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.ContextFactory IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.OnException IApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache IApizrGlobalSharedOptionsBase.HandlersParameters Namespace : Apizr.Configuring.Manager Assembly : Apizr.dll Syntax public interface IApizrManagerOptions : IApizrManagerOptionsBase, IApizrCommonOptions, IApizrCommonOptionsBase, IApizrProperOptions, IApizrProperOptionsBase, IApizrSharedRegistrationOptions, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Configuring.Manager.IApizrManagerOptions-1.html": {
    "href": "api/Apizr.Configuring.Manager.IApizrManagerOptions-1.html",
    "title": "Interface IApizrManagerOptions<TWebApi> | Apizr",
    "keywords": "Interface IApizrManagerOptions<TWebApi> Options available for static registrations Inherited Members IApizrCommonOptionsBase.RefitSettings IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.PolicyRegistryKeys IApizrProperOptionsBase.Logger IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.ContextFactory IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.OnException IApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache IApizrGlobalSharedOptionsBase.HandlersParameters Namespace : Apizr.Configuring.Manager Assembly : Apizr.dll Syntax public interface IApizrManagerOptions<TWebApi> : IApizrManagerOptionsBase, IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Type Parameters Name Description TWebApi"
  },
  "api/Apizr.Configuring.Manager.IApizrManagerOptionsBase.html": {
    "href": "api/Apizr.Configuring.Manager.IApizrManagerOptionsBase.html",
    "title": "Interface IApizrManagerOptionsBase | Apizr",
    "keywords": "Interface IApizrManagerOptionsBase Options available for both static and extended registrations Inherited Members IApizrCommonOptionsBase.RefitSettings IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.PolicyRegistryKeys IApizrProperOptionsBase.Logger IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.ContextFactory IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.OnException IApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache IApizrGlobalSharedOptionsBase.HandlersParameters Namespace : Apizr.Configuring.Manager Assembly : Apizr.dll Syntax public interface IApizrManagerOptionsBase : IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Configuring.Manager.IApizrManagerOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Manager.IApizrManagerOptionsBuilder.html",
    "title": "Interface IApizrManagerOptionsBuilder | Apizr",
    "keywords": "Interface IApizrManagerOptionsBuilder Builder options available for static registrations Inherited Members IApizrCommonOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithPolicyRegistry(IReadOnlyPolicyRegistry<String>) IApizrCommonOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithPolicyRegistry(Func<IReadOnlyPolicyRegistry<String>>) IApizrCommonOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithRefitSettings(Func<RefitSettings>) IApizrCommonOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithConnectivityHandler(Func<IConnectivityHandler>) IApizrCommonOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithCacheHandler(Func<ICacheHandler>) IApizrCommonOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithLoggerFactory(ILoggerFactory) IApizrCommonOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithLoggerFactory(Func<ILoggerFactory>) IApizrCommonOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithMappingHandler(Func<IMappingHandler>) IApizrGlobalCommonOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithBaseAddress(Func<String>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithBaseAddress(Func<Uri>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithBasePath(Func<String>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithHttpClientHandler(Func<HttpClientHandler>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithHttpClient(Func<HttpMessageHandler, Uri, HttpClient>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, String>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.AddDelegatingHandler<THandler>(Func<ILogger, THandler>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.AddDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithLogging(Func<(T1, T2, T3)<HttpTracerMode, HttpMessageParts, LogLevel[]>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Manager Assembly : Apizr.dll Syntax public interface IApizrManagerOptionsBuilder : IApizrManagerOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrManagerOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrGlobalManagerOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrManagerOptionsBuilderBase, IApizrGlobalManagerOptionsBuilderBase, IApizrCommonOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrCommonOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrProperOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrProperOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilder<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrManagerOptions, IApizrManagerOptionsBuilder>, IApizrSharedRegistrationOptionsBuilder, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IMapper) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper)"
  },
  "api/Apizr.Configuring.Manager.IApizrManagerOptionsBuilder-2.html": {
    "href": "api/Apizr.Configuring.Manager.IApizrManagerOptionsBuilder-2.html",
    "title": "Interface IApizrManagerOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrManagerOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> Builder options available for static registrations Inherited Members IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithPolicyRegistry(IReadOnlyPolicyRegistry<String>) IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithPolicyRegistry(Func<IReadOnlyPolicyRegistry<String>>) IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithRefitSettings(Func<RefitSettings>) IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithConnectivityHandler(Func<IConnectivityHandler>) IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithCacheHandler(Func<ICacheHandler>) IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithLoggerFactory(ILoggerFactory) IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithLoggerFactory(Func<ILoggerFactory>) IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithMappingHandler(Func<IMappingHandler>) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(Func<String>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(Func<Uri>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithBasePath(Func<String>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithHttpClientHandler(Func<HttpClientHandler>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithHttpClient(Func<HttpMessageHandler, Uri, HttpClient>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, String>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.AddDelegatingHandler<THandler>(Func<ILogger, THandler>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.AddDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>.WithLogging(Func<(T1, T2, T3)<HttpTracerMode, HttpMessageParts, LogLevel[]>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Manager Assembly : Apizr.dll Syntax public interface IApizrManagerOptionsBuilder<out TApizrOptions, out TApizrOptionsBuilder> : IApizrManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrManagerOptionsBuilderBase, IApizrGlobalManagerOptionsBuilderBase, IApizrCommonOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>, IApizrCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrProperOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>, IApizrProperOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrSharedRegistrationOptionsBuilder, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrOptions : IApizrManagerOptionsBase where TApizrOptionsBuilder : IApizrManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Type Parameters Name Description TApizrOptions TApizrOptionsBuilder Extension Methods FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IMapper) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper)"
  },
  "api/Apizr.Configuring.Manager.IApizrManagerOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Manager.IApizrManagerOptionsBuilderBase.html",
    "title": "Interface IApizrManagerOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrManagerOptionsBuilderBase Builder options available for both static and extended registrations Namespace : Apizr.Configuring.Manager Assembly : Apizr.dll Syntax public interface IApizrManagerOptionsBuilderBase : IApizrCommonOptionsBuilderBase, IApizrProperOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalManagerOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IMapper) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper)"
  },
  "api/Apizr.Configuring.Manager.IApizrManagerOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Manager.IApizrManagerOptionsBuilderBase-2.html",
    "title": "Interface IApizrManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Builder options available for both static and extended registrations Inherited Members IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Manager Assembly : Apizr.dll Syntax public interface IApizrManagerOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> : IApizrGlobalManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrProperOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrManagerOptionsBuilderBase, IApizrCommonOptionsBuilderBase, IApizrProperOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalManagerOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrOptions : IApizrManagerOptionsBase where TApizrOptionsBuilder : IApizrManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Type Parameters Name Description TApizrOptions TApizrOptionsBuilder Extension Methods FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IMapper) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder, IConfigurationProvider) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper)"
  },
  "api/Apizr.Configuring.Proper.ApizrProperOptions.html": {
    "href": "api/Apizr.Configuring.Proper.ApizrProperOptions.html",
    "title": "Class ApizrProperOptions | Apizr",
    "keywords": "Class ApizrProperOptions Options available at proper level for static registrations Inheritance System.Object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase ApizrProperOptionsBase ApizrProperOptions Implements IApizrProperOptions IApizrProperOptionsBase IApizrSharedRegistrationOptions IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Inherited Members ApizrProperOptionsBase.WebApiType ApizrProperOptionsBase.PolicyRegistryKeys ApizrProperOptionsBase.Logger ApizrGlobalSharedRegistrationOptionsBase.BaseUri ApizrGlobalSharedRegistrationOptionsBase.BaseAddress ApizrGlobalSharedRegistrationOptionsBase.BasePath ApizrGlobalSharedRegistrationOptionsBase.ContextFactory ApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache ApizrGlobalSharedOptionsBase.HandlersParameters System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public class ApizrProperOptions : ApizrProperOptionsBase, IApizrProperOptions, IApizrProperOptionsBase, IApizrSharedRegistrationOptions, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Constructors ApizrProperOptions(IApizrSharedRegistrationOptions, Type, String[], String[], String, String, IDictionary<String, Object>, Nullable<HttpTracerMode>, Nullable<HttpMessageParts>, LogLevel[]) The common options constructor Declaration public ApizrProperOptions(IApizrSharedRegistrationOptions sharedOptions, Type webApiType, string[] assemblyPolicyRegistryKeys, string[] webApiPolicyRegistryKeys, string baseAddress, string basePath, IDictionary<string, object> handlersParameters, HttpTracerMode? httpTracerMode, HttpMessageParts? trafficVerbosity, params LogLevel[] logLevels) Parameters Type Name Description IApizrSharedRegistrationOptions sharedOptions The shared options System.Type webApiType The web api type System.String [] assemblyPolicyRegistryKeys Global policies System.String [] webApiPolicyRegistryKeys Specific policies System.String baseAddress The web api base address System.String basePath The web api base path System.Collections.Generic.IDictionary < System.String , System.Object > handlersParameters Some handlers parameters System.Nullable < HttpTracerMode > httpTracerMode The http tracer mode System.Nullable < HttpMessageParts > trafficVerbosity The traffic verbosity Microsoft.Extensions.Logging.LogLevel [] logLevels The log levels Properties BaseAddressFactory Base address factory Declaration public Func<string> BaseAddressFactory { get; set; } Property Value Type Description System.Func < System.String > BasePathFactory Base path factory Declaration public Func<string> BasePathFactory { get; set; } Property Value Type Description System.Func < System.String > BaseUriFactory Base uri factory Declaration public Func<Uri> BaseUriFactory { get; set; } Property Value Type Description System.Func < System.Uri > DelegatingHandlersFactories Delegating handlers factories Declaration public IDictionary<Type, Func<ILogger, IApizrManagerOptionsBase, DelegatingHandler>> DelegatingHandlersFactories { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , System.Func < Microsoft.Extensions.Logging.ILogger , IApizrManagerOptionsBase , System.Net.Http.DelegatingHandler >> HttpClientFactory HttpClient factory Declaration public Func<HttpMessageHandler, Uri, HttpClient> HttpClientFactory { get; set; } Property Value Type Description System.Func < System.Net.Http.HttpMessageHandler , System.Uri , System.Net.Http.HttpClient > HttpClientHandlerFactory HttpClientHandler factory Declaration public Func<HttpClientHandler> HttpClientHandlerFactory { get; set; } Property Value Type Description System.Func < System.Net.Http.HttpClientHandler > HttpTracerModeFactory Http traffic tracing mode factory Declaration public Func<HttpTracerMode> HttpTracerModeFactory { get; set; } Property Value Type Description System.Func < HttpTracerMode > LoggerFactory The Logger factory Declaration public Func<ILoggerFactory, string, ILogger> LoggerFactory { get; } Property Value Type Description System.Func < Microsoft.Extensions.Logging.ILoggerFactory , System.String , Microsoft.Extensions.Logging.ILogger > LogLevelsFactory Log levels factory Declaration public Func<LogLevel[]> LogLevelsFactory { get; set; } Property Value Type Description System.Func < Microsoft.Extensions.Logging.LogLevel []> TrafficVerbosityFactory Http traffic tracing verbosity factory Declaration public Func<HttpMessageParts> TrafficVerbosityFactory { get; set; } Property Value Type Description System.Func < HttpMessageParts > Implements IApizrProperOptions IApizrProperOptionsBase IApizrSharedRegistrationOptions IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Configuring.Proper.ApizrProperOptionsBase.html": {
    "href": "api/Apizr.Configuring.Proper.ApizrProperOptionsBase.html",
    "title": "Class ApizrProperOptionsBase | Apizr",
    "keywords": "Class ApizrProperOptionsBase Options available at proper level for both static and extended registrations Inheritance System.Object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase ApizrProperOptionsBase ApizrProperOptions ApizrExtendedProperOptions Implements IApizrProperOptionsBase IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Inherited Members ApizrGlobalSharedRegistrationOptionsBase.BaseUri ApizrGlobalSharedRegistrationOptionsBase.BaseAddress ApizrGlobalSharedRegistrationOptionsBase.BasePath ApizrGlobalSharedRegistrationOptionsBase.ContextFactory ApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache ApizrGlobalSharedOptionsBase.HandlersParameters System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public abstract class ApizrProperOptionsBase : ApizrGlobalSharedRegistrationOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Constructors ApizrProperOptionsBase(IApizrGlobalSharedRegistrationOptionsBase, Type, String[], String[]) The proper options constructor Declaration protected ApizrProperOptionsBase(IApizrGlobalSharedRegistrationOptionsBase sharedOptions, Type webApiType, string[] assemblyPolicyRegistryKeys, string[] webApiPolicyRegistryKeys) Parameters Type Name Description IApizrGlobalSharedRegistrationOptionsBase sharedOptions The shared options System.Type webApiType The web api type System.String [] assemblyPolicyRegistryKeys Global policies System.String [] webApiPolicyRegistryKeys Specific policies Properties Logger The logger instance Declaration public ILogger Logger { get; protected set; } Property Value Type Description Microsoft.Extensions.Logging.ILogger PolicyRegistryKeys Policy keys from the registry Declaration public string[] PolicyRegistryKeys { get; } Property Value Type Description System.String [] WebApiType Web api interface type Declaration public Type WebApiType { get; } Property Value Type Description System.Type Implements IApizrProperOptionsBase IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Configuring.Proper.ApizrProperOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Proper.ApizrProperOptionsBuilder.html",
    "title": "Class ApizrProperOptionsBuilder | Apizr",
    "keywords": "Class ApizrProperOptionsBuilder Builder options available at proper level for static registrations Inheritance System.Object ApizrProperOptionsBuilder Implements IApizrProperOptionsBuilder IApizrProperOptionsBuilder < IApizrProperOptions , IApizrProperOptionsBuilder > IApizrProperOptionsBuilderBase < IApizrProperOptions , IApizrProperOptionsBuilder > IApizrGlobalProperOptionsBuilderBase < IApizrProperOptions , IApizrProperOptionsBuilder > IApizrProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase IApizrSharedRegistrationOptionsBuilder < IApizrProperOptions , IApizrProperOptionsBuilder > IApizrSharedRegistrationOptionsBuilderBase < IApizrProperOptions , IApizrProperOptionsBuilder > IApizrGlobalSharedRegistrationOptionsBuilderBase < IApizrProperOptions , IApizrProperOptionsBuilder > IApizrGlobalSharedOptionsBuilderBase < IApizrProperOptions , IApizrProperOptionsBuilder > IApizrSharedRegistrationOptionsBuilder IApizrSharedRegistrationOptionsBuilderBase IApizrGlobalSharedRegistrationOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public class ApizrProperOptionsBuilder : IApizrProperOptionsBuilder, IApizrProperOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrProperOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrSharedRegistrationOptionsBuilder, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Fields Options The proper options Declaration protected readonly ApizrProperOptions Options Field Value Type Description ApizrProperOptions Methods AddDelegatingHandler<THandler>(THandler) Add a custom delegating handler Declaration public IApizrProperOptionsBuilder AddDelegatingHandler<THandler>(THandler delegatingHandler) where THandler : DelegatingHandler Parameters Type Name Description THandler delegatingHandler A delegating handler Returns Type Description IApizrProperOptionsBuilder Type Parameters Name Description THandler AddDelegatingHandler<THandler>(Func<ILogger, THandler>) Add a custom delegating handler Declaration public IApizrProperOptionsBuilder AddDelegatingHandler<THandler>(Func<ILogger, THandler> delegatingHandlerFactory) where THandler : DelegatingHandler Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , THandler> delegatingHandlerFactory A delegating handler factory Returns Type Description IApizrProperOptionsBuilder Type Parameters Name Description THandler AddDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>) Add a custom delegating handler Declaration public IApizrProperOptionsBuilder AddDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler> delegatingHandlerFactory) where THandler : DelegatingHandler Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , IApizrManagerOptionsBase , THandler> delegatingHandlerFactory A delegating handler factory Returns Type Description IApizrProperOptionsBuilder Type Parameters Name Description THandler WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) Provide a method to refresh the authorization token when needed Declaration public IApizrProperOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory Refresh token method called when expired or empty Returns Type Description IApizrProperOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Provide your own settings management service and a method to refresh the token Declaration public IApizrProperOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description TSettingsService settingsService A TSettingsService instance System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory The method factory called to refresh the token Returns Type Description IApizrProperOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Provide your own settings management service and a method to refresh the token Declaration public IApizrProperOptionsBuilder WithAuthenticationHandler<TSettingsService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Func <TSettingsService> settingsServiceFactory A TSettingsService instance factory System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory The method factory called to refresh the token Returns Type Description IApizrProperOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler>) Provide your own AuthenticationHandlerBase implementation factory Declaration public IApizrProperOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , IApizrManagerOptionsBase , TAuthenticationHandler> authenticationHandlerFactory A TAuthenticationHandler instance factory Returns Type Description IApizrProperOptionsBuilder Type Parameters Name Description TAuthenticationHandler Your AuthenticationHandlerBase implementation WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, String>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Provide your own settings management and token management services Declaration public IApizrProperOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, TTokenService tokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description TSettingsService settingsService A TSettingsService instance System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving TTokenService tokenService A TTokenService instance System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod The method called to refresh the token Returns Type Description IApizrProperOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Provide your own settings management and token management services Declaration public IApizrProperOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<TTokenService> tokenServiceFactory, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description System.Func <TSettingsService> settingsServiceFactory A TSettingsService instance factory System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Func <TTokenService> tokenServiceFactory A TTokenService instance factory System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod The method called to refresh the token Returns Type Description IApizrProperOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithBaseAddress(Func<String>) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrProperOptionsBuilder WithBaseAddress(Func<string> baseAddressFactory) Parameters Type Name Description System.Func < System.String > baseAddressFactory Your web api base address factory Returns Type Description IApizrProperOptionsBuilder WithBaseAddress(Func<Uri>) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrProperOptionsBuilder WithBaseAddress(Func<Uri> baseAddressFactory) Parameters Type Name Description System.Func < System.Uri > baseAddressFactory Your web api base address factory Returns Type Description IApizrProperOptionsBuilder WithBaseAddress(String) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrProperOptionsBuilder WithBaseAddress(string baseAddress) Parameters Type Name Description System.String baseAddress Your web api base address Returns Type Description IApizrProperOptionsBuilder WithBaseAddress(Uri) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrProperOptionsBuilder WithBaseAddress(Uri baseAddress) Parameters Type Name Description System.Uri baseAddress Your web api base address Returns Type Description IApizrProperOptionsBuilder WithBasePath(Func<String>) Define your web api base path (could be defined with WebApiAttribute) Declaration public IApizrProperOptionsBuilder WithBasePath(Func<string> basePathFactory) Parameters Type Name Description System.Func < System.String > basePathFactory Your web api base path factory Returns Type Description IApizrProperOptionsBuilder WithBasePath(String) Define your web api base path (could be defined with WebApiAttribute) Declaration public IApizrProperOptionsBuilder WithBasePath(string basePath) Parameters Type Name Description System.String basePath Your web api base path Returns Type Description IApizrProperOptionsBuilder WithContext(Func<Context>, ApizrDuplicateStrategy) Set the Polly Context Declaration public IApizrProperOptionsBuilder WithContext(Func<Context> contextFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Merge) Parameters Type Name Description System.Func < Polly.Context > contextFactory The Polly Context to pass through it all ApizrDuplicateStrategy strategy The duplicate strategy if there's another one already (default: Merge) Returns Type Description IApizrProperOptionsBuilder WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) Catch potential exceptions Declaration public IApizrProperOptionsBuilder WithExCatching(Action<ApizrException> onException, bool letThrowOnExceptionWithEmptyCache = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters Type Name Description System.Action < ApizrException > onException The exception callback System.Boolean letThrowOnExceptionWithEmptyCache Let throw potential exception if there's no cached data to return (default: true) ApizrDuplicateStrategy strategy The duplicate strategy if there's another callback already (default: Replace) Returns Type Description IApizrProperOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) Catch potential exceptions Declaration public IApizrProperOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>> onException, bool letThrowOnExceptionWithEmptyCache = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters Type Name Description System.Action < ApizrException <TResult>> onException The exception callback System.Boolean letThrowOnExceptionWithEmptyCache Let throw potential exception if there's no cached data to return (default: true) ApizrDuplicateStrategy strategy The duplicate strategy if there's another callback already (default: Replace) Returns Type Description IApizrProperOptionsBuilder Type Parameters Name Description TResult WithHandlerParameter(String, Object) Set some parameters passed through all delegating handlers Declaration public IApizrProperOptionsBuilder WithHandlerParameter(string key, object value) Parameters Type Name Description System.String key The parameter's key System.Object value The parameter's value Returns Type Description IApizrProperOptionsBuilder WithHttpClient(Func<HttpMessageHandler, Uri, HttpClient>) Provide a custom HttpClient Declaration public IApizrProperOptionsBuilder WithHttpClient(Func<HttpMessageHandler, Uri, HttpClient> httpClientFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpMessageHandler , System.Uri , System.Net.Http.HttpClient > httpClientFactory An System.Net.Http.HttpClient instance factory Returns Type Description IApizrProperOptionsBuilder WithHttpClientHandler(Func<HttpClientHandler>) Provide a custom HttpClientHandler Declaration public IApizrProperOptionsBuilder WithHttpClientHandler(Func<HttpClientHandler> httpClientHandlerFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpClientHandler > httpClientHandlerFactory An System.Net.Http.HttpClientHandler instance factory Returns Type Description IApizrProperOptionsBuilder WithHttpClientHandler(HttpClientHandler) Provide a custom HttpClientHandler Declaration public IApizrProperOptionsBuilder WithHttpClientHandler(HttpClientHandler httpClientHandler) Parameters Type Name Description System.Net.Http.HttpClientHandler httpClientHandler An System.Net.Http.HttpClientHandler instance Returns Type Description IApizrProperOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration public IApizrProperOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: All) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: Information) Returns Type Description IApizrProperOptionsBuilder WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration public IApizrProperOptionsBuilder WithLogging(Func<HttpTracerMode> httpTracerModeFactory, Func<HttpMessageParts> trafficVerbosityFactory, Func<LogLevel[]> logLevelsFactory) Parameters Type Name Description System.Func < HttpTracerMode > httpTracerModeFactory Http traffic tracing mode System.Func < HttpMessageParts > trafficVerbosityFactory Http traffic tracing verbosity factory System.Func < Microsoft.Extensions.Logging.LogLevel []> logLevelsFactory Log levels factory Returns Type Description IApizrProperOptionsBuilder WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration public IApizrProperOptionsBuilder WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])> loggingConfigurationFactory) Parameters Type Name Description System.Func < System.ValueTuple < HttpTracerMode , HttpMessageParts , Microsoft.Extensions.Logging.LogLevel []>> loggingConfigurationFactory Logging configuration factory Returns Type Description IApizrProperOptionsBuilder Implements IApizrProperOptionsBuilder IApizrProperOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder> IApizrProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> IApizrProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> IApizrSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrSharedRegistrationOptionsBuilder IApizrSharedRegistrationOptionsBuilderBase IApizrGlobalSharedRegistrationOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Configuring.Proper.html": {
    "href": "api/Apizr.Configuring.Proper.html",
    "title": "Namespace Apizr.Configuring.Proper | Apizr",
    "keywords": "Namespace Apizr.Configuring.Proper Classes ApizrProperOptions Options available at proper level for static registrations ApizrProperOptionsBase Options available at proper level for both static and extended registrations ApizrProperOptionsBuilder Builder options available at proper level for static registrations Interfaces IApizrExtendedProperOptionsBuilderBase Builder options available at proper level for extended registration IApizrGlobalProperOptionsBuilderBase Builder options available at proper level for both static and extended registrations IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> Builder options available at proper level for both static and extended registrations IApizrProperOptions Options available at proper level for static registrations IApizrProperOptionsBase Options available at proper level for both static and extended registrations IApizrProperOptionsBuilder IApizrProperOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder> Builder options available at proper level for static registrations IApizrProperOptionsBuilderBase Builder options available at proper level for both static and extended registrations IApizrProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> Builder options available at proper level for both static and extended registrations"
  },
  "api/Apizr.Configuring.Proper.IApizrExtendedProperOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrExtendedProperOptionsBuilderBase.html",
    "title": "Interface IApizrExtendedProperOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrExtendedProperOptionsBuilderBase Builder options available at proper level for extended registration Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public interface IApizrExtendedProperOptionsBuilderBase : IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Configuring.Proper.IApizrGlobalProperOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrGlobalProperOptionsBuilderBase.html",
    "title": "Interface IApizrGlobalProperOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrGlobalProperOptionsBuilderBase Builder options available at proper level for both static and extended registrations Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public interface IApizrGlobalProperOptionsBuilderBase : IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Configuring.Proper.IApizrGlobalProperOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrGlobalProperOptionsBuilderBase-2.html",
    "title": "Interface IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> Builder options available at proper level for both static and extended registrations Inherited Members IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public interface IApizrGlobalProperOptionsBuilderBase<out TApizrProperOptions, out TApizrProperOptionsBuilder> : IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrProperOptions : IApizrProperOptionsBase where TApizrProperOptionsBuilder : IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> Type Parameters Name Description TApizrProperOptions TApizrProperOptionsBuilder Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Configuring.Proper.IApizrProperOptions.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrProperOptions.html",
    "title": "Interface IApizrProperOptions | Apizr",
    "keywords": "Interface IApizrProperOptions Options available at proper level for static registrations Inherited Members IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.PolicyRegistryKeys IApizrProperOptionsBase.Logger IApizrSharedRegistrationOptions.BaseUriFactory IApizrSharedRegistrationOptions.BaseAddressFactory IApizrSharedRegistrationOptions.BasePathFactory IApizrSharedRegistrationOptions.HttpTracerModeFactory IApizrSharedRegistrationOptions.TrafficVerbosityFactory IApizrSharedRegistrationOptions.LogLevelsFactory IApizrSharedRegistrationOptions.HttpClientHandlerFactory IApizrSharedRegistrationOptions.HttpClientFactory IApizrSharedRegistrationOptions.DelegatingHandlersFactories IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.ContextFactory IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.OnException IApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache IApizrGlobalSharedOptionsBase.HandlersParameters Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public interface IApizrProperOptions : IApizrProperOptionsBase, IApizrSharedRegistrationOptions, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Properties LoggerFactory The Logger factory Declaration Func<ILoggerFactory, string, ILogger> LoggerFactory { get; } Property Value Type Description System.Func < Microsoft.Extensions.Logging.ILoggerFactory , System.String , Microsoft.Extensions.Logging.ILogger >"
  },
  "api/Apizr.Configuring.Proper.IApizrProperOptionsBase.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrProperOptionsBase.html",
    "title": "Interface IApizrProperOptionsBase | Apizr",
    "keywords": "Interface IApizrProperOptionsBase Options available at proper level for both static and extended registrations Inherited Members IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.ContextFactory IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.OnException IApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache IApizrGlobalSharedOptionsBase.HandlersParameters Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public interface IApizrProperOptionsBase : IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Properties Logger The logger instance Declaration ILogger Logger { get; } Property Value Type Description Microsoft.Extensions.Logging.ILogger PolicyRegistryKeys Policy keys from the registry Declaration string[] PolicyRegistryKeys { get; } Property Value Type Description System.String [] WebApiType Web api interface type Declaration Type WebApiType { get; } Property Value Type Description System.Type"
  },
  "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilder.html",
    "title": "Interface IApizrProperOptionsBuilder | Apizr",
    "keywords": "Interface IApizrProperOptionsBuilder Inherited Members IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithBaseAddress(Func<String>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithBaseAddress(Func<Uri>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithBasePath(Func<String>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithHttpClientHandler(Func<HttpClientHandler>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithHttpClient(Func<HttpMessageHandler, Uri, HttpClient>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, String>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.AddDelegatingHandler<THandler>(Func<ILogger, THandler>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.AddDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>.WithLogging(Func<(T1, T2, T3)<HttpTracerMode, HttpMessageParts, LogLevel[]>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public interface IApizrProperOptionsBuilder : IApizrProperOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrProperOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilder<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrProperOptions, IApizrProperOptionsBuilder>, IApizrSharedRegistrationOptionsBuilder, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilder-2.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilder-2.html",
    "title": "Interface IApizrProperOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrProperOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder> Builder options available at proper level for static registrations Inherited Members IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(Func<String>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(Func<Uri>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBasePath(Func<String>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHttpClientHandler(Func<HttpClientHandler>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHttpClient(Func<HttpMessageHandler, Uri, HttpClient>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, String>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.AddDelegatingHandler<THandler>(Func<ILogger, THandler>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.AddDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>.WithLogging(Func<(T1, T2, T3)<HttpTracerMode, HttpMessageParts, LogLevel[]>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public interface IApizrProperOptionsBuilder<out TApizrProperOptions, out TApizrProperOptionsBuilder> : IApizrProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilder<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrSharedRegistrationOptionsBuilder, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrProperOptions : IApizrProperOptionsBase where TApizrProperOptionsBuilder : IApizrProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> Type Parameters Name Description TApizrProperOptions TApizrProperOptionsBuilder Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilderBase.html",
    "title": "Interface IApizrProperOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrProperOptionsBuilderBase Builder options available at proper level for both static and extended registrations Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public interface IApizrProperOptionsBuilderBase : IApizrGlobalProperOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Proper.IApizrProperOptionsBuilderBase-2.html",
    "title": "Interface IApizrProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> Builder options available at proper level for both static and extended registrations Inherited Members IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Proper Assembly : Apizr.dll Syntax public interface IApizrProperOptionsBuilderBase<out TApizrProperOptions, out TApizrProperOptionsBuilder> : IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder>, IApizrProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrProperOptions : IApizrProperOptionsBase where TApizrProperOptionsBuilder : IApizrProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> Type Parameters Name Description TApizrProperOptions TApizrProperOptionsBuilder Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Configuring.ReadAllHandlerParameterAttribute.html": {
    "href": "api/Apizr.Configuring.ReadAllHandlerParameterAttribute.html",
    "title": "Class ReadAllHandlerParameterAttribute | Apizr",
    "keywords": "Class ReadAllHandlerParameterAttribute Inheritance System.Object System.Attribute Refit.PropertyAttribute HandlerParameterAttribute CrudHandlerParameterAttribute ReadAllHandlerParameterAttribute ReadAllPriorityAttribute Inherited Members HandlerParameterAttribute.Value Refit.PropertyAttribute.Key System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public abstract class ReadAllHandlerParameterAttribute : CrudHandlerParameterAttribute Constructors ReadAllHandlerParameterAttribute(String, Object) Declaration protected ReadAllHandlerParameterAttribute(string key, object value) Parameters Type Name Description System.String key System.Object value"
  },
  "api/Apizr.Configuring.ReadHandlerParameterAttribute.html": {
    "href": "api/Apizr.Configuring.ReadHandlerParameterAttribute.html",
    "title": "Class ReadHandlerParameterAttribute | Apizr",
    "keywords": "Class ReadHandlerParameterAttribute Inheritance System.Object System.Attribute Refit.PropertyAttribute HandlerParameterAttribute CrudHandlerParameterAttribute ReadHandlerParameterAttribute ReadPriorityAttribute Inherited Members HandlerParameterAttribute.Value Refit.PropertyAttribute.Key System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public abstract class ReadHandlerParameterAttribute : CrudHandlerParameterAttribute Constructors ReadHandlerParameterAttribute(String, Object) Declaration protected ReadHandlerParameterAttribute(string key, object value) Parameters Type Name Description System.String key System.Object value"
  },
  "api/Apizr.Configuring.Registry.ApizrRegistry.html": {
    "href": "api/Apizr.Configuring.Registry.ApizrRegistry.html",
    "title": "Class ApizrRegistry | Apizr",
    "keywords": "Class ApizrRegistry Registry options available for static registrations Inheritance System.Object ApizrRegistryBase ApizrRegistry Implements IApizrRegistry IApizrEnumerableRegistry System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.Type , System.Func < IApizrManager >>> System.Collections.IEnumerable Inherited Members ApizrRegistryBase.GetEnumerator() ApizrRegistryBase.IEnumerable.GetEnumerator() ApizrRegistryBase.GetCrudManagerFor<T>() ApizrRegistryBase.GetCrudManagerFor<T, TKey>() ApizrRegistryBase.GetCrudManagerFor<T, TKey, TReadAllResult>() ApizrRegistryBase.GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrRegistryBase.GetManagerFor<TWebApi>() ApizrRegistryBase.TryGetCrudManagerFor<T>(IApizrManager<ICrudApi<T, Int32, IEnumerable<T>, IDictionary<String, Object>>>) ApizrRegistryBase.TryGetCrudManagerFor<T, TKey>(IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<String, Object>>>) ApizrRegistryBase.TryGetCrudManagerFor<T, TKey, TReadAllResult>(IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<String, Object>>>) ApizrRegistryBase.TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>) ApizrRegistryBase.TryGetManagerFor<TWebApi>(IApizrManager<TWebApi>) ApizrRegistryBase.Count ApizrRegistryBase.ContainsCrudManagerFor<T>() ApizrRegistryBase.ContainsCrudManagerFor<T, TKey>() ApizrRegistryBase.ContainsCrudManagerFor<T, TKey, TReadAllResult>() ApizrRegistryBase.ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrRegistryBase.ContainsManagerFor<TWebApi>() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Registry Assembly : Apizr.dll Syntax public class ApizrRegistry : ApizrRegistryBase, IApizrRegistry, IApizrEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>, IEnumerable Methods AddOrUpdateManager(Type, Func<IApizrManager>) Declaration public void AddOrUpdateManager(Type webApiType, Func<IApizrManager> managerFactory) Parameters Type Name Description System.Type webApiType System.Func < IApizrManager > managerFactory AddOrUpdateManagerFor<TWebApi>(Func<IApizrManager<TWebApi>>) Declaration public void AddOrUpdateManagerFor<TWebApi>(Func<IApizrManager<TWebApi>> managerFactory) Parameters Type Name Description System.Func < IApizrManager <TWebApi>> managerFactory Type Parameters Name Description TWebApi Populate(Action<Type, Func<Object>>) Populate all registered types and its factories Declaration public void Populate(Action<Type, Func<object>> populateAction) Parameters Type Name Description System.Action < System.Type , System.Func < System.Object >> populateAction The action to execute when populating Implements IApizrRegistry IApizrEnumerableRegistry System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods FileTransferRegistryExtensions.GetUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.TryGetUploadManager(IApizrEnumerableRegistry, out IApizrUploadManager) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi>) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetDownloadManager(IApizrEnumerableRegistry, out IApizrDownloadManager) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi>) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManager(IApizrEnumerableRegistry, out IApizrTransferManager) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.ContainsUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.CreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.CreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity>(IApizrEnumerableRegistry, Int32, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, Int32, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity>(IApizrEnumerableRegistry, Int32, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, Int32, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity>(IApizrEnumerableRegistry, Int32, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ClearCacheAsync<TWebApi>(IApizrEnumerableRegistry, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TResult>>>) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<CancellationToken, TWebApi, Task<TResult>>>, CancellationToken)"
  },
  "api/Apizr.Configuring.Registry.ApizrRegistryBase.html": {
    "href": "api/Apizr.Configuring.Registry.ApizrRegistryBase.html",
    "title": "Class ApizrRegistryBase | Apizr",
    "keywords": "Class ApizrRegistryBase Registry options available for both static and extended registrations Inheritance System.Object ApizrRegistryBase ApizrRegistry ApizrExtendedRegistry Implements IApizrEnumerableRegistry System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.Type , System.Func < IApizrManager >>> System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Registry Assembly : Apizr.dll Syntax public abstract class ApizrRegistryBase : IApizrEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>, IEnumerable Properties Count Managers count Declaration public int Count { get; } Property Value Type Description System.Int32 Methods ContainsCrudManagerFor<T>() Check if registry contains a manager for T entity type Declaration public bool ContainsCrudManagerFor<T>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage ContainsCrudManagerFor<T, TKey>() Check if registry contains a manager for T entity type with TKey key type Declaration public bool ContainsCrudManagerFor<T, TKey>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type ContainsCrudManagerFor<T, TKey, TReadAllResult>() Check if registry contains a manager for T entity type with TKey key type and TReadAllResult ReadAll result type Declaration public bool ContainsCrudManagerFor<T, TKey, TReadAllResult>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() Check if registry contains a manager for T entity type with TKey key type, TReadAllResult ReadAll result type and TReadAllParams ReadAll params type Declaration public bool ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type TReadAllParams The ReadAll params type ContainsManagerFor<TWebApi>() Check if registry contains a manager for TWebApi api type Declaration public bool ContainsManagerFor<TWebApi>() Returns Type Description System.Boolean Type Parameters Name Description TWebApi The api type GetCrudManagerFor<T>() Get a Crud manager instance for an entity type Declaration public IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> GetCrudManagerFor<T>() where T : class Returns Type Description IApizrManager < ICrudApi <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> Type Parameters Name Description T The managed entity type GetCrudManagerFor<T, TKey>() Get a Crud manager instance for an entity type with a specific key type Declaration public IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> GetCrudManagerFor<T, TKey>() where T : class Returns Type Description IApizrManager < ICrudApi <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> Type Parameters Name Description T The managed entity type TKey The entity's key type GetCrudManagerFor<T, TKey, TReadAllResult>() Get a Crud manager instance for an entity type with a specific key type and ReadAll result type Declaration public IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> GetCrudManagerFor<T, TKey, TReadAllResult>() where T : class Returns Type Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >>> Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() Get a Crud manager instance for an entity type with a specific key type, ReadAll result type and ReadAll params type Declaration public IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>> Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type GetEnumerator() Get factory enumerator Declaration public IEnumerator<KeyValuePair<Type, Func<IApizrManager>>> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Collections.Generic.KeyValuePair < System.Type , System.Func < IApizrManager >>> GetManagerFor<TWebApi>() Get an api manager instance Declaration public IApizrManager<TWebApi> GetManagerFor<TWebApi>() Returns Type Description IApizrManager <TWebApi> Type Parameters Name Description TWebApi The managed api type TryGetCrudManagerFor<T>(out IApizrManager<ICrudApi<T, Int32, IEnumerable<T>, IDictionary<String, Object>>>) Try to get a Crud manager instance for an entity type Declaration public bool TryGetCrudManagerFor<T>(out IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> manager) where T : class Parameters Type Name Description IApizrManager < ICrudApi <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> manager Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TryGetCrudManagerFor<T, TKey>(out IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<String, Object>>>) Try to get a Crud manager instance for an entity type with a specific key type Declaration public bool TryGetCrudManagerFor<T, TKey>(out IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> manager) where T : class Parameters Type Name Description IApizrManager < ICrudApi <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> manager Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TryGetCrudManagerFor<T, TKey, TReadAllResult>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<String, Object>>>) Try to get a Crud manager instance for an entity type with a specific key type and ReadAll result type Declaration public bool TryGetCrudManagerFor<T, TKey, TReadAllResult>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> manager) where T : class Parameters Type Name Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >>> manager Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>) Try to get a Crud manager instance for an entity type with a specific key type, ReadAll result type and ReadAll params type Declaration public bool TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> manager) where T : class Parameters Type Name Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>> manager Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type TryGetManagerFor<TWebApi>(out IApizrManager<TWebApi>) Try to get an api manager instance Declaration public bool TryGetManagerFor<TWebApi>(out IApizrManager<TWebApi> manager) Parameters Type Name Description IApizrManager <TWebApi> manager Returns Type Description System.Boolean Type Parameters Name Description TWebApi The managed api type Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements IApizrEnumerableRegistry System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods FileTransferRegistryExtensions.GetUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.TryGetUploadManager(IApizrEnumerableRegistry, out IApizrUploadManager) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi>) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetDownloadManager(IApizrEnumerableRegistry, out IApizrDownloadManager) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi>) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManager(IApizrEnumerableRegistry, out IApizrTransferManager) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.ContainsUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.CreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.CreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity>(IApizrEnumerableRegistry, Int32, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, Int32, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity>(IApizrEnumerableRegistry, Int32, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, Int32, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity>(IApizrEnumerableRegistry, Int32, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ClearCacheAsync<TWebApi>(IApizrEnumerableRegistry, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TResult>>>) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<CancellationToken, TWebApi, Task<TResult>>>, CancellationToken)"
  },
  "api/Apizr.Configuring.Registry.ApizrRegistryBuilder.html": {
    "href": "api/Apizr.Configuring.Registry.ApizrRegistryBuilder.html",
    "title": "Class ApizrRegistryBuilder | Apizr",
    "keywords": "Class ApizrRegistryBuilder Registry builder options available for static registrations Inheritance System.Object ApizrRegistryBuilder Implements IApizrRegistryBuilder IApizrRegistryBuilder < IApizrRegistry , IApizrRegistryBuilder , IApizrProperOptionsBuilder , IApizrCommonOptionsBuilder > IApizrRegistryBuilderBase < IApizrRegistry , IApizrRegistryBuilder , IApizrProperOptionsBuilder , IApizrCommonOptionsBuilder > IApizrRegistryBuilderBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Registry Assembly : Apizr.dll Syntax public class ApizrRegistryBuilder : IApizrRegistryBuilder, IApizrRegistryBuilder<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>, IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>, IApizrRegistryBuilderBase Fields CommonOptions The common options Declaration protected readonly IApizrCommonOptions CommonOptions Field Value Type Description IApizrCommonOptions Registry The registry Declaration protected readonly ApizrRegistry Registry Field Value Type Description ApizrRegistry Properties ApizrRegistry Apizr registry Declaration public IApizrRegistry ApizrRegistry { get; } Property Value Type Description IApizrRegistry Methods AddCrudManagerFor<T>(Action<IApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type System.Int32 and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration public IApizrRegistryBuilder AddCrudManagerFor<T>(Action<IApizrProperOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrProperOptionsBuilder > optionsBuilder Returns Type Description IApizrRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls (class) AddCrudManagerFor<T, TKey>(Action<IApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration public IApizrRegistryBuilder AddCrudManagerFor<T, TKey>(Action<IApizrProperOptionsBuilder> properOptionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrProperOptionsBuilder > properOptionsBuilder Returns Type Description IApizrRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) AddCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters of type IDictionary{string,object} Declaration public IApizrRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrProperOptionsBuilder> properOptionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrProperOptionsBuilder > properOptionsBuilder Returns Type Description IApizrRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration public IApizrRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrProperOptionsBuilder> properOptionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrProperOptionsBuilder > properOptionsBuilder Returns Type Description IApizrRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager>, Action<IApizrProperOptionsBuilder>) Create a TApizrManager instance for a managed crud api for T object (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration public IApizrRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<string>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager> apizrManagerFactory, Action<IApizrProperOptionsBuilder> properOptionsBuilder = null) where T : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Parameters Type Name Description System.Func < ILazyFactory < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler , ICacheHandler , IMappingHandler , Polly.Registry.IReadOnlyPolicyRegistry < System.String >, IApizrManagerOptions < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager> apizrManagerFactory The custom manager implementation instance factory System.Action < IApizrProperOptionsBuilder > properOptionsBuilder Returns Type Description IApizrRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters TApizrManager A custom IApizrManager<TWebApi> implementation AddGroup(Action<IApizrRegistryBuilder>, Action<IApizrCommonOptionsBuilder>) Group registrations sharing specific common options Declaration public IApizrRegistryBuilder AddGroup(Action<IApizrRegistryBuilder> registryGroupBuilder, Action<IApizrCommonOptionsBuilder> commonOptionsBuilder = null) Parameters Type Name Description System.Action < IApizrRegistryBuilder > registryGroupBuilder System.Action < IApizrCommonOptionsBuilder > commonOptionsBuilder Returns Type Description IApizrRegistryBuilder AddManagerFor<TWebApi>(Action<IApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance Declaration public IApizrRegistryBuilder AddManagerFor<TWebApi>(Action<IApizrProperOptionsBuilder> properOptionsBuilder = null) Parameters Type Name Description System.Action < IApizrProperOptionsBuilder > properOptionsBuilder Returns Type Description IApizrRegistryBuilder Type Parameters Name Description TWebApi The web api interface to manage AddManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrManagerOptions<TWebApi>, TApizrManager>, Action<IApizrProperOptionsBuilder>) Create a TApizrManager instance for a managed TWebApi Declaration public IApizrRegistryBuilder AddManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<string>, IApizrManagerOptions<TWebApi>, TApizrManager> apizrManagerFactory, Action<IApizrProperOptionsBuilder> properOptionsBuilder = null) where TApizrManager : IApizrManager<TWebApi> Parameters Type Name Description System.Func < ILazyFactory <TWebApi>, IConnectivityHandler , ICacheHandler , IMappingHandler , Polly.Registry.IReadOnlyPolicyRegistry < System.String >, IApizrManagerOptions <TWebApi>, TApizrManager> apizrManagerFactory The custom manager implementation instance factory System.Action < IApizrProperOptionsBuilder > properOptionsBuilder Returns Type Description IApizrRegistryBuilder Type Parameters Name Description TWebApi The web api interface to manage TApizrManager A custom IApizrManager<TWebApi> implementation Implements IApizrRegistryBuilder IApizrRegistryBuilder<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> IApizrRegistryBuilderBase Extension Methods FileTransferOptionsBuilderExtensions.AddUploadManager(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddUploadManagerFor<TUploadApi>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddUploadManagerWith<TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddDownloadManager(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddDownloadManagerFor<TDownloadApi>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddDownloadManagerWith<TDownloadParams>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddTransferManager(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi, TDownloadParams>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>)"
  },
  "api/Apizr.Configuring.Registry.html": {
    "href": "api/Apizr.Configuring.Registry.html",
    "title": "Namespace Apizr.Configuring.Registry | Apizr",
    "keywords": "Namespace Apizr.Configuring.Registry Classes ApizrRegistry Registry options available for static registrations ApizrRegistryBase Registry options available for both static and extended registrations ApizrRegistryBuilder Registry builder options available for static registrations Interfaces IApizrEnumerableRegistry Registry options available for both static and extended registrations IApizrRegistry Registry options available for static registrations IApizrRegistryBuilder Registry builder options available for static registrations IApizrRegistryBuilder<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> Registry builder options available for static registrations IApizrRegistryBuilderBase Registry builder options available for both static and extended registrations IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> Registry builder options available for both static and extended registrations"
  },
  "api/Apizr.Configuring.Registry.IApizrEnumerableRegistry.html": {
    "href": "api/Apizr.Configuring.Registry.IApizrEnumerableRegistry.html",
    "title": "Interface IApizrEnumerableRegistry | Apizr",
    "keywords": "Interface IApizrEnumerableRegistry Registry options available for both static and extended registrations Inherited Members System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Func<Apizr.IApizrManager>>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() Namespace : Apizr.Configuring.Registry Assembly : Apizr.dll Syntax public interface IApizrEnumerableRegistry : IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>, IEnumerable Properties Count Managers count Declaration int Count { get; } Property Value Type Description System.Int32 Methods ContainsCrudManagerFor<T>() Check if registry contains a manager for T entity type Declaration bool ContainsCrudManagerFor<T>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage ContainsCrudManagerFor<T, TKey>() Check if registry contains a manager for T entity type with TKey key type Declaration bool ContainsCrudManagerFor<T, TKey>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type ContainsCrudManagerFor<T, TKey, TReadAllResult>() Check if registry contains a manager for T entity type with TKey key type and TReadAllResult ReadAll result type Declaration bool ContainsCrudManagerFor<T, TKey, TReadAllResult>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() Check if registry contains a manager for T entity type with TKey key type, TReadAllResult ReadAll result type and TReadAllParams ReadAll params type Declaration bool ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type TReadAllParams The ReadAll params type ContainsManagerFor<TWebApi>() Check if registry contains a manager for TWebApi api type Declaration bool ContainsManagerFor<TWebApi>() Returns Type Description System.Boolean Type Parameters Name Description TWebApi The api type GetCrudManagerFor<T>() Get a Crud manager instance for an entity type Declaration IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> GetCrudManagerFor<T>() where T : class Returns Type Description IApizrManager < ICrudApi <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> Type Parameters Name Description T The managed entity type GetCrudManagerFor<T, TKey>() Get a Crud manager instance for an entity type with a specific key type Declaration IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> GetCrudManagerFor<T, TKey>() where T : class Returns Type Description IApizrManager < ICrudApi <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> Type Parameters Name Description T The managed entity type TKey The entity's key type GetCrudManagerFor<T, TKey, TReadAllResult>() Get a Crud manager instance for an entity type with a specific key type and ReadAll result type Declaration IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> GetCrudManagerFor<T, TKey, TReadAllResult>() where T : class Returns Type Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >>> Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() Get a Crud manager instance for an entity type with a specific key type, ReadAll result type and ReadAll params type Declaration IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>> Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type GetManagerFor<TWebApi>() Get an api manager instance Declaration IApizrManager<TWebApi> GetManagerFor<TWebApi>() Returns Type Description IApizrManager <TWebApi> Type Parameters Name Description TWebApi The managed api type TryGetCrudManagerFor<T>(out IApizrManager<ICrudApi<T, Int32, IEnumerable<T>, IDictionary<String, Object>>>) Try to get a Crud manager instance for an entity type Declaration bool TryGetCrudManagerFor<T>(out IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> manager) where T : class Parameters Type Name Description IApizrManager < ICrudApi <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> manager Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TryGetCrudManagerFor<T, TKey>(out IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<String, Object>>>) Try to get a Crud manager instance for an entity type with a specific key type Declaration bool TryGetCrudManagerFor<T, TKey>(out IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> manager) where T : class Parameters Type Name Description IApizrManager < ICrudApi <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> manager Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TryGetCrudManagerFor<T, TKey, TReadAllResult>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<String, Object>>>) Try to get a Crud manager instance for an entity type with a specific key type and ReadAll result type Declaration bool TryGetCrudManagerFor<T, TKey, TReadAllResult>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> manager) where T : class Parameters Type Name Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >>> manager Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>) Try to get a Crud manager instance for an entity type with a specific key type, ReadAll result type and ReadAll params type Declaration bool TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> manager) where T : class Parameters Type Name Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>> manager Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type TryGetManagerFor<TWebApi>(out IApizrManager<TWebApi>) Try to get an api manager instance Declaration bool TryGetManagerFor<TWebApi>(out IApizrManager<TWebApi> manager) Parameters Type Name Description IApizrManager <TWebApi> manager Returns Type Description System.Boolean Type Parameters Name Description TWebApi The managed api type Extension Methods FileTransferRegistryExtensions.GetUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.TryGetUploadManager(IApizrEnumerableRegistry, out IApizrUploadManager) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi>) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetDownloadManager(IApizrEnumerableRegistry, out IApizrDownloadManager) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi>) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManager(IApizrEnumerableRegistry, out IApizrTransferManager) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.ContainsUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.CreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.CreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity>(IApizrEnumerableRegistry, Int32, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, Int32, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity>(IApizrEnumerableRegistry, Int32, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, Int32, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity>(IApizrEnumerableRegistry, Int32, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ClearCacheAsync<TWebApi>(IApizrEnumerableRegistry, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TResult>>>) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<CancellationToken, TWebApi, Task<TResult>>>, CancellationToken)"
  },
  "api/Apizr.Configuring.Registry.IApizrRegistry.html": {
    "href": "api/Apizr.Configuring.Registry.IApizrRegistry.html",
    "title": "Interface IApizrRegistry | Apizr",
    "keywords": "Interface IApizrRegistry Registry options available for static registrations Inherited Members IApizrEnumerableRegistry.Count IApizrEnumerableRegistry.ContainsCrudManagerFor<T>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey, TReadAllResult>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrEnumerableRegistry.ContainsManagerFor<TWebApi>() IApizrEnumerableRegistry.GetCrudManagerFor<T>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey, TReadAllResult>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrEnumerableRegistry.GetManagerFor<TWebApi>() IApizrEnumerableRegistry.TryGetCrudManagerFor<T>(IApizrManager<ICrudApi<T, Int32, IEnumerable<T>, IDictionary<String, Object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey>(IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<String, Object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey, TReadAllResult>(IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<String, Object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>) IApizrEnumerableRegistry.TryGetManagerFor<TWebApi>(IApizrManager<TWebApi>) System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Func<Apizr.IApizrManager>>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() Namespace : Apizr.Configuring.Registry Assembly : Apizr.dll Syntax public interface IApizrRegistry : IApizrEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>, IEnumerable Methods Populate(Action<Type, Func<Object>>) Populate all registered types and its factories Declaration void Populate(Action<Type, Func<object>> populateAction) Parameters Type Name Description System.Action < System.Type , System.Func < System.Object >> populateAction The action to execute when populating Extension Methods FileTransferRegistryExtensions.GetUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.TryGetUploadManager(IApizrEnumerableRegistry, out IApizrUploadManager) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi>) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetDownloadManager(IApizrEnumerableRegistry, out IApizrDownloadManager) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi>) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManager(IApizrEnumerableRegistry, out IApizrTransferManager) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.ContainsUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.CreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.CreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity>(IApizrEnumerableRegistry, Int32, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, Int32, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity>(IApizrEnumerableRegistry, Int32, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, Int32, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.UpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity>(IApizrEnumerableRegistry, Int32, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.DeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) ApizrRegistryExtensions.ClearCacheAsync<TWebApi>(IApizrEnumerableRegistry, CancellationToken) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TResult>>>) ApizrRegistryExtensions.ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<CancellationToken, TWebApi, Task<TResult>>>, CancellationToken)"
  },
  "api/Apizr.Configuring.Registry.IApizrRegistryBuilder.html": {
    "href": "api/Apizr.Configuring.Registry.IApizrRegistryBuilder.html",
    "title": "Interface IApizrRegistryBuilder | Apizr",
    "keywords": "Interface IApizrRegistryBuilder Registry builder options available for static registrations Inherited Members IApizrRegistryBuilder<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager>, Action<IApizrProperOptionsBuilder>) IApizrRegistryBuilder<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrManagerOptions<TWebApi>, TApizrManager>, Action<IApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.ApizrRegistry IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddGroup(Action<IApizrRegistryBuilder>, Action<IApizrCommonOptionsBuilder>) IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddCrudManagerFor<T>(Action<IApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddCrudManagerFor<T, TKey>(Action<IApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>.AddManagerFor<TWebApi>(Action<IApizrProperOptionsBuilder>) Namespace : Apizr.Configuring.Registry Assembly : Apizr.dll Syntax public interface IApizrRegistryBuilder : IApizrRegistryBuilder<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>, IApizrRegistryBuilderBase<IApizrRegistry, IApizrRegistryBuilder, IApizrProperOptionsBuilder, IApizrCommonOptionsBuilder>, IApizrRegistryBuilderBase Extension Methods FileTransferOptionsBuilderExtensions.AddUploadManager(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddUploadManagerFor<TUploadApi>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddUploadManagerWith<TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddDownloadManager(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddDownloadManagerFor<TDownloadApi>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddDownloadManagerWith<TDownloadParams>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddTransferManager(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi, TDownloadParams>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) FileTransferOptionsBuilderExtensions.AddTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>)"
  },
  "api/Apizr.Configuring.Registry.IApizrRegistryBuilder-4.html": {
    "href": "api/Apizr.Configuring.Registry.IApizrRegistryBuilder-4.html",
    "title": "Interface IApizrRegistryBuilder<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrRegistryBuilder<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> Registry builder options available for static registrations Inherited Members IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>.ApizrRegistry IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>.AddGroup(Action<TApizrRegistryBuilder>, Action<TApizrCommonOptionsBuilder>) IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>.AddCrudManagerFor<T>(Action<TApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>.AddCrudManagerFor<T, TKey>(Action<TApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult>(Action<TApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<TApizrProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>.AddManagerFor<TWebApi>(Action<TApizrProperOptionsBuilder>) Namespace : Apizr.Configuring.Registry Assembly : Apizr.dll Syntax public interface IApizrRegistryBuilder<out TApizrRegistry, out TApizrRegistryBuilder, out TApizrProperOptionsBuilder, out TApizrCommonOptionsBuilder> : IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder>, IApizrRegistryBuilderBase where TApizrRegistry : IApizrEnumerableRegistry where TApizrRegistryBuilder : IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> where TApizrProperOptionsBuilder : IApizrProperOptionsBuilderBase where TApizrCommonOptionsBuilder : IApizrCommonOptionsBuilderBase Type Parameters Name Description TApizrRegistry TApizrRegistryBuilder TApizrProperOptionsBuilder TApizrCommonOptionsBuilder Methods AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager>, Action<TApizrProperOptionsBuilder>) Create a TApizrManager instance for a managed crud api for T object (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration TApizrRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<string>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager> apizrManagerFactory, Action<TApizrProperOptionsBuilder> properOptionsBuilder = null) where T : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Parameters Type Name Description System.Func < ILazyFactory < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler , ICacheHandler , IMappingHandler , Polly.Registry.IReadOnlyPolicyRegistry < System.String >, IApizrManagerOptions < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager> apizrManagerFactory The custom manager implementation instance factory System.Action <TApizrProperOptionsBuilder> properOptionsBuilder The builder defining some api proper options Returns Type Description TApizrRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters TApizrManager A custom IApizrManager<TWebApi> implementation AddManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrManagerOptions<TWebApi>, TApizrManager>, Action<TApizrProperOptionsBuilder>) Create a TApizrManager instance for a managed TWebApi Declaration TApizrRegistryBuilder AddManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<string>, IApizrManagerOptions<TWebApi>, TApizrManager> apizrManagerFactory, Action<TApizrProperOptionsBuilder> properOptionsBuilder = null) where TApizrManager : IApizrManager<TWebApi> Parameters Type Name Description System.Func < ILazyFactory <TWebApi>, IConnectivityHandler , ICacheHandler , IMappingHandler , Polly.Registry.IReadOnlyPolicyRegistry < System.String >, IApizrManagerOptions <TWebApi>, TApizrManager> apizrManagerFactory The custom manager implementation instance factory System.Action <TApizrProperOptionsBuilder> properOptionsBuilder The builder defining some api proper options Returns Type Description TApizrRegistryBuilder Type Parameters Name Description TWebApi The web api interface to manage TApizrManager A custom IApizrManager<TWebApi> implementation"
  },
  "api/Apizr.Configuring.Registry.IApizrRegistryBuilderBase.html": {
    "href": "api/Apizr.Configuring.Registry.IApizrRegistryBuilderBase.html",
    "title": "Interface IApizrRegistryBuilderBase | Apizr",
    "keywords": "Interface IApizrRegistryBuilderBase Registry builder options available for both static and extended registrations Namespace : Apizr.Configuring.Registry Assembly : Apizr.dll Syntax public interface IApizrRegistryBuilderBase"
  },
  "api/Apizr.Configuring.Registry.IApizrRegistryBuilderBase-4.html": {
    "href": "api/Apizr.Configuring.Registry.IApizrRegistryBuilderBase-4.html",
    "title": "Interface IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> Registry builder options available for both static and extended registrations Namespace : Apizr.Configuring.Registry Assembly : Apizr.dll Syntax public interface IApizrRegistryBuilderBase<out TApizrRegistry, out TApizrRegistryBuilder, out TApizrProperOptionsBuilder, out TApizrCommonOptionsBuilder> : IApizrRegistryBuilderBase where TApizrRegistry : IApizrEnumerableRegistry where TApizrRegistryBuilder : IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> where TApizrProperOptionsBuilder : IApizrGlobalProperOptionsBuilderBase where TApizrCommonOptionsBuilder : IApizrGlobalCommonOptionsBuilderBase Type Parameters Name Description TApizrRegistry TApizrRegistryBuilder TApizrProperOptionsBuilder TApizrCommonOptionsBuilder Properties ApizrRegistry Apizr registry Declaration TApizrRegistry ApizrRegistry { get; } Property Value Type Description TApizrRegistry Methods AddCrudManagerFor<T>(Action<TApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type System.Int32 and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration TApizrRegistryBuilder AddCrudManagerFor<T>(Action<TApizrProperOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action <TApizrProperOptionsBuilder> optionsBuilder The builder defining some api proper options Returns Type Description TApizrRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls (class) AddCrudManagerFor<T, TKey>(Action<TApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration TApizrRegistryBuilder AddCrudManagerFor<T, TKey>(Action<TApizrProperOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action <TApizrProperOptionsBuilder> optionsBuilder The builder defining some api proper options Returns Type Description TApizrRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) AddCrudManagerFor<T, TKey, TReadAllResult>(Action<TApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters of type IDictionary{string,object} Declaration TApizrRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult>(Action<TApizrProperOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action <TApizrProperOptionsBuilder> optionsBuilder The builder defining some api proper options Returns Type Description TApizrRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<TApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration TApizrRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<TApizrProperOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action <TApizrProperOptionsBuilder> optionsBuilder The builder defining some api proper options Returns Type Description TApizrRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters AddGroup(Action<TApizrRegistryBuilder>, Action<TApizrCommonOptionsBuilder>) Group registrations sharing specific common options Declaration TApizrRegistryBuilder AddGroup(Action<TApizrRegistryBuilder> registryGroupBuilder, Action<TApizrCommonOptionsBuilder> commonOptionsBuilder = null) Parameters Type Name Description System.Action <TApizrRegistryBuilder> registryGroupBuilder The registry group System.Action <TApizrCommonOptionsBuilder> commonOptionsBuilder The group common options Returns Type Description TApizrRegistryBuilder AddManagerFor<TWebApi>(Action<TApizrProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance Declaration TApizrRegistryBuilder AddManagerFor<TWebApi>(Action<TApizrProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action <TApizrProperOptionsBuilder> optionsBuilder The builder defining some api proper options Returns Type Description TApizrRegistryBuilder Type Parameters Name Description TWebApi The web api interface to manage"
  },
  "api/Apizr.Configuring.Request.ApizrRequestOptions.html": {
    "href": "api/Apizr.Configuring.Request.ApizrRequestOptions.html",
    "title": "Class ApizrRequestOptions | Apizr",
    "keywords": "Class ApizrRequestOptions Options available at request levels and for all (static and extended) registration types Inheritance System.Object ApizrGlobalSharedOptionsBase ApizrRequestOptionsBase ApizrRequestOptions Implements IApizrRequestOptions IApizrRequestOptionsBase IApizrGlobalSharedOptionsBase Inherited Members ApizrRequestOptionsBase.Context ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache ApizrGlobalSharedOptionsBase.HandlersParameters System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Request Assembly : Apizr.dll Syntax public class ApizrRequestOptions : ApizrRequestOptionsBase, IApizrRequestOptions, IApizrRequestOptionsBase, IApizrGlobalSharedOptionsBase Constructors ApizrRequestOptions(IApizrGlobalSharedRegistrationOptionsBase, IDictionary<String, Object>, Nullable<HttpTracerMode>, Nullable<HttpMessageParts>, LogLevel[]) Declaration public ApizrRequestOptions(IApizrGlobalSharedRegistrationOptionsBase sharedOptions, IDictionary<string, object> handlersParameters, HttpTracerMode? httpTracerMode, HttpMessageParts? trafficVerbosity, params LogLevel[] logLevels) Parameters Type Name Description IApizrGlobalSharedRegistrationOptionsBase sharedOptions System.Collections.Generic.IDictionary < System.String , System.Object > handlersParameters System.Nullable < HttpTracerMode > httpTracerMode System.Nullable < HttpMessageParts > trafficVerbosity Microsoft.Extensions.Logging.LogLevel [] logLevels Properties CancellationToken A cancellation token to pass through it all Declaration public CancellationToken CancellationToken { get; } Property Value Type Description System.Threading.CancellationToken ClearCache Clear request cache before executing (default: false) Declaration public bool ClearCache { get; } Property Value Type Description System.Boolean Implements IApizrRequestOptions IApizrRequestOptionsBase IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Configuring.Request.ApizrRequestOptionsBase.html": {
    "href": "api/Apizr.Configuring.Request.ApizrRequestOptionsBase.html",
    "title": "Class ApizrRequestOptionsBase | Apizr",
    "keywords": "Class ApizrRequestOptionsBase Options available at request levels and for all (static and extended) registration types Inheritance System.Object ApizrGlobalSharedOptionsBase ApizrRequestOptionsBase ApizrRequestOptions Implements IApizrRequestOptionsBase IApizrGlobalSharedOptionsBase Inherited Members ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache ApizrGlobalSharedOptionsBase.HandlersParameters System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Request Assembly : Apizr.dll Syntax public abstract class ApizrRequestOptionsBase : ApizrGlobalSharedOptionsBase, IApizrRequestOptionsBase, IApizrGlobalSharedOptionsBase Constructors ApizrRequestOptionsBase(IApizrGlobalSharedRegistrationOptionsBase, Nullable<HttpTracerMode>, Nullable<HttpMessageParts>, LogLevel[]) Declaration protected ApizrRequestOptionsBase(IApizrGlobalSharedRegistrationOptionsBase sharedOptions, HttpTracerMode? httpTracerMode, HttpMessageParts? trafficVerbosity, params LogLevel[] logLevels) Parameters Type Name Description IApizrGlobalSharedRegistrationOptionsBase sharedOptions System.Nullable < HttpTracerMode > httpTracerMode System.Nullable < HttpMessageParts > trafficVerbosity Microsoft.Extensions.Logging.LogLevel [] logLevels Properties Context The Polly Context to pass through it all Declaration public Context Context { get; } Property Value Type Description Polly.Context Implements IApizrRequestOptionsBase IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Configuring.Request.ApizrRequestOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Request.ApizrRequestOptionsBuilder.html",
    "title": "Class ApizrRequestOptionsBuilder | Apizr",
    "keywords": "Class ApizrRequestOptionsBuilder Builder options available at request level Inheritance System.Object ApizrRequestOptionsBuilder Implements IApizrRequestOptionsBuilder IApizrRequestOptionsBuilder < IApizrRequestOptions , IApizrRequestOptionsBuilder > IApizrRequestOptionsBuilderBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > IApizrGlobalSharedOptionsBuilderBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > IApizrRequestOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Request Assembly : Apizr.dll Syntax public class ApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder, IApizrRequestOptionsBuilder<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IApizrRequestOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IApizrRequestOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Constructors ApizrRequestOptionsBuilder(ApizrRequestOptions) Declaration public ApizrRequestOptionsBuilder(ApizrRequestOptions options) Parameters Type Name Description ApizrRequestOptions options Fields Options Declaration protected readonly ApizrRequestOptions Options Field Value Type Description ApizrRequestOptions Methods WithCacheClearing(Boolean) Tells if you want to clear the potential cached data before requesting Declaration public IApizrRequestOptionsBuilder WithCacheClearing(bool clearCache) Parameters Type Name Description System.Boolean clearCache Clear cache or not Returns Type Description IApizrRequestOptionsBuilder WithCancellation(CancellationToken) Set the cancellation token Declaration public IApizrRequestOptionsBuilder WithCancellation(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description IApizrRequestOptionsBuilder WithContext(Context, ApizrDuplicateStrategy) Set the Polly Context Declaration public IApizrRequestOptionsBuilder WithContext(Context context, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Merge) Parameters Type Name Description Polly.Context context The Polly Context to pass through it all ApizrDuplicateStrategy strategy The duplicate strategy if there's another one already (default: Merge) Returns Type Description IApizrRequestOptionsBuilder WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) Catch potential exceptions Declaration public IApizrRequestOptionsBuilder WithExCatching(Action<ApizrException> onException, bool letThrowOnExceptionWithEmptyCache = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters Type Name Description System.Action < ApizrException > onException The exception callback System.Boolean letThrowOnExceptionWithEmptyCache Let throw potential exception if there's no cached data to return (default: true) ApizrDuplicateStrategy strategy The duplicate strategy if there's another callback already (default: Replace) Returns Type Description IApizrRequestOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) Catch potential exceptions Declaration public IApizrRequestOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>> onException, bool letThrowOnExceptionWithEmptyCache = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters Type Name Description System.Action < ApizrException <TResult>> onException The exception callback System.Boolean letThrowOnExceptionWithEmptyCache Let throw potential exception if there's no cached data to return (default: true) ApizrDuplicateStrategy strategy The duplicate strategy if there's another callback already (default: Replace) Returns Type Description IApizrRequestOptionsBuilder Type Parameters Name Description TResult WithHandlerParameter(String, Object) Set some parameters passed through all delegating handlers Declaration public IApizrRequestOptionsBuilder WithHandlerParameter(string key, object value) Parameters Type Name Description System.String key The parameter's key System.Object value The parameter's value Returns Type Description IApizrRequestOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration public IApizrRequestOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: All) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: Information) Returns Type Description IApizrRequestOptionsBuilder Implements IApizrRequestOptionsBuilder IApizrRequestOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> IApizrRequestOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrRequestOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithDynamicPath<T>(T, String)"
  },
  "api/Apizr.Configuring.Request.html": {
    "href": "api/Apizr.Configuring.Request.html",
    "title": "Namespace Apizr.Configuring.Request | Apizr",
    "keywords": "Namespace Apizr.Configuring.Request Classes ApizrRequestOptions Options available at request levels and for all (static and extended) registration types ApizrRequestOptionsBase Options available at request levels and for all (static and extended) registration types ApizrRequestOptionsBuilder Builder options available at request level RequestOptionsAttribute The Apizr request options property attribute Interfaces IApizrRequestOptions IApizrRequestOptionsBase Options available at request levels and for all (static and extended) registration types IApizrRequestOptionsBuilder IApizrRequestOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> Builder options available at request level IApizrRequestOptionsBuilderBase IApizrRequestOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Builder options available at request level"
  },
  "api/Apizr.Configuring.Request.IApizrRequestOptions.html": {
    "href": "api/Apizr.Configuring.Request.IApizrRequestOptions.html",
    "title": "Interface IApizrRequestOptions | Apizr",
    "keywords": "Interface IApizrRequestOptions Inherited Members IApizrRequestOptionsBase.Context IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.OnException IApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache IApizrGlobalSharedOptionsBase.HandlersParameters Namespace : Apizr.Configuring.Request Assembly : Apizr.dll Syntax public interface IApizrRequestOptions : IApizrRequestOptionsBase, IApizrGlobalSharedOptionsBase Properties CancellationToken A cancellation token to pass through it all Declaration CancellationToken CancellationToken { get; } Property Value Type Description System.Threading.CancellationToken ClearCache Clear request cache before executing (default: false) Declaration bool ClearCache { get; } Property Value Type Description System.Boolean"
  },
  "api/Apizr.Configuring.Request.IApizrRequestOptionsBase.html": {
    "href": "api/Apizr.Configuring.Request.IApizrRequestOptionsBase.html",
    "title": "Interface IApizrRequestOptionsBase | Apizr",
    "keywords": "Interface IApizrRequestOptionsBase Options available at request levels and for all (static and extended) registration types Inherited Members IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.OnException IApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache IApizrGlobalSharedOptionsBase.HandlersParameters Namespace : Apizr.Configuring.Request Assembly : Apizr.dll Syntax public interface IApizrRequestOptionsBase : IApizrGlobalSharedOptionsBase Properties Context The Polly Context to pass through it all Declaration Context Context { get; } Property Value Type Description Polly.Context"
  },
  "api/Apizr.Configuring.Request.IApizrRequestOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Request.IApizrRequestOptionsBuilder.html",
    "title": "Interface IApizrRequestOptionsBuilder | Apizr",
    "keywords": "Interface IApizrRequestOptionsBuilder Inherited Members IApizrRequestOptionsBuilder<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithContext(Context, ApizrDuplicateStrategy) IApizrRequestOptionsBuilder<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithCancellation(CancellationToken) IApizrRequestOptionsBuilder<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithCacheClearing(Boolean) IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Request Assembly : Apizr.dll Syntax public interface IApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IApizrRequestOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IApizrRequestOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithDynamicPath<T>(T, String)"
  },
  "api/Apizr.Configuring.Request.IApizrRequestOptionsBuilder-2.html": {
    "href": "api/Apizr.Configuring.Request.IApizrRequestOptionsBuilder-2.html",
    "title": "Interface IApizrRequestOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrRequestOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> Builder options available at request level Inherited Members IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Request Assembly : Apizr.dll Syntax public interface IApizrRequestOptionsBuilder<out TApizrOptions, out TApizrOptionsBuilder> : IApizrRequestOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrRequestOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrOptions : IApizrRequestOptions where TApizrOptionsBuilder : IApizrRequestOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> Type Parameters Name Description TApizrOptions TApizrOptionsBuilder Methods WithCacheClearing(Boolean) Tells if you want to clear the potential cached data before requesting Declaration TApizrOptionsBuilder WithCacheClearing(bool clearCache) Parameters Type Name Description System.Boolean clearCache Clear cache or not Returns Type Description TApizrOptionsBuilder WithCancellation(CancellationToken) Set the cancellation token Declaration TApizrOptionsBuilder WithCancellation(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description TApizrOptionsBuilder WithContext(Context, ApizrDuplicateStrategy) Set the Polly Context Declaration TApizrOptionsBuilder WithContext(Context context, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Merge) Parameters Type Name Description Polly.Context context The Polly Context to pass through it all ApizrDuplicateStrategy strategy The duplicate strategy if there's another one already (default: Merge) Returns Type Description TApizrOptionsBuilder Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithDynamicPath<T>(T, String)"
  },
  "api/Apizr.Configuring.Request.IApizrRequestOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Request.IApizrRequestOptionsBuilderBase.html",
    "title": "Interface IApizrRequestOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrRequestOptionsBuilderBase Namespace : Apizr.Configuring.Request Assembly : Apizr.dll Syntax public interface IApizrRequestOptionsBuilderBase : IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithDynamicPath<T>(T, String)"
  },
  "api/Apizr.Configuring.Request.IApizrRequestOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Request.IApizrRequestOptionsBuilderBase-2.html",
    "title": "Interface IApizrRequestOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrRequestOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Builder options available at request level Inherited Members IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Request Assembly : Apizr.dll Syntax public interface IApizrRequestOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> : IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrRequestOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrOptions : IApizrRequestOptionsBase where TApizrOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Type Parameters Name Description TApizrOptions TApizrOptionsBuilder Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) FileTransferOptionsBuilderExtensions.WithDynamicPath<T>(T, String)"
  },
  "api/Apizr.Configuring.Request.RequestOptionsAttribute.html": {
    "href": "api/Apizr.Configuring.Request.RequestOptionsAttribute.html",
    "title": "Class RequestOptionsAttribute | Apizr",
    "keywords": "Class RequestOptionsAttribute The Apizr request options property attribute Inheritance System.Object System.Attribute Refit.PropertyAttribute RequestOptionsAttribute Inherited Members Refit.PropertyAttribute.Key System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Request Assembly : Apizr.dll Syntax public class RequestOptionsAttribute : PropertyAttribute Constructors RequestOptionsAttribute() Create some Apizr request options Declaration public RequestOptionsAttribute()"
  },
  "api/Apizr.Configuring.Shared.ApizrGlobalSharedOptionsBase.html": {
    "href": "api/Apizr.Configuring.Shared.ApizrGlobalSharedOptionsBase.html",
    "title": "Class ApizrGlobalSharedOptionsBase | Apizr",
    "keywords": "Class ApizrGlobalSharedOptionsBase Options available at both common and proper level for both static and extended registrations Inheritance System.Object ApizrGlobalSharedOptionsBase ApizrRequestOptionsBase ApizrGlobalSharedRegistrationOptionsBase Implements IApizrGlobalSharedOptionsBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public abstract class ApizrGlobalSharedOptionsBase : IApizrGlobalSharedOptionsBase Constructors ApizrGlobalSharedOptionsBase(IApizrGlobalSharedOptionsBase) Declaration protected ApizrGlobalSharedOptionsBase(IApizrGlobalSharedOptionsBase sharedOptions = null) Parameters Type Name Description IApizrGlobalSharedOptionsBase sharedOptions Properties HandlersParameters Parameters passed through delegating handlers Declaration public IDictionary<string, object> HandlersParameters { get; protected set; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.Object > HttpTracerMode Http traffic tracing mode Declaration public HttpTracerMode HttpTracerMode { get; } Property Value Type Description HttpTracerMode LetThrowOnExceptionWithEmptyCache Let throw potential exception if there's no cached data to return Declaration public bool LetThrowOnExceptionWithEmptyCache { get; } Property Value Type Description System.Boolean LogLevels Log levels while writing Declaration public LogLevel[] LogLevels { get; } Property Value Type Description Microsoft.Extensions.Logging.LogLevel [] OnException Catching potential exception if defined Declaration public Action<ApizrException> OnException { get; } Property Value Type Description System.Action < ApizrException > TrafficVerbosity Http traffic tracing verbosity Declaration public HttpMessageParts TrafficVerbosity { get; } Property Value Type Description HttpMessageParts Implements IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Configuring.Shared.ApizrGlobalSharedRegistrationOptionsBase.html": {
    "href": "api/Apizr.Configuring.Shared.ApizrGlobalSharedRegistrationOptionsBase.html",
    "title": "Class ApizrGlobalSharedRegistrationOptionsBase | Apizr",
    "keywords": "Class ApizrGlobalSharedRegistrationOptionsBase Options available at both common and proper level for both static and extended registrations Inheritance System.Object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase ApizrCommonOptionsBase ApizrManagerOptionsBase ApizrProperOptionsBase Implements IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Inherited Members ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache ApizrGlobalSharedOptionsBase.HandlersParameters System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public abstract class ApizrGlobalSharedRegistrationOptionsBase : ApizrGlobalSharedOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Constructors ApizrGlobalSharedRegistrationOptionsBase(IApizrGlobalSharedRegistrationOptionsBase) Declaration protected ApizrGlobalSharedRegistrationOptionsBase(IApizrGlobalSharedRegistrationOptionsBase sharedOptions = null) Parameters Type Name Description IApizrGlobalSharedRegistrationOptionsBase sharedOptions Properties BaseAddress Base address Declaration public string BaseAddress { get; protected set; } Property Value Type Description System.String BasePath Base path Declaration public string BasePath { get; protected set; } Property Value Type Description System.String BaseUri Base address Declaration public Uri BaseUri { get; protected set; } Property Value Type Description System.Uri ContextFactory The Polly Context to pass through it all Declaration public Func<Context> ContextFactory { get; } Property Value Type Description System.Func < Polly.Context > PrimaryHandlerFactory The primary Http message handler factory (set internally) Declaration public Func<DelegatingHandler, ILogger, IApizrManagerOptionsBase, HttpMessageHandler> PrimaryHandlerFactory { get; } Property Value Type Description System.Func < System.Net.Http.DelegatingHandler , Microsoft.Extensions.Logging.ILogger , IApizrManagerOptionsBase , System.Net.Http.HttpMessageHandler > Implements IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Configuring.Shared.html": {
    "href": "api/Apizr.Configuring.Shared.html",
    "title": "Namespace Apizr.Configuring.Shared | Apizr",
    "keywords": "Namespace Apizr.Configuring.Shared Classes ApizrGlobalSharedOptionsBase Options available at both common and proper level for both static and extended registrations ApizrGlobalSharedRegistrationOptionsBase Options available at both common and proper level for both static and extended registrations Interfaces IApizrExtendedSharedRegistrationOptionsBuilderBase Builder options available at both common and proper level for extended registration IApizrGlobalSharedOptionsBase Options available at all (common, proper and request) levels and for all (static and extended) registration types IApizrGlobalSharedOptionsBuilderBase Builder options available at all (common, proper and request) levels and for all (static and extended) registration types IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrGlobalSharedRegistrationOptionsBase Options available at both common and proper level (not request) and for all (static and extended) registration types IApizrGlobalSharedRegistrationOptionsBuilderBase Builder options available at both common and proper level for both static and extended registrations IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrSharedRegistrationOptions Options available at both common and proper level for static registrations IApizrSharedRegistrationOptionsBase Options available at both common and proper level for both static and extended registrations IApizrSharedRegistrationOptionsBuilder Builder options available at both common and proper level for static registrations IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> IApizrSharedRegistrationOptionsBuilderBase Builder options available at both common and proper level for both static and extended registrations IApizrSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>"
  },
  "api/Apizr.Configuring.Shared.IApizrExtendedSharedRegistrationOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrExtendedSharedRegistrationOptionsBuilderBase.html",
    "title": "Interface IApizrExtendedSharedRegistrationOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrExtendedSharedRegistrationOptionsBuilderBase Builder options available at both common and proper level for extended registration Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public interface IApizrExtendedSharedRegistrationOptionsBuilderBase : IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBase.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBase.html",
    "title": "Interface IApizrGlobalSharedOptionsBase | Apizr",
    "keywords": "Interface IApizrGlobalSharedOptionsBase Options available at all (common, proper and request) levels and for all (static and extended) registration types Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public interface IApizrGlobalSharedOptionsBase Properties HandlersParameters Parameters passed through delegating handlers Declaration IDictionary<string, object> HandlersParameters { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.Object > HttpTracerMode Http traffic tracing mode Declaration HttpTracerMode HttpTracerMode { get; } Property Value Type Description HttpTracerMode LetThrowOnExceptionWithEmptyCache Let throw potential exception if there's no cached data to return Declaration bool LetThrowOnExceptionWithEmptyCache { get; } Property Value Type Description System.Boolean LogLevels Log levels while writing Declaration LogLevel[] LogLevels { get; } Property Value Type Description Microsoft.Extensions.Logging.LogLevel [] OnException Catching potential exception if defined Declaration Action<ApizrException> OnException { get; } Property Value Type Description System.Action < ApizrException > TrafficVerbosity Http traffic tracing verbosity Declaration HttpMessageParts TrafficVerbosity { get; } Property Value Type Description HttpMessageParts"
  },
  "api/Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase.html",
    "title": "Interface IApizrGlobalSharedOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrGlobalSharedOptionsBuilderBase Builder options available at all (common, proper and request) levels and for all (static and extended) registration types Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public interface IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrGlobalSharedOptionsBuilderBase-2.html",
    "title": "Interface IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public interface IApizrGlobalSharedOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> : IApizrGlobalSharedOptionsBuilderBase where TApizrOptions : IApizrGlobalSharedOptionsBase where TApizrOptionsBuilder : IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Type Parameters Name Description TApizrOptions TApizrOptionsBuilder Methods WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) Catch potential exceptions Declaration TApizrOptionsBuilder WithExCatching(Action<ApizrException> onException, bool letThrowOnExceptionWithEmptyCache = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters Type Name Description System.Action < ApizrException > onException The exception callback System.Boolean letThrowOnExceptionWithEmptyCache Let throw potential exception if there's no cached data to return (default: true) ApizrDuplicateStrategy strategy The duplicate strategy if there's another callback already (default: Replace) Returns Type Description TApizrOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) Catch potential exceptions Declaration TApizrOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>> onException, bool letThrowOnExceptionWithEmptyCache = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters Type Name Description System.Action < ApizrException <TResult>> onException The exception callback System.Boolean letThrowOnExceptionWithEmptyCache Let throw potential exception if there's no cached data to return (default: true) ApizrDuplicateStrategy strategy The duplicate strategy if there's another callback already (default: Replace) Returns Type Description TApizrOptionsBuilder Type Parameters Name Description TResult WithHandlerParameter(String, Object) Set some parameters passed through all delegating handlers Declaration TApizrOptionsBuilder WithHandlerParameter(string key, object value) Parameters Type Name Description System.String key The parameter's key System.Object value The parameter's value Returns Type Description TApizrOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration TApizrOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: All) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: Information) Returns Type Description TApizrOptionsBuilder Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBase.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBase.html",
    "title": "Interface IApizrGlobalSharedRegistrationOptionsBase | Apizr",
    "keywords": "Interface IApizrGlobalSharedRegistrationOptionsBase Options available at both common and proper level (not request) and for all (static and extended) registration types Inherited Members IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.OnException IApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache IApizrGlobalSharedOptionsBase.HandlersParameters Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public interface IApizrGlobalSharedRegistrationOptionsBase : IApizrGlobalSharedOptionsBase Properties BaseAddress Base address Declaration string BaseAddress { get; } Property Value Type Description System.String BasePath Base path Declaration string BasePath { get; } Property Value Type Description System.String BaseUri Base address Declaration Uri BaseUri { get; } Property Value Type Description System.Uri ContextFactory The Polly Context to pass through it all Declaration Func<Context> ContextFactory { get; } Property Value Type Description System.Func < Polly.Context > PrimaryHandlerFactory The primary Http message handler factory (set internally) Declaration Func<DelegatingHandler, ILogger, IApizrManagerOptionsBase, HttpMessageHandler> PrimaryHandlerFactory { get; } Property Value Type Description System.Func < System.Net.Http.DelegatingHandler , Microsoft.Extensions.Logging.ILogger , IApizrManagerOptionsBase , System.Net.Http.HttpMessageHandler >"
  },
  "api/Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase.html",
    "title": "Interface IApizrGlobalSharedRegistrationOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrGlobalSharedRegistrationOptionsBuilderBase Builder options available at both common and proper level for both static and extended registrations Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public interface IApizrGlobalSharedRegistrationOptionsBuilderBase : IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrGlobalSharedRegistrationOptionsBuilderBase-2.html",
    "title": "Interface IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Inherited Members IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public interface IApizrGlobalSharedRegistrationOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> : IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrOptions : IApizrGlobalSharedRegistrationOptionsBase where TApizrOptionsBuilder : IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Type Parameters Name Description TApizrOptions TApizrOptionsBuilder Methods AddDelegatingHandler<THandler>(THandler) Add a custom delegating handler Declaration TApizrOptionsBuilder AddDelegatingHandler<THandler>(THandler delegatingHandler) where THandler : DelegatingHandler Parameters Type Name Description THandler delegatingHandler A delegating handler Returns Type Description TApizrOptionsBuilder Type Parameters Name Description THandler WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) Provide a method to refresh the authorization token when needed Declaration TApizrOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory Refresh token method called when expired or empty Returns Type Description TApizrOptionsBuilder WithBaseAddress(String) Define your web api base address (could be defined with WebApiAttribute) Declaration TApizrOptionsBuilder WithBaseAddress(string baseAddress) Parameters Type Name Description System.String baseAddress Your web api base address Returns Type Description TApizrOptionsBuilder WithBaseAddress(Uri) Define your web api base address (could be defined with WebApiAttribute) Declaration TApizrOptionsBuilder WithBaseAddress(Uri baseAddress) Parameters Type Name Description System.Uri baseAddress Your web api base address Returns Type Description TApizrOptionsBuilder WithBasePath(String) Define your web api base path (could be defined with WebApiAttribute) Declaration TApizrOptionsBuilder WithBasePath(string basePath) Parameters Type Name Description System.String basePath Your web api base path Returns Type Description TApizrOptionsBuilder WithContext(Func<Context>, ApizrDuplicateStrategy) Set the Polly Context Declaration TApizrOptionsBuilder WithContext(Func<Context> contextFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Merge) Parameters Type Name Description System.Func < Polly.Context > contextFactory The Polly Context to pass through it all ApizrDuplicateStrategy strategy The duplicate strategy if there's another one already (default: Merge) Returns Type Description TApizrOptionsBuilder WithHttpClientHandler(HttpClientHandler) Provide a custom HttpClientHandler Declaration TApizrOptionsBuilder WithHttpClientHandler(HttpClientHandler httpClientHandler) Parameters Type Name Description System.Net.Http.HttpClientHandler httpClientHandler An System.Net.Http.HttpClientHandler instance Returns Type Description TApizrOptionsBuilder Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptions.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptions.html",
    "title": "Interface IApizrSharedRegistrationOptions | Apizr",
    "keywords": "Interface IApizrSharedRegistrationOptions Options available at both common and proper level for static registrations Inherited Members IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.ContextFactory IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.OnException IApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache IApizrGlobalSharedOptionsBase.HandlersParameters Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public interface IApizrSharedRegistrationOptions : IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Properties BaseAddressFactory Base address factory Declaration Func<string> BaseAddressFactory { get; } Property Value Type Description System.Func < System.String > BasePathFactory Base path factory Declaration Func<string> BasePathFactory { get; } Property Value Type Description System.Func < System.String > BaseUriFactory Base uri factory Declaration Func<Uri> BaseUriFactory { get; } Property Value Type Description System.Func < System.Uri > DelegatingHandlersFactories Delegating handlers factories Declaration IDictionary<Type, Func<ILogger, IApizrManagerOptionsBase, DelegatingHandler>> DelegatingHandlersFactories { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , System.Func < Microsoft.Extensions.Logging.ILogger , IApizrManagerOptionsBase , System.Net.Http.DelegatingHandler >> HttpClientFactory HttpClient factory Declaration Func<HttpMessageHandler, Uri, HttpClient> HttpClientFactory { get; } Property Value Type Description System.Func < System.Net.Http.HttpMessageHandler , System.Uri , System.Net.Http.HttpClient > HttpClientHandlerFactory HttpClientHandler factory Declaration Func<HttpClientHandler> HttpClientHandlerFactory { get; } Property Value Type Description System.Func < System.Net.Http.HttpClientHandler > HttpTracerModeFactory Http traffic tracing mode factory Declaration Func<HttpTracerMode> HttpTracerModeFactory { get; } Property Value Type Description System.Func < HttpTracerMode > LogLevelsFactory Log levels factory Declaration Func<LogLevel[]> LogLevelsFactory { get; } Property Value Type Description System.Func < Microsoft.Extensions.Logging.LogLevel []> TrafficVerbosityFactory Http traffic tracing verbosity factory Declaration Func<HttpMessageParts> TrafficVerbosityFactory { get; } Property Value Type Description System.Func < HttpMessageParts >"
  },
  "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBase.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBase.html",
    "title": "Interface IApizrSharedRegistrationOptionsBase | Apizr",
    "keywords": "Interface IApizrSharedRegistrationOptionsBase Options available at both common and proper level for both static and extended registrations Inherited Members IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.ContextFactory IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.OnException IApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache IApizrGlobalSharedOptionsBase.HandlersParameters Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public interface IApizrSharedRegistrationOptionsBase : IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder.html",
    "title": "Interface IApizrSharedRegistrationOptionsBuilder | Apizr",
    "keywords": "Interface IApizrSharedRegistrationOptionsBuilder Builder options available at both common and proper level for static registrations Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public interface IApizrSharedRegistrationOptionsBuilder : IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder-2.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilder-2.html",
    "title": "Interface IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrSharedRegistrationOptionsBuilder<TApizrOptions, TApizrOptionsBuilder> Inherited Members IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public interface IApizrSharedRegistrationOptionsBuilder<out TApizrOptions, out TApizrOptionsBuilder> : IApizrSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrSharedRegistrationOptionsBuilder, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrOptions : IApizrSharedRegistrationOptionsBase where TApizrOptionsBuilder : IApizrSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Type Parameters Name Description TApizrOptions TApizrOptionsBuilder Methods AddDelegatingHandler<THandler>(Func<ILogger, THandler>) Add a custom delegating handler Declaration TApizrOptionsBuilder AddDelegatingHandler<THandler>(Func<ILogger, THandler> delegatingHandlerFactory) where THandler : DelegatingHandler Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , THandler> delegatingHandlerFactory A delegating handler factory Returns Type Description TApizrOptionsBuilder Type Parameters Name Description THandler AddDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler>) Add a custom delegating handler Declaration TApizrOptionsBuilder AddDelegatingHandler<THandler>(Func<ILogger, IApizrManagerOptionsBase, THandler> delegatingHandlerFactory) where THandler : DelegatingHandler Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , IApizrManagerOptionsBase , THandler> delegatingHandlerFactory A delegating handler factory Returns Type Description TApizrOptionsBuilder Type Parameters Name Description THandler WithAuthenticationHandler<TSettingsService>(TSettingsService, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Provide your own settings management service and a method to refresh the token Declaration TApizrOptionsBuilder WithAuthenticationHandler<TSettingsService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description TSettingsService settingsService A TSettingsService instance System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory The method factory called to refresh the token Returns Type Description TApizrOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Provide your own settings management service and a method to refresh the token Declaration TApizrOptionsBuilder WithAuthenticationHandler<TSettingsService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Func <TSettingsService> settingsServiceFactory A TSettingsService instance factory System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory The method factory called to refresh the token Returns Type Description TApizrOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler>) Provide your own AuthenticationHandlerBase implementation factory Declaration TApizrOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<ILogger, IApizrManagerOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters Type Name Description System.Func < Microsoft.Extensions.Logging.ILogger , IApizrManagerOptionsBase , TAuthenticationHandler> authenticationHandlerFactory A TAuthenticationHandler instance factory Returns Type Description TApizrOptionsBuilder Type Parameters Name Description TAuthenticationHandler Your AuthenticationHandlerBase implementation WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService, Expression<Func<TSettingsService, String>>, TTokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Provide your own settings management and token management services Declaration TApizrOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(TSettingsService settingsService, Expression<Func<TSettingsService, string>> tokenProperty, TTokenService tokenService, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description TSettingsService settingsService A TSettingsService instance System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving TTokenService tokenService A TTokenService instance System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod The method called to refresh the token Returns Type Description TApizrOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService>, Expression<Func<TSettingsService, String>>, Func<TTokenService>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Provide your own settings management and token management services Declaration TApizrOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Func<TSettingsService> settingsServiceFactory, Expression<Func<TSettingsService, string>> tokenProperty, Func<TTokenService> tokenServiceFactory, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description System.Func <TSettingsService> settingsServiceFactory A TSettingsService instance factory System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Func <TTokenService> tokenServiceFactory A TTokenService instance factory System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod The method called to refresh the token Returns Type Description TApizrOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithBaseAddress(Func<String>) Define your web api base address (could be defined with WebApiAttribute) Declaration TApizrOptionsBuilder WithBaseAddress(Func<string> baseAddressFactory) Parameters Type Name Description System.Func < System.String > baseAddressFactory Your web api base address factory Returns Type Description TApizrOptionsBuilder WithBaseAddress(Func<Uri>) Define your web api base address (could be defined with WebApiAttribute) Declaration TApizrOptionsBuilder WithBaseAddress(Func<Uri> baseAddressFactory) Parameters Type Name Description System.Func < System.Uri > baseAddressFactory Your web api base address factory Returns Type Description TApizrOptionsBuilder WithBasePath(Func<String>) Define your web api base path (could be defined with WebApiAttribute) Declaration TApizrOptionsBuilder WithBasePath(Func<string> basePathFactory) Parameters Type Name Description System.Func < System.String > basePathFactory Your web api base path factory Returns Type Description TApizrOptionsBuilder WithHttpClient(Func<HttpMessageHandler, Uri, HttpClient>) Provide a custom HttpClient Declaration TApizrOptionsBuilder WithHttpClient(Func<HttpMessageHandler, Uri, HttpClient> httpClientFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpMessageHandler , System.Uri , System.Net.Http.HttpClient > httpClientFactory An System.Net.Http.HttpClient instance factory Returns Type Description TApizrOptionsBuilder WithHttpClientHandler(Func<HttpClientHandler>) Provide a custom HttpClientHandler Declaration TApizrOptionsBuilder WithHttpClientHandler(Func<HttpClientHandler> httpClientHandlerFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpClientHandler > httpClientHandlerFactory An System.Net.Http.HttpClientHandler instance factory Returns Type Description TApizrOptionsBuilder WithLogging(Func<HttpTracerMode>, Func<HttpMessageParts>, Func<LogLevel[]>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration TApizrOptionsBuilder WithLogging(Func<HttpTracerMode> httpTracerModeFactory, Func<HttpMessageParts> trafficVerbosityFactory, Func<LogLevel[]> logLevelsFactory) Parameters Type Name Description System.Func < HttpTracerMode > httpTracerModeFactory Http traffic tracing mode System.Func < HttpMessageParts > trafficVerbosityFactory Http traffic tracing verbosity factory System.Func < Microsoft.Extensions.Logging.LogLevel []> logLevelsFactory Log levels factory Returns Type Description TApizrOptionsBuilder WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration TApizrOptionsBuilder WithLogging(Func<(HttpTracerMode, HttpMessageParts, LogLevel[])> loggingConfigurationFactory) Parameters Type Name Description System.Func < System.ValueTuple < HttpTracerMode , HttpMessageParts , Microsoft.Extensions.Logging.LogLevel []>> loggingConfigurationFactory Logging configuration factory Returns Type Description TApizrOptionsBuilder Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilderBase.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilderBase.html",
    "title": "Interface IApizrSharedRegistrationOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrSharedRegistrationOptionsBuilderBase Builder options available at both common and proper level for both static and extended registrations Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public interface IApizrSharedRegistrationOptionsBuilderBase : IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Configuring.Shared.IApizrSharedRegistrationOptionsBuilderBase-2.html",
    "title": "Interface IApizrSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Inherited Members IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Configuring.Shared Assembly : Apizr.dll Syntax public interface IApizrSharedRegistrationOptionsBuilderBase<out TApizrOptions, out TApizrOptionsBuilder> : IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder>, IApizrSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrOptions : IApizrSharedRegistrationOptionsBase where TApizrOptionsBuilder : IApizrSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> Type Parameters Name Description TApizrOptions TApizrOptionsBuilder Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Configuring.UpdateHandlerParameterAttribute.html": {
    "href": "api/Apizr.Configuring.UpdateHandlerParameterAttribute.html",
    "title": "Class UpdateHandlerParameterAttribute | Apizr",
    "keywords": "Class UpdateHandlerParameterAttribute Inheritance System.Object System.Attribute Refit.PropertyAttribute HandlerParameterAttribute CrudHandlerParameterAttribute UpdateHandlerParameterAttribute Inherited Members HandlerParameterAttribute.Value Refit.PropertyAttribute.Key System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Configuring Assembly : Apizr.dll Syntax public abstract class UpdateHandlerParameterAttribute : CrudHandlerParameterAttribute Constructors UpdateHandlerParameterAttribute(String, Object) Declaration protected UpdateHandlerParameterAttribute(string key, object value) Parameters Type Name Description System.String key System.Object value"
  },
  "api/Apizr.Connecting.DefaultConnectivityHandler.html": {
    "href": "api/Apizr.Connecting.DefaultConnectivityHandler.html",
    "title": "Class DefaultConnectivityHandler | Apizr",
    "keywords": "Class DefaultConnectivityHandler The connectivity handler method mapping default implementation Inheritance System.Object DefaultConnectivityHandler Implements IConnectivityHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Connecting Assembly : Apizr.dll Syntax public class DefaultConnectivityHandler : IConnectivityHandler Constructors DefaultConnectivityHandler(Func<Boolean>) The connectivity handler constructor Declaration public DefaultConnectivityHandler(Func<bool> connectivityChecker) Parameters Type Name Description System.Func < System.Boolean > connectivityChecker Methods IsConnected() Map Apizr connectivity check to your connectivity handler Declaration public bool IsConnected() Returns Type Description System.Boolean Implements IConnectivityHandler"
  },
  "api/Apizr.Connecting.html": {
    "href": "api/Apizr.Connecting.html",
    "title": "Namespace Apizr.Connecting | Apizr",
    "keywords": "Namespace Apizr.Connecting Classes DefaultConnectivityHandler The connectivity handler method mapping default implementation Interfaces IConnectivityHandler The connectivity handler method mapping interface Implement it to provide some connectivity features to Apizr"
  },
  "api/Apizr.Connecting.IConnectivityHandler.html": {
    "href": "api/Apizr.Connecting.IConnectivityHandler.html",
    "title": "Interface IConnectivityHandler | Apizr",
    "keywords": "Interface IConnectivityHandler The connectivity handler method mapping interface Implement it to provide some connectivity features to Apizr Namespace : Apizr.Connecting Assembly : Apizr.dll Syntax public interface IConnectivityHandler Methods IsConnected() Map Apizr connectivity check to your connectivity handler Declaration bool IsConnected() Returns Type Description System.Boolean"
  },
  "api/Apizr.DistributedCacheHandler-1.html": {
    "href": "api/Apizr.DistributedCacheHandler-1.html",
    "title": "Class DistributedCacheHandler<TCache> | Apizr",
    "keywords": "Class DistributedCacheHandler<TCache> Distributed cache handler implementation Inheritance System.Object DistributedCacheHandler<TCache> Implements ICacheHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Extensions.Microsoft.Caching.dll Syntax public class DistributedCacheHandler<TCache> : ICacheHandler Type Parameters Name Description TCache Constructors DistributedCacheHandler(IDistributedCache, IHttpContentSerializer) Declaration public DistributedCacheHandler(IDistributedCache distributedCache, IHttpContentSerializer contentSerializer) Parameters Type Name Description Microsoft.Extensions.Caching.Distributed.IDistributedCache distributedCache Refit.IHttpContentSerializer contentSerializer Methods ClearAsync(CancellationToken) Map Apizr cache clearing method to your cache handler method Declaration public Task ClearAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task GetAsync<TData>(String, CancellationToken) Map Apizr cache getting method to your cache handler method Declaration public async Task<TData> GetAsync<TData>(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key The key to get from System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task <TData> Type Parameters Name Description TData RemoveAsync(String, CancellationToken) Map Apizr cache removing method to your cache handler method Declaration public async Task<bool> RemoveAsync(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key The key to remove from System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Boolean > SetAsync(String, Object, Nullable<TimeSpan>, CancellationToken) Map Apizr cache saving method to your cache handler method Declaration public async Task SetAsync(string key, object value, TimeSpan? lifeSpan = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key The key to cache at System.Object value The value to cache System.Nullable < System.TimeSpan > lifeSpan The optional life span System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task Implements ICacheHandler"
  },
  "api/Apizr.Extending.ApizrManagerExtensions.html": {
    "href": "api/Apizr.Extending.ApizrManagerExtensions.html",
    "title": "Class ApizrManagerExtensions | Apizr",
    "keywords": "Class ApizrManagerExtensions Inheritance System.Object ApizrManagerExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending Assembly : Apizr.dll Syntax public static class ApizrManagerExtensions Methods ExecuteAsync<TWebApi>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task>>, Action<Exception>) Execute a managed TWebApi 's task Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task ExecuteAsync<TWebApi>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, Task>> executeApiMethod, Action<Exception> onException) Parameters Type Name Description IApizrManager <TWebApi> manager System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi 's task to execute System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api interface to manage ExecuteAsync<TWebApi>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>) Execute a managed TWebApi 's task Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task ExecuteAsync<TWebApi>(this IApizrManager<TWebApi> manager, Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context = null, Action<Exception> onException = null) Parameters Type Name Description IApizrManager <TWebApi> manager System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi 's task to execute Polly.Context context The Polly Context to pass through it all System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api interface to manage ExecuteAsync<TWebApi>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken, Action<Exception>) Execute a managed TWebApi 's task Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task ExecuteAsync<TWebApi>(this IApizrManager<TWebApi> manager, Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context = null, CancellationToken cancellationToken = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description IApizrManager <TWebApi> manager System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi 's task to execute Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken cancellationToken A cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api interface to manage ExecuteAsync<TWebApi>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken, Action<Exception>) Execute a managed TWebApi 's task Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task ExecuteAsync<TWebApi>(this IApizrManager<TWebApi> manager, Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod, CancellationToken cancellationToken = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description IApizrManager <TWebApi> manager System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi 's task to execute System.Threading.CancellationToken cancellationToken A cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api interface to manage ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>) Execute a managed TWebApi 's task Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiData> ExecuteAsync<TWebApi, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<Exception> onException) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi 's task to execute System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api interface to manage TApiData The TWebApi 's task result ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean) Execute a managed TWebApi 's task Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiData> ExecuteAsync<TWebApi, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi 's task to execute System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api interface to manage TApiData The TWebApi 's task result ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Execute a managed TWebApi 's task Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiData> ExecuteAsync<TWebApi, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache, Action<Exception> onException) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi 's task to execute System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api interface to manage TApiData The TWebApi 's task result ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Execute a managed TWebApi 's task Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiData> ExecuteAsync<TWebApi, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi 's task to execute Polly.Context context The Polly Context to pass through it all System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api interface to manage TApiData The TWebApi 's task result ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) Execute a managed TWebApi 's task Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiData> ExecuteAsync<TWebApi, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi 's task to execute Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken cancellationToken A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api interface to manage TApiData The TWebApi 's task result ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) Execute a managed TWebApi 's task Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiData> ExecuteAsync<TWebApi, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi 's task to execute System.Threading.CancellationToken cancellationToken A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api interface to manage TApiData The TWebApi 's task result ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<Exception> onException) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api interface to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean) Execute a managed TWebApi 's task returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api interface to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache, Action<Exception> onException) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api interface to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<Exception>) Execute a managed TWebApi 's task Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<Exception> onException) Parameters Type Name Description IApizrManager <TWebApi> manager System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api interface to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<Exception> onException) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api interface to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean) Execute a managed TWebApi 's task returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api interface to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache, Action<Exception> onException) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api interface to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api interface to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>) Execute a managed TWebApi 's task Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, Action<Exception> onException = null) Parameters Type Name Description IApizrManager <TWebApi> manager System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api interface to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly Context to pass through it all System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api interface to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken cancellationToken A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api interface to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken, Action<Exception>) Execute a managed TWebApi 's task Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken cancellationToken = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description IApizrManager <TWebApi> manager System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken cancellationToken A cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api interface to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken cancellationToken A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api interface to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Threading.CancellationToken cancellationToken A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api interface to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken, Action<Exception>) Execute a managed TWebApi 's task Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, CancellationToken cancellationToken = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description IApizrManager <TWebApi> manager System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Threading.CancellationToken cancellationToken A cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api interface to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrManager<TWebApi> manager, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken cancellationToken A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api interface to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelResultData> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<Exception> onException) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data to map System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api interface to manage TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean) Execute a managed TWebApi 's task returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelResultData> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data to map System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api interface to manage TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelResultData> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrManager<TWebApi> manager, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache, Action<Exception> onException) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data to map System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api interface to manage TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelResultData> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrManager<TWebApi> manager, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data to map Polly.Context context The Polly Context to pass through it all System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api interface to manage TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelResultData> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrManager<TWebApi> manager, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken cancellationToken A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api interface to manage TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean, Action<Exception>) Execute a managed TWebApi 's task returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelResultData> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrManager<TWebApi> manager, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, CancellationToken cancellationToken = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrManager <TWebApi> manager The api manager System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data to map System.Threading.CancellationToken cancellationToken A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api interface to manage TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type"
  },
  "api/Apizr.Extending.ApizrRegistryExtensions.html": {
    "href": "api/Apizr.Extending.ApizrRegistryExtensions.html",
    "title": "Class ApizrRegistryExtensions | Apizr",
    "keywords": "Class ApizrRegistryExtensions Inheritance System.Object ApizrRegistryExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending Assembly : Apizr.dll Syntax public static class ApizrRegistryExtensions Methods ClearCacheAsync<TWebApi>(IApizrEnumerableRegistry, CancellationToken) Clear all cache Declaration public static Task<bool> ClearCacheAsync<TWebApi>(this IApizrEnumerableRegistry registry, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < System.Boolean > Type Parameters Name Description TWebApi The web api to manage ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TResult>>>) Clear the cache of a specific request Declaration public static Task<bool> ClearCacheAsync<TWebApi, TResult>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, Task<TResult>>> executeApiMethod) Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TResult>>> executeApiMethod The specific TWebApi 's task to clear cache for Returns Type Description System.Threading.Tasks.Task < System.Boolean > Type Parameters Name Description TWebApi The web api to manage TResult The TWebApi 's task result ClearCacheAsync<TWebApi, TResult>(IApizrEnumerableRegistry, Expression<Func<CancellationToken, TWebApi, Task<TResult>>>, CancellationToken) Clear the cache of a specific request Declaration public static Task<bool> ClearCacheAsync<TWebApi, TResult>(this IApizrEnumerableRegistry registry, Expression<Func<CancellationToken, TWebApi, Task<TResult>>> executeApiMethod, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TResult>>> executeApiMethod The specific TWebApi 's task to clear cache for System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < System.Boolean > Type Parameters Name Description TWebApi The web api to manage TResult The TWebApi 's task result CreateAsync<TApiEntity>(IApizrEnumerableRegistry, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a Create request Declaration public static Task<TApiEntity> CreateAsync<TApiEntity>(this IApizrEnumerableRegistry registry, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters Type Name Description IApizrEnumerableRegistry registry The registry TApiEntity entity The entity to create System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type CreateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped Create request, returning a mapped result Declaration public static Task<TModelEntity> CreateAsync<TModelEntity, TApiEntity>(this IApizrEnumerableRegistry registry, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters Type Name Description IApizrEnumerableRegistry registry The registry TModelEntity entity The entity to create System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to DeleteAsync<TApiEntity>(IApizrEnumerableRegistry, Int32, Action<IApizrRequestOptionsBuilder>) Send an Delete request Declaration public static Task DeleteAsync<TApiEntity>(this IApizrEnumerableRegistry registry, int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Int32 key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type DeleteAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send an Delete request Declaration public static Task DeleteAsync<TApiEntity, TApiEntityKey>(this IApizrEnumerableRegistry registry, TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters Type Name Description IApizrEnumerableRegistry registry The registry TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task Declaration public static Task ExecuteAsync<TWebApi>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi 's task to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi ExecuteAsync<TWebApi>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task Declaration public static Task ExecuteAsync<TWebApi>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi 's task to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task Declaration public static Task<TApiData> ExecuteAsync<TWebApi, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi 's task to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api to manage TApiData The TWebApi 's task result ExecuteAsync<TWebApi, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task Declaration public static Task<TApiData> ExecuteAsync<TWebApi, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi 's task to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api to manage TApiData The TWebApi 's task result ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task returning a mapped result Declaration public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task Declaration public static Task ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task returning a mapped result Declaration public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task returning a mapped result Declaration public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task Declaration public static Task ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task returning a mapped result Declaration public static Task<TModelData> ExecuteAsync<TWebApi, TModelData, TApiData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api to manage TModelData The model data type TApiData The api data type ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task returning a mapped result Declaration public static Task<TModelResultData> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrEnumerableRegistry registry, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api to manage TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrEnumerableRegistry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task returning a mapped result Declaration public static Task<TModelResultData> ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrEnumerableRegistry registry, Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api to manage TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) Send a ReadAll request Declaration public static Task<TReadAllResult> ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult>(this IApizrEnumerableRegistry registry, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type TReadAllResult The \"ReadAll\" query result type ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAll request with some parameters Declaration public static Task<TReadAllResult> ReadAllAsync<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrEnumerableRegistry registry, TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters Type Name Description IApizrEnumerableRegistry registry The registry TReadAllParams readAllParams The read all filters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type TReadAllResult The api result type TReadAllParams The ReadAll parameters type ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(IApizrEnumerableRegistry, Action<IApizrRequestOptionsBuilder>) Send a ReadAll request, returning mapped result Declaration public static Task<TModelReadAllResult> ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult>(this IApizrEnumerableRegistry registry, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type TApiReadAllResult The api result type to map from ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(IApizrEnumerableRegistry, TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAll request with some parameters, returning mapped result Declaration public static Task<TModelReadAllResult> ReadAllAsync<TModelReadAllResult, TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>(this IApizrEnumerableRegistry registry, TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters Type Name Description IApizrEnumerableRegistry registry The registry TReadAllParams readAllParams The read all filters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type ReadAsync<TApiEntity>(IApizrEnumerableRegistry, Int32, Action<IApizrRequestOptionsBuilder>) Send a Read request Declaration public static Task<TApiEntity> ReadAsync<TApiEntity>(this IApizrEnumerableRegistry registry, int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Int32 key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type ReadAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a Read request Declaration public static Task<TApiEntity> ReadAsync<TApiEntity, TApiEntityKey>(this IApizrEnumerableRegistry registry, TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters Type Name Description IApizrEnumerableRegistry registry The registry TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type ReadAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, Int32, Action<IApizrRequestOptionsBuilder>) Send a Read request, returning mapped result Declaration public static Task<TModelEntity> ReadAsync<TModelEntity, TApiEntity>(this IApizrEnumerableRegistry registry, int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Int32 key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to ReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a Read request, returning mapped result Declaration public static Task<TModelEntity> ReadAsync<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrEnumerableRegistry registry, TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters Type Name Description IApizrEnumerableRegistry registry The registry TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type UpdateAsync<TApiEntity>(IApizrEnumerableRegistry, Int32, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send an Update request Declaration public static Task UpdateAsync<TApiEntity>(this IApizrEnumerableRegistry registry, int key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Int32 key The entity key TApiEntity entity The entity to update System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type UpdateAsync<TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send an Update request Declaration public static Task UpdateAsync<TApiEntity, TApiEntityKey>(this IApizrEnumerableRegistry registry, TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters Type Name Description IApizrEnumerableRegistry registry The registry TApiEntityKey key The entity key TApiEntity entity The entity to update System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type UpdateAsync<TModelEntity, TApiEntity>(IApizrEnumerableRegistry, Int32, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped Update request, returning mapped result Declaration public static Task UpdateAsync<TModelEntity, TApiEntity>(this IApizrEnumerableRegistry registry, int key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.Int32 key The entity key TModelEntity entity The entity to update System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to UpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(IApizrEnumerableRegistry, TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped Update request, returning mapped result Declaration public static Task UpdateAsync<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrEnumerableRegistry registry, TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TApiEntity : class Parameters Type Name Description IApizrEnumerableRegistry registry The registry TApiEntityKey key The entity key TModelEntity entity The entity to update System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type"
  },
  "api/Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.html": {
    "href": "api/Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptions.html",
    "title": "Class ApizrExtendedCommonOptions | Apizr",
    "keywords": "Class ApizrExtendedCommonOptions Options available at common level for extended registrations Inheritance System.Object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase ApizrCommonOptionsBase ApizrExtendedCommonOptions Implements IApizrExtendedCommonOptions IApizrExtendedCommonOptionsBase IApizrCommonOptionsBase IApizrSharedRegistrationOptionsBase IApizrExtendedSharedOptions IApizrExtendedSharedOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Inherited Members ApizrCommonOptionsBase.RefitSettings ApizrGlobalSharedRegistrationOptionsBase.BaseUri ApizrGlobalSharedRegistrationOptionsBase.BaseAddress ApizrGlobalSharedRegistrationOptionsBase.BasePath ApizrGlobalSharedRegistrationOptionsBase.ContextFactory ApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache ApizrGlobalSharedOptionsBase.HandlersParameters System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending.Configuring.Common Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public class ApizrExtendedCommonOptions : ApizrCommonOptionsBase, IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBase, IApizrCommonOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrExtendedSharedOptions, IApizrExtendedSharedOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Constructors ApizrExtendedCommonOptions() Declaration public ApizrExtendedCommonOptions() Properties BaseAddressFactory Base address factory Declaration public Func<IServiceProvider, string> BaseAddressFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.String > BasePathFactory Base path factory Declaration public Func<IServiceProvider, string> BasePathFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.String > BaseUriFactory Base Uri factory Declaration public Func<IServiceProvider, Uri> BaseUriFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.Uri > CacheHandlerFactory Cache handler factory Declaration public Func<IServiceProvider, ICacheHandler> CacheHandlerFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , ICacheHandler > CacheHandlerType Type of the cache handler Declaration public Type CacheHandlerType { get; set; } Property Value Type Description System.Type ConnectivityHandlerFactory Connectivity handler factory Declaration public Func<IServiceProvider, IConnectivityHandler> ConnectivityHandlerFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , IConnectivityHandler > ConnectivityHandlerType Type of the connectivity handler Declaration public Type ConnectivityHandlerType { get; set; } Property Value Type Description System.Type CrudEntities Entities auto registered with IApizrManager<TWebApi> Declaration public IDictionary<Type, CrudEntityAttribute> CrudEntities { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , CrudEntityAttribute > DelegatingHandlersExtendedFactories Delegating handlers factories Declaration public IDictionary<Type, Func<IServiceProvider, IApizrManagerOptionsBase, DelegatingHandler>> DelegatingHandlersExtendedFactories { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , System.Func < System.IServiceProvider , IApizrManagerOptionsBase , System.Net.Http.DelegatingHandler >> HttpClientBuilder HttpClient builder Declaration public Action<IHttpClientBuilder> HttpClientBuilder { get; set; } Property Value Type Description System.Action < Microsoft.Extensions.DependencyInjection.IHttpClientBuilder > HttpClientHandlerFactory HttpClientHandler factory Declaration public Func<IServiceProvider, HttpClientHandler> HttpClientHandlerFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.Net.Http.HttpClientHandler > HttpTracerModeFactory Http traffic tracing mode factory Declaration public Func<IServiceProvider, HttpTracerMode> HttpTracerModeFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , HttpTracerMode > LogLevelsFactory Log levels factory Declaration public Func<IServiceProvider, LogLevel[]> LogLevelsFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , Microsoft.Extensions.Logging.LogLevel []> MappingHandlerFactory Mapping handler factory Declaration public Func<IServiceProvider, IMappingHandler> MappingHandlerFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , IMappingHandler > MappingHandlerType Type of the mapping handler Declaration public Type MappingHandlerType { get; set; } Property Value Type Description System.Type ObjectMappings Mappings between api request object and model object used for classic auto registration Declaration public IDictionary<Type, MappedWithAttribute> ObjectMappings { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , MappedWithAttribute > PostRegistrationActions Post registration actions Declaration public IList<Action<Type, IServiceCollection>> PostRegistrationActions { get; } Property Value Type Description System.Collections.Generic.IList < System.Action < System.Type , Microsoft.Extensions.DependencyInjection.IServiceCollection >> PostRegistries Other registries plugged during post registration actions Declaration public IDictionary<Type, IApizrExtendedConcurrentRegistryBase> PostRegistries { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , IApizrExtendedConcurrentRegistryBase > RefitSettingsFactory Refit settings factory Declaration public Func<IServiceProvider, RefitSettings> RefitSettingsFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , Refit.RefitSettings > TrafficVerbosityFactory Http traffic tracing verbosity factory Declaration public Func<IServiceProvider, HttpMessageParts> TrafficVerbosityFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , HttpMessageParts > WebApis Web apis auto registered with IApizrManager<TWebApi> Declaration public IDictionary<Type, WebApiAttribute> WebApis { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , WebApiAttribute > Implements IApizrExtendedCommonOptions IApizrExtendedCommonOptionsBase IApizrCommonOptionsBase IApizrSharedRegistrationOptionsBase IApizrExtendedSharedOptions IApizrExtendedSharedOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Common.ApizrExtendedCommonOptionsBuilder.html",
    "title": "Class ApizrExtendedCommonOptionsBuilder | Apizr",
    "keywords": "Class ApizrExtendedCommonOptionsBuilder Builder options available at common level for extended registration Inheritance System.Object ApizrExtendedCommonOptionsBuilder Implements IApizrExtendedCommonOptionsBuilder IApizrExtendedCommonOptionsBuilder < IApizrExtendedCommonOptions , IApizrExtendedCommonOptionsBuilder > IApizrExtendedCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase < IApizrExtendedCommonOptions , IApizrExtendedCommonOptionsBuilder > IApizrGlobalCommonOptionsBuilderBase IApizrExtendedSharedOptionsBuilder < IApizrExtendedCommonOptions , IApizrExtendedCommonOptionsBuilder > IApizrExtendedSharedRegistrationOptionsBuilderBase IApizrGlobalSharedRegistrationOptionsBuilderBase < IApizrExtendedCommonOptions , IApizrExtendedCommonOptionsBuilder > IApizrGlobalSharedOptionsBuilderBase < IApizrExtendedCommonOptions , IApizrExtendedCommonOptionsBuilder > IApizrGlobalSharedRegistrationOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending.Configuring.Common Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public class ApizrExtendedCommonOptionsBuilder : IApizrExtendedCommonOptionsBuilder, IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrExtendedCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrExtendedSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Fields Options Declaration protected readonly ApizrExtendedCommonOptions Options Field Value Type Description ApizrExtendedCommonOptions Methods AddDelegatingHandler<THandler>(THandler) Add a custom delegating handler Declaration public IApizrExtendedCommonOptionsBuilder AddDelegatingHandler<THandler>(THandler delegatingHandler) where THandler : DelegatingHandler Parameters Type Name Description THandler delegatingHandler A delegating handler Returns Type Description IApizrExtendedCommonOptionsBuilder Type Parameters Name Description THandler AddDelegatingHandler<THandler>(Func<IServiceProvider, THandler>) Add a custom delegating handler Declaration public IApizrExtendedCommonOptionsBuilder AddDelegatingHandler<THandler>(Func<IServiceProvider, THandler> delegatingHandlerFactory) where THandler : DelegatingHandler Parameters Type Name Description System.Func < System.IServiceProvider , THandler> delegatingHandlerFactory A delegating handler factory Returns Type Description IApizrExtendedCommonOptionsBuilder Type Parameters Name Description THandler AddDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>) Add a custom delegating handler Declaration public IApizrExtendedCommonOptionsBuilder AddDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler> delegatingHandlerFactory) where THandler : DelegatingHandler Parameters Type Name Description System.Func < System.IServiceProvider , IApizrManagerOptionsBase , THandler> delegatingHandlerFactory A delegating handler factory Returns Type Description IApizrExtendedCommonOptionsBuilder Type Parameters Name Description THandler ConfigureHttpClientBuilder(Action<IHttpClientBuilder>) Adjust some HttpClient settings Declaration public IApizrExtendedCommonOptionsBuilder ConfigureHttpClientBuilder(Action<IHttpClientBuilder> httpClientBuilder) Parameters Type Name Description System.Action < Microsoft.Extensions.DependencyInjection.IHttpClientBuilder > httpClientBuilder The HttpClient builder Returns Type Description IApizrExtendedCommonOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) Provide a method to refresh the authorization token when needed Declaration public IApizrExtendedCommonOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory Refresh token method called when expired or empty Returns Type Description IApizrExtendedCommonOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler>) Provide your own AuthenticationHandlerBase implementation Declaration public IApizrExtendedCommonOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters Type Name Description System.Func < System.IServiceProvider , IApizrManagerOptionsBase , TAuthenticationHandler> authenticationHandlerFactory A TAuthenticationHandler instance factory Returns Type Description IApizrExtendedCommonOptionsBuilder Type Parameters Name Description TAuthenticationHandler Your AuthenticationHandlerBase implementation WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Provide your own settings management service and a method to refresh the token Declaration public IApizrExtendedCommonOptionsBuilder WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory The method factory called to refresh the token Returns Type Description IApizrExtendedCommonOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, String>>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Provide your own settings management and token management services Declaration public IApizrExtendedCommonOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>> tokenProperty, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod The method called to refresh the token Returns Type Description IApizrExtendedCommonOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithBaseAddress(Func<IServiceProvider, String>) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrExtendedCommonOptionsBuilder WithBaseAddress(Func<IServiceProvider, string> baseAddressFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.String > baseAddressFactory Your web api base address factory Returns Type Description IApizrExtendedCommonOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri>) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrExtendedCommonOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri> baseAddressFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.Uri > baseAddressFactory Your web api base address factory Returns Type Description IApizrExtendedCommonOptionsBuilder WithBaseAddress(String) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrExtendedCommonOptionsBuilder WithBaseAddress(string baseAddress) Parameters Type Name Description System.String baseAddress Your web api base address Returns Type Description IApizrExtendedCommonOptionsBuilder WithBaseAddress(Uri) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrExtendedCommonOptionsBuilder WithBaseAddress(Uri baseAddress) Parameters Type Name Description System.Uri baseAddress Your web api base address Returns Type Description IApizrExtendedCommonOptionsBuilder WithBasePath(Func<IServiceProvider, String>) Define your web api base path (could be defined with WebApiAttribute) Declaration public IApizrExtendedCommonOptionsBuilder WithBasePath(Func<IServiceProvider, string> basePathFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.String > basePathFactory Your web api base path factory Returns Type Description IApizrExtendedCommonOptionsBuilder WithBasePath(String) Define your web api base path (could be defined with WebApiAttribute) Declaration public IApizrExtendedCommonOptionsBuilder WithBasePath(string basePath) Parameters Type Name Description System.String basePath Your web api base path Returns Type Description IApizrExtendedCommonOptionsBuilder WithCacheHandler(ICacheHandler) Provide a cache handler to cache data Declaration public IApizrExtendedCommonOptionsBuilder WithCacheHandler(ICacheHandler cacheHandler) Parameters Type Name Description ICacheHandler cacheHandler An ICacheHandler mapping implementation instance Returns Type Description IApizrExtendedCommonOptionsBuilder WithCacheHandler(Func<IServiceProvider, ICacheHandler>) Provide a cache handler to cache data Declaration public IApizrExtendedCommonOptionsBuilder WithCacheHandler(Func<IServiceProvider, ICacheHandler> cacheHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , ICacheHandler > cacheHandlerFactory A ICacheHandler mapping implementation factory Returns Type Description IApizrExtendedCommonOptionsBuilder WithCacheHandler(Type) Provide a cache handler to cache data Declaration public IApizrExtendedCommonOptionsBuilder WithCacheHandler(Type cacheHandlerType) Parameters Type Name Description System.Type cacheHandlerType Type of your ICacheHandler mapping implementation Returns Type Description IApizrExtendedCommonOptionsBuilder WithCacheHandler<TCacheHandler>() Provide a cache handler to cache data Declaration public IApizrExtendedCommonOptionsBuilder WithCacheHandler<TCacheHandler>() where TCacheHandler : class, ICacheHandler Returns Type Description IApizrExtendedCommonOptionsBuilder Type Parameters Name Description TCacheHandler Your ICacheHandler mapping implementation WithConnectivityHandler(IConnectivityHandler) Provide a connectivity handler to check connectivity before sending a request Declaration public IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(IConnectivityHandler connectivityHandler) Parameters Type Name Description IConnectivityHandler connectivityHandler An IConnectivityHandler mapping implementation instance Returns Type Description IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Func<Boolean>) Provide a function to invoke while checking connectivity Declaration public IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Func<bool> connectivityCheckingFunction) Parameters Type Name Description System.Func < System.Boolean > connectivityCheckingFunction A function to invoke while checking connectivity Returns Type Description IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler>) Provide a connectivity handler to check connectivity before sending a request Declaration public IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler> connectivityHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , IConnectivityHandler > connectivityHandlerFactory A IConnectivityHandler mapping implementation factory Returns Type Description IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Type) Provide a connectivity handler to check connectivity before sending a request Declaration public IApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Type connectivityHandlerType) Parameters Type Name Description System.Type connectivityHandlerType Type of your IConnectivityHandler mapping implementation Returns Type Description IApizrExtendedCommonOptionsBuilder WithConnectivityHandler<TConnectivityHandler>() Provide a connectivity handler to check connectivity before sending a request Declaration public IApizrExtendedCommonOptionsBuilder WithConnectivityHandler<TConnectivityHandler>() where TConnectivityHandler : class, IConnectivityHandler Returns Type Description IApizrExtendedCommonOptionsBuilder Type Parameters Name Description TConnectivityHandler Your IConnectivityHandler mapping implementation WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, Boolean>>) Provide a connectivity handler to check connectivity before sending a request Declaration public IApizrExtendedCommonOptionsBuilder WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, bool>> factory) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TConnectivityHandler, System.Boolean >> factory Returns Type Description IApizrExtendedCommonOptionsBuilder Type Parameters Name Description TConnectivityHandler Your connectivity checking service WithContext(Func<Context>, ApizrDuplicateStrategy) Set the Polly Context Declaration public IApizrExtendedCommonOptionsBuilder WithContext(Func<Context> contextFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Merge) Parameters Type Name Description System.Func < Polly.Context > contextFactory The Polly Context to pass through it all ApizrDuplicateStrategy strategy The duplicate strategy if there's another one already (default: Merge) Returns Type Description IApizrExtendedCommonOptionsBuilder WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) Catch potential exceptions Declaration public IApizrExtendedCommonOptionsBuilder WithExCatching(Action<ApizrException> onException, bool letThrowOnExceptionWithEmptyCache = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters Type Name Description System.Action < ApizrException > onException The exception callback System.Boolean letThrowOnExceptionWithEmptyCache Let throw potential exception if there's no cached data to return (default: true) ApizrDuplicateStrategy strategy The duplicate strategy if there's another callback already (default: Replace) Returns Type Description IApizrExtendedCommonOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) Catch potential exceptions Declaration public IApizrExtendedCommonOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>> onException, bool letThrowOnExceptionWithEmptyCache = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters Type Name Description System.Action < ApizrException <TResult>> onException The exception callback System.Boolean letThrowOnExceptionWithEmptyCache Let throw potential exception if there's no cached data to return (default: true) ApizrDuplicateStrategy strategy The duplicate strategy if there's another callback already (default: Replace) Returns Type Description IApizrExtendedCommonOptionsBuilder Type Parameters Name Description TResult WithHandlerParameter(String, Object) Set some parameters passed through all delegating handlers Declaration public IApizrExtendedCommonOptionsBuilder WithHandlerParameter(string key, object value) Parameters Type Name Description System.String key The parameter's key System.Object value The parameter's value Returns Type Description IApizrExtendedCommonOptionsBuilder WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) Provide a custom HttpClientHandler Declaration public IApizrExtendedCommonOptionsBuilder WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler> httpClientHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.Net.Http.HttpClientHandler > httpClientHandlerFactory An System.Net.Http.HttpClientHandler instance factory Returns Type Description IApizrExtendedCommonOptionsBuilder WithHttpClientHandler(HttpClientHandler) Provide a custom HttpClientHandler Declaration public IApizrExtendedCommonOptionsBuilder WithHttpClientHandler(HttpClientHandler httpClientHandler) Parameters Type Name Description System.Net.Http.HttpClientHandler httpClientHandler An System.Net.Http.HttpClientHandler instance Returns Type Description IApizrExtendedCommonOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration public IApizrExtendedCommonOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: All) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: Information) Returns Type Description IApizrExtendedCommonOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration public IApizrExtendedCommonOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode> httpTracerModeFactory, Func<IServiceProvider, HttpMessageParts> trafficVerbosityFactory, Func<IServiceProvider, LogLevel[]> logLevelsFactory) Parameters Type Name Description System.Func < System.IServiceProvider , HttpTracerMode > httpTracerModeFactory Http traffic tracing mode factory System.Func < System.IServiceProvider , HttpMessageParts > trafficVerbosityFactory Http traffic tracing verbosity factory System.Func < System.IServiceProvider , Microsoft.Extensions.Logging.LogLevel []> logLevelsFactory Log levels factory Returns Type Description IApizrExtendedCommonOptionsBuilder WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration public IApizrExtendedCommonOptionsBuilder WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])> loggingConfigurationFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.ValueTuple < HttpTracerMode , HttpMessageParts , Microsoft.Extensions.Logging.LogLevel []>> loggingConfigurationFactory Logging configuration factory Returns Type Description IApizrExtendedCommonOptionsBuilder WithMappingHandler(IMappingHandler) Provide a mapping handler to map entities Declaration public IApizrExtendedCommonOptionsBuilder WithMappingHandler(IMappingHandler mappingHandler) Parameters Type Name Description IMappingHandler mappingHandler An IMappingHandler mapping implementation instance Returns Type Description IApizrExtendedCommonOptionsBuilder WithMappingHandler(Func<IServiceProvider, IMappingHandler>) Provide a mapping handler to auto map entities during mediation Declaration public IApizrExtendedCommonOptionsBuilder WithMappingHandler(Func<IServiceProvider, IMappingHandler> mappingHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , IMappingHandler > mappingHandlerFactory A IMappingHandler mapping implementation factory Returns Type Description IApizrExtendedCommonOptionsBuilder WithMappingHandler(Type) Provide a mapping handler to auto map entities during mediation Declaration public IApizrExtendedCommonOptionsBuilder WithMappingHandler(Type mappingHandlerType) Parameters Type Name Description System.Type mappingHandlerType Type of your IMappingHandler mapping implementation Returns Type Description IApizrExtendedCommonOptionsBuilder WithMappingHandler<TMappingHandler>() Provide a mapping handler to auto map entities during mediation Declaration public IApizrExtendedCommonOptionsBuilder WithMappingHandler<TMappingHandler>() where TMappingHandler : class, IMappingHandler Returns Type Description IApizrExtendedCommonOptionsBuilder Type Parameters Name Description TMappingHandler Your IMappingHandler mapping implementation WithRefitSettings(RefitSettings) Provide some Refit specific settings Declaration public IApizrExtendedCommonOptionsBuilder WithRefitSettings(RefitSettings refitSettings) Parameters Type Name Description Refit.RefitSettings refitSettings A Refit.RefitSettings instance Returns Type Description IApizrExtendedCommonOptionsBuilder WithRefitSettings(Func<IServiceProvider, RefitSettings>) Provide some Refit specific settings Declaration public IApizrExtendedCommonOptionsBuilder WithRefitSettings(Func<IServiceProvider, RefitSettings> refitSettingsFactory) Parameters Type Name Description System.Func < System.IServiceProvider , Refit.RefitSettings > refitSettingsFactory A Refit.RefitSettings instance factory Returns Type Description IApizrExtendedCommonOptionsBuilder Implements IApizrExtendedCommonOptionsBuilder IApizrExtendedCommonOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder> IApizrExtendedCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> IApizrGlobalCommonOptionsBuilderBase IApizrExtendedSharedOptionsBuilder<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder> IApizrExtendedSharedRegistrationOptionsBuilderBase IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrGlobalSharedRegistrationOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Extension Methods MicrosoftCachingOptionsBuilderExtensions.WithDistributedCacheHandler<TBuilder, TCache>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithInMemoryCacheHandler<TBuilder>(TBuilder) OptionalOptionsBuilderExtensions.WithOptionalMediation(IApizrExtendedCommonOptionsBuilder) MediationOptionsBuilderExtensions.WithMediation(IApizrExtendedCommonOptionsBuilder) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) MediationFileTransferOptionsBuilderExtensions.WithFileTransferMediation(IApizrExtendedCommonOptionsBuilder) OptionalFileTransferOptionsBuilderExtensions.WithFileTransferOptionalMediation(IApizrExtendedCommonOptionsBuilder) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder)"
  },
  "api/Apizr.Extending.Configuring.Common.html": {
    "href": "api/Apizr.Extending.Configuring.Common.html",
    "title": "Namespace Apizr.Extending.Configuring.Common | Apizr",
    "keywords": "Namespace Apizr.Extending.Configuring.Common Classes ApizrExtendedCommonOptions Options available at common level for extended registrations ApizrExtendedCommonOptionsBuilder Builder options available at common level for extended registration Interfaces IApizrExtendedCommonOptions Options available at common level for extended registrations IApizrExtendedCommonOptionsBase Options available at common level for extended registrations IApizrExtendedCommonOptionsBuilder Builder options available at common level for extended registration IApizrExtendedCommonOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder> Builder options available at common level for extended registration"
  },
  "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.html": {
    "href": "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptions.html",
    "title": "Interface IApizrExtendedCommonOptions | Apizr",
    "keywords": "Interface IApizrExtendedCommonOptions Options available at common level for extended registrations Inherited Members IApizrCommonOptionsBase.RefitSettings IApizrExtendedSharedOptions.BaseUriFactory IApizrExtendedSharedOptions.BaseAddressFactory IApizrExtendedSharedOptions.BasePathFactory IApizrExtendedSharedOptions.HttpTracerModeFactory IApizrExtendedSharedOptions.TrafficVerbosityFactory IApizrExtendedSharedOptions.LogLevelsFactory IApizrExtendedSharedOptions.HttpClientHandlerFactory IApizrExtendedSharedOptions.HttpClientBuilder IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.ContextFactory IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.OnException IApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache IApizrGlobalSharedOptionsBase.HandlersParameters Namespace : Apizr.Extending.Configuring.Common Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedCommonOptions : IApizrExtendedCommonOptionsBase, IApizrCommonOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrExtendedSharedOptions, IApizrExtendedSharedOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Properties CacheHandlerFactory Cache handler factory Declaration Func<IServiceProvider, ICacheHandler> CacheHandlerFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , ICacheHandler > CacheHandlerType Type of the cache handler Declaration Type CacheHandlerType { get; } Property Value Type Description System.Type ConnectivityHandlerFactory Connectivity handler factory Declaration Func<IServiceProvider, IConnectivityHandler> ConnectivityHandlerFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , IConnectivityHandler > ConnectivityHandlerType Type of the connectivity handler Declaration Type ConnectivityHandlerType { get; } Property Value Type Description System.Type CrudEntities Entities auto registered with IApizrManager<TWebApi> Declaration IDictionary<Type, CrudEntityAttribute> CrudEntities { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , CrudEntityAttribute > MappingHandlerFactory Mapping handler factory Declaration Func<IServiceProvider, IMappingHandler> MappingHandlerFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , IMappingHandler > MappingHandlerType Type of the mapping handler Declaration Type MappingHandlerType { get; } Property Value Type Description System.Type ObjectMappings Mappings between api request object and model object used for classic auto registration Declaration IDictionary<Type, MappedWithAttribute> ObjectMappings { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , MappedWithAttribute > PostRegistrationActions Post registration actions Declaration IList<Action<Type, IServiceCollection>> PostRegistrationActions { get; } Property Value Type Description System.Collections.Generic.IList < System.Action < System.Type , Microsoft.Extensions.DependencyInjection.IServiceCollection >> PostRegistries Other registries plugged during post registration actions Declaration IDictionary<Type, IApizrExtendedConcurrentRegistryBase> PostRegistries { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , IApizrExtendedConcurrentRegistryBase > RefitSettingsFactory Refit settings factory Declaration Func<IServiceProvider, RefitSettings> RefitSettingsFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , Refit.RefitSettings > WebApis Web apis auto registered with IApizrManager<TWebApi> Declaration IDictionary<Type, WebApiAttribute> WebApis { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , WebApiAttribute >"
  },
  "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBase.html": {
    "href": "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBase.html",
    "title": "Interface IApizrExtendedCommonOptionsBase | Apizr",
    "keywords": "Interface IApizrExtendedCommonOptionsBase Options available at common level for extended registrations Inherited Members IApizrCommonOptionsBase.RefitSettings IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.ContextFactory IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.OnException IApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache IApizrGlobalSharedOptionsBase.HandlersParameters Namespace : Apizr.Extending.Configuring.Common Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedCommonOptionsBase : IApizrCommonOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrExtendedSharedOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder.html",
    "title": "Interface IApizrExtendedCommonOptionsBuilder | Apizr",
    "keywords": "Interface IApizrExtendedCommonOptionsBuilder Builder options available at common level for extended registration Inherited Members IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithRefitSettings(Func<IServiceProvider, RefitSettings>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, Boolean>>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler<TConnectivityHandler>() IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler(Type) IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithCacheHandler(Func<IServiceProvider, ICacheHandler>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithCacheHandler<TCacheHandler>() IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithCacheHandler(Type) IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithMappingHandler(Func<IServiceProvider, IMappingHandler>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithMappingHandler<TMappingHandler>() IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithMappingHandler(Type) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, Uri>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithBasePath(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithLogging(Func<IServiceProvider, (T1, T2, T3)<HttpTracerMode, HttpMessageParts, LogLevel[]>>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.ConfigureHttpClientBuilder(Action<IHttpClientBuilder>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.AddDelegatingHandler<THandler>(Func<IServiceProvider, THandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.AddDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, String>>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Extending.Configuring.Common Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedCommonOptionsBuilder : IApizrExtendedCommonOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrExtendedCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrExtendedSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods MicrosoftCachingOptionsBuilderExtensions.WithDistributedCacheHandler<TBuilder, TCache>(TBuilder) MicrosoftCachingOptionsBuilderExtensions.WithInMemoryCacheHandler<TBuilder>(TBuilder) OptionalOptionsBuilderExtensions.WithOptionalMediation(IApizrExtendedCommonOptionsBuilder) MediationOptionsBuilderExtensions.WithMediation(IApizrExtendedCommonOptionsBuilder) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) MediationFileTransferOptionsBuilderExtensions.WithFileTransferMediation(IApizrExtendedCommonOptionsBuilder) OptionalFileTransferOptionsBuilderExtensions.WithFileTransferOptionalMediation(IApizrExtendedCommonOptionsBuilder) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder)"
  },
  "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder-2.html": {
    "href": "api/Apizr.Extending.Configuring.Common.IApizrExtendedCommonOptionsBuilder-2.html",
    "title": "Interface IApizrExtendedCommonOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrExtendedCommonOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder> Builder options available at common level for extended registration Inherited Members IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, Uri>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithBasePath(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithLogging(Func<IServiceProvider, (T1, T2, T3)<HttpTracerMode, HttpMessageParts, LogLevel[]>>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.ConfigureHttpClientBuilder(Action<IHttpClientBuilder>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.AddDelegatingHandler<THandler>(Func<IServiceProvider, THandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.AddDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, String>>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Extending.Configuring.Common Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedCommonOptionsBuilder<out TApizrExtendedCommonOptions, out TApizrExtendedCommonOptionsBuilder> : IApizrExtendedCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>, IApizrExtendedSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrExtendedCommonOptions : IApizrCommonOptionsBase where TApizrExtendedCommonOptionsBuilder : IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder> Type Parameters Name Description TApizrExtendedCommonOptions TApizrExtendedCommonOptionsBuilder Methods WithCacheHandler(Func<IServiceProvider, ICacheHandler>) Provide a cache handler to cache data Declaration TApizrExtendedCommonOptionsBuilder WithCacheHandler(Func<IServiceProvider, ICacheHandler> cacheHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , ICacheHandler > cacheHandlerFactory A ICacheHandler mapping implementation factory Returns Type Description TApizrExtendedCommonOptionsBuilder WithCacheHandler(Type) Provide a cache handler to cache data Declaration TApizrExtendedCommonOptionsBuilder WithCacheHandler(Type cacheHandlerType) Parameters Type Name Description System.Type cacheHandlerType Type of your ICacheHandler mapping implementation Returns Type Description TApizrExtendedCommonOptionsBuilder WithCacheHandler<TCacheHandler>() Provide a cache handler to cache data Declaration TApizrExtendedCommonOptionsBuilder WithCacheHandler<TCacheHandler>() where TCacheHandler : class, ICacheHandler Returns Type Description TApizrExtendedCommonOptionsBuilder Type Parameters Name Description TCacheHandler Your ICacheHandler mapping implementation WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler>) Provide a connectivity handler to check connectivity before sending a request Declaration TApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler> connectivityHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , IConnectivityHandler > connectivityHandlerFactory A IConnectivityHandler mapping implementation factory Returns Type Description TApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Type) Provide a connectivity handler to check connectivity before sending a request Declaration TApizrExtendedCommonOptionsBuilder WithConnectivityHandler(Type connectivityHandlerType) Parameters Type Name Description System.Type connectivityHandlerType Type of your IConnectivityHandler mapping implementation Returns Type Description TApizrExtendedCommonOptionsBuilder WithConnectivityHandler<TConnectivityHandler>() Provide a connectivity handler to check connectivity before sending a request Declaration TApizrExtendedCommonOptionsBuilder WithConnectivityHandler<TConnectivityHandler>() where TConnectivityHandler : class, IConnectivityHandler Returns Type Description TApizrExtendedCommonOptionsBuilder Type Parameters Name Description TConnectivityHandler Your IConnectivityHandler mapping implementation WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, Boolean>>) Provide a connectivity handler to check connectivity before sending a request Declaration TApizrExtendedCommonOptionsBuilder WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, bool>> connectivityProperty) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TConnectivityHandler, System.Boolean >> connectivityProperty Returns Type Description TApizrExtendedCommonOptionsBuilder Type Parameters Name Description TConnectivityHandler Your connectivity checking service WithMappingHandler(Func<IServiceProvider, IMappingHandler>) Provide a mapping handler to auto map entities during mediation Declaration TApizrExtendedCommonOptionsBuilder WithMappingHandler(Func<IServiceProvider, IMappingHandler> mappingHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , IMappingHandler > mappingHandlerFactory A IMappingHandler mapping implementation factory Returns Type Description TApizrExtendedCommonOptionsBuilder WithMappingHandler(Type) Provide a mapping handler to auto map entities during mediation Declaration TApizrExtendedCommonOptionsBuilder WithMappingHandler(Type mappingHandlerType) Parameters Type Name Description System.Type mappingHandlerType Type of your IMappingHandler mapping implementation Returns Type Description TApizrExtendedCommonOptionsBuilder WithMappingHandler<TMappingHandler>() Provide a mapping handler to auto map entities during mediation Declaration TApizrExtendedCommonOptionsBuilder WithMappingHandler<TMappingHandler>() where TMappingHandler : class, IMappingHandler Returns Type Description TApizrExtendedCommonOptionsBuilder Type Parameters Name Description TMappingHandler Your IMappingHandler mapping implementation WithRefitSettings(Func<IServiceProvider, RefitSettings>) Provide some Refit specific settings Declaration TApizrExtendedCommonOptionsBuilder WithRefitSettings(Func<IServiceProvider, RefitSettings> refitSettingsFactory) Parameters Type Name Description System.Func < System.IServiceProvider , Refit.RefitSettings > refitSettingsFactory A Refit.RefitSettings instance factory Returns Type Description TApizrExtendedCommonOptionsBuilder Extension Methods FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder)"
  },
  "api/Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions.html",
    "title": "Class ApizrExtendedManagerOptions | Apizr",
    "keywords": "Class ApizrExtendedManagerOptions Options available for extended registrations Inheritance System.Object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase ApizrManagerOptionsBase ApizrExtendedManagerOptionsBase ApizrExtendedManagerOptions Implements IApizrExtendedManagerOptions IApizrExtendedManagerOptionsBase IApizrManagerOptionsBase IApizrExtendedCommonOptions IApizrExtendedCommonOptionsBase IApizrCommonOptionsBase IApizrExtendedProperOptions IApizrExtendedProperOptionsBase IApizrProperOptionsBase IApizrSharedRegistrationOptionsBase IApizrExtendedSharedOptions IApizrExtendedSharedOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Inherited Members ApizrExtendedManagerOptionsBase.HttpClientHandler ApizrExtendedManagerOptionsBase.DelegatingHandlersExtendedFactories ApizrManagerOptionsBase.WebApiType ApizrManagerOptionsBase.PolicyRegistryKeys ApizrManagerOptionsBase.Logger ApizrManagerOptionsBase.RefitSettings ApizrGlobalSharedRegistrationOptionsBase.BaseUri ApizrGlobalSharedRegistrationOptionsBase.BaseAddress ApizrGlobalSharedRegistrationOptionsBase.BasePath ApizrGlobalSharedRegistrationOptionsBase.ContextFactory ApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache ApizrGlobalSharedOptionsBase.HandlersParameters System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending.Configuring.Manager Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public class ApizrExtendedManagerOptions : ApizrExtendedManagerOptionsBase, IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBase, IApizrManagerOptionsBase, IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBase, IApizrCommonOptionsBase, IApizrExtendedProperOptions, IApizrExtendedProperOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrExtendedSharedOptions, IApizrExtendedSharedOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Constructors ApizrExtendedManagerOptions(IApizrExtendedCommonOptions, IApizrExtendedProperOptions) The options constructor Declaration public ApizrExtendedManagerOptions(IApizrExtendedCommonOptions commonOptions, IApizrExtendedProperOptions properOptions) Parameters Type Name Description IApizrExtendedCommonOptions commonOptions The common options IApizrExtendedProperOptions properOptions The proper options Properties ApizrManagerType Type of the manager Declaration public Type ApizrManagerType { get; } Property Value Type Description System.Type BaseAddressFactory Base address factory Declaration public Func<IServiceProvider, string> BaseAddressFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.String > BasePathFactory Base path factory Declaration public Func<IServiceProvider, string> BasePathFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.String > BaseUriFactory Base Uri factory Declaration public Func<IServiceProvider, Uri> BaseUriFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.Uri > CacheHandlerFactory Cache handler factory Declaration public Func<IServiceProvider, ICacheHandler> CacheHandlerFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , ICacheHandler > CacheHandlerType Type of the cache handler Declaration public Type CacheHandlerType { get; set; } Property Value Type Description System.Type ConnectivityHandlerFactory Connectivity handler factory Declaration public Func<IServiceProvider, IConnectivityHandler> ConnectivityHandlerFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , IConnectivityHandler > ConnectivityHandlerType Type of the connectivity handler Declaration public Type ConnectivityHandlerType { get; set; } Property Value Type Description System.Type CrudEntities Entities auto registered with IApizrManager<TWebApi> Declaration public IDictionary<Type, CrudEntityAttribute> CrudEntities { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , CrudEntityAttribute > HttpClientBuilder HttpClient builder Declaration public Action<IHttpClientBuilder> HttpClientBuilder { get; set; } Property Value Type Description System.Action < Microsoft.Extensions.DependencyInjection.IHttpClientBuilder > HttpClientHandlerFactory HttpClientHandler factory Declaration public Func<IServiceProvider, HttpClientHandler> HttpClientHandlerFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.Net.Http.HttpClientHandler > HttpTracerModeFactory Http traffic tracing mode factory Declaration public Func<IServiceProvider, HttpTracerMode> HttpTracerModeFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , HttpTracerMode > LoggerFactory The Logger factory Declaration public Func<IServiceProvider, string, ILogger> LoggerFactory { get; protected set; } Property Value Type Description System.Func < System.IServiceProvider , System.String , Microsoft.Extensions.Logging.ILogger > LogLevelsFactory Log levels factory Declaration public Func<IServiceProvider, LogLevel[]> LogLevelsFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , Microsoft.Extensions.Logging.LogLevel []> MappingHandlerFactory Mapping handler factory Declaration public Func<IServiceProvider, IMappingHandler> MappingHandlerFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , IMappingHandler > MappingHandlerType Type of the mapping handler Declaration public Type MappingHandlerType { get; set; } Property Value Type Description System.Type ObjectMappings Mappings between api request object and model object used for classic auto registration Declaration public IDictionary<Type, MappedWithAttribute> ObjectMappings { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , MappedWithAttribute > PostRegistrationActions Post registration actions Declaration public IList<Action<Type, IServiceCollection>> PostRegistrationActions { get; } Property Value Type Description System.Collections.Generic.IList < System.Action < System.Type , Microsoft.Extensions.DependencyInjection.IServiceCollection >> PostRegistries Other registries plugged during post registration actions Declaration public IDictionary<Type, IApizrExtendedConcurrentRegistryBase> PostRegistries { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , IApizrExtendedConcurrentRegistryBase > RefitSettingsFactory Refit settings factory Declaration public Func<IServiceProvider, RefitSettings> RefitSettingsFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , Refit.RefitSettings > TrafficVerbosityFactory Http traffic tracing verbosity factory Declaration public Func<IServiceProvider, HttpMessageParts> TrafficVerbosityFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , HttpMessageParts > WebApis Web apis auto registered with IApizrManager<TWebApi> Declaration public IDictionary<Type, WebApiAttribute> WebApis { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , WebApiAttribute > Implements IApizrExtendedManagerOptions IApizrExtendedManagerOptionsBase IApizrManagerOptionsBase IApizrExtendedCommonOptions IApizrExtendedCommonOptionsBase IApizrCommonOptionsBase IApizrExtendedProperOptions IApizrExtendedProperOptionsBase IApizrProperOptionsBase IApizrSharedRegistrationOptionsBase IApizrExtendedSharedOptions IApizrExtendedSharedOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions-1.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptions-1.html",
    "title": "Class ApizrExtendedManagerOptions<TWebApi> | Apizr",
    "keywords": "Class ApizrExtendedManagerOptions<TWebApi> Options available for both static and extended registrations Inheritance System.Object ApizrManagerOptions <TWebApi> ApizrExtendedManagerOptions<TWebApi> Implements IApizrManagerOptions <TWebApi> IApizrExtendedManagerOptionsBase IApizrExtendedCommonOptionsBase IApizrExtendedProperOptionsBase IApizrExtendedSharedOptionsBase IApizrManagerOptionsBase IApizrCommonOptionsBase IApizrProperOptionsBase IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Inherited Members ApizrManagerOptions<TWebApi>.Options ApizrManagerOptions<TWebApi>.WebApiType ApizrManagerOptions<TWebApi>.BaseUri ApizrManagerOptions<TWebApi>.BaseAddress ApizrManagerOptions<TWebApi>.BasePath ApizrManagerOptions<TWebApi>.ContextFactory ApizrManagerOptions<TWebApi>.PrimaryHandlerFactory ApizrManagerOptions<TWebApi>.HttpTracerMode ApizrManagerOptions<TWebApi>.TrafficVerbosity ApizrManagerOptions<TWebApi>.LogLevels ApizrManagerOptions<TWebApi>.OnException ApizrManagerOptions<TWebApi>.LetThrowOnExceptionWithEmptyCache ApizrManagerOptions<TWebApi>.HandlersParameters ApizrManagerOptions<TWebApi>.Logger ApizrManagerOptions<TWebApi>.PolicyRegistryKeys ApizrManagerOptions<TWebApi>.RefitSettings System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending.Configuring.Manager Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public class ApizrExtendedManagerOptions<TWebApi> : ApizrManagerOptions<TWebApi>, IApizrManagerOptions<TWebApi>, IApizrExtendedManagerOptionsBase, IApizrExtendedCommonOptionsBase, IApizrExtendedProperOptionsBase, IApizrExtendedSharedOptionsBase, IApizrManagerOptionsBase, IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Type Parameters Name Description TWebApi Constructors ApizrExtendedManagerOptions(IApizrExtendedManagerOptionsBase) Declaration public ApizrExtendedManagerOptions(IApizrExtendedManagerOptionsBase apizrOptions) Parameters Type Name Description IApizrExtendedManagerOptionsBase apizrOptions Properties DelegatingHandlersExtendedFactories Delegating handlers factories Declaration public IDictionary<Type, Func<IServiceProvider, IApizrManagerOptionsBase, DelegatingHandler>> DelegatingHandlersExtendedFactories { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , System.Func < System.IServiceProvider , IApizrManagerOptionsBase , System.Net.Http.DelegatingHandler >> HttpClientHandler Declaration public HttpClientHandler HttpClientHandler { get; } Property Value Type Description System.Net.Http.HttpClientHandler Implements IApizrManagerOptions<TWebApi> IApizrExtendedManagerOptionsBase IApizrExtendedCommonOptionsBase IApizrExtendedProperOptionsBase IApizrExtendedSharedOptionsBase IApizrManagerOptionsBase IApizrCommonOptionsBase IApizrProperOptionsBase IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBase.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBase.html",
    "title": "Class ApizrExtendedManagerOptionsBase | Apizr",
    "keywords": "Class ApizrExtendedManagerOptionsBase Options available for both static and extended registrations Inheritance System.Object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase ApizrManagerOptionsBase ApizrExtendedManagerOptionsBase ApizrExtendedManagerOptions Implements IApizrExtendedManagerOptionsBase IApizrExtendedCommonOptionsBase IApizrExtendedProperOptionsBase IApizrExtendedSharedOptionsBase IApizrManagerOptionsBase IApizrCommonOptionsBase IApizrProperOptionsBase IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Inherited Members ApizrManagerOptionsBase.WebApiType ApizrManagerOptionsBase.PolicyRegistryKeys ApizrManagerOptionsBase.Logger ApizrManagerOptionsBase.RefitSettings ApizrGlobalSharedRegistrationOptionsBase.BaseUri ApizrGlobalSharedRegistrationOptionsBase.BaseAddress ApizrGlobalSharedRegistrationOptionsBase.BasePath ApizrGlobalSharedRegistrationOptionsBase.ContextFactory ApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache ApizrGlobalSharedOptionsBase.HandlersParameters System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending.Configuring.Manager Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public class ApizrExtendedManagerOptionsBase : ApizrManagerOptionsBase, IApizrExtendedManagerOptionsBase, IApizrExtendedCommonOptionsBase, IApizrExtendedProperOptionsBase, IApizrExtendedSharedOptionsBase, IApizrManagerOptionsBase, IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Constructors ApizrExtendedManagerOptionsBase(IApizrCommonOptionsBase, IApizrProperOptionsBase) Declaration public ApizrExtendedManagerOptionsBase(IApizrCommonOptionsBase commonOptions, IApizrProperOptionsBase properOptions) Parameters Type Name Description IApizrCommonOptionsBase commonOptions IApizrProperOptionsBase properOptions Properties DelegatingHandlersExtendedFactories Delegating handlers factories Declaration public IDictionary<Type, Func<IServiceProvider, IApizrManagerOptionsBase, DelegatingHandler>> DelegatingHandlersExtendedFactories { get; protected set; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , System.Func < System.IServiceProvider , IApizrManagerOptionsBase , System.Net.Http.DelegatingHandler >> HttpClientHandler Declaration public HttpClientHandler HttpClientHandler { get; protected set; } Property Value Type Description System.Net.Http.HttpClientHandler Implements IApizrExtendedManagerOptionsBase IApizrExtendedCommonOptionsBase IApizrExtendedProperOptionsBase IApizrExtendedSharedOptionsBase IApizrManagerOptionsBase IApizrCommonOptionsBase IApizrProperOptionsBase IApizrSharedRegistrationOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.ApizrExtendedManagerOptionsBuilder.html",
    "title": "Class ApizrExtendedManagerOptionsBuilder | Apizr",
    "keywords": "Class ApizrExtendedManagerOptionsBuilder Builder options available for extended registrations Inheritance System.Object ApizrExtendedManagerOptionsBuilder Implements IApizrExtendedManagerOptionsBuilder IApizrExtendedManagerOptionsBuilder < IApizrExtendedManagerOptions , IApizrExtendedManagerOptionsBuilder > IApizrExtendedManagerOptionsBuilderBase < IApizrExtendedManagerOptions , IApizrExtendedManagerOptionsBuilder > IApizrGlobalManagerOptionsBuilderBase < IApizrExtendedManagerOptions , IApizrExtendedManagerOptionsBuilder > IApizrExtendedManagerOptionsBuilderBase IApizrGlobalManagerOptionsBuilderBase IApizrExtendedCommonOptionsBuilder < IApizrExtendedManagerOptions , IApizrExtendedManagerOptionsBuilder > IApizrExtendedCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase < IApizrExtendedManagerOptions , IApizrExtendedManagerOptionsBuilder > IApizrGlobalCommonOptionsBuilderBase IApizrExtendedProperOptionsBuilder < IApizrExtendedManagerOptions , IApizrExtendedManagerOptionsBuilder > IApizrExtendedProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase < IApizrExtendedManagerOptions , IApizrExtendedManagerOptionsBuilder > IApizrGlobalProperOptionsBuilderBase IApizrExtendedSharedOptionsBuilder < IApizrExtendedManagerOptions , IApizrExtendedManagerOptionsBuilder > IApizrExtendedSharedRegistrationOptionsBuilderBase IApizrGlobalSharedRegistrationOptionsBuilderBase < IApizrExtendedManagerOptions , IApizrExtendedManagerOptionsBuilder > IApizrGlobalSharedOptionsBuilderBase < IApizrExtendedManagerOptions , IApizrExtendedManagerOptionsBuilder > IApizrGlobalSharedRegistrationOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending.Configuring.Manager Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public class ApizrExtendedManagerOptionsBuilder : IApizrExtendedManagerOptionsBuilder, IApizrExtendedManagerOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrExtendedManagerOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrGlobalManagerOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrExtendedManagerOptionsBuilderBase, IApizrGlobalManagerOptionsBuilderBase, IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrExtendedCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase, IApizrExtendedProperOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrExtendedSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Constructors ApizrExtendedManagerOptionsBuilder(ApizrExtendedManagerOptions) Declaration public ApizrExtendedManagerOptionsBuilder(ApizrExtendedManagerOptions apizrOptions) Parameters Type Name Description ApizrExtendedManagerOptions apizrOptions Fields Options Declaration protected readonly ApizrExtendedManagerOptions Options Field Value Type Description ApizrExtendedManagerOptions Methods AddDelegatingHandler<THandler>(THandler) Add a custom delegating handler Declaration public IApizrExtendedManagerOptionsBuilder AddDelegatingHandler<THandler>(THandler delegatingHandler) where THandler : DelegatingHandler Parameters Type Name Description THandler delegatingHandler A delegating handler Returns Type Description IApizrExtendedManagerOptionsBuilder Type Parameters Name Description THandler AddDelegatingHandler<THandler>(Func<IServiceProvider, THandler>) Add a custom delegating handler Declaration public IApizrExtendedManagerOptionsBuilder AddDelegatingHandler<THandler>(Func<IServiceProvider, THandler> delegatingHandlerFactory) where THandler : DelegatingHandler Parameters Type Name Description System.Func < System.IServiceProvider , THandler> delegatingHandlerFactory A delegating handler factory Returns Type Description IApizrExtendedManagerOptionsBuilder Type Parameters Name Description THandler AddDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>) Add a custom delegating handler Declaration public IApizrExtendedManagerOptionsBuilder AddDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler> delegatingHandlerFactory) where THandler : DelegatingHandler Parameters Type Name Description System.Func < System.IServiceProvider , IApizrManagerOptionsBase , THandler> delegatingHandlerFactory A delegating handler factory Returns Type Description IApizrExtendedManagerOptionsBuilder Type Parameters Name Description THandler ConfigureHttpClientBuilder(Action<IHttpClientBuilder>) Adjust some HttpClient settings Declaration public IApizrExtendedManagerOptionsBuilder ConfigureHttpClientBuilder(Action<IHttpClientBuilder> httpClientBuilder) Parameters Type Name Description System.Action < Microsoft.Extensions.DependencyInjection.IHttpClientBuilder > httpClientBuilder The HttpClient builder Returns Type Description IApizrExtendedManagerOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) Provide a method to refresh the authorization token when needed Declaration public IApizrExtendedManagerOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory Refresh token method called when expired or empty Returns Type Description IApizrExtendedManagerOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler>) Provide your own AuthenticationHandlerBase implementation Declaration public IApizrExtendedManagerOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters Type Name Description System.Func < System.IServiceProvider , IApizrManagerOptionsBase , TAuthenticationHandler> authenticationHandlerFactory A TAuthenticationHandler instance factory Returns Type Description IApizrExtendedManagerOptionsBuilder Type Parameters Name Description TAuthenticationHandler Your AuthenticationHandlerBase implementation WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Provide your own settings management service and a method to refresh the token Declaration public IApizrExtendedManagerOptionsBuilder WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory The method factory called to refresh the token Returns Type Description IApizrExtendedManagerOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, String>>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Provide your own settings management and token management services Declaration public IApizrExtendedManagerOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>> tokenProperty, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod The method called to refresh the token Returns Type Description IApizrExtendedManagerOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithBaseAddress(Func<IServiceProvider, String>) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrExtendedManagerOptionsBuilder WithBaseAddress(Func<IServiceProvider, string> baseAddressFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.String > baseAddressFactory Your web api base address factory Returns Type Description IApizrExtendedManagerOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri>) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrExtendedManagerOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri> baseAddressFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.Uri > baseAddressFactory Your web api base address factory Returns Type Description IApizrExtendedManagerOptionsBuilder WithBaseAddress(String) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrExtendedManagerOptionsBuilder WithBaseAddress(string baseAddress) Parameters Type Name Description System.String baseAddress Your web api base address Returns Type Description IApizrExtendedManagerOptionsBuilder WithBaseAddress(Uri) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrExtendedManagerOptionsBuilder WithBaseAddress(Uri baseAddress) Parameters Type Name Description System.Uri baseAddress Your web api base address Returns Type Description IApizrExtendedManagerOptionsBuilder WithBasePath(Func<IServiceProvider, String>) Define your web api base path (could be defined with WebApiAttribute) Declaration public IApizrExtendedManagerOptionsBuilder WithBasePath(Func<IServiceProvider, string> basePathFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.String > basePathFactory Your web api base path factory Returns Type Description IApizrExtendedManagerOptionsBuilder WithBasePath(String) Define your web api base path (could be defined with WebApiAttribute) Declaration public IApizrExtendedManagerOptionsBuilder WithBasePath(string basePath) Parameters Type Name Description System.String basePath Your web api base path Returns Type Description IApizrExtendedManagerOptionsBuilder WithCacheHandler(ICacheHandler) Provide a cache handler to cache data Declaration public IApizrExtendedManagerOptionsBuilder WithCacheHandler(ICacheHandler cacheHandler) Parameters Type Name Description ICacheHandler cacheHandler An ICacheHandler mapping implementation instance Returns Type Description IApizrExtendedManagerOptionsBuilder WithCacheHandler(Func<IServiceProvider, ICacheHandler>) Provide a cache handler to cache data Declaration public IApizrExtendedManagerOptionsBuilder WithCacheHandler(Func<IServiceProvider, ICacheHandler> cacheHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , ICacheHandler > cacheHandlerFactory A ICacheHandler mapping implementation factory Returns Type Description IApizrExtendedManagerOptionsBuilder WithCacheHandler(Type) Provide a cache handler to cache data Declaration public IApizrExtendedManagerOptionsBuilder WithCacheHandler(Type cacheHandlerType) Parameters Type Name Description System.Type cacheHandlerType Type of your ICacheHandler mapping implementation Returns Type Description IApizrExtendedManagerOptionsBuilder WithCacheHandler<TCacheHandler>() Provide a cache handler to cache data Declaration public IApizrExtendedManagerOptionsBuilder WithCacheHandler<TCacheHandler>() where TCacheHandler : class, ICacheHandler Returns Type Description IApizrExtendedManagerOptionsBuilder Type Parameters Name Description TCacheHandler Your ICacheHandler mapping implementation WithConnectivityHandler(IConnectivityHandler) Provide a connectivity handler to check connectivity before sending a request Declaration public IApizrExtendedManagerOptionsBuilder WithConnectivityHandler(IConnectivityHandler connectivityHandler) Parameters Type Name Description IConnectivityHandler connectivityHandler An IConnectivityHandler mapping implementation instance Returns Type Description IApizrExtendedManagerOptionsBuilder WithConnectivityHandler(Func<Boolean>) Provide a function to invoke while checking connectivity Declaration public IApizrExtendedManagerOptionsBuilder WithConnectivityHandler(Func<bool> connectivityCheckingFunction) Parameters Type Name Description System.Func < System.Boolean > connectivityCheckingFunction A function to invoke while checking connectivity Returns Type Description IApizrExtendedManagerOptionsBuilder WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler>) Provide a connectivity handler to check connectivity before sending a request Declaration public IApizrExtendedManagerOptionsBuilder WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler> connectivityHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , IConnectivityHandler > connectivityHandlerFactory A IConnectivityHandler mapping implementation factory Returns Type Description IApizrExtendedManagerOptionsBuilder WithConnectivityHandler(Type) Provide a connectivity handler to check connectivity before sending a request Declaration public IApizrExtendedManagerOptionsBuilder WithConnectivityHandler(Type connectivityHandlerType) Parameters Type Name Description System.Type connectivityHandlerType Type of your IConnectivityHandler mapping implementation Returns Type Description IApizrExtendedManagerOptionsBuilder WithConnectivityHandler<TConnectivityHandler>() Provide a connectivity handler to check connectivity before sending a request Declaration public IApizrExtendedManagerOptionsBuilder WithConnectivityHandler<TConnectivityHandler>() where TConnectivityHandler : class, IConnectivityHandler Returns Type Description IApizrExtendedManagerOptionsBuilder Type Parameters Name Description TConnectivityHandler Your IConnectivityHandler mapping implementation WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, Boolean>>) Provide a connectivity handler to check connectivity before sending a request Declaration public IApizrExtendedManagerOptionsBuilder WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, bool>> factory) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TConnectivityHandler, System.Boolean >> factory Returns Type Description IApizrExtendedManagerOptionsBuilder Type Parameters Name Description TConnectivityHandler Your connectivity checking service WithContext(Func<Context>, ApizrDuplicateStrategy) Set the Polly Context Declaration public IApizrExtendedManagerOptionsBuilder WithContext(Func<Context> contextFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Merge) Parameters Type Name Description System.Func < Polly.Context > contextFactory The Polly Context to pass through it all ApizrDuplicateStrategy strategy The duplicate strategy if there's another one already (default: Merge) Returns Type Description IApizrExtendedManagerOptionsBuilder WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) Catch potential exceptions Declaration public IApizrExtendedManagerOptionsBuilder WithExCatching(Action<ApizrException> onException, bool letThrowOnExceptionWithEmptyCache = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters Type Name Description System.Action < ApizrException > onException The exception callback System.Boolean letThrowOnExceptionWithEmptyCache Let throw potential exception if there's no cached data to return (default: true) ApizrDuplicateStrategy strategy The duplicate strategy if there's another callback already (default: Replace) Returns Type Description IApizrExtendedManagerOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) Catch potential exceptions Declaration public IApizrExtendedManagerOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>> onException, bool letThrowOnExceptionWithEmptyCache = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters Type Name Description System.Action < ApizrException <TResult>> onException The exception callback System.Boolean letThrowOnExceptionWithEmptyCache Let throw potential exception if there's no cached data to return (default: true) ApizrDuplicateStrategy strategy The duplicate strategy if there's another callback already (default: Replace) Returns Type Description IApizrExtendedManagerOptionsBuilder Type Parameters Name Description TResult WithHandlerParameter(String, Object) Set some parameters passed through all delegating handlers Declaration public IApizrExtendedManagerOptionsBuilder WithHandlerParameter(string key, object value) Parameters Type Name Description System.String key The parameter's key System.Object value The parameter's value Returns Type Description IApizrExtendedManagerOptionsBuilder WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) Provide a custom HttpClientHandler Declaration public IApizrExtendedManagerOptionsBuilder WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler> httpClientHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.Net.Http.HttpClientHandler > httpClientHandlerFactory An System.Net.Http.HttpClientHandler instance factory Returns Type Description IApizrExtendedManagerOptionsBuilder WithHttpClientHandler(HttpClientHandler) Provide a custom HttpClientHandler Declaration public IApizrExtendedManagerOptionsBuilder WithHttpClientHandler(HttpClientHandler httpClientHandler) Parameters Type Name Description System.Net.Http.HttpClientHandler httpClientHandler An System.Net.Http.HttpClientHandler instance Returns Type Description IApizrExtendedManagerOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration public IApizrExtendedManagerOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: All) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: Information) Returns Type Description IApizrExtendedManagerOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration public IApizrExtendedManagerOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode> httpTracerModeFactory, Func<IServiceProvider, HttpMessageParts> trafficVerbosityFactory, Func<IServiceProvider, LogLevel[]> logLevelFactory) Parameters Type Name Description System.Func < System.IServiceProvider , HttpTracerMode > httpTracerModeFactory Http traffic tracing mode factory System.Func < System.IServiceProvider , HttpMessageParts > trafficVerbosityFactory Http traffic tracing verbosity factory System.Func < System.IServiceProvider , Microsoft.Extensions.Logging.LogLevel []> logLevelFactory Returns Type Description IApizrExtendedManagerOptionsBuilder WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration public IApizrExtendedManagerOptionsBuilder WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])> loggingConfigurationFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.ValueTuple < HttpTracerMode , HttpMessageParts , Microsoft.Extensions.Logging.LogLevel []>> loggingConfigurationFactory Logging configuration factory Returns Type Description IApizrExtendedManagerOptionsBuilder WithMappingHandler(IMappingHandler) Provide a mapping handler to map entities Declaration public IApizrExtendedManagerOptionsBuilder WithMappingHandler(IMappingHandler mappingHandler) Parameters Type Name Description IMappingHandler mappingHandler An IMappingHandler mapping implementation instance Returns Type Description IApizrExtendedManagerOptionsBuilder WithMappingHandler(Func<IServiceProvider, IMappingHandler>) Provide a mapping handler to auto map entities during mediation Declaration public IApizrExtendedManagerOptionsBuilder WithMappingHandler(Func<IServiceProvider, IMappingHandler> mappingHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , IMappingHandler > mappingHandlerFactory A IMappingHandler mapping implementation factory Returns Type Description IApizrExtendedManagerOptionsBuilder WithMappingHandler(Type) Provide a mapping handler to auto map entities during mediation Declaration public IApizrExtendedManagerOptionsBuilder WithMappingHandler(Type mappingHandlerType) Parameters Type Name Description System.Type mappingHandlerType Type of your IMappingHandler mapping implementation Returns Type Description IApizrExtendedManagerOptionsBuilder WithMappingHandler<TMappingHandler>() Provide a mapping handler to auto map entities during mediation Declaration public IApizrExtendedManagerOptionsBuilder WithMappingHandler<TMappingHandler>() where TMappingHandler : class, IMappingHandler Returns Type Description IApizrExtendedManagerOptionsBuilder Type Parameters Name Description TMappingHandler Your IMappingHandler mapping implementation WithRefitSettings(RefitSettings) Provide some Refit specific settings Declaration public IApizrExtendedManagerOptionsBuilder WithRefitSettings(RefitSettings refitSettings) Parameters Type Name Description Refit.RefitSettings refitSettings A Refit.RefitSettings instance Returns Type Description IApizrExtendedManagerOptionsBuilder WithRefitSettings(Func<IServiceProvider, RefitSettings>) Provide some Refit specific settings Declaration public IApizrExtendedManagerOptionsBuilder WithRefitSettings(Func<IServiceProvider, RefitSettings> refitSettingsFactory) Parameters Type Name Description System.Func < System.IServiceProvider , Refit.RefitSettings > refitSettingsFactory A Refit.RefitSettings instance factory Returns Type Description IApizrExtendedManagerOptionsBuilder Implements IApizrExtendedManagerOptionsBuilder IApizrExtendedManagerOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> IApizrExtendedManagerOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> IApizrGlobalManagerOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrExtendedManagerOptionsBuilderBase IApizrGlobalManagerOptionsBuilderBase IApizrExtendedCommonOptionsBuilder<TApizrExtendedCommonOptions, TApizrExtendedCommonOptionsBuilder> IApizrExtendedCommonOptionsBuilderBase IApizrGlobalCommonOptionsBuilderBase<TApizrCommonOptions, TApizrCommonOptionsBuilder> IApizrGlobalCommonOptionsBuilderBase IApizrExtendedProperOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder> IApizrExtendedProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> IApizrGlobalProperOptionsBuilderBase IApizrExtendedSharedOptionsBuilder<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder> IApizrExtendedSharedRegistrationOptionsBuilderBase IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrGlobalSharedRegistrationOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Extension Methods OptionalOptionsBuilderExtensions.WithOptionalMediation(IApizrExtendedManagerOptionsBuilder) MediationOptionsBuilderExtensions.WithMediation(IApizrExtendedManagerOptionsBuilder) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) MediationFileTransferOptionsBuilderExtensions.WithFileTransferMediation(IApizrExtendedManagerOptionsBuilder) OptionalFileTransferOptionsBuilderExtensions.WithFileTransferOptionalMediation(IApizrExtendedManagerOptionsBuilder) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder)"
  },
  "api/Apizr.Extending.Configuring.Manager.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.html",
    "title": "Namespace Apizr.Extending.Configuring.Manager | Apizr",
    "keywords": "Namespace Apizr.Extending.Configuring.Manager Classes ApizrExtendedManagerOptions Options available for extended registrations ApizrExtendedManagerOptions<TWebApi> Options available for both static and extended registrations ApizrExtendedManagerOptionsBase Options available for both static and extended registrations ApizrExtendedManagerOptionsBuilder Builder options available for extended registrations Interfaces IApizrExtendedManagerOptions Options available for extended registrations IApizrExtendedManagerOptions<TWebApi> Options available for extended registrations IApizrExtendedManagerOptionsBase Options available for both static and extended registrations IApizrExtendedManagerOptionsBuilder Builder options available for extended registrations IApizrExtendedManagerOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> Builder options available for extended registrations IApizrExtendedManagerOptionsBuilderBase Builder options available for extended registrations IApizrExtendedManagerOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> Builder options available for extended registrations"
  },
  "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptions.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptions.html",
    "title": "Interface IApizrExtendedManagerOptions | Apizr",
    "keywords": "Interface IApizrExtendedManagerOptions Options available for extended registrations Inherited Members IApizrExtendedManagerOptionsBase.HttpClientHandler IApizrExtendedCommonOptions.ConnectivityHandlerType IApizrExtendedCommonOptions.CacheHandlerType IApizrExtendedCommonOptions.MappingHandlerType IApizrExtendedCommonOptions.RefitSettingsFactory IApizrExtendedCommonOptions.ConnectivityHandlerFactory IApizrExtendedCommonOptions.CacheHandlerFactory IApizrExtendedCommonOptions.MappingHandlerFactory IApizrExtendedCommonOptions.CrudEntities IApizrExtendedCommonOptions.WebApis IApizrExtendedCommonOptions.ObjectMappings IApizrExtendedCommonOptions.PostRegistries IApizrExtendedCommonOptions.PostRegistrationActions IApizrCommonOptionsBase.RefitSettings IApizrExtendedProperOptions.ApizrManagerType IApizrExtendedProperOptions.LoggerFactory IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.PolicyRegistryKeys IApizrProperOptionsBase.Logger IApizrExtendedSharedOptions.BaseUriFactory IApizrExtendedSharedOptions.BaseAddressFactory IApizrExtendedSharedOptions.BasePathFactory IApizrExtendedSharedOptions.HttpTracerModeFactory IApizrExtendedSharedOptions.TrafficVerbosityFactory IApizrExtendedSharedOptions.LogLevelsFactory IApizrExtendedSharedOptions.HttpClientHandlerFactory IApizrExtendedSharedOptions.HttpClientBuilder IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.ContextFactory IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.OnException IApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache IApizrGlobalSharedOptionsBase.HandlersParameters Namespace : Apizr.Extending.Configuring.Manager Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedManagerOptions : IApizrExtendedManagerOptionsBase, IApizrManagerOptionsBase, IApizrExtendedCommonOptions, IApizrExtendedCommonOptionsBase, IApizrCommonOptionsBase, IApizrExtendedProperOptions, IApizrExtendedProperOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrExtendedSharedOptions, IApizrExtendedSharedOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptions-1.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptions-1.html",
    "title": "Interface IApizrExtendedManagerOptions<TWebApi> | Apizr",
    "keywords": "Interface IApizrExtendedManagerOptions<TWebApi> Options available for extended registrations Inherited Members IApizrExtendedManagerOptionsBase.HttpClientHandler IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrCommonOptionsBase.RefitSettings IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.PolicyRegistryKeys IApizrProperOptionsBase.Logger IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.ContextFactory IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.OnException IApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache IApizrGlobalSharedOptionsBase.HandlersParameters Namespace : Apizr.Extending.Configuring.Manager Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedManagerOptions<TWebApi> : IApizrManagerOptions<TWebApi>, IApizrExtendedManagerOptionsBase, IApizrExtendedCommonOptionsBase, IApizrExtendedProperOptionsBase, IApizrExtendedSharedOptionsBase, IApizrManagerOptionsBase, IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Type Parameters Name Description TWebApi"
  },
  "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBase.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBase.html",
    "title": "Interface IApizrExtendedManagerOptionsBase | Apizr",
    "keywords": "Interface IApizrExtendedManagerOptionsBase Options available for both static and extended registrations Inherited Members IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrCommonOptionsBase.RefitSettings IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.PolicyRegistryKeys IApizrProperOptionsBase.Logger IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.ContextFactory IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.OnException IApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache IApizrGlobalSharedOptionsBase.HandlersParameters Namespace : Apizr.Extending.Configuring.Manager Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedManagerOptionsBase : IApizrExtendedCommonOptionsBase, IApizrExtendedProperOptionsBase, IApizrExtendedSharedOptionsBase, IApizrManagerOptionsBase, IApizrCommonOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Properties HttpClientHandler Declaration HttpClientHandler HttpClientHandler { get; } Property Value Type Description System.Net.Http.HttpClientHandler"
  },
  "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder.html",
    "title": "Interface IApizrExtendedManagerOptionsBuilder | Apizr",
    "keywords": "Interface IApizrExtendedManagerOptionsBuilder Builder options available for extended registrations Inherited Members IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithRefitSettings(Func<IServiceProvider, RefitSettings>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, Boolean>>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithConnectivityHandler<TConnectivityHandler>() IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithConnectivityHandler(Type) IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithCacheHandler(Func<IServiceProvider, ICacheHandler>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithCacheHandler<TCacheHandler>() IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithCacheHandler(Type) IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithMappingHandler(Func<IServiceProvider, IMappingHandler>) IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithMappingHandler<TMappingHandler>() IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithMappingHandler(Type) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, Uri>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithBasePath(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithLogging(Func<IServiceProvider, (T1, T2, T3)<HttpTracerMode, HttpMessageParts, LogLevel[]>>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.ConfigureHttpClientBuilder(Action<IHttpClientBuilder>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.AddDelegatingHandler<THandler>(Func<IServiceProvider, THandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.AddDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, String>>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Extending.Configuring.Manager Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedManagerOptionsBuilder : IApizrExtendedManagerOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrExtendedManagerOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrGlobalManagerOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrExtendedManagerOptionsBuilderBase, IApizrGlobalManagerOptionsBuilderBase, IApizrExtendedCommonOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrExtendedCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase, IApizrExtendedProperOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrExtendedSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedManagerOptions, IApizrExtendedManagerOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods OptionalOptionsBuilderExtensions.WithOptionalMediation(IApizrExtendedManagerOptionsBuilder) MediationOptionsBuilderExtensions.WithMediation(IApizrExtendedManagerOptionsBuilder) FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) MediationFileTransferOptionsBuilderExtensions.WithFileTransferMediation(IApizrExtendedManagerOptionsBuilder) OptionalFileTransferOptionsBuilderExtensions.WithFileTransferOptionalMediation(IApizrExtendedManagerOptionsBuilder) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder)"
  },
  "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder-2.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilder-2.html",
    "title": "Interface IApizrExtendedManagerOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrExtendedManagerOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> Builder options available for extended registrations Inherited Members IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithRefitSettings(Func<IServiceProvider, RefitSettings>) IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler(Func<IServiceProvider, IConnectivityHandler>) IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler<TConnectivityHandler>(Expression<Func<TConnectivityHandler, Boolean>>) IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler<TConnectivityHandler>() IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler(Type) IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithCacheHandler(Func<IServiceProvider, ICacheHandler>) IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithCacheHandler<TCacheHandler>() IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithCacheHandler(Type) IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithMappingHandler(Func<IServiceProvider, IMappingHandler>) IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithMappingHandler<TMappingHandler>() IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithMappingHandler(Type) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, Uri>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBasePath(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithLogging(Func<IServiceProvider, (T1, T2, T3)<HttpTracerMode, HttpMessageParts, LogLevel[]>>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.ConfigureHttpClientBuilder(Action<IHttpClientBuilder>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.AddDelegatingHandler<THandler>(Func<IServiceProvider, THandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.AddDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, String>>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Extending.Configuring.Manager Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedManagerOptionsBuilder<out TApizrExtendedOptions, out TApizrExtendedOptionsBuilder> : IApizrExtendedManagerOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalManagerOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrExtendedManagerOptionsBuilderBase, IApizrGlobalManagerOptionsBuilderBase, IApizrExtendedCommonOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrExtendedCommonOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase, IApizrExtendedProperOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrExtendedSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrExtendedOptions : IApizrExtendedManagerOptionsBase where TApizrExtendedOptionsBuilder : IApizrExtendedManagerOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> Type Parameters Name Description TApizrExtendedOptions TApizrExtendedOptionsBuilder Extension Methods FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder)"
  },
  "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilderBase.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilderBase.html",
    "title": "Interface IApizrExtendedManagerOptionsBuilderBase | Apizr",
    "keywords": "Interface IApizrExtendedManagerOptionsBuilderBase Builder options available for extended registrations Namespace : Apizr.Extending.Configuring.Manager Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedManagerOptionsBuilderBase : IApizrExtendedCommonOptionsBuilderBase, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalManagerOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder)"
  },
  "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilderBase-2.html": {
    "href": "api/Apizr.Extending.Configuring.Manager.IApizrExtendedManagerOptionsBuilderBase-2.html",
    "title": "Interface IApizrExtendedManagerOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrExtendedManagerOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> Builder options available for extended registrations Inherited Members IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithRefitSettings(RefitSettings) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler(IConnectivityHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithConnectivityHandler(Func<Boolean>) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithCacheHandler(ICacheHandler) IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithMappingHandler(IMappingHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Extending.Configuring.Manager Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedManagerOptionsBuilderBase<out TApizrExtendedOptions, out TApizrExtendedOptionsBuilder> : IApizrGlobalManagerOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalCommonOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder>, IApizrExtendedManagerOptionsBuilderBase, IApizrExtendedCommonOptionsBuilderBase, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalManagerOptionsBuilderBase, IApizrGlobalCommonOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrExtendedOptions : IApizrExtendedManagerOptionsBase where TApizrExtendedOptionsBuilder : IApizrExtendedManagerOptionsBuilderBase<TApizrExtendedOptions, TApizrExtendedOptionsBuilder> Type Parameters Name Description TApizrExtendedOptions TApizrExtendedOptionsBuilder Extension Methods FusilladeOptionsBuilderExtensions.WithPriorityManagement<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) AutoMapperOptionsBuilderExtensions.WithAutoMapperMappingHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, String) AkavacheOptionsBuilderExtensions.WithAkavacheCacheHandler<TBuilder>(TBuilder, Func<IBlobCache>, String) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress) MapsterOptionsBuilderExtensions.WithMapsterMappingHandler<TBuilder>(TBuilder)"
  },
  "api/Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.html": {
    "href": "api/Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptions.html",
    "title": "Class ApizrExtendedProperOptions | Apizr",
    "keywords": "Class ApizrExtendedProperOptions Options available at proper level for extended registrations Inheritance System.Object ApizrGlobalSharedOptionsBase ApizrGlobalSharedRegistrationOptionsBase ApizrProperOptionsBase ApizrExtendedProperOptions Implements IApizrExtendedProperOptions IApizrExtendedProperOptionsBase IApizrProperOptionsBase IApizrSharedRegistrationOptionsBase IApizrExtendedSharedOptions IApizrExtendedSharedOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase Inherited Members ApizrProperOptionsBase.WebApiType ApizrProperOptionsBase.PolicyRegistryKeys ApizrProperOptionsBase.Logger ApizrGlobalSharedRegistrationOptionsBase.BaseUri ApizrGlobalSharedRegistrationOptionsBase.BaseAddress ApizrGlobalSharedRegistrationOptionsBase.BasePath ApizrGlobalSharedRegistrationOptionsBase.ContextFactory ApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory ApizrGlobalSharedOptionsBase.HttpTracerMode ApizrGlobalSharedOptionsBase.TrafficVerbosity ApizrGlobalSharedOptionsBase.LogLevels ApizrGlobalSharedOptionsBase.OnException ApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache ApizrGlobalSharedOptionsBase.HandlersParameters System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending.Configuring.Proper Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public class ApizrExtendedProperOptions : ApizrProperOptionsBase, IApizrExtendedProperOptions, IApizrExtendedProperOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrExtendedSharedOptions, IApizrExtendedSharedOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Constructors ApizrExtendedProperOptions(IApizrExtendedSharedOptions, Type, Type, String[], String[], String, String, IDictionary<String, Object>, Nullable<HttpTracerMode>, Nullable<HttpMessageParts>, LogLevel[]) Declaration public ApizrExtendedProperOptions(IApizrExtendedSharedOptions sharedOptions, Type webApiType, Type apizrManagerType, string[] assemblyPolicyRegistryKeys, string[] webApiPolicyRegistryKeys, string baseAddress, string basePath, IDictionary<string, object> handlersParameters, HttpTracerMode? httpTracerMode, HttpMessageParts? trafficVerbosity, params LogLevel[] logLevels) Parameters Type Name Description IApizrExtendedSharedOptions sharedOptions System.Type webApiType System.Type apizrManagerType System.String [] assemblyPolicyRegistryKeys System.String [] webApiPolicyRegistryKeys System.String baseAddress System.String basePath System.Collections.Generic.IDictionary < System.String , System.Object > handlersParameters System.Nullable < HttpTracerMode > httpTracerMode System.Nullable < HttpMessageParts > trafficVerbosity Microsoft.Extensions.Logging.LogLevel [] logLevels Properties ApizrManagerType Type of the manager Declaration public Type ApizrManagerType { get; } Property Value Type Description System.Type BaseAddressFactory Base address factory Declaration public Func<IServiceProvider, string> BaseAddressFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.String > BasePathFactory Base path factory Declaration public Func<IServiceProvider, string> BasePathFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.String > BaseUriFactory Base Uri factory Declaration public Func<IServiceProvider, Uri> BaseUriFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.Uri > DelegatingHandlersExtendedFactories Delegating handlers factories Declaration public IDictionary<Type, Func<IServiceProvider, IApizrManagerOptionsBase, DelegatingHandler>> DelegatingHandlersExtendedFactories { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , System.Func < System.IServiceProvider , IApizrManagerOptionsBase , System.Net.Http.DelegatingHandler >> HttpClientBuilder HttpClient builder Declaration public Action<IHttpClientBuilder> HttpClientBuilder { get; set; } Property Value Type Description System.Action < Microsoft.Extensions.DependencyInjection.IHttpClientBuilder > HttpClientHandlerFactory HttpClientHandler factory Declaration public Func<IServiceProvider, HttpClientHandler> HttpClientHandlerFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , System.Net.Http.HttpClientHandler > HttpTracerModeFactory Http traffic tracing mode factory Declaration public Func<IServiceProvider, HttpTracerMode> HttpTracerModeFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , HttpTracerMode > LoggerFactory The Logger factory Declaration public Func<IServiceProvider, string, ILogger> LoggerFactory { get; protected set; } Property Value Type Description System.Func < System.IServiceProvider , System.String , Microsoft.Extensions.Logging.ILogger > LogLevelsFactory Log levels factory Declaration public Func<IServiceProvider, LogLevel[]> LogLevelsFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , Microsoft.Extensions.Logging.LogLevel []> TrafficVerbosityFactory Http traffic tracing verbosity factory Declaration public Func<IServiceProvider, HttpMessageParts> TrafficVerbosityFactory { get; set; } Property Value Type Description System.Func < System.IServiceProvider , HttpMessageParts > Implements IApizrExtendedProperOptions IApizrExtendedProperOptionsBase IApizrProperOptionsBase IApizrSharedRegistrationOptionsBase IApizrExtendedSharedOptions IApizrExtendedSharedOptionsBase IApizrGlobalSharedRegistrationOptionsBase IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Proper.ApizrExtendedProperOptionsBuilder.html",
    "title": "Class ApizrExtendedProperOptionsBuilder | Apizr",
    "keywords": "Class ApizrExtendedProperOptionsBuilder Builder options available at proper level for extended registrations Inheritance System.Object ApizrExtendedProperOptionsBuilder Implements IApizrExtendedProperOptionsBuilder IApizrExtendedProperOptionsBuilder < IApizrExtendedProperOptions , IApizrExtendedProperOptionsBuilder > IApizrExtendedProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase < IApizrExtendedProperOptions , IApizrExtendedProperOptionsBuilder > IApizrGlobalProperOptionsBuilderBase IApizrExtendedSharedOptionsBuilder < IApizrExtendedProperOptions , IApizrExtendedProperOptionsBuilder > IApizrExtendedSharedRegistrationOptionsBuilderBase IApizrGlobalSharedRegistrationOptionsBuilderBase < IApizrExtendedProperOptions , IApizrExtendedProperOptionsBuilder > IApizrGlobalSharedOptionsBuilderBase < IApizrExtendedProperOptions , IApizrExtendedProperOptionsBuilder > IApizrGlobalSharedRegistrationOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending.Configuring.Proper Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public class ApizrExtendedProperOptionsBuilder : IApizrExtendedProperOptionsBuilder, IApizrExtendedProperOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrExtendedSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Fields Options Declaration protected readonly ApizrExtendedProperOptions Options Field Value Type Description ApizrExtendedProperOptions Methods AddDelegatingHandler<THandler>(THandler) Add a custom delegating handler Declaration public IApizrExtendedProperOptionsBuilder AddDelegatingHandler<THandler>(THandler delegatingHandler) where THandler : DelegatingHandler Parameters Type Name Description THandler delegatingHandler A delegating handler Returns Type Description IApizrExtendedProperOptionsBuilder Type Parameters Name Description THandler AddDelegatingHandler<THandler>(Func<IServiceProvider, THandler>) Add a custom delegating handler Declaration public IApizrExtendedProperOptionsBuilder AddDelegatingHandler<THandler>(Func<IServiceProvider, THandler> delegatingHandlerFactory) where THandler : DelegatingHandler Parameters Type Name Description System.Func < System.IServiceProvider , THandler> delegatingHandlerFactory A delegating handler factory Returns Type Description IApizrExtendedProperOptionsBuilder Type Parameters Name Description THandler AddDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>) Add a custom delegating handler Declaration public IApizrExtendedProperOptionsBuilder AddDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler> delegatingHandlerFactory) where THandler : DelegatingHandler Parameters Type Name Description System.Func < System.IServiceProvider , IApizrManagerOptionsBase , THandler> delegatingHandlerFactory A delegating handler factory Returns Type Description IApizrExtendedProperOptionsBuilder Type Parameters Name Description THandler ConfigureHttpClientBuilder(Action<IHttpClientBuilder>) Adjust some HttpClient settings Declaration public IApizrExtendedProperOptionsBuilder ConfigureHttpClientBuilder(Action<IHttpClientBuilder> httpClientBuilder) Parameters Type Name Description System.Action < Microsoft.Extensions.DependencyInjection.IHttpClientBuilder > httpClientBuilder The HttpClient builder Returns Type Description IApizrExtendedProperOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) Provide a method to refresh the authorization token when needed Declaration public IApizrExtendedProperOptionsBuilder WithAuthenticationHandler(Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory Refresh token method called when expired or empty Returns Type Description IApizrExtendedProperOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler>) Provide your own AuthenticationHandlerBase implementation Declaration public IApizrExtendedProperOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters Type Name Description System.Func < System.IServiceProvider , IApizrManagerOptionsBase , TAuthenticationHandler> authenticationHandlerFactory A TAuthenticationHandler instance factory Returns Type Description IApizrExtendedProperOptionsBuilder Type Parameters Name Description TAuthenticationHandler Your AuthenticationHandlerBase implementation WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Provide your own settings management service and a method to refresh the token Declaration public IApizrExtendedProperOptionsBuilder WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory The method factory called to refresh the token Returns Type Description IApizrExtendedProperOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, String>>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Provide your own settings management and token management services Declaration public IApizrExtendedProperOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>> tokenProperty, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod The method called to refresh the token Returns Type Description IApizrExtendedProperOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithBaseAddress(Func<IServiceProvider, String>) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrExtendedProperOptionsBuilder WithBaseAddress(Func<IServiceProvider, string> baseAddressFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.String > baseAddressFactory Your web api base address factory Returns Type Description IApizrExtendedProperOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri>) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrExtendedProperOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri> baseAddressFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.Uri > baseAddressFactory Your web api base address factory Returns Type Description IApizrExtendedProperOptionsBuilder WithBaseAddress(String) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrExtendedProperOptionsBuilder WithBaseAddress(string baseAddress) Parameters Type Name Description System.String baseAddress Your web api base address Returns Type Description IApizrExtendedProperOptionsBuilder WithBaseAddress(Uri) Define your web api base address (could be defined with WebApiAttribute) Declaration public IApizrExtendedProperOptionsBuilder WithBaseAddress(Uri baseAddress) Parameters Type Name Description System.Uri baseAddress Your web api base address Returns Type Description IApizrExtendedProperOptionsBuilder WithBasePath(Func<IServiceProvider, String>) Define your web api base path (could be defined with WebApiAttribute) Declaration public IApizrExtendedProperOptionsBuilder WithBasePath(Func<IServiceProvider, string> basePathFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.String > basePathFactory Your web api base path factory Returns Type Description IApizrExtendedProperOptionsBuilder WithBasePath(String) Define your web api base path (could be defined with WebApiAttribute) Declaration public IApizrExtendedProperOptionsBuilder WithBasePath(string basePath) Parameters Type Name Description System.String basePath Your web api base path Returns Type Description IApizrExtendedProperOptionsBuilder WithContext(Func<Context>, ApizrDuplicateStrategy) Set the Polly Context Declaration public IApizrExtendedProperOptionsBuilder WithContext(Func<Context> contextFactory, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Merge) Parameters Type Name Description System.Func < Polly.Context > contextFactory The Polly Context to pass through it all ApizrDuplicateStrategy strategy The duplicate strategy if there's another one already (default: Merge) Returns Type Description IApizrExtendedProperOptionsBuilder WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) Catch potential exceptions Declaration public IApizrExtendedProperOptionsBuilder WithExCatching(Action<ApizrException> onException, bool letThrowOnExceptionWithEmptyCache = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters Type Name Description System.Action < ApizrException > onException The exception callback System.Boolean letThrowOnExceptionWithEmptyCache Let throw potential exception if there's no cached data to return (default: true) ApizrDuplicateStrategy strategy The duplicate strategy if there's another callback already (default: Replace) Returns Type Description IApizrExtendedProperOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) Catch potential exceptions Declaration public IApizrExtendedProperOptionsBuilder WithExCatching<TResult>(Action<ApizrException<TResult>> onException, bool letThrowOnExceptionWithEmptyCache = true, ApizrDuplicateStrategy strategy = ApizrDuplicateStrategy.Replace) Parameters Type Name Description System.Action < ApizrException <TResult>> onException The exception callback System.Boolean letThrowOnExceptionWithEmptyCache Let throw potential exception if there's no cached data to return (default: true) ApizrDuplicateStrategy strategy The duplicate strategy if there's another callback already (default: Replace) Returns Type Description IApizrExtendedProperOptionsBuilder Type Parameters Name Description TResult WithHandlerParameter(String, Object) Set some parameters passed through all delegating handlers Declaration public IApizrExtendedProperOptionsBuilder WithHandlerParameter(string key, object value) Parameters Type Name Description System.String key The parameter's key System.Object value The parameter's value Returns Type Description IApizrExtendedProperOptionsBuilder WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) Provide a custom HttpClientHandler Declaration public IApizrExtendedProperOptionsBuilder WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler> httpClientHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.Net.Http.HttpClientHandler > httpClientHandlerFactory An System.Net.Http.HttpClientHandler instance factory Returns Type Description IApizrExtendedProperOptionsBuilder WithHttpClientHandler(HttpClientHandler) Provide a custom HttpClientHandler Declaration public IApizrExtendedProperOptionsBuilder WithHttpClientHandler(HttpClientHandler httpClientHandler) Parameters Type Name Description System.Net.Http.HttpClientHandler httpClientHandler An System.Net.Http.HttpClientHandler instance Returns Type Description IApizrExtendedProperOptionsBuilder WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration public IApizrExtendedProperOptionsBuilder WithLogging(HttpTracerMode httpTracerMode = HttpTracerMode.Everything, HttpMessageParts trafficVerbosity = HttpMessageParts.All, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: All) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: Information) Returns Type Description IApizrExtendedProperOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration public IApizrExtendedProperOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode> httpTracerModeFactory, Func<IServiceProvider, HttpMessageParts> trafficVerbosityFactory, Func<IServiceProvider, LogLevel[]> logLevelsFactory) Parameters Type Name Description System.Func < System.IServiceProvider , HttpTracerMode > httpTracerModeFactory Http traffic tracing mode factory System.Func < System.IServiceProvider , HttpMessageParts > trafficVerbosityFactory Http traffic tracing verbosity factory System.Func < System.IServiceProvider , Microsoft.Extensions.Logging.LogLevel []> logLevelsFactory Log levels factory Returns Type Description IApizrExtendedProperOptionsBuilder WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration public IApizrExtendedProperOptionsBuilder WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])> loggingConfigurationFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.ValueTuple < HttpTracerMode , HttpMessageParts , Microsoft.Extensions.Logging.LogLevel []>> loggingConfigurationFactory Logging configuration factory Returns Type Description IApizrExtendedProperOptionsBuilder Implements IApizrExtendedProperOptionsBuilder IApizrExtendedProperOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder> IApizrExtendedProperOptionsBuilderBase IApizrGlobalProperOptionsBuilderBase<TApizrProperOptions, TApizrProperOptionsBuilder> IApizrGlobalProperOptionsBuilderBase IApizrExtendedSharedOptionsBuilder<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder> IApizrExtendedSharedRegistrationOptionsBuilderBase IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrGlobalSharedOptionsBuilderBase<TApizrOptions, TApizrOptionsBuilder> IApizrGlobalSharedRegistrationOptionsBuilderBase IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Extending.Configuring.Proper.html": {
    "href": "api/Apizr.Extending.Configuring.Proper.html",
    "title": "Namespace Apizr.Extending.Configuring.Proper | Apizr",
    "keywords": "Namespace Apizr.Extending.Configuring.Proper Classes ApizrExtendedProperOptions Options available at proper level for extended registrations ApizrExtendedProperOptionsBuilder Builder options available at proper level for extended registrations Interfaces IApizrExtendedProperOptions Options available at proper level for extended registrations IApizrExtendedProperOptionsBase Options available at proper level for extended registrations IApizrExtendedProperOptionsBuilder Builder options available at proper level for extended registrations IApizrExtendedProperOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder> Builder options available at proper level for extended registrations"
  },
  "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptions.html": {
    "href": "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptions.html",
    "title": "Interface IApizrExtendedProperOptions | Apizr",
    "keywords": "Interface IApizrExtendedProperOptions Options available at proper level for extended registrations Inherited Members IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.PolicyRegistryKeys IApizrProperOptionsBase.Logger IApizrExtendedSharedOptions.BaseUriFactory IApizrExtendedSharedOptions.BaseAddressFactory IApizrExtendedSharedOptions.BasePathFactory IApizrExtendedSharedOptions.HttpTracerModeFactory IApizrExtendedSharedOptions.TrafficVerbosityFactory IApizrExtendedSharedOptions.LogLevelsFactory IApizrExtendedSharedOptions.HttpClientHandlerFactory IApizrExtendedSharedOptions.HttpClientBuilder IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.ContextFactory IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.OnException IApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache IApizrGlobalSharedOptionsBase.HandlersParameters Namespace : Apizr.Extending.Configuring.Proper Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedProperOptions : IApizrExtendedProperOptionsBase, IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrExtendedSharedOptions, IApizrExtendedSharedOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Properties ApizrManagerType Type of the manager Declaration Type ApizrManagerType { get; } Property Value Type Description System.Type LoggerFactory The Logger factory Declaration Func<IServiceProvider, string, ILogger> LoggerFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , System.String , Microsoft.Extensions.Logging.ILogger >"
  },
  "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBase.html": {
    "href": "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBase.html",
    "title": "Interface IApizrExtendedProperOptionsBase | Apizr",
    "keywords": "Interface IApizrExtendedProperOptionsBase Options available at proper level for extended registrations Inherited Members IApizrProperOptionsBase.WebApiType IApizrProperOptionsBase.PolicyRegistryKeys IApizrProperOptionsBase.Logger IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.ContextFactory IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.OnException IApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache IApizrGlobalSharedOptionsBase.HandlersParameters Namespace : Apizr.Extending.Configuring.Proper Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedProperOptionsBase : IApizrProperOptionsBase, IApizrSharedRegistrationOptionsBase, IApizrExtendedSharedOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase"
  },
  "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder.html",
    "title": "Interface IApizrExtendedProperOptionsBuilder | Apizr",
    "keywords": "Interface IApizrExtendedProperOptionsBuilder Builder options available at proper level for extended registrations Inherited Members IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, Uri>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithBasePath(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithLogging(Func<IServiceProvider, (T1, T2, T3)<HttpTracerMode, HttpMessageParts, LogLevel[]>>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.ConfigureHttpClientBuilder(Action<IHttpClientBuilder>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.AddDelegatingHandler<THandler>(Func<IServiceProvider, THandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.AddDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, String>>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Extending.Configuring.Proper Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedProperOptionsBuilder : IApizrExtendedProperOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrExtendedProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrExtendedSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<IApizrExtendedProperOptions, IApizrExtendedProperOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder-2.html": {
    "href": "api/Apizr.Extending.Configuring.Proper.IApizrExtendedProperOptionsBuilder-2.html",
    "title": "Interface IApizrExtendedProperOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrExtendedProperOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder> Builder options available at proper level for extended registrations Inherited Members IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithBaseAddress(Func<IServiceProvider, Uri>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithBasePath(Func<IServiceProvider, String>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithLogging(Func<IServiceProvider, (T1, T2, T3)<HttpTracerMode, HttpMessageParts, LogLevel[]>>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.ConfigureHttpClientBuilder(Action<IHttpClientBuilder>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.AddDelegatingHandler<THandler>(Func<IServiceProvider, THandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.AddDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, String>>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Extending.Configuring.Proper Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedProperOptionsBuilder<out TApizrExtendedProperOptions, out TApizrExtendedProperOptionsBuilder> : IApizrExtendedProperOptionsBuilderBase, IApizrGlobalProperOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>, IApizrGlobalProperOptionsBuilderBase, IApizrExtendedSharedOptionsBuilder<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>, IApizrExtendedSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrExtendedProperOptions : IApizrProperOptionsBase where TApizrExtendedProperOptionsBuilder : IApizrGlobalProperOptionsBuilderBase<TApizrExtendedProperOptions, TApizrExtendedProperOptionsBuilder> Type Parameters Name Description TApizrExtendedProperOptions TApizrExtendedProperOptionsBuilder Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Extending.Configuring.Registry.ApizrExtendedRegistry.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.ApizrExtendedRegistry.html",
    "title": "Class ApizrExtendedRegistry | Apizr",
    "keywords": "Class ApizrExtendedRegistry Registry options available for extended registrations Inheritance System.Object ApizrRegistryBase ApizrExtendedRegistry Implements IApizrExtendedConcurrentRegistry IApizrExtendedRegistry IApizrEnumerableRegistry System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.Type , System.Func < IApizrManager >>> System.Collections.IEnumerable IApizrExtendedConcurrentRegistryBase Inherited Members ApizrRegistryBase.GetEnumerator() ApizrRegistryBase.IEnumerable.GetEnumerator() ApizrRegistryBase.GetCrudManagerFor<T>() ApizrRegistryBase.GetCrudManagerFor<T, TKey>() ApizrRegistryBase.GetCrudManagerFor<T, TKey, TReadAllResult>() ApizrRegistryBase.GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrRegistryBase.GetManagerFor<TWebApi>() ApizrRegistryBase.TryGetCrudManagerFor<T>(IApizrManager<ICrudApi<T, Int32, IEnumerable<T>, IDictionary<String, Object>>>) ApizrRegistryBase.TryGetCrudManagerFor<T, TKey>(IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<String, Object>>>) ApizrRegistryBase.TryGetCrudManagerFor<T, TKey, TReadAllResult>(IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<String, Object>>>) ApizrRegistryBase.TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>) ApizrRegistryBase.TryGetManagerFor<TWebApi>(IApizrManager<TWebApi>) ApizrRegistryBase.Count ApizrRegistryBase.ContainsCrudManagerFor<T>() ApizrRegistryBase.ContainsCrudManagerFor<T, TKey>() ApizrRegistryBase.ContainsCrudManagerFor<T, TKey, TReadAllResult>() ApizrRegistryBase.ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrRegistryBase.ContainsManagerFor<TWebApi>() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending.Configuring.Registry Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public class ApizrExtendedRegistry : ApizrRegistryBase, IApizrExtendedConcurrentRegistry, IApizrExtendedRegistry, IApizrEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>, IEnumerable, IApizrExtendedConcurrentRegistryBase Methods AddOrUpdateManager(Type) Declaration public void AddOrUpdateManager(Type managerType) Parameters Type Name Description System.Type managerType Implements IApizrExtendedConcurrentRegistry IApizrExtendedRegistry IApizrEnumerableRegistry System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IApizrExtendedConcurrentRegistryBase Extension Methods FileTransferRegistryExtensions.GetUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.TryGetUploadManager(IApizrEnumerableRegistry, out IApizrUploadManager) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi>) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetDownloadManager(IApizrEnumerableRegistry, out IApizrDownloadManager) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi>) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManager(IApizrEnumerableRegistry, out IApizrTransferManager) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.ContainsUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>)"
  },
  "api/Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.ApizrExtendedRegistryBuilder.html",
    "title": "Class ApizrExtendedRegistryBuilder | Apizr",
    "keywords": "Class ApizrExtendedRegistryBuilder Registry builder options available for extended registrations Inheritance System.Object ApizrExtendedRegistryBuilder Implements IApizrExtendedRegistryBuilder IApizrExtendedRegistryBuilder < IApizrExtendedRegistry , IApizrExtendedRegistryBuilder , IApizrExtendedProperOptionsBuilder , IApizrExtendedCommonOptionsBuilder > IApizrRegistryBuilderBase < IApizrExtendedRegistry , IApizrExtendedRegistryBuilder , IApizrExtendedProperOptionsBuilder , IApizrExtendedCommonOptionsBuilder > IApizrRegistryBuilderBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending.Configuring.Registry Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public class ApizrExtendedRegistryBuilder : IApizrExtendedRegistryBuilder, IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>, IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>, IApizrRegistryBuilderBase Fields CommonOptions Declaration protected readonly IApizrExtendedCommonOptions CommonOptions Field Value Type Description IApizrExtendedCommonOptions Registry Declaration protected readonly ApizrExtendedRegistry Registry Field Value Type Description ApizrExtendedRegistry Services Declaration protected readonly IServiceCollection Services Field Value Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Properties ApizrRegistry Apizr registry Declaration public IApizrExtendedRegistry ApizrRegistry { get; } Property Value Type Description IApizrExtendedRegistry Methods AddCrudManagerFor(Action<IApizrExtendedProperOptionsBuilder>, Assembly[]) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder, params Assembly[] assemblies) Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder System.Reflection.Assembly [] assemblies Any assembly to scan for CrudEntityAttribute Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Action<IApizrExtendedProperOptionsBuilder>, Type[]) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder, params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for CrudEntityAttribute Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Assembly[]) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(params Assembly[] assemblies) Parameters Type Name Description System.Reflection.Assembly [] assemblies Any assembly to scan for CrudEntityAttribute Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for crudedType object type (class), with key of type System.Int32 and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type crudedType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type crudedType The object type to manage with crud api calls (class) System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>, Assembly[]) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type apizrManagerType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder, params Assembly[] assemblies) Parameters Type Name Description System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder System.Reflection.Assembly [] assemblies Any assembly to scan for CrudEntityAttribute Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>, Type[]) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type apizrManagerType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder, params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for CrudEntityAttribute Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Assembly[]) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type apizrManagerType, params Assembly[] assemblies) Parameters Type Name Description System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Reflection.Assembly [] assemblies Any assembly to scan for CrudEntityAttribute Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Action<IApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for crudedType object type (class), with key of type crudedKeyType (primitive) and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type crudedType, Type crudedKeyType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type crudedType The object type to manage with crud api calls (class) System.Type crudedKeyType The object key type (primitive) System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Type, Action<IApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for crudedType object type (class), with key of type crudedKeyType (primitive) and \"ReadAll\" query result of type crudedReadAllResultType (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters of type IDictionary{string,object} Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type crudedType The object type to manage with crud api calls (class) System.Type crudedKeyType The object key type (primitive) System.Type crudedReadAllResultType \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Type, Type, Action<IApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for crudedType object type (class), with key of type crudedKeyType (primitive) and \"ReadAll\" query result of type crudedReadAllResultType (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Type crudedReadAllParamsType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type crudedType The object type to manage with crud api calls (class) System.Type crudedKeyType The object key type (primitive) System.Type crudedReadAllResultType \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) System.Type crudedReadAllParamsType ReadAll query parameters type System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Type, Type, Type, Action<IApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> for crudedType object type (class), with key of type crudedKeyType (primitive) and \"ReadAll\" query result of type crudedReadAllResultType (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Type crudedReadAllParamsType, Type apizrManagerType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type crudedType The object type to manage with crud api calls System.Type crudedKeyType The object key type System.Type crudedReadAllResultType \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) System.Type crudedReadAllParamsType ReadAll query parameters type System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type[]) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(Type apizrManagerType, params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for CrudEntityAttribute Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor(Type[]) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor(params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for CrudEntityAttribute Returns Type Description IApizrExtendedRegistryBuilder AddCrudManagerFor<T>(Action<IApizrExtendedProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type System.Int32 and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor<T>(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls (class) AddCrudManagerFor<T, TKey>(Action<IApizrExtendedProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor<T, TKey>(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) AddCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrExtendedProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters of type IDictionary{string,object} Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrExtendedProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Action<IApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> for T object type, with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration public IApizrExtendedRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where T : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters TApizrManager A custom IApizrManager<TWebApi> implementation AddGroup(Action<IApizrExtendedRegistryBuilder>, Action<IApizrExtendedCommonOptionsBuilder>) Group registrations sharing specific common options Declaration public IApizrExtendedRegistryBuilder AddGroup(Action<IApizrExtendedRegistryBuilder> registryGroupBuilder, Action<IApizrExtendedCommonOptionsBuilder> commonOptionsBuilder = null) Parameters Type Name Description System.Action < IApizrExtendedRegistryBuilder > registryGroupBuilder System.Action < IApizrExtendedCommonOptionsBuilder > commonOptionsBuilder Returns Type Description IApizrExtendedRegistryBuilder AddManagerFor(Action<IApizrExtendedProperOptionsBuilder>, Assembly[]) Register a IApizrManager<TWebApi> for each WebApiAttribute decorated interfaces Declaration public IApizrExtendedRegistryBuilder AddManagerFor(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies) Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder System.Reflection.Assembly [] assemblies Any assembly to scan for WebApiAttribute Returns Type Description IApizrExtendedRegistryBuilder AddManagerFor(Action<IApizrExtendedProperOptionsBuilder>, Type[]) Register a IApizrManager<TWebApi> for each WebApiAttribute decorated interfaces Declaration public IApizrExtendedRegistryBuilder AddManagerFor(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for WebApiAttribute Returns Type Description IApizrExtendedRegistryBuilder AddManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> Declaration public IApizrExtendedRegistryBuilder AddManagerFor(Type webApiType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type webApiType The web api interface type to manage System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder AddManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>, Assembly[]) Register a custom IApizrManager<TWebApi> for each WebApiAttribute decorated interfaces Declaration public IApizrExtendedRegistryBuilder AddManagerFor(Type apizrManagerType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies) Parameters Type Name Description System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder System.Reflection.Assembly [] assemblies Any assembly to scan for WebApiAttribute Returns Type Description IApizrExtendedRegistryBuilder AddManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>, Type[]) Register a custom IApizrManager<TWebApi> for each WebApiAttribute decorated interfaces Declaration public IApizrExtendedRegistryBuilder AddManagerFor(Type apizrManagerType, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for WebApiAttribute Returns Type Description IApizrExtendedRegistryBuilder AddManagerFor(Type, Type, Action<IApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> Declaration public IApizrExtendedRegistryBuilder AddManagerFor(Type webApiType, Type apizrManagerType, Action<IApizrExtendedProperOptionsBuilder> properOptionsBuilder = null) Parameters Type Name Description System.Type webApiType The web api interface type to manage System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action < IApizrExtendedProperOptionsBuilder > properOptionsBuilder Returns Type Description IApizrExtendedRegistryBuilder AddManagerFor<TWebApi>(Action<IApizrExtendedProperOptionsBuilder>) Create a ApizrManager<TWebApi> instance Declaration public IApizrExtendedRegistryBuilder AddManagerFor<TWebApi>(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description TWebApi The web api interface to manage AddManagerFor<TWebApi, TApizrManager>(Action<IApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> Declaration public IApizrExtendedRegistryBuilder AddManagerFor<TWebApi, TApizrManager>(Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description TWebApi The web api interface to manage TApizrManager A custom IApizrManager<TWebApi> implementation Implements IApizrExtendedRegistryBuilder IApizrExtendedRegistryBuilder<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder> IApizrRegistryBuilderBase<TApizrRegistry, TApizrRegistryBuilder, TApizrProperOptionsBuilder, TApizrCommonOptionsBuilder> IApizrRegistryBuilderBase Extension Methods FileTransferExtendedOptionsBuilderExtensions.AddUploadManager(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddUploadManagerFor<TUploadApi>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddUploadManagerWith<TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddDownloadManager(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddDownloadManagerFor<TDownloadApi>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddDownloadFor<TDownloadApi, TDownloadParams>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddDownloadWith<TDownloadParams>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddTransferManager(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi, TDownloadParams>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>)"
  },
  "api/Apizr.Extending.Configuring.Registry.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.html",
    "title": "Namespace Apizr.Extending.Configuring.Registry | Apizr",
    "keywords": "Namespace Apizr.Extending.Configuring.Registry Classes ApizrExtendedRegistry Registry options available for extended registrations ApizrExtendedRegistryBuilder Registry builder options available for extended registrations Interfaces IApizrExtendedConcurrentRegistry Registry options available for extended registrations IApizrExtendedConcurrentRegistryBase Registry options available for extended registrations IApizrExtendedRegistry Registry options available for extended registrations IApizrExtendedRegistryBuilder Registry builder options available for extended registrations IApizrExtendedRegistryBuilder<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder> Registry builder options available for extended registrations"
  },
  "api/Apizr.Extending.Configuring.Registry.IApizrExtendedConcurrentRegistry.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.IApizrExtendedConcurrentRegistry.html",
    "title": "Interface IApizrExtendedConcurrentRegistry | Apizr",
    "keywords": "Interface IApizrExtendedConcurrentRegistry Registry options available for extended registrations Inherited Members IApizrEnumerableRegistry.Count IApizrEnumerableRegistry.ContainsCrudManagerFor<T>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey, TReadAllResult>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrEnumerableRegistry.ContainsManagerFor<TWebApi>() IApizrEnumerableRegistry.GetCrudManagerFor<T>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey, TReadAllResult>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrEnumerableRegistry.GetManagerFor<TWebApi>() IApizrEnumerableRegistry.TryGetCrudManagerFor<T>(IApizrManager<ICrudApi<T, Int32, IEnumerable<T>, IDictionary<String, Object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey>(IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<String, Object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey, TReadAllResult>(IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<String, Object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>) IApizrEnumerableRegistry.TryGetManagerFor<TWebApi>(IApizrManager<TWebApi>) System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Func<Apizr.IApizrManager>>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() IApizrExtendedConcurrentRegistryBase.AddOrUpdateManager(Type) Namespace : Apizr.Extending.Configuring.Registry Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedConcurrentRegistry : IApizrExtendedRegistry, IApizrEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>, IEnumerable, IApizrExtendedConcurrentRegistryBase Extension Methods FileTransferRegistryExtensions.GetUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.TryGetUploadManager(IApizrEnumerableRegistry, out IApizrUploadManager) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi>) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetDownloadManager(IApizrEnumerableRegistry, out IApizrDownloadManager) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi>) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManager(IApizrEnumerableRegistry, out IApizrTransferManager) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.ContainsUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>)"
  },
  "api/Apizr.Extending.Configuring.Registry.IApizrExtendedConcurrentRegistryBase.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.IApizrExtendedConcurrentRegistryBase.html",
    "title": "Interface IApizrExtendedConcurrentRegistryBase | Apizr",
    "keywords": "Interface IApizrExtendedConcurrentRegistryBase Registry options available for extended registrations Namespace : Apizr.Extending.Configuring.Registry Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedConcurrentRegistryBase Methods AddOrUpdateManager(Type) Declaration void AddOrUpdateManager(Type managerType) Parameters Type Name Description System.Type managerType"
  },
  "api/Apizr.Extending.Configuring.Registry.IApizrExtendedRegistry.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.IApizrExtendedRegistry.html",
    "title": "Interface IApizrExtendedRegistry | Apizr",
    "keywords": "Interface IApizrExtendedRegistry Registry options available for extended registrations Inherited Members IApizrEnumerableRegistry.Count IApizrEnumerableRegistry.ContainsCrudManagerFor<T>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey, TReadAllResult>() IApizrEnumerableRegistry.ContainsCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrEnumerableRegistry.ContainsManagerFor<TWebApi>() IApizrEnumerableRegistry.GetCrudManagerFor<T>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey, TReadAllResult>() IApizrEnumerableRegistry.GetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrEnumerableRegistry.GetManagerFor<TWebApi>() IApizrEnumerableRegistry.TryGetCrudManagerFor<T>(IApizrManager<ICrudApi<T, Int32, IEnumerable<T>, IDictionary<String, Object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey>(IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<String, Object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey, TReadAllResult>(IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<String, Object>>>) IApizrEnumerableRegistry.TryGetCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>) IApizrEnumerableRegistry.TryGetManagerFor<TWebApi>(IApizrManager<TWebApi>) System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Func<Apizr.IApizrManager>>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() Namespace : Apizr.Extending.Configuring.Registry Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedRegistry : IApizrEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrManager>>>, IEnumerable Extension Methods FileTransferRegistryExtensions.GetUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.GetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.TryGetUploadManager(IApizrEnumerableRegistry, out IApizrUploadManager) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi>) FileTransferRegistryExtensions.TryGetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetDownloadManager(IApizrEnumerableRegistry, out IApizrDownloadManager) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi>) FileTransferRegistryExtensions.TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManager(IApizrEnumerableRegistry, out IApizrTransferManager) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams>) FileTransferRegistryExtensions.TryGetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.TryGetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>) FileTransferRegistryExtensions.ContainsUploadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManager(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.ContainsTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync(IApizrEnumerableRegistry, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) FileTransferRegistryExtensions.DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>)"
  },
  "api/Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder.html",
    "title": "Interface IApizrExtendedRegistryBuilder | Apizr",
    "keywords": "Interface IApizrExtendedRegistryBuilder Registry builder options available for extended registrations Inherited Members IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Type, Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Type, Type, Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Type, Type, Type, Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Type, Type, Type, Type, Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Assembly[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Action<IApizrExtendedProperOptionsBuilder>, Type[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Action<IApizrExtendedProperOptionsBuilder>, Assembly[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Type[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Assembly[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>, Type[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>, Assembly[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor<TWebApi, TApizrManager>(Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor(Action<IApizrExtendedProperOptionsBuilder>, Type[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor(Action<IApizrExtendedProperOptionsBuilder>, Assembly[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>, Type[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor(Type, Action<IApizrExtendedProperOptionsBuilder>, Assembly[]) IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor(Type, Type, Action<IApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.ApizrRegistry IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddGroup(Action<IApizrExtendedRegistryBuilder>, Action<IApizrExtendedCommonOptionsBuilder>) IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T>(Action<IApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T, TKey>(Action<IApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>.AddManagerFor<TWebApi>(Action<IApizrExtendedProperOptionsBuilder>) Namespace : Apizr.Extending.Configuring.Registry Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedRegistryBuilder : IApizrExtendedRegistryBuilder<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>, IApizrRegistryBuilderBase<IApizrExtendedRegistry, IApizrExtendedRegistryBuilder, IApizrExtendedProperOptionsBuilder, IApizrExtendedCommonOptionsBuilder>, IApizrRegistryBuilderBase Extension Methods FileTransferExtendedOptionsBuilderExtensions.AddUploadManager(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddUploadManagerFor<TUploadApi>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddUploadManagerWith<TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddDownloadManager(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddDownloadManagerFor<TDownloadApi>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddDownloadFor<TDownloadApi, TDownloadParams>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddDownloadWith<TDownloadParams>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddTransferManager(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi, TDownloadParams>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) FileTransferExtendedOptionsBuilderExtensions.AddTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>)"
  },
  "api/Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder-4.html": {
    "href": "api/Apizr.Extending.Configuring.Registry.IApizrExtendedRegistryBuilder-4.html",
    "title": "Interface IApizrExtendedRegistryBuilder<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrExtendedRegistryBuilder<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder> Registry builder options available for extended registrations Inherited Members IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>.ApizrRegistry IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>.AddGroup(Action<TApizrExtendedRegistryBuilder>, Action<TApizrExtendedCommonOptionsBuilder>) IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T>(Action<TApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T, TKey>(Action<TApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult>(Action<TApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>.AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<TApizrExtendedProperOptionsBuilder>) IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>.AddManagerFor<TWebApi>(Action<TApizrExtendedProperOptionsBuilder>) Namespace : Apizr.Extending.Configuring.Registry Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedRegistryBuilder<out TApizrExtendedRegistry, out TApizrExtendedRegistryBuilder, out TApizrExtendedProperOptionsBuilder, out TApizrExtendedCommonOptionsBuilder> : IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder>, IApizrRegistryBuilderBase where TApizrExtendedRegistry : IApizrEnumerableRegistry where TApizrExtendedRegistryBuilder : IApizrRegistryBuilderBase<TApizrExtendedRegistry, TApizrExtendedRegistryBuilder, TApizrExtendedProperOptionsBuilder, TApizrExtendedCommonOptionsBuilder> where TApizrExtendedProperOptionsBuilder : IApizrGlobalProperOptionsBuilderBase where TApizrExtendedCommonOptionsBuilder : IApizrGlobalCommonOptionsBuilderBase Type Parameters Name Description TApizrExtendedRegistry TApizrExtendedRegistryBuilder TApizrExtendedProperOptionsBuilder TApizrExtendedCommonOptionsBuilder Methods AddCrudManagerFor(Action<TApizrExtendedProperOptionsBuilder>, Assembly[]) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Action<TApizrExtendedProperOptionsBuilder> optionsBuilder, params Assembly[] assemblies) Parameters Type Name Description System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options System.Reflection.Assembly [] assemblies Any assembly to scan for CrudEntityAttribute Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Action<TApizrExtendedProperOptionsBuilder>, Type[]) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Action<TApizrExtendedProperOptionsBuilder> optionsBuilder, params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for CrudEntityAttribute Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Assembly[]) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(params Assembly[] assemblies) Parameters Type Name Description System.Reflection.Assembly [] assemblies Any assembly to scan for CrudEntityAttribute Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Action<TApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for crudedType object type (class), with key of type System.Int32 and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Type crudedType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type crudedType The object type to manage with crud api calls (class) System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Action<TApizrExtendedProperOptionsBuilder>, Assembly[]) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Type apizrManagerType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder, params Assembly[] assemblies) Parameters Type Name Description System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options System.Reflection.Assembly [] assemblies Any assembly to scan for CrudEntityAttribute Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Action<TApizrExtendedProperOptionsBuilder>, Type[]) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Type apizrManagerType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder, params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for CrudEntityAttribute Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Assembly[]) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Type apizrManagerType, params Assembly[] assemblies) Parameters Type Name Description System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Reflection.Assembly [] assemblies Any assembly to scan for CrudEntityAttribute Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Action<TApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for crudedType object type (class), with key of type crudedKeyType (primitive) and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Type crudedType, Type crudedKeyType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type crudedType The object type to manage with crud api calls (class) System.Type crudedKeyType The object key type (primitive) System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Type, Action<TApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for crudedType object type (class), with key of type crudedKeyType (primitive) and \"ReadAll\" query result of type crudedReadAllResultType (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters of type IDictionary{string,object} Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type crudedType The object type to manage with crud api calls (class) System.Type crudedKeyType The object key type (primitive) System.Type crudedReadAllResultType \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Type, Type, Action<TApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> for crudedType object type (class), with key of type crudedKeyType (primitive) and \"ReadAll\" query result of type crudedReadAllResultType (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Type crudedReadAllParamsType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type crudedType The object type to manage with crud api calls (class) System.Type crudedKeyType The object key type (primitive) System.Type crudedReadAllResultType \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) System.Type crudedReadAllParamsType ReadAll query parameters type System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type, Type, Type, Type, Action<TApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> for crudedType object type (class), with key of type crudedKeyType (primitive) and \"ReadAll\" query result of type crudedReadAllResultType (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Type crudedReadAllParamsType, Type apizrManagerType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type crudedType The object type to manage with crud api calls System.Type crudedKeyType The object key type System.Type crudedReadAllResultType \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) System.Type crudedReadAllParamsType ReadAll query parameters type System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Type, Type[]) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(Type apizrManagerType, params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for CrudEntityAttribute Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor(Type[]) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor(params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for CrudEntityAttribute Returns Type Description TApizrExtendedRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Action<TApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> for T object type, with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration TApizrExtendedRegistryBuilder AddCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null) where T : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Parameters Type Name Description System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options Returns Type Description TApizrExtendedRegistryBuilder Type Parameters Name Description T The object type to manage with crud api calls TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters TApizrManager A custom IApizrManager<TWebApi> implementation AddManagerFor(Action<TApizrExtendedProperOptionsBuilder>, Assembly[]) Register a IApizrManager<TWebApi> for each WebApiAttribute decorated interfaces Declaration TApizrExtendedRegistryBuilder AddManagerFor(Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies) Parameters Type Name Description System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options System.Reflection.Assembly [] assemblies Any assembly to scan for WebApiAttribute Returns Type Description TApizrExtendedRegistryBuilder AddManagerFor(Action<TApizrExtendedProperOptionsBuilder>, Type[]) Register a IApizrManager<TWebApi> for each WebApiAttribute decorated interfaces Declaration TApizrExtendedRegistryBuilder AddManagerFor(Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for WebApiAttribute Returns Type Description TApizrExtendedRegistryBuilder AddManagerFor(Type, Action<TApizrExtendedProperOptionsBuilder>) Register IApizrManager<TWebApi> Declaration TApizrExtendedRegistryBuilder AddManagerFor(Type webApiType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type webApiType The web api interface type to manage System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options Returns Type Description TApizrExtendedRegistryBuilder AddManagerFor(Type, Action<TApizrExtendedProperOptionsBuilder>, Assembly[]) Register a custom IApizrManager<TWebApi> for each WebApiAttribute decorated interfaces Declaration TApizrExtendedRegistryBuilder AddManagerFor(Type apizrManagerType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies) Parameters Type Name Description System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options System.Reflection.Assembly [] assemblies Any assembly to scan for WebApiAttribute Returns Type Description TApizrExtendedRegistryBuilder AddManagerFor(Type, Action<TApizrExtendedProperOptionsBuilder>, Type[]) Register a custom IApizrManager<TWebApi> for each WebApiAttribute decorated interfaces Declaration TApizrExtendedRegistryBuilder AddManagerFor(Type apizrManagerType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes) Parameters Type Name Description System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for WebApiAttribute Returns Type Description TApizrExtendedRegistryBuilder AddManagerFor(Type, Type, Action<TApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> Declaration TApizrExtendedRegistryBuilder AddManagerFor(Type webApiType, Type apizrManagerType, Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Type webApiType The web api interface type to manage System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options Returns Type Description TApizrExtendedRegistryBuilder AddManagerFor<TWebApi, TApizrManager>(Action<TApizrExtendedProperOptionsBuilder>) Register a custom IApizrManager<TWebApi> Declaration TApizrExtendedRegistryBuilder AddManagerFor<TWebApi, TApizrManager>(Action<TApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action <TApizrExtendedProperOptionsBuilder> optionsBuilder The builder defining specific Apizr options Returns Type Description TApizrExtendedRegistryBuilder Type Parameters Name Description TWebApi The web api interface to manage TApizrManager A custom IApizrManager<TWebApi> implementation"
  },
  "api/Apizr.Extending.Configuring.Shared.html": {
    "href": "api/Apizr.Extending.Configuring.Shared.html",
    "title": "Namespace Apizr.Extending.Configuring.Shared | Apizr",
    "keywords": "Namespace Apizr.Extending.Configuring.Shared Interfaces IApizrExtendedSharedOptions Options available at both common and proper level for extended registrations IApizrExtendedSharedOptionsBase Options available at both common and proper level for extended registrations IApizrExtendedSharedOptionsBuilder<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder> Builder options available at both common and proper level for extended registrations"
  },
  "api/Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.html": {
    "href": "api/Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptions.html",
    "title": "Interface IApizrExtendedSharedOptions | Apizr",
    "keywords": "Interface IApizrExtendedSharedOptions Options available at both common and proper level for extended registrations Inherited Members IApizrExtendedSharedOptionsBase.DelegatingHandlersExtendedFactories IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.ContextFactory IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.OnException IApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache IApizrGlobalSharedOptionsBase.HandlersParameters Namespace : Apizr.Extending.Configuring.Shared Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedSharedOptions : IApizrExtendedSharedOptionsBase, IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Properties BaseAddressFactory Base address factory Declaration Func<IServiceProvider, string> BaseAddressFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , System.String > BasePathFactory Base path factory Declaration Func<IServiceProvider, string> BasePathFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , System.String > BaseUriFactory Base Uri factory Declaration Func<IServiceProvider, Uri> BaseUriFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , System.Uri > HttpClientBuilder HttpClient builder Declaration Action<IHttpClientBuilder> HttpClientBuilder { get; } Property Value Type Description System.Action < Microsoft.Extensions.DependencyInjection.IHttpClientBuilder > HttpClientHandlerFactory HttpClientHandler factory Declaration Func<IServiceProvider, HttpClientHandler> HttpClientHandlerFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , System.Net.Http.HttpClientHandler > HttpTracerModeFactory Http traffic tracing mode factory Declaration Func<IServiceProvider, HttpTracerMode> HttpTracerModeFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , HttpTracerMode > LogLevelsFactory Log levels factory Declaration Func<IServiceProvider, LogLevel[]> LogLevelsFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , Microsoft.Extensions.Logging.LogLevel []> TrafficVerbosityFactory Http traffic tracing verbosity factory Declaration Func<IServiceProvider, HttpMessageParts> TrafficVerbosityFactory { get; } Property Value Type Description System.Func < System.IServiceProvider , HttpMessageParts >"
  },
  "api/Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBase.html": {
    "href": "api/Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBase.html",
    "title": "Interface IApizrExtendedSharedOptionsBase | Apizr",
    "keywords": "Interface IApizrExtendedSharedOptionsBase Options available at both common and proper level for extended registrations Inherited Members IApizrGlobalSharedRegistrationOptionsBase.BaseUri IApizrGlobalSharedRegistrationOptionsBase.BaseAddress IApizrGlobalSharedRegistrationOptionsBase.BasePath IApizrGlobalSharedRegistrationOptionsBase.ContextFactory IApizrGlobalSharedRegistrationOptionsBase.PrimaryHandlerFactory IApizrGlobalSharedOptionsBase.HttpTracerMode IApizrGlobalSharedOptionsBase.TrafficVerbosity IApizrGlobalSharedOptionsBase.LogLevels IApizrGlobalSharedOptionsBase.OnException IApizrGlobalSharedOptionsBase.LetThrowOnExceptionWithEmptyCache IApizrGlobalSharedOptionsBase.HandlersParameters Namespace : Apizr.Extending.Configuring.Shared Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedSharedOptionsBase : IApizrGlobalSharedRegistrationOptionsBase, IApizrGlobalSharedOptionsBase Properties DelegatingHandlersExtendedFactories Delegating handlers factories Declaration IDictionary<Type, Func<IServiceProvider, IApizrManagerOptionsBase, DelegatingHandler>> DelegatingHandlersExtendedFactories { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Type , System.Func < System.IServiceProvider , IApizrManagerOptionsBase , System.Net.Http.DelegatingHandler >>"
  },
  "api/Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder-2.html": {
    "href": "api/Apizr.Extending.Configuring.Shared.IApizrExtendedSharedOptionsBuilder-2.html",
    "title": "Interface IApizrExtendedSharedOptionsBuilder<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder> | Apizr",
    "keywords": "Interface IApizrExtendedSharedOptionsBuilder<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder> Builder options available at both common and proper level for extended registrations Inherited Members IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithBaseAddress(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithBaseAddress(Uri) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithBasePath(String) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithHttpClientHandler(HttpClientHandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithAuthenticationHandler(Func<HttpRequestMessage, Task<String>>) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.AddDelegatingHandler<THandler>(THandler) IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithContext(Func<Context>, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithExCatching(Action<ApizrException>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithExCatching<TResult>(Action<ApizrException<TResult>>, Boolean, ApizrDuplicateStrategy) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithHandlerParameter(String, Object) IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>.WithLogging(HttpTracerMode, HttpMessageParts, LogLevel[]) Namespace : Apizr.Extending.Configuring.Shared Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public interface IApizrExtendedSharedOptionsBuilder<out TApizrExtendedSharedOptions, out TApizrExtendedSharedOptionsBuilder> : IApizrExtendedSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>, IApizrGlobalSharedOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder>, IApizrGlobalSharedRegistrationOptionsBuilderBase, IApizrGlobalSharedOptionsBuilderBase where TApizrExtendedSharedOptions : IApizrSharedRegistrationOptionsBase where TApizrExtendedSharedOptionsBuilder : IApizrGlobalSharedRegistrationOptionsBuilderBase<TApizrExtendedSharedOptions, TApizrExtendedSharedOptionsBuilder> Type Parameters Name Description TApizrExtendedSharedOptions TApizrExtendedSharedOptionsBuilder Methods AddDelegatingHandler<THandler>(Func<IServiceProvider, THandler>) Add a custom delegating handler Declaration TApizrExtendedSharedOptionsBuilder AddDelegatingHandler<THandler>(Func<IServiceProvider, THandler> delegatingHandlerFactory) where THandler : DelegatingHandler Parameters Type Name Description System.Func < System.IServiceProvider , THandler> delegatingHandlerFactory A delegating handler factory Returns Type Description TApizrExtendedSharedOptionsBuilder Type Parameters Name Description THandler AddDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler>) Add a custom delegating handler Declaration TApizrExtendedSharedOptionsBuilder AddDelegatingHandler<THandler>(Func<IServiceProvider, IApizrManagerOptionsBase, THandler> delegatingHandlerFactory) where THandler : DelegatingHandler Parameters Type Name Description System.Func < System.IServiceProvider , IApizrManagerOptionsBase , THandler> delegatingHandlerFactory A delegating handler factory Returns Type Description TApizrExtendedSharedOptionsBuilder Type Parameters Name Description THandler ConfigureHttpClientBuilder(Action<IHttpClientBuilder>) Adjust some HttpClient settings Declaration TApizrExtendedSharedOptionsBuilder ConfigureHttpClientBuilder(Action<IHttpClientBuilder> httpClientBuilder) Parameters Type Name Description System.Action < Microsoft.Extensions.DependencyInjection.IHttpClientBuilder > httpClientBuilder The HttpClient builder Returns Type Description TApizrExtendedSharedOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler>) Provide your own AuthenticationHandlerBase implementation Declaration TApizrExtendedSharedOptionsBuilder WithAuthenticationHandler<TAuthenticationHandler>(Func<IServiceProvider, IApizrManagerOptionsBase, TAuthenticationHandler> authenticationHandlerFactory) where TAuthenticationHandler : AuthenticationHandlerBase Parameters Type Name Description System.Func < System.IServiceProvider , IApizrManagerOptionsBase , TAuthenticationHandler> authenticationHandlerFactory A TAuthenticationHandler instance factory Returns Type Description TApizrExtendedSharedOptionsBuilder Type Parameters Name Description TAuthenticationHandler Your AuthenticationHandlerBase implementation WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, String>>, Func<HttpRequestMessage, Task<String>>) Provide your own settings management service and a method to refresh the token Declaration TApizrExtendedSharedOptionsBuilder WithAuthenticationHandler<TSettingsService>(Expression<Func<TSettingsService, string>> tokenProperty, Func<HttpRequestMessage, Task<string>> refreshTokenFactory) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Func < System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >> refreshTokenFactory The method factory called to refresh the token Returns Type Description TApizrExtendedSharedOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, String>>, Expression<Func<TTokenService, HttpRequestMessage, Task<String>>>) Provide your own settings management and token management services Declaration TApizrExtendedSharedOptionsBuilder WithAuthenticationHandler<TSettingsService, TTokenService>(Expression<Func<TSettingsService, string>> tokenProperty, Expression<Func<TTokenService, HttpRequestMessage, Task<string>>> refreshTokenMethod) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TSettingsService, System.String >> tokenProperty The token property used for saving System.Linq.Expressions.Expression < System.Func <TTokenService, System.Net.Http.HttpRequestMessage , System.Threading.Tasks.Task < System.String >>> refreshTokenMethod The method called to refresh the token Returns Type Description TApizrExtendedSharedOptionsBuilder Type Parameters Name Description TSettingsService Your settings management service (saving/getting token) TTokenService Your token management service (refreshing token) WithBaseAddress(Func<IServiceProvider, String>) Define your web api base address (could be defined with WebApiAttribute) Declaration TApizrExtendedSharedOptionsBuilder WithBaseAddress(Func<IServiceProvider, string> baseAddressFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.String > baseAddressFactory Your web api base address factory Returns Type Description TApizrExtendedSharedOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri>) Define your web api base address (could be defined with WebApiAttribute) Declaration TApizrExtendedSharedOptionsBuilder WithBaseAddress(Func<IServiceProvider, Uri> baseAddressFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.Uri > baseAddressFactory Your web api base address factory Returns Type Description TApizrExtendedSharedOptionsBuilder WithBasePath(Func<IServiceProvider, String>) Define your web api base path (could be defined with WebApiAttribute) Declaration TApizrExtendedSharedOptionsBuilder WithBasePath(Func<IServiceProvider, string> basePathFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.String > basePathFactory Your web api base path factory Returns Type Description TApizrExtendedSharedOptionsBuilder WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler>) Provide a custom HttpClientHandler Declaration TApizrExtendedSharedOptionsBuilder WithHttpClientHandler(Func<IServiceProvider, HttpClientHandler> httpClientHandlerFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.Net.Http.HttpClientHandler > httpClientHandlerFactory An System.Net.Http.HttpClientHandler instance factory Returns Type Description TApizrExtendedSharedOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode>, Func<IServiceProvider, HttpMessageParts>, Func<IServiceProvider, LogLevel[]>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration TApizrExtendedSharedOptionsBuilder WithLogging(Func<IServiceProvider, HttpTracerMode> httpTracerModeFactory, Func<IServiceProvider, HttpMessageParts> trafficVerbosityFactory, Func<IServiceProvider, LogLevel[]> logLevelsFactory) Parameters Type Name Description System.Func < System.IServiceProvider , HttpTracerMode > httpTracerModeFactory Http traffic tracing mode factory System.Func < System.IServiceProvider , HttpMessageParts > trafficVerbosityFactory Http traffic tracing verbosity factory System.Func < System.IServiceProvider , Microsoft.Extensions.Logging.LogLevel []> logLevelsFactory Log levels factory Returns Type Description TApizrExtendedSharedOptionsBuilder WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])>) Define tracer mode, http traffic tracing verbosity and log levels (could be defined with LogAttribute) Declaration TApizrExtendedSharedOptionsBuilder WithLogging(Func<IServiceProvider, (HttpTracerMode, HttpMessageParts, LogLevel[])> loggingConfigurationFactory) Parameters Type Name Description System.Func < System.IServiceProvider , System.ValueTuple < HttpTracerMode , HttpMessageParts , Microsoft.Extensions.Logging.LogLevel []>> loggingConfigurationFactory Logging configuration factory Returns Type Description TApizrExtendedSharedOptionsBuilder Extension Methods FusilladeOptionsBuilderExtensions.WithPriority<T>(T) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Priority) FusilladeOptionsBuilderExtensions.WithPriority<T>(T, Int32) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) FileTransferOptionsBuilderExtensions.WithProgress<TBuilder>(TBuilder, IApizrProgress)"
  },
  "api/Apizr.Extending.EnumerableExtensions.html": {
    "href": "api/Apizr.Extending.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | Apizr",
    "keywords": "Class EnumerableExtensions Some enumerable extensions Inheritance System.Object EnumerableExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending Assembly : Apizr.dll Syntax public static class EnumerableExtensions Methods High(IEnumerable<LogLevel>) Return the highest value Declaration public static LogLevel High(this IEnumerable<LogLevel> enumerable) Parameters Type Name Description System.Collections.Generic.IEnumerable < Microsoft.Extensions.Logging.LogLevel > enumerable The source enumerable Returns Type Description Microsoft.Extensions.Logging.LogLevel Low(IEnumerable<LogLevel>) Return the lowest value Declaration public static LogLevel Low(this IEnumerable<LogLevel> enumerable) Parameters Type Name Description System.Collections.Generic.IEnumerable < Microsoft.Extensions.Logging.LogLevel > enumerable The source enumerable Returns Type Description Microsoft.Extensions.Logging.LogLevel Medium(IEnumerable<LogLevel>) Return the closest value to the middle Declaration public static LogLevel Medium(this IEnumerable<LogLevel> enumerable) Parameters Type Name Description System.Collections.Generic.IEnumerable < Microsoft.Extensions.Logging.LogLevel > enumerable The source enumerable Returns Type Description Microsoft.Extensions.Logging.LogLevel"
  },
  "api/Apizr.Extending.FileTransferRegistryExtensions.html": {
    "href": "api/Apizr.Extending.FileTransferRegistryExtensions.html",
    "title": "Class FileTransferRegistryExtensions | Apizr",
    "keywords": "Class FileTransferRegistryExtensions Inheritance System.Object FileTransferRegistryExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending Assembly : Apizr.Integrations.FileTransfer.dll Syntax public static class FileTransferRegistryExtensions Methods ContainsDownloadManager(IApizrEnumerableRegistry) Check if registry contains a manager for the default IDownloadApi api type Declaration public static bool ContainsDownloadManager(this IApizrEnumerableRegistry registry) Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description System.Boolean ContainsDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) Check if registry contains a manager for TDownloadApi api type Declaration public static bool ContainsDownloadManagerFor<TDownloadApi>(this IApizrEnumerableRegistry registry) where TDownloadApi : IDownloadApi Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description System.Boolean Type Parameters Name Description TDownloadApi The download api interface to manage ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) Check if registry contains a manager for TDownloadApi api type Declaration public static bool ContainsDownloadManagerFor<TDownloadApi, TDownloadParams>(this IApizrEnumerableRegistry registry) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description System.Boolean Type Parameters Name Description TDownloadApi The download api interface to manage TDownloadParams The download query parameters type ContainsDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) Check if registry contains a manager for IDownloadApi<TDownloadParams> api type Declaration public static bool ContainsDownloadManagerWith<TDownloadParams>(this IApizrEnumerableRegistry registry) Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description System.Boolean Type Parameters Name Description TDownloadParams The download query parameters type ContainsTransferManager(IApizrEnumerableRegistry) Check if registry contains a manager for the default ITransferApi api type Declaration public static bool ContainsTransferManager(this IApizrEnumerableRegistry registry) Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description System.Boolean ContainsTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) Check if registry contains a manager for TTransferApi api type Declaration public static bool ContainsTransferManagerFor<TTransferApi>(this IApizrEnumerableRegistry registry) where TTransferApi : ITransferApi Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description System.Boolean Type Parameters Name Description TTransferApi The Transfer api interface to manage ContainsTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) Check if registry contains a manager for TTransferApi api type Declaration public static bool ContainsTransferManagerFor<TTransferApi, TDownloadParams>(this IApizrEnumerableRegistry registry) where TTransferApi : ITransferApi<TDownloadParams, HttpResponseMessage>, IUploadApi Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description System.Boolean Type Parameters Name Description TTransferApi The Transfer api interface to manage TDownloadParams The download query parameters type ContainsTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) Check if registry contains a manager for TTransferApi api type Declaration public static bool ContainsTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(this IApizrEnumerableRegistry registry) where TTransferApi : ITransferApi<TDownloadParams, TUploadApiResultData> Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description System.Boolean Type Parameters Name Description TTransferApi The Transfer api interface to manage TDownloadParams The download query parameters type TUploadApiResultData The upload api return type ContainsTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) Check if registry contains a manager for ITransferApi<TDownloadParams, TUploadApiResultData> api type Declaration public static bool ContainsTransferManagerWith<TDownloadParams, TUploadApiResultData>(this IApizrEnumerableRegistry registry) Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description System.Boolean Type Parameters Name Description TDownloadParams The download query parameters type TUploadApiResultData The upload api return type ContainsUploadManager(IApizrEnumerableRegistry) Check if registry contains a manager for the default IUploadApi api type Declaration public static bool ContainsUploadManager(this IApizrEnumerableRegistry registry) Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description System.Boolean ContainsUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) Check if registry contains a manager for TUploadApi api type Declaration public static bool ContainsUploadManagerFor<TUploadApi>(this IApizrEnumerableRegistry registry) where TUploadApi : IUploadApi Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description System.Boolean Type Parameters Name Description TUploadApi The upload api interface to manage ContainsUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) Check if registry contains a manager for TUploadApi api type Declaration public static bool ContainsUploadManagerFor<TUploadApi, TUploadApiResultData>(this IApizrEnumerableRegistry registry) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description System.Boolean Type Parameters Name Description TUploadApi The upload api interface to manage TUploadApiResultData The upload api return type ContainsUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) Check if registry contains a manager for IUploadApi<TApiResultData> api type Declaration public static bool ContainsUploadManagerWith<TUploadApiResultData>(this IApizrEnumerableRegistry registry) Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description System.Boolean Type Parameters Name Description TUploadApiResultData The upload api return type DownloadAsync(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) Download a file Declaration public static Task<FileInfo> DownloadAsync(this IApizrEnumerableRegistry registry, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > DownloadAsync(IApizrEnumerableRegistry, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) Download a file with custom query parameters Declaration public static Task<FileInfo> DownloadAsync(this IApizrEnumerableRegistry registry, FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.IO.FileInfo fileInfo Some information about the file to download System.Collections.Generic.IDictionary < System.String , System.Object > downloadParams Some custom query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) Download a file Declaration public static Task<FileInfo> DownloadAsync<TDownloadApi>(this IApizrEnumerableRegistry registry, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > Type Parameters Name Description TDownloadApi The download api type to manage DownloadAsync<TDownloadApi>(IApizrEnumerableRegistry, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) Download a file with custom query parameters Declaration public static Task<FileInfo> DownloadAsync<TDownloadApi>(this IApizrEnumerableRegistry registry, FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.IO.FileInfo fileInfo Some information about the file to download System.Collections.Generic.IDictionary < System.String , System.Object > downloadParams Some custom query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > Type Parameters Name Description TDownloadApi The download api type to manage DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) Download a file with custom query parameters Declaration public static Task<FileInfo> DownloadAsync<TDownloadApi, TDownloadParams>(this IApizrEnumerableRegistry registry, FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.IO.FileInfo fileInfo Some information about the file to download TDownloadParams downloadParams Some custom query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > Type Parameters Name Description TDownloadApi The download api type to manage TDownloadParams The query parameters type DownloadAsync<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) Download a file Declaration public static Task<FileInfo> DownloadAsync<TDownloadApi, TDownloadParams>(this IApizrEnumerableRegistry registry, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > Type Parameters Name Description TDownloadApi The download api type to manage TDownloadParams The query parameters type DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) Download a file with custom query parameters Declaration public static Task<FileInfo> DownloadWithAsync<TDownloadParams>(this IApizrEnumerableRegistry registry, FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.IO.FileInfo fileInfo Some information about the file to download TDownloadParams downloadParams Some custom query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > Type Parameters Name Description TDownloadParams The query parameters type DownloadWithAsync<TDownloadParams>(IApizrEnumerableRegistry, FileInfo, Action<IApizrRequestOptionsBuilder>) Download a file Declaration public static Task<FileInfo> DownloadWithAsync<TDownloadParams>(this IApizrEnumerableRegistry registry, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > Type Parameters Name Description TDownloadParams The query parameters type GetDownloadManager(IApizrEnumerableRegistry) Get a download manager instance Declaration public static IApizrDownloadManager GetDownloadManager(this IApizrEnumerableRegistry registry) Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description IApizrDownloadManager GetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry) Get a download manager instance Declaration public static IApizrDownloadManager<TDownloadApi> GetDownloadManagerFor<TDownloadApi>(this IApizrEnumerableRegistry registry) where TDownloadApi : IDownloadApi Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description IApizrDownloadManager <TDownloadApi> Type Parameters Name Description TDownloadApi The download api interface to manage GetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry) Get a download manager instance Declaration public static IApizrDownloadManager<TDownloadApi, TDownloadParams> GetDownloadManagerFor<TDownloadApi, TDownloadParams>(this IApizrEnumerableRegistry registry) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description IApizrDownloadManager <TDownloadApi, TDownloadParams> Type Parameters Name Description TDownloadApi The download api interface to manage TDownloadParams The download query parameters type GetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry) Get a download manager instance Declaration public static IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams> GetDownloadManagerWith<TDownloadParams>(this IApizrEnumerableRegistry registry) Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description IApizrDownloadManager < IDownloadApi <TDownloadParams>, TDownloadParams> Type Parameters Name Description TDownloadParams The download query parameters type GetTransferManager(IApizrEnumerableRegistry) Get a transfer manager instance Declaration public static IApizrTransferManager GetTransferManager(this IApizrEnumerableRegistry registry) Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description IApizrTransferManager GetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry) Get a transfer manager instance Declaration public static IApizrTransferManager<TTransferApi> GetTransferManagerFor<TTransferApi>(this IApizrEnumerableRegistry registry) where TTransferApi : ITransferApi Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description IApizrTransferManager <TTransferApi> Type Parameters Name Description TTransferApi The Transfer api interface to manage GetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry) Get a transfer manager instance Declaration public static IApizrTransferManager<TTransferApi, TDownloadParams> GetTransferManagerFor<TTransferApi, TDownloadParams>(this IApizrEnumerableRegistry registry) where TTransferApi : ITransferApi<TDownloadParams, HttpResponseMessage>, IUploadApi Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description IApizrTransferManager <TTransferApi, TDownloadParams> Type Parameters Name Description TTransferApi The Transfer api interface to manage TDownloadParams The download query parameters type GetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) Get a transfer manager instance Declaration public static IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> GetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(this IApizrEnumerableRegistry registry) where TTransferApi : ITransferApi<TDownloadParams, TUploadApiResultData> Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description IApizrTransferManager <TTransferApi, TDownloadParams, TUploadApiResultData> Type Parameters Name Description TTransferApi The Transfer api interface to manage TDownloadParams The download query parameters type TUploadApiResultData The upload api return type GetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry) Get a transfer manager instance Declaration public static IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData> GetTransferManagerWith<TDownloadParams, TUploadApiResultData>(this IApizrEnumerableRegistry registry) Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description IApizrTransferManager < ITransferApi <TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData> Type Parameters Name Description TDownloadParams The download query parameters type TUploadApiResultData The upload api return type GetUploadManager(IApizrEnumerableRegistry) Get an upload manager instance Declaration public static IApizrUploadManager GetUploadManager(this IApizrEnumerableRegistry registry) Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description IApizrUploadManager GetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry) Get an upload manager instance Declaration public static IApizrUploadManager<TUploadApi> GetUploadManagerFor<TUploadApi>(this IApizrEnumerableRegistry registry) where TUploadApi : IUploadApi Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description IApizrUploadManager <TUploadApi> Type Parameters Name Description TUploadApi The upload api interface to manage GetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry) Get an upload manager instance Declaration public static IApizrUploadManager<TUploadApi, TUploadApiResultData> GetUploadManagerFor<TUploadApi, TUploadApiResultData>(this IApizrEnumerableRegistry registry) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description IApizrUploadManager <TUploadApi, TUploadApiResultData> Type Parameters Name Description TUploadApi The upload api interface to manage TUploadApiResultData The upload api return type GetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry) Get an upload manager instance Declaration public static IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData> GetUploadManagerWith<TUploadApiResultData>(this IApizrEnumerableRegistry registry) Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from Returns Type Description IApizrUploadManager < IUploadApi <TUploadApiResultData>, TUploadApiResultData> Type Parameters Name Description TUploadApiResultData The upload api return type TryGetDownloadManager(IApizrEnumerableRegistry, out IApizrDownloadManager) Get a download manager instance Declaration public static bool TryGetDownloadManager(this IApizrEnumerableRegistry registry, out IApizrDownloadManager manager) Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from IApizrDownloadManager manager The download manager instance Returns Type Description System.Boolean TryGetDownloadManagerFor<TDownloadApi>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi>) Get a download manager instance Declaration public static bool TryGetDownloadManagerFor<TDownloadApi>(this IApizrEnumerableRegistry registry, out IApizrDownloadManager<TDownloadApi> manager) where TDownloadApi : IDownloadApi Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from IApizrDownloadManager <TDownloadApi> manager The download manager instance Returns Type Description System.Boolean Type Parameters Name Description TDownloadApi The download api interface to manage TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<TDownloadApi, TDownloadParams>) Get a download manager instance Declaration public static bool TryGetDownloadManagerFor<TDownloadApi, TDownloadParams>(this IApizrEnumerableRegistry registry, out IApizrDownloadManager<TDownloadApi, TDownloadParams> manager) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from IApizrDownloadManager <TDownloadApi, TDownloadParams> manager The download manager instance Returns Type Description System.Boolean Type Parameters Name Description TDownloadApi The download api interface to manage TDownloadParams The download query parameters type TryGetDownloadManagerWith<TDownloadParams>(IApizrEnumerableRegistry, out IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>) Get a download manager instance Declaration public static bool TryGetDownloadManagerWith<TDownloadParams>(this IApizrEnumerableRegistry registry, out IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams> manager) Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from IApizrDownloadManager < IDownloadApi <TDownloadParams>, TDownloadParams> manager The download manager instance Returns Type Description System.Boolean Type Parameters Name Description TDownloadParams The download query parameters type TryGetTransferManager(IApizrEnumerableRegistry, out IApizrTransferManager) Get a transfer manager instance Declaration public static bool TryGetTransferManager(this IApizrEnumerableRegistry registry, out IApizrTransferManager manager) Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from IApizrTransferManager manager The transfer manager instance Returns Type Description System.Boolean TryGetTransferManagerFor<TTransferApi>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi>) Get a transfer manager instance Declaration public static bool TryGetTransferManagerFor<TTransferApi>(this IApizrEnumerableRegistry registry, out IApizrTransferManager<TTransferApi> manager) where TTransferApi : ITransferApi Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from IApizrTransferManager <TTransferApi> manager The transfer manager instance Returns Type Description System.Boolean Type Parameters Name Description TTransferApi The Transfer api interface to manage TryGetTransferManagerFor<TTransferApi, TDownloadParams>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams>) Get a transfer manager instance Declaration public static bool TryGetTransferManagerFor<TTransferApi, TDownloadParams>(this IApizrEnumerableRegistry registry, out IApizrTransferManager<TTransferApi, TDownloadParams> manager) where TTransferApi : ITransferApi<TDownloadParams, HttpResponseMessage>, IUploadApi Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from IApizrTransferManager <TTransferApi, TDownloadParams> manager The transfer manager instance Returns Type Description System.Boolean Type Parameters Name Description TTransferApi The Transfer api interface to manage TDownloadParams The download query parameters type TryGetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData>) Get a transfer manager instance Declaration public static bool TryGetTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(this IApizrEnumerableRegistry registry, out IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> manager) where TTransferApi : ITransferApi<TDownloadParams, TUploadApiResultData> Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from IApizrTransferManager <TTransferApi, TDownloadParams, TUploadApiResultData> manager The transfer manager instance Returns Type Description System.Boolean Type Parameters Name Description TTransferApi The Transfer api interface to manage TDownloadParams The download query parameters type TUploadApiResultData The upload api return type TryGetTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData>) Get a transfer manager instance Declaration public static bool TryGetTransferManagerWith<TDownloadParams, TUploadApiResultData>(this IApizrEnumerableRegistry registry, out IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData> manager) Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from IApizrTransferManager < ITransferApi <TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData> manager The transfer manager instance Returns Type Description System.Boolean Type Parameters Name Description TDownloadParams The download query parameters type TUploadApiResultData The upload api return type TryGetUploadManager(IApizrEnumerableRegistry, out IApizrUploadManager) Get an upload manager instance Declaration public static bool TryGetUploadManager(this IApizrEnumerableRegistry registry, out IApizrUploadManager manager) Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from IApizrUploadManager manager The upload manager instance Returns Type Description System.Boolean TryGetUploadManagerFor<TUploadApi>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi>) Get an upload manager instance Declaration public static bool TryGetUploadManagerFor<TUploadApi>(this IApizrEnumerableRegistry registry, out IApizrUploadManager<TUploadApi> manager) where TUploadApi : IUploadApi Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from IApizrUploadManager <TUploadApi> manager The upload manager instance Returns Type Description System.Boolean Type Parameters Name Description TUploadApi The upload api interface to manage TryGetUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<TUploadApi, TUploadApiResultData>) Get an upload manager instance Declaration public static bool TryGetUploadManagerFor<TUploadApi, TUploadApiResultData>(this IApizrEnumerableRegistry registry, out IApizrUploadManager<TUploadApi, TUploadApiResultData> manager) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from IApizrUploadManager <TUploadApi, TUploadApiResultData> manager The upload manager instance Returns Type Description System.Boolean Type Parameters Name Description TUploadApi The upload api interface to manage TUploadApiResultData The upload api return type TryGetUploadManagerWith<TUploadApiResultData>(IApizrEnumerableRegistry, out IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>) Get an upload manager instance Declaration public static bool TryGetUploadManagerWith<TUploadApiResultData>(this IApizrEnumerableRegistry registry, out IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData> manager) Parameters Type Name Description IApizrEnumerableRegistry registry The registry to get the manager from IApizrUploadManager < IUploadApi <TUploadApiResultData>, TUploadApiResultData> manager The upload manager instance Returns Type Description System.Boolean Type Parameters Name Description TUploadApiResultData The upload api return type UploadAsync(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data Declaration public static Task<HttpResponseMessage> UploadAsync(this IApizrEnumerableRegistry registry, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry Refit.ByteArrayPart byteArrayPart The file bytes data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > UploadAsync(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data Declaration public static Task<HttpResponseMessage> UploadAsync(this IApizrEnumerableRegistry registry, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry Refit.FileInfoPart fileInfoPart The file info data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > UploadAsync(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data Declaration public static Task<HttpResponseMessage> UploadAsync(this IApizrEnumerableRegistry registry, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry Refit.StreamPart streamPart The file stream data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > UploadAsync<TUploadApi>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data Declaration public static Task<HttpResponseMessage> UploadAsync<TUploadApi>(this IApizrEnumerableRegistry registry, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi Parameters Type Name Description IApizrEnumerableRegistry registry The registry Refit.ByteArrayPart byteArrayPart The file bytes data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > Type Parameters Name Description TUploadApi The upload api type to manage UploadAsync<TUploadApi>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data Declaration public static Task<HttpResponseMessage> UploadAsync<TUploadApi>(this IApizrEnumerableRegistry registry, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi Parameters Type Name Description IApizrEnumerableRegistry registry The registry Refit.FileInfoPart fileInfoPart The file info data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > Type Parameters Name Description TUploadApi The upload api type to manage UploadAsync<TUploadApi>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data Declaration public static Task<HttpResponseMessage> UploadAsync<TUploadApi>(this IApizrEnumerableRegistry registry, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi Parameters Type Name Description IApizrEnumerableRegistry registry The registry Refit.StreamPart streamPart The file stream data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > Type Parameters Name Description TUploadApi The upload api type to manage UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data Declaration public static Task<TUploadApiResultData> UploadAsync<TUploadApi, TUploadApiResultData>(this IApizrEnumerableRegistry registry, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters Type Name Description IApizrEnumerableRegistry registry The registry Refit.ByteArrayPart byteArrayPart The file bytes data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> Type Parameters Name Description TUploadApi The upload api type to manage TUploadApiResultData The upload api return type UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data Declaration public static Task<TUploadApiResultData> UploadAsync<TUploadApi, TUploadApiResultData>(this IApizrEnumerableRegistry registry, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters Type Name Description IApizrEnumerableRegistry registry The registry Refit.FileInfoPart fileInfoPart The file info data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> Type Parameters Name Description TUploadApi The upload api type to manage TUploadApiResultData The upload api return type UploadAsync<TUploadApi, TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data Declaration public static Task<TUploadApiResultData> UploadAsync<TUploadApi, TUploadApiResultData>(this IApizrEnumerableRegistry registry, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters Type Name Description IApizrEnumerableRegistry registry The registry Refit.StreamPart streamPart The file stream data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> Type Parameters Name Description TUploadApi The upload api type to manage TUploadApiResultData The upload api return type UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data Declaration public static Task<TUploadApiResultData> UploadWithAsync<TUploadApiResultData>(this IApizrEnumerableRegistry registry, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry Refit.ByteArrayPart byteArrayPart The file bytes data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> Type Parameters Name Description TUploadApiResultData The upload api return type UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data Declaration public static Task<TUploadApiResultData> UploadWithAsync<TUploadApiResultData>(this IApizrEnumerableRegistry registry, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry Refit.FileInfoPart fileInfoPart The file info data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> Type Parameters Name Description TUploadApiResultData The upload api return type UploadWithAsync<TUploadApiResultData>(IApizrEnumerableRegistry, StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data Declaration public static Task<TUploadApiResultData> UploadWithAsync<TUploadApiResultData>(this IApizrEnumerableRegistry registry, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrEnumerableRegistry registry The registry Refit.StreamPart streamPart The file stream data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> Type Parameters Name Description TUploadApiResultData The upload api return type"
  },
  "api/Apizr.Extending.html": {
    "href": "api/Apizr.Extending.html",
    "title": "Namespace Apizr.Extending | Apizr",
    "keywords": "Namespace Apizr.Extending Classes ApizrManagerExtensions ApizrRegistryExtensions EnumerableExtensions Some enumerable extensions FileTransferRegistryExtensions HttpRequestMessageExtensions TypeExtensions Some Type extensions"
  },
  "api/Apizr.Extending.HttpRequestMessageExtensions.html": {
    "href": "api/Apizr.Extending.HttpRequestMessageExtensions.html",
    "title": "Class HttpRequestMessageExtensions | Apizr",
    "keywords": "Class HttpRequestMessageExtensions Inheritance System.Object HttpRequestMessageExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending Assembly : Apizr.Integrations.FileTransfer.dll Syntax public static class HttpRequestMessageExtensions Methods ContainsApizrProgress(HttpRequestMessage) Declaration public static bool ContainsApizrProgress(this HttpRequestMessage request) Parameters Type Name Description System.Net.Http.HttpRequestMessage request Returns Type Description System.Boolean GetApizrProgress(HttpRequestMessage) Declaration public static IApizrProgress GetApizrProgress(this HttpRequestMessage request) Parameters Type Name Description System.Net.Http.HttpRequestMessage request Returns Type Description IApizrProgress TryGetApizrProgress(HttpRequestMessage, out IApizrProgress) Declaration public static bool TryGetApizrProgress(this HttpRequestMessage request, out IApizrProgress apizrProgress) Parameters Type Name Description System.Net.Http.HttpRequestMessage request IApizrProgress apizrProgress Returns Type Description System.Boolean"
  },
  "api/Apizr.Extending.TypeExtensions.html": {
    "href": "api/Apizr.Extending.TypeExtensions.html",
    "title": "Class TypeExtensions | Apizr",
    "keywords": "Class TypeExtensions Some Type extensions Inheritance System.Object TypeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Extending Assembly : Apizr.dll Syntax public static class TypeExtensions Methods GetFriendlyName(Type) Returns a more friendly readable type name Declaration public static string GetFriendlyName(this Type type) Parameters Type Name Description System.Type type The type to get friendly name of Returns Type Description System.String IsAssignableFromGenericType(Type, Type) Checks if the generic type is assignable from the given type Declaration public static bool IsAssignableFromGenericType(this Type genericType, Type givenType) Parameters Type Name Description System.Type genericType The generic type System.Type givenType The given type Returns Type Description System.Boolean IsOpenGeneric(Type) Checks if the type is open generic Declaration public static bool IsOpenGeneric(this Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean MakeGenericTypeIfNeeded(Type, Type[]) Returns a closed generic type based on provided type arguments Declaration public static Type MakeGenericTypeIfNeeded(this Type type, params Type[] typeArguments) Parameters Type Name Description System.Type type The open generic type System.Type [] typeArguments The type arguments Returns Type Description System.Type"
  },
  "api/Apizr.FileTransferExtendedOptionsBuilderExtensions.html": {
    "href": "api/Apizr.FileTransferExtendedOptionsBuilderExtensions.html",
    "title": "Class FileTransferExtendedOptionsBuilderExtensions | Apizr",
    "keywords": "Class FileTransferExtendedOptionsBuilderExtensions File transfer options builder extensions Inheritance System.Object FileTransferExtendedOptionsBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Extensions.Microsoft.FileTransfer.dll Syntax public static class FileTransferExtendedOptionsBuilderExtensions Methods AddApizrDownloadManager(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add a download manager for IDownloadApi (you must at least provide a base url thanks to the options builder) Declaration public static IServiceCollection AddApizrDownloadManager(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection where to add the manager System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrDownloadManagerFor<TDownloadApi>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add a download manager for the provided download api derived from IDownloadApi Declaration public static IServiceCollection AddApizrDownloadManagerFor<TDownloadApi>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection where to add the manager System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description TDownloadApi The download api interface to manage AddApizrDownloadManagerFor<TDownloadApi, TDownloadParams>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add a download manager for the provided download api derived from IDownloadApi{TDownloadParams} Declaration public static IServiceCollection AddApizrDownloadManagerFor<TDownloadApi, TDownloadParams>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection where to add the manager System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description TDownloadApi The download api interface to manage TDownloadParams The download query parameters type AddApizrDownloadManagerWith<TDownloadParams>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add a download manager for the provided download api derived from IDownloadApi{TDownloadParams} Declaration public static IServiceCollection AddApizrDownloadManagerWith<TDownloadParams>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection where to add the manager System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description TDownloadParams The download query parameters type AddApizrTransferManager(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add a transfer manager for ITransferApi (you must at least provide a base url thanks to the options builder) Declaration public static IServiceCollection AddApizrTransferManager(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection where to add the manager System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrTransferManagerFor<TTransferApi>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add a transfer manager for the provided transfer api derived from ITransferApi Declaration public static IServiceCollection AddApizrTransferManagerFor<TTransferApi>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection where to add the manager System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description TTransferApi The transfer api interface to manage AddApizrTransferManagerFor<TTransferApi, TDownloadParams>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add a transfer manager for the provided transfer api derived from ITransferApi{TDownloadParams} Declaration public static IServiceCollection AddApizrTransferManagerFor<TTransferApi, TDownloadParams>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi<TDownloadParams, HttpResponseMessage>, IUploadApi Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection where to add the manager System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description TTransferApi The transfer api interface to manage TDownloadParams The download query parameters type AddApizrTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add a transfer manager for the provided transfer api derived from ITransferApi{TDownloadParams} Declaration public static IServiceCollection AddApizrTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi<TDownloadParams, TUploadApiResultData> Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection where to add the manager System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description TTransferApi The transfer api interface to manage TDownloadParams The download query parameters type TUploadApiResultData The upload api return type AddApizrTransferManagerWith<TDownloadParams, TUploadApiResultData>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add a transfer manager for the provided transfer api derived from ITransferApi{TDownloadParams} Declaration public static IServiceCollection AddApizrTransferManagerWith<TDownloadParams, TUploadApiResultData>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection where to add the manager System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description TDownloadParams The download query parameters type TUploadApiResultData The upload api return type AddApizrUploadManager(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add an upload manager for IUploadApi (you must at least provide a base url thanks to the options builder) Declaration public static IServiceCollection AddApizrUploadManager(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection where to add the manager System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrUploadManagerFor<TUploadApi>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add an upload manager for the provided upload api derived from IUploadApi Declaration public static IServiceCollection AddApizrUploadManagerFor<TUploadApi>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection where to add the manager System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description TUploadApi The upload api interface to manage AddApizrUploadManagerFor<TUploadApi, TUploadApiResultData>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add an upload manager for the provided upload api derived from IUploadApi Declaration public static IServiceCollection AddApizrUploadManagerFor<TUploadApi, TUploadApiResultData>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection where to add the manager System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description TUploadApi The upload api interface to manage TUploadApiResultData The upload api return type AddApizrUploadManagerWith<TUploadApiResultData>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Add an upload manager for the provided upload api derived from IUploadApi Declaration public static IServiceCollection AddApizrUploadManagerWith<TUploadApiResultData>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection where to add the manager System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description TUploadApiResultData The upload api return type AddDownloadFor<TDownloadApi, TDownloadParams>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add a download manager for the provided download api derived from IDownloadApi{TDownloadParams} Declaration public static IApizrExtendedRegistryBuilder AddDownloadFor<TDownloadApi, TDownloadParams>(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters Type Name Description IApizrExtendedRegistryBuilder builder The builder to create the manager from System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description TDownloadApi The download api interface to manage TDownloadParams The download query parameters type AddDownloadManager(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add a download manager for IDownloadApi Declaration public static IApizrExtendedRegistryBuilder AddDownloadManager(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrExtendedRegistryBuilder builder The builder to create the manager from System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrExtendedRegistryBuilder AddDownloadManagerFor<TDownloadApi>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add a download manager for the provided download api derived from IDownloadApi Declaration public static IApizrExtendedRegistryBuilder AddDownloadManagerFor<TDownloadApi>(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi Parameters Type Name Description IApizrExtendedRegistryBuilder builder The builder to create the manager from System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description TDownloadApi The download api interface to manage AddDownloadWith<TDownloadParams>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add a download manager for the provided download api derived from IDownloadApi{TDownloadParams} Declaration public static IApizrExtendedRegistryBuilder AddDownloadWith<TDownloadParams>(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrExtendedRegistryBuilder builder The builder to create the manager from System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description TDownloadParams The download query parameters type AddTransferManager(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add a transfer manager for ITransferApi Declaration public static IApizrExtendedRegistryBuilder AddTransferManager(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrExtendedRegistryBuilder builder The builder to create the manager from System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrExtendedRegistryBuilder AddTransferManagerFor<TTransferApi>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add a transfer manager for the provided transfer api derived from ITransferApi Declaration public static IApizrExtendedRegistryBuilder AddTransferManagerFor<TTransferApi>(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi Parameters Type Name Description IApizrExtendedRegistryBuilder builder The builder to create the manager from System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description TTransferApi The transfer api interface to manage AddTransferManagerFor<TTransferApi, TDownloadParams>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add a transfer manager for the provided transfer api derived from ITransferApi{TDownloadParams} Declaration public static IApizrExtendedRegistryBuilder AddTransferManagerFor<TTransferApi, TDownloadParams>(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi<TDownloadParams, HttpResponseMessage>, IUploadApi Parameters Type Name Description IApizrExtendedRegistryBuilder builder The builder to create the manager from System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description TTransferApi The transfer api interface to manage TDownloadParams The download query parameters type AddTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add a transfer manager for the provided transfer api derived from ITransferApi{TDownloadParams} Declaration public static IApizrExtendedRegistryBuilder AddTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi<TDownloadParams, TUploadApiResultData> Parameters Type Name Description IApizrExtendedRegistryBuilder builder The builder to create the manager from System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description TTransferApi The transfer api interface to manage TDownloadParams The download query parameters type TUploadApiResultData The upload api return type AddTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add a transfer manager for the provided transfer api derived from ITransferApi{TDownloadParams} Declaration public static IApizrExtendedRegistryBuilder AddTransferManagerWith<TDownloadParams, TUploadApiResultData>(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrExtendedRegistryBuilder builder The builder to create the manager from System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description TDownloadParams The download query parameters type TUploadApiResultData The upload api return type AddUploadManager(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add an upload manager for IUploadApi Declaration public static IApizrExtendedRegistryBuilder AddUploadManager(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrExtendedRegistryBuilder builder The builder to create the manager from System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrExtendedRegistryBuilder AddUploadManagerFor<TUploadApi>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add an upload manager for the provided upload api derived from IUploadApi Declaration public static IApizrExtendedRegistryBuilder AddUploadManagerFor<TUploadApi>(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi Parameters Type Name Description IApizrExtendedRegistryBuilder builder The builder to create the manager from System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description TUploadApi The upload api interface to manage AddUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add an upload manager for the provided upload api derived from IUploadApi Declaration public static IApizrExtendedRegistryBuilder AddUploadManagerFor<TUploadApi, TUploadApiResultData>(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters Type Name Description IApizrExtendedRegistryBuilder builder The builder to create the manager from System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description TUploadApi The upload api interface to manage TUploadApiResultData The upload api return type AddUploadManagerWith<TUploadApiResultData>(IApizrExtendedRegistryBuilder, Action<IApizrExtendedProperOptionsBuilder>) Add an upload manager for the provided upload api derived from IUploadApi Declaration public static IApizrExtendedRegistryBuilder AddUploadManagerWith<TUploadApiResultData>(this IApizrExtendedRegistryBuilder builder, Action<IApizrExtendedProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrExtendedRegistryBuilder builder The builder to create the manager from System.Action < IApizrExtendedProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrExtendedRegistryBuilder Type Parameters Name Description TUploadApiResultData The upload api return type"
  },
  "api/Apizr.FileTransferOptionsBuilderExtensions.html": {
    "href": "api/Apizr.FileTransferOptionsBuilderExtensions.html",
    "title": "Class FileTransferOptionsBuilderExtensions | Apizr",
    "keywords": "Class FileTransferOptionsBuilderExtensions File transfer builder extensions Inheritance System.Object FileTransferOptionsBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.FileTransfer.dll Syntax public static class FileTransferOptionsBuilderExtensions Methods AddDownloadManager(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add a download manager for IDownloadApi Declaration public static IApizrRegistryBuilder AddDownloadManager(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrRegistryBuilder builder The builder to create the manager from System.Action < IApizrProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrRegistryBuilder AddDownloadManagerFor<TDownloadApi>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add a download manager for the provided download api derived from IDownloadApi Declaration public static IApizrRegistryBuilder AddDownloadManagerFor<TDownloadApi>(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi Parameters Type Name Description IApizrRegistryBuilder builder The builder to create the manager from System.Action < IApizrProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrRegistryBuilder Type Parameters Name Description TDownloadApi The download api interface to manage AddDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add a download manager for the provided download api derived from IDownloadApi{TDownloadParams} Declaration public static IApizrRegistryBuilder AddDownloadManagerFor<TDownloadApi, TDownloadParams>(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters Type Name Description IApizrRegistryBuilder builder The builder to create the manager from System.Action < IApizrProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrRegistryBuilder Type Parameters Name Description TDownloadApi The download api interface to manage TDownloadParams The download query parameters type AddDownloadManagerWith<TDownloadParams>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add a download manager for the built-in download api with TDownloadParams Declaration public static IApizrRegistryBuilder AddDownloadManagerWith<TDownloadParams>(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrRegistryBuilder builder The builder to create the manager from System.Action < IApizrProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrRegistryBuilder Type Parameters Name Description TDownloadParams The download query parameters type AddTransferManager(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add a transfer manager for ITransferApi Declaration public static IApizrRegistryBuilder AddTransferManager(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrRegistryBuilder builder The builder to create the manager from System.Action < IApizrProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrRegistryBuilder AddTransferManagerFor<TTransferApi>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add a transfer manager for the provided transfer api derived from ITransferApi Declaration public static IApizrRegistryBuilder AddTransferManagerFor<TTransferApi>(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi Parameters Type Name Description IApizrRegistryBuilder builder The builder to create the manager from System.Action < IApizrProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrRegistryBuilder Type Parameters Name Description TTransferApi The transfer api interface to manage AddTransferManagerFor<TTransferApi, TDownloadParams>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add a transfer manager for the provided transfer api derived from ITransferApi{TDownloadParams} Declaration public static IApizrRegistryBuilder AddTransferManagerFor<TTransferApi, TDownloadParams>(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi<TDownloadParams, HttpResponseMessage>, IUploadApi Parameters Type Name Description IApizrRegistryBuilder builder The builder to create the manager from System.Action < IApizrProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrRegistryBuilder Type Parameters Name Description TTransferApi The transfer api interface to manage TDownloadParams The download query parameters type AddTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add a transfer manager for the provided transfer api derived from ITransferApi{TDownloadParams} Declaration public static IApizrRegistryBuilder AddTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi<TDownloadParams, TUploadApiResultData> Parameters Type Name Description IApizrRegistryBuilder builder The builder to create the manager from System.Action < IApizrProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrRegistryBuilder Type Parameters Name Description TTransferApi The transfer api interface to manage TDownloadParams The download query parameters type TUploadApiResultData The upload api return type AddTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add a transfer manager for the built-in transfer api with TDownloadParams and TUploadApiResultData Declaration public static IApizrRegistryBuilder AddTransferManagerWith<TDownloadParams, TUploadApiResultData>(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrRegistryBuilder builder The builder to create the manager from System.Action < IApizrProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrRegistryBuilder Type Parameters Name Description TDownloadParams The download query parameters type TUploadApiResultData The upload api return type AddUploadManager(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add an upload manager for IUploadApi Declaration public static IApizrRegistryBuilder AddUploadManager(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrRegistryBuilder builder The builder to create the manager from System.Action < IApizrProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrRegistryBuilder AddUploadManagerFor<TUploadApi>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add an upload manager for the provided upload api derived from IUploadApi Declaration public static IApizrRegistryBuilder AddUploadManagerFor<TUploadApi>(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi Parameters Type Name Description IApizrRegistryBuilder builder The builder to create the manager from System.Action < IApizrProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrRegistryBuilder Type Parameters Name Description TUploadApi The upload api interface to manage AddUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add an upload manager for the provided upload api derived from IUploadApi Declaration public static IApizrRegistryBuilder AddUploadManagerFor<TUploadApi, TUploadApiResultData>(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters Type Name Description IApizrRegistryBuilder builder The builder to create the manager from System.Action < IApizrProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrRegistryBuilder Type Parameters Name Description TUploadApi The upload api interface to manage TUploadApiResultData The upload api return type AddUploadManagerWith<TUploadApiResultData>(IApizrRegistryBuilder, Action<IApizrProperOptionsBuilder>) Add an upload manager for the built-in upload api with TUploadApiResultData Declaration public static IApizrRegistryBuilder AddUploadManagerWith<TUploadApiResultData>(this IApizrRegistryBuilder builder, Action<IApizrProperOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrRegistryBuilder builder The builder to create the manager from System.Action < IApizrProperOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrRegistryBuilder Type Parameters Name Description TUploadApiResultData The upload api return type CreateDownloadManager(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create a download manager for IDownloadApi (you must at least provide a base url thanks to the options builder) Declaration public static IApizrDownloadManager CreateDownloadManager(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrBuilder builder The builder to create the manager from System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrDownloadManager CreateDownloadManagerFor<TDownloadApi>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create a download manager for the provided download api derived from IDownloadApi Declaration public static IApizrDownloadManager<TDownloadApi> CreateDownloadManagerFor<TDownloadApi>(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi Parameters Type Name Description IApizrBuilder builder The builder to create the manager from System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrDownloadManager <TDownloadApi> Type Parameters Name Description TDownloadApi The download api interface to manage CreateDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create a download manager for the provided download api derived from IDownloadApi{TDownloadParams} Declaration public static IApizrDownloadManager<TDownloadApi, TDownloadParams> CreateDownloadManagerFor<TDownloadApi, TDownloadParams>(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters Type Name Description IApizrBuilder builder The builder to create the manager from System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrDownloadManager <TDownloadApi, TDownloadParams> Type Parameters Name Description TDownloadApi The download api interface to manage TDownloadParams The download query parameters type CreateDownloadManagerWith<TDownloadParams>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create a download manager for the built-in download api with TDownloadParams Declaration public static IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams> CreateDownloadManagerWith<TDownloadParams>(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrBuilder builder The builder to create the manager from System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrDownloadManager < IDownloadApi <TDownloadParams>, TDownloadParams> Type Parameters Name Description TDownloadParams The download query parameters type CreateTransferManager(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create a transfer manager for ITransferApi (you must at least provide a base url thanks to the options builder) Declaration public static IApizrTransferManager CreateTransferManager(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrBuilder builder The builder to create the manager from System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrTransferManager CreateTransferManagerFor<TTransferApi>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create a transfer manager for the provided transfer api derived from ITransferApi Declaration public static IApizrTransferManager<TTransferApi> CreateTransferManagerFor<TTransferApi>(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi Parameters Type Name Description IApizrBuilder builder The builder to create the manager from System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrTransferManager <TTransferApi> Type Parameters Name Description TTransferApi The transfer api interface to manage CreateTransferManagerFor<TTransferApi, TDownloadParams>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create a transfer manager for the provided transfer api derived from ITransferApi{TDownloadParams} Declaration public static IApizrTransferManager<TTransferApi, TDownloadParams> CreateTransferManagerFor<TTransferApi, TDownloadParams>(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi<TDownloadParams, HttpResponseMessage>, IUploadApi Parameters Type Name Description IApizrBuilder builder The builder to create the manager from System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrTransferManager <TTransferApi, TDownloadParams> Type Parameters Name Description TTransferApi The transfer api interface to manage TDownloadParams The download query parameters type CreateTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create a transfer manager for the provided transfer api derived from ITransferApi{TDownloadParams} Declaration public static IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> CreateTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where TTransferApi : ITransferApi<TDownloadParams, TUploadApiResultData> Parameters Type Name Description IApizrBuilder builder The builder to create the manager from System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrTransferManager <TTransferApi, TDownloadParams, TUploadApiResultData> Type Parameters Name Description TTransferApi The transfer api interface to manage TDownloadParams The download query parameters type TUploadApiResultData The upload api result type CreateTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create a transfer manager for the built-in transfer api with TDownloadParams and TUploadApiResultData Declaration public static IApizrTransferManager<ITransferApi<TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData> CreateTransferManagerWith<TDownloadParams, TUploadApiResultData>(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrBuilder builder The builder to create the manager from System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrTransferManager < ITransferApi <TDownloadParams, TUploadApiResultData>, TDownloadParams, TUploadApiResultData> Type Parameters Name Description TDownloadParams The download query parameters type TUploadApiResultData The upload api result type CreateUploadManager(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create an upload manager for IUploadApi (you must at least provide a base url thanks to the options builder) Declaration public static IApizrUploadManager CreateUploadManager(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder) Parameters Type Name Description IApizrBuilder builder The builder to create the manager from System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrUploadManager CreateUploadManagerFor<TUploadApi>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create an upload manager for the provided upload api derived from IUploadApi Declaration public static IApizrUploadManager<TUploadApi> CreateUploadManagerFor<TUploadApi>(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi Parameters Type Name Description IApizrBuilder builder The builder to create the manager from System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrUploadManager <TUploadApi> Type Parameters Name Description TUploadApi The upload api interface to manage CreateUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create an upload manager for the provided upload api derived from IUploadApi Declaration public static IApizrUploadManager<TUploadApi, TUploadApiResultData> CreateUploadManagerFor<TUploadApi, TUploadApiResultData>(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters Type Name Description IApizrBuilder builder The builder to create the manager from System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrUploadManager <TUploadApi, TUploadApiResultData> Type Parameters Name Description TUploadApi The upload api interface to manage TUploadApiResultData The upload api result type CreateUploadManagerWith<TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) Create an upload manager for the built-in upload api with TUploadApiResultData Declaration public static IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData> CreateUploadManagerWith<TUploadApiResultData>(this IApizrBuilder builder, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrBuilder builder The builder to create the manager from System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrUploadManager < IUploadApi <TUploadApiResultData>, TUploadApiResultData> Type Parameters Name Description TUploadApiResultData The upload api result type WithDynamicPath<T>(T, String) Tells Apizr to set the ending of the request uri with the provided path Declaration public static T WithDynamicPath<T>(this T builder, string dynamicPath) where T : IApizrRequestOptionsBuilderBase Parameters Type Name Description T builder System.String dynamicPath The path ending the request uri Returns Type Description T Type Parameters Name Description T WithProgress<TBuilder>(TBuilder) Enables transfer progress reporting with Apizr (you should provide a progress callback or reporter at request time) Declaration public static TBuilder WithProgress<TBuilder>(this TBuilder builder) where TBuilder : IApizrGlobalSharedOptionsBuilderBase Parameters Type Name Description TBuilder builder Returns Type Description TBuilder Type Parameters Name Description TBuilder WithProgress<TBuilder>(TBuilder, IApizrProgress) Tells Apizr to report any transfer progress Declaration public static TBuilder WithProgress<TBuilder>(this TBuilder builder, IApizrProgress progress) where TBuilder : IApizrGlobalSharedOptionsBuilderBase Parameters Type Name Description TBuilder builder IApizrProgress progress The progress reporter Returns Type Description TBuilder Type Parameters Name Description TBuilder WithProgress<TBuilder>(TBuilder, Action<ApizrProgressEventArgs>) Tells Apizr to report any transfer progress Declaration public static TBuilder WithProgress<TBuilder>(this TBuilder builder, Action<ApizrProgressEventArgs> onProgress) where TBuilder : IApizrGlobalSharedOptionsBuilderBase Parameters Type Name Description TBuilder builder System.Action < ApizrProgressEventArgs > onProgress The action called back on any progress Returns Type Description TBuilder Type Parameters Name Description TBuilder"
  },
  "api/Apizr.FusilladeOptionsBuilderExtensions.html": {
    "href": "api/Apizr.FusilladeOptionsBuilderExtensions.html",
    "title": "Class FusilladeOptionsBuilderExtensions | Apizr",
    "keywords": "Class FusilladeOptionsBuilderExtensions Fusillade options builder extensions Inheritance System.Object FusilladeOptionsBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.Fusillade.dll Syntax public static class FusilladeOptionsBuilderExtensions Methods WithPriority<T>(T) Enables priority management with Apizr Declaration public static T WithPriority<T>(this T builder) where T : IApizrGlobalSharedRegistrationOptionsBuilderBase Parameters Type Name Description T builder Returns Type Description T Type Parameters Name Description T WithPriority<T>(T, Priority) Tells Apizr to manage request with a priority Declaration public static T WithPriority<T>(this T builder, Priority priority) where T : IApizrGlobalSharedOptionsBuilderBase Parameters Type Name Description T builder Fusillade.Priority priority The priority to manage the request with Returns Type Description T Type Parameters Name Description T WithPriority<T>(T, Int32) Tells Apizr to manage request with a priority Declaration public static T WithPriority<T>(this T builder, int priority) where T : IApizrGlobalSharedOptionsBuilderBase Parameters Type Name Description T builder System.Int32 priority The priority to manage the request with Returns Type Description T Type Parameters Name Description T WithPriorityManagement<T>(T) Declaration [Obsolete(\"Use WithPriority instead\")] public static T WithPriorityManagement<T>(this T builder) where T : IApizrGlobalCommonOptionsBuilderBase Parameters Type Name Description T builder Returns Type Description T Type Parameters Name Description T"
  },
  "api/Apizr.Helping.html": {
    "href": "api/Apizr.Helping.html",
    "title": "Namespace Apizr.Helping | Apizr",
    "keywords": "Namespace Apizr.Helping Classes UrlHelper Some url helpers"
  },
  "api/Apizr.Helping.UrlHelper.html": {
    "href": "api/Apizr.Helping.UrlHelper.html",
    "title": "Class UrlHelper | Apizr",
    "keywords": "Class UrlHelper Some url helpers Inheritance System.Object UrlHelper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Helping Assembly : Apizr.dll Syntax public static class UrlHelper Methods Combine(String, String) Combines the url base and the relative url into one, consolidating the '/' between them Declaration public static string Combine(string baseUrl, string relativePath) Parameters Type Name Description System.String baseUrl Base url that will be combined System.String relativePath The relative path to combine Returns Type Description System.String The merged url Combine(String, String[]) Combines the url base and the array of relatives urls into one, consolidating the '/' between them Declaration public static string Combine(string baseUrl, params string[] relativePaths) Parameters Type Name Description System.String baseUrl Base url that will be combined System.String [] relativePaths The array of relative paths to combine Returns Type Description System.String The merged url"
  },
  "api/Apizr.html": {
    "href": "api/Apizr.html",
    "title": "Namespace Apizr | Apizr",
    "keywords": "Namespace Apizr Classes AkavacheCacheHandler Akavache cache handler implementation AkavacheOptionsBuilderExtensions Akavache options builder extensions ApizrBuilder The builder ApizrException An exception with optional cached object ApizrException<TResult> An exception with optional cached TResult ApizrManager ApizrManager<TWebApi> The manager AutoMapperMappingHandler AutoMapper mapping handler implementation AutoMapperOptionsBuilderExtensions AutoMapper options builder extensions DistributedCacheHandler<TCache> Distributed cache handler implementation FileTransferExtendedOptionsBuilderExtensions File transfer options builder extensions FileTransferOptionsBuilderExtensions File transfer builder extensions FusilladeOptionsBuilderExtensions Fusillade options builder extensions InMemoryCacheHandler InMemory cache handler implementation LazyFactory<TInstance> A lazy instance MapsterMappingHandler Mapster mapping handler implementation MapsterOptionsBuilderExtensions Mapster options builder extensions MediationFileTransferOptionsBuilderExtensions MediationOptionsBuilderExtensions MediatR options builder extensions MicrosoftCachingOptionsBuilderExtensions Microsoft Caching options builder extensions MonkeyCacheHandler MonkeyCache cache handler implementation OptionalFileTransferOptionsBuilderExtensions OptionalOptionsBuilderExtensions Optional with MediatR options builder extensions PriorityAttribute The Fusillade priority attribute PriorityHttpMessageHandler ReadAllPriorityAttribute The Fusillade priority attribute ReadPriorityAttribute The Fusillade priority attribute ServiceCollectionExtensions Apizr service collection extensions WebApiAttribute Define general web api settings (could be defined with options builder) Interfaces IApizrBuilder The builder IApizrManager The manager definition IApizrManager<TWebApi> The manager encapsulating TWebApi 's task ILazyFactory<TInstance> A lazy instance"
  },
  "api/Apizr.IApizrBuilder.html": {
    "href": "api/Apizr.IApizrBuilder.html",
    "title": "Interface IApizrBuilder | Apizr",
    "keywords": "Interface IApizrBuilder The builder Namespace : Apizr Assembly : Apizr.dll Syntax public interface IApizrBuilder Methods CreateCrudManagerFor<T>(Action<IApizrManagerOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type System.Int32 and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration IApizrManager<ICrudApi<T, int, IEnumerable<T>, IDictionary<string, object>>> CreateCrudManagerFor<T>(Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrManager < ICrudApi <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> Type Parameters Name Description T The object type to manage with crud api calls (class) CreateCrudManagerFor<T, TKey>(Action<IApizrManagerOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration IApizrManager<ICrudApi<T, TKey, IEnumerable<T>, IDictionary<string, object>>> CreateCrudManagerFor<T, TKey>(Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrManager < ICrudApi <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >>> Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) CreateCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrManagerOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters of type IDictionary{string,object} Declaration IApizrManager<ICrudApi<T, TKey, TReadAllResult, IDictionary<string, object>>> CreateCrudManagerFor<T, TKey, TReadAllResult>(Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >>> Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrManagerOptionsBuilder>) Create a ApizrManager<TWebApi> instance for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrManager < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>> Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager>, Action<IApizrManagerOptionsBuilder>) Create a TApizrManager instance for a managed crud api for T object (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration TApizrManager CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(Func<ILazyFactory<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<string>, IApizrManagerOptions<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager> apizrManagerFactory, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where T : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Parameters Type Name Description System.Func < ILazyFactory < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>>, IConnectivityHandler , ICacheHandler , IMappingHandler , Polly.Registry.IReadOnlyPolicyRegistry < System.String >, IApizrManagerOptions < ICrudApi <T, TKey, TReadAllResult, TReadAllParams>>, TApizrManager> apizrManagerFactory The custom manager implementation instance factory System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description TApizrManager Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters TApizrManager A custom IApizrManager<TWebApi> implementation CreateManagerFor<TWebApi>(Action<IApizrManagerOptionsBuilder>) Create a ApizrManager<TWebApi> instance Declaration IApizrManager<TWebApi> CreateManagerFor<TWebApi>(Action<IApizrManagerOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description IApizrManager <TWebApi> Type Parameters Name Description TWebApi The web api interface to manage CreateManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<String>, IApizrManagerOptions<TWebApi>, TApizrManager>, Action<IApizrManagerOptionsBuilder>) Create a TApizrManager instance for a managed TWebApi Declaration TApizrManager CreateManagerFor<TWebApi, TApizrManager>(Func<ILazyFactory<TWebApi>, IConnectivityHandler, ICacheHandler, IMappingHandler, IReadOnlyPolicyRegistry<string>, IApizrManagerOptions<TWebApi>, TApizrManager> apizrManagerFactory, Action<IApizrManagerOptionsBuilder> optionsBuilder = null) where TApizrManager : IApizrManager<TWebApi> Parameters Type Name Description System.Func < ILazyFactory <TWebApi>, IConnectivityHandler , ICacheHandler , IMappingHandler , Polly.Registry.IReadOnlyPolicyRegistry < System.String >, IApizrManagerOptions <TWebApi>, TApizrManager> apizrManagerFactory The custom manager implementation instance factory System.Action < IApizrManagerOptionsBuilder > optionsBuilder The builder defining some options Returns Type Description TApizrManager Type Parameters Name Description TWebApi The web api interface to manage TApizrManager A custom IApizrManager<TWebApi> implementation CreateRegistry(Action<IApizrRegistryBuilder>, Action<IApizrCommonOptionsBuilder>) Create a registry with all managers built with both common and proper options Declaration IApizrRegistry CreateRegistry(Action<IApizrRegistryBuilder> registryBuilder, Action<IApizrCommonOptionsBuilder> commonOptionsBuilder = null) Parameters Type Name Description System.Action < IApizrRegistryBuilder > registryBuilder The registry builder with access to proper options System.Action < IApizrCommonOptionsBuilder > commonOptionsBuilder The common options shared by all managers Returns Type Description IApizrRegistry Extension Methods FileTransferOptionsBuilderExtensions.CreateUploadManager(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateUploadManagerFor<TUploadApi>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateUploadManagerFor<TUploadApi, TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateUploadManagerWith<TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateDownloadManager(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateDownloadManagerFor<TDownloadApi>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateDownloadManagerFor<TDownloadApi, TDownloadParams>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateDownloadManagerWith<TDownloadParams>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateTransferManager(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateTransferManagerFor<TTransferApi>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateTransferManagerFor<TTransferApi, TDownloadParams>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateTransferManagerFor<TTransferApi, TDownloadParams, TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>) FileTransferOptionsBuilderExtensions.CreateTransferManagerWith<TDownloadParams, TUploadApiResultData>(IApizrBuilder, Action<IApizrManagerOptionsBuilder>)"
  },
  "api/Apizr.IApizrManager.html": {
    "href": "api/Apizr.IApizrManager.html",
    "title": "Interface IApizrManager | Apizr",
    "keywords": "Interface IApizrManager The manager definition Namespace : Apizr Assembly : Apizr.dll Syntax public interface IApizrManager"
  },
  "api/Apizr.IApizrManager-1.html": {
    "href": "api/Apizr.IApizrManager-1.html",
    "title": "Interface IApizrManager<TWebApi> | Apizr",
    "keywords": "Interface IApizrManager<TWebApi> The manager encapsulating TWebApi 's task Namespace : Apizr Assembly : Apizr.dll Syntax public interface IApizrManager<TWebApi> : IApizrManager Type Parameters Name Description TWebApi The web api interface to manage Properties Api Original Refit Api without any Apizr management. You should use ExecuteAsync instead to get all the Apizr goodness :) Declaration TWebApi Api { get; } Property Value Type Description TWebApi Options Basic Apizr options Declaration IApizrManagerOptionsBase Options { get; } Property Value Type Description IApizrManagerOptionsBase Methods ClearCacheAsync(CancellationToken) Clear all cache Declaration Task<bool> ClearCacheAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < System.Boolean > ClearCacheAsync<TResult>(Expression<Func<TWebApi, Task<TResult>>>) Clear the cache of a specific request Declaration Task<bool> ClearCacheAsync<TResult>(Expression<Func<TWebApi, Task<TResult>>> executeApiMethod) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TResult>>> executeApiMethod The specific TWebApi 's task to clear cache for Returns Type Description System.Threading.Tasks.Task < System.Boolean > Type Parameters Name Description TResult The TWebApi 's task result ClearCacheAsync<TResult>(Expression<Func<CancellationToken, TWebApi, Task<TResult>>>, CancellationToken) Clear the cache of a specific request Declaration Task<bool> ClearCacheAsync<TResult>(Expression<Func<CancellationToken, TWebApi, Task<TResult>>> executeApiMethod, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TResult>>> executeApiMethod The specific TWebApi 's task to clear cache for System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < System.Boolean > Type Parameters Name Description TResult The TWebApi 's task result ExecuteAsync(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task Declaration Task ExecuteAsync(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi 's task to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task ExecuteAsync(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task Declaration Task ExecuteAsync(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi 's task to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task ExecuteAsync<TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task Declaration Task<TApiData> ExecuteAsync<TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi 's task to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TApiData The TWebApi 's task result ExecuteAsync<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task Declaration Task<TApiData> ExecuteAsync<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi 's task to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TApiData The TWebApi 's task result ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task returning a mapped result Declaration Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task Declaration Task ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task returning a mapped result Declaration Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task returning a mapped result Declaration Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task Declaration Task ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task returning a mapped result Declaration Task<TModelData> ExecuteAsync<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The model data type TApiData The api data type ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task returning a mapped result Declaration Task<TModelResultData> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Execute a managed TWebApi 's task returning a mapped result Declaration Task<TModelResultData> ExecuteAsync<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData The mapped model result type TApiResultData The api result type TApiRequestData The mapped api request data type TModelRequestData The model request data type Extension Methods ApizrManagerExtensions.ExecuteAsync<TWebApi>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task>>, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean) ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean, Action<Exception>) ApizrManagerExtensions.ExecuteAsync<TWebApi, TModelData, TApiData>(IApizrManager<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>)"
  },
  "api/Apizr.ILazyFactory-1.html": {
    "href": "api/Apizr.ILazyFactory-1.html",
    "title": "Interface ILazyFactory<TInstance> | Apizr",
    "keywords": "Interface ILazyFactory<TInstance> A lazy instance Namespace : Apizr Assembly : Apizr.dll Syntax public interface ILazyFactory<out TInstance> Type Parameters Name Description TInstance Type of your instance Properties Value The lazy instance Declaration TInstance Value { get; } Property Value Type Description TInstance"
  },
  "api/Apizr.InMemoryCacheHandler.html": {
    "href": "api/Apizr.InMemoryCacheHandler.html",
    "title": "Class InMemoryCacheHandler | Apizr",
    "keywords": "Class InMemoryCacheHandler InMemory cache handler implementation Inheritance System.Object InMemoryCacheHandler Implements ICacheHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Extensions.Microsoft.Caching.dll Syntax public class InMemoryCacheHandler : ICacheHandler Constructors InMemoryCacheHandler(IMemoryCache) Declaration public InMemoryCacheHandler(IMemoryCache memoryCache) Parameters Type Name Description Microsoft.Extensions.Caching.Memory.IMemoryCache memoryCache Methods ClearAsync(CancellationToken) Map Apizr cache clearing method to your cache handler method Declaration public Task ClearAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task GetAsync<T>(String, CancellationToken) Map Apizr cache getting method to your cache handler method Declaration public Task<T> GetAsync<T>(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key The key to get from System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task <T> Type Parameters Name Description T The expected value type RemoveAsync(String, CancellationToken) Map Apizr cache removing method to your cache handler method Declaration public Task<bool> RemoveAsync(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key The key to remove from System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Boolean > SetAsync(String, Object, Nullable<TimeSpan>, CancellationToken) Map Apizr cache saving method to your cache handler method Declaration public Task SetAsync(string key, object value, TimeSpan? lifeSpan = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key The key to cache at System.Object value The value to cache System.Nullable < System.TimeSpan > lifeSpan The optional life span System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task Implements ICacheHandler"
  },
  "api/Apizr.LazyFactory-1.html": {
    "href": "api/Apizr.LazyFactory-1.html",
    "title": "Class LazyFactory<TInstance> | Apizr",
    "keywords": "Class LazyFactory<TInstance> A lazy instance Inheritance System.Object System.Lazy <TInstance> LazyFactory<TInstance> Implements ILazyFactory <TInstance> Inherited Members System.Lazy<TInstance>.ToString() System.Lazy<TInstance>.IsValueCreated System.Lazy<TInstance>.Value System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Apizr Assembly : Apizr.dll Syntax public class LazyFactory<TInstance> : Lazy<TInstance>, ILazyFactory<TInstance> Type Parameters Name Description TInstance Type of your instance Constructors LazyFactory(Func<TInstance>) Lazy factory constructor Declaration public LazyFactory(Func<TInstance> instanceFactory) Parameters Type Name Description System.Func <TInstance> instanceFactory The factory to be lazy LazyFactory(Func<Object>) Lazy factory constructor Declaration public LazyFactory(Func<object> instanceFactory) Parameters Type Name Description System.Func < System.Object > instanceFactory The factory to be lazy Implements ILazyFactory<TInstance>"
  },
  "api/Apizr.Logging.Attributes.html": {
    "href": "api/Apizr.Logging.Attributes.html",
    "title": "Namespace Apizr.Logging.Attributes | Apizr",
    "keywords": "Namespace Apizr.Logging.Attributes Classes LogAttribute Tells Apizr to trace and log HTTP(s) traffic LogAttributeBase Tells Apizr to trace and log HTTP(s) traffic LogCreateAttribute Tells Apizr to trace and log HTTP(s) traffic on Create method LogDeleteAttribute Tells Apizr to trace and log HTTP(s) traffic on Delete method LogReadAllAttribute Tells Apizr to trace and log HTTP(s) traffic on ReadAll method LogReadAttribute Tells Apizr to trace and log HTTP(s) traffic on Read method LogUpdateAttribute Tells Apizr to trace and log HTTP(s) traffic on Update method"
  },
  "api/Apizr.Logging.Attributes.LogAttribute.html": {
    "href": "api/Apizr.Logging.Attributes.LogAttribute.html",
    "title": "Class LogAttribute | Apizr",
    "keywords": "Class LogAttribute Tells Apizr to trace and log HTTP(s) traffic Inheritance System.Object System.Attribute LogAttributeBase LogAttribute Inherited Members LogAttributeBase.HttpTracerMode LogAttributeBase.TrafficVerbosity LogAttributeBase.LogLevels System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Logging.Attributes Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Interface)] public class LogAttribute : LogAttributeBase Constructors LogAttribute() Declaration public LogAttribute() LogAttribute(HttpMessageParts) Trace http traffic at specified verbosity and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration public LogAttribute(HttpMessageParts trafficVerbosity) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) LogAttribute(HttpMessageParts, HttpTracerMode) Trace http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration public LogAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) LogAttribute(HttpMessageParts, HttpTracerMode, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogAttribute(HttpMessageParts, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogAttribute(HttpMessageParts trafficVerbosity, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogAttribute(HttpTracerMode) Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration public LogAttribute(HttpTracerMode httpTracerMode) Parameters Type Name Description HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) LogAttribute(HttpTracerMode, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogAttribute(HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogAttribute(LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogAttribute(params LogLevel[] logLevels) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical)"
  },
  "api/Apizr.Logging.Attributes.LogAttributeBase.html": {
    "href": "api/Apizr.Logging.Attributes.LogAttributeBase.html",
    "title": "Class LogAttributeBase | Apizr",
    "keywords": "Class LogAttributeBase Tells Apizr to trace and log HTTP(s) traffic Inheritance System.Object System.Attribute LogAttributeBase LogAttribute LogCreateAttribute LogDeleteAttribute LogReadAllAttribute LogReadAttribute LogUpdateAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Logging.Attributes Assembly : Apizr.dll Syntax public abstract class LogAttributeBase : Attribute Constructors LogAttributeBase() Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration protected LogAttributeBase() LogAttributeBase(HttpMessageParts) Trace http traffic at specified verbosity and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration protected LogAttributeBase(HttpMessageParts trafficVerbosity) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) LogAttributeBase(HttpMessageParts, HttpTracerMode) Trace http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration protected LogAttributeBase(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) LogAttributeBase(HttpMessageParts, HttpTracerMode, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration protected LogAttributeBase(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogAttributeBase(HttpMessageParts, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration protected LogAttributeBase(HttpMessageParts trafficVerbosity, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogAttributeBase(HttpTracerMode) Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration protected LogAttributeBase(HttpTracerMode httpTracerMode) Parameters Type Name Description HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) LogAttributeBase(HttpTracerMode, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration protected LogAttributeBase(HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogAttributeBase(LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration protected LogAttributeBase(params LogLevel[] logLevels) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) Properties HttpTracerMode Http traffic tracing mode (default: Everything) Declaration public HttpTracerMode HttpTracerMode { get; set; } Property Value Type Description HttpTracerMode LogLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) Declaration public LogLevel[] LogLevels { get; } Property Value Type Description Microsoft.Extensions.Logging.LogLevel [] TrafficVerbosity Http traffic tracing verbosity (default: All) Declaration public HttpMessageParts TrafficVerbosity { get; } Property Value Type Description HttpMessageParts"
  },
  "api/Apizr.Logging.Attributes.LogCreateAttribute.html": {
    "href": "api/Apizr.Logging.Attributes.LogCreateAttribute.html",
    "title": "Class LogCreateAttribute | Apizr",
    "keywords": "Class LogCreateAttribute Tells Apizr to trace and log HTTP(s) traffic on Create method Inheritance System.Object System.Attribute LogAttributeBase LogCreateAttribute Inherited Members LogAttributeBase.HttpTracerMode LogAttributeBase.TrafficVerbosity LogAttributeBase.LogLevels System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Logging.Attributes Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Interface)] public class LogCreateAttribute : LogAttributeBase Constructors LogCreateAttribute() Declaration public LogCreateAttribute() LogCreateAttribute(HttpMessageParts) Trace http traffic at specified verbosity and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration public LogCreateAttribute(HttpMessageParts trafficVerbosity) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) LogCreateAttribute(HttpMessageParts, HttpTracerMode) Trace http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration public LogCreateAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) LogCreateAttribute(HttpMessageParts, HttpTracerMode, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogCreateAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogCreateAttribute(HttpMessageParts, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogCreateAttribute(HttpMessageParts trafficVerbosity, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogCreateAttribute(HttpTracerMode) Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration public LogCreateAttribute(HttpTracerMode httpTracerMode) Parameters Type Name Description HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) LogCreateAttribute(HttpTracerMode, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogCreateAttribute(HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogCreateAttribute(LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogCreateAttribute(params LogLevel[] logLevels) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical)"
  },
  "api/Apizr.Logging.Attributes.LogDeleteAttribute.html": {
    "href": "api/Apizr.Logging.Attributes.LogDeleteAttribute.html",
    "title": "Class LogDeleteAttribute | Apizr",
    "keywords": "Class LogDeleteAttribute Tells Apizr to trace and log HTTP(s) traffic on Delete method Inheritance System.Object System.Attribute LogAttributeBase LogDeleteAttribute Inherited Members LogAttributeBase.HttpTracerMode LogAttributeBase.TrafficVerbosity LogAttributeBase.LogLevels System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Logging.Attributes Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Interface)] public class LogDeleteAttribute : LogAttributeBase Constructors LogDeleteAttribute() Declaration public LogDeleteAttribute() LogDeleteAttribute(HttpMessageParts) Trace http traffic at specified verbosity and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration public LogDeleteAttribute(HttpMessageParts trafficVerbosity) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) LogDeleteAttribute(HttpMessageParts, HttpTracerMode) Trace http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration public LogDeleteAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) LogDeleteAttribute(HttpMessageParts, HttpTracerMode, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogDeleteAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogDeleteAttribute(HttpMessageParts, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogDeleteAttribute(HttpMessageParts trafficVerbosity, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogDeleteAttribute(HttpTracerMode) Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration public LogDeleteAttribute(HttpTracerMode httpTracerMode) Parameters Type Name Description HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) LogDeleteAttribute(HttpTracerMode, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogDeleteAttribute(HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogDeleteAttribute(LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogDeleteAttribute(params LogLevel[] logLevels) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical)"
  },
  "api/Apizr.Logging.Attributes.LogReadAllAttribute.html": {
    "href": "api/Apizr.Logging.Attributes.LogReadAllAttribute.html",
    "title": "Class LogReadAllAttribute | Apizr",
    "keywords": "Class LogReadAllAttribute Tells Apizr to trace and log HTTP(s) traffic on ReadAll method Inheritance System.Object System.Attribute LogAttributeBase LogReadAllAttribute Inherited Members LogAttributeBase.HttpTracerMode LogAttributeBase.TrafficVerbosity LogAttributeBase.LogLevels System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Logging.Attributes Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Interface)] public class LogReadAllAttribute : LogAttributeBase Constructors LogReadAllAttribute() Declaration public LogReadAllAttribute() LogReadAllAttribute(HttpMessageParts) Trace http traffic at specified verbosity and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration public LogReadAllAttribute(HttpMessageParts trafficVerbosity) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) LogReadAllAttribute(HttpMessageParts, HttpTracerMode) Trace http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration public LogReadAllAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) LogReadAllAttribute(HttpMessageParts, HttpTracerMode, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogReadAllAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogReadAllAttribute(HttpMessageParts, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogReadAllAttribute(HttpMessageParts trafficVerbosity, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogReadAllAttribute(HttpTracerMode) Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration public LogReadAllAttribute(HttpTracerMode httpTracerMode) Parameters Type Name Description HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) LogReadAllAttribute(HttpTracerMode, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogReadAllAttribute(HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogReadAllAttribute(LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogReadAllAttribute(params LogLevel[] logLevels) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical)"
  },
  "api/Apizr.Logging.Attributes.LogReadAttribute.html": {
    "href": "api/Apizr.Logging.Attributes.LogReadAttribute.html",
    "title": "Class LogReadAttribute | Apizr",
    "keywords": "Class LogReadAttribute Tells Apizr to trace and log HTTP(s) traffic on Read method Inheritance System.Object System.Attribute LogAttributeBase LogReadAttribute Inherited Members LogAttributeBase.HttpTracerMode LogAttributeBase.TrafficVerbosity LogAttributeBase.LogLevels System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Logging.Attributes Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Interface)] public class LogReadAttribute : LogAttributeBase Constructors LogReadAttribute() Declaration public LogReadAttribute() LogReadAttribute(HttpMessageParts) Trace http traffic at specified verbosity and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration public LogReadAttribute(HttpMessageParts trafficVerbosity) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) LogReadAttribute(HttpMessageParts, HttpTracerMode) Trace http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration public LogReadAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) LogReadAttribute(HttpMessageParts, HttpTracerMode, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogReadAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogReadAttribute(HttpMessageParts, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogReadAttribute(HttpMessageParts trafficVerbosity, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogReadAttribute(HttpTracerMode) Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration public LogReadAttribute(HttpTracerMode httpTracerMode) Parameters Type Name Description HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) LogReadAttribute(HttpTracerMode, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogReadAttribute(HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogReadAttribute(LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogReadAttribute(params LogLevel[] logLevels) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical)"
  },
  "api/Apizr.Logging.Attributes.LogUpdateAttribute.html": {
    "href": "api/Apizr.Logging.Attributes.LogUpdateAttribute.html",
    "title": "Class LogUpdateAttribute | Apizr",
    "keywords": "Class LogUpdateAttribute Tells Apizr to trace and log HTTP(s) traffic on Update method Inheritance System.Object System.Attribute LogAttributeBase LogUpdateAttribute Inherited Members LogAttributeBase.HttpTracerMode LogAttributeBase.TrafficVerbosity LogAttributeBase.LogLevels System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Logging.Attributes Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Interface)] public class LogUpdateAttribute : LogAttributeBase Constructors LogUpdateAttribute() Declaration public LogUpdateAttribute() LogUpdateAttribute(HttpMessageParts) Trace http traffic at specified verbosity and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration public LogUpdateAttribute(HttpMessageParts trafficVerbosity) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) LogUpdateAttribute(HttpMessageParts, HttpTracerMode) Trace http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration public LogUpdateAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) LogUpdateAttribute(HttpMessageParts, HttpTracerMode, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogUpdateAttribute(HttpMessageParts trafficVerbosity, HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogUpdateAttribute(HttpMessageParts, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogUpdateAttribute(HttpMessageParts trafficVerbosity, params LogLevel[] logLevels) Parameters Type Name Description HttpMessageParts trafficVerbosity Http traffic tracing verbosity (default: all) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogUpdateAttribute(HttpTracerMode) Trace All http traffic and log Apizr execution steps at default log levels ([Low] Trace, [Medium] Information and [High] Critical) Declaration public LogUpdateAttribute(HttpTracerMode httpTracerMode) Parameters Type Name Description HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) LogUpdateAttribute(HttpTracerMode, LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogUpdateAttribute(HttpTracerMode httpTracerMode, params LogLevel[] logLevels) Parameters Type Name Description HttpTracerMode httpTracerMode Http traffic tracing mode (default: Everything) Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical) LogUpdateAttribute(LogLevel[]) Trace All http traffic and log Apizr execution steps at specified log levels Declaration public LogUpdateAttribute(params LogLevel[] logLevels) Parameters Type Name Description Microsoft.Extensions.Logging.LogLevel [] logLevels Log levels to apply while writing (default: [Low] Trace, [Medium] Information and [High] Critical)"
  },
  "api/Apizr.Logging.ExtendedHttpHandlerBuilder.html": {
    "href": "api/Apizr.Logging.ExtendedHttpHandlerBuilder.html",
    "title": "Class ExtendedHttpHandlerBuilder | Apizr",
    "keywords": "Class ExtendedHttpHandlerBuilder HttpHandler builder Inheritance System.Object ExtendedHttpHandlerBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Logging Assembly : Apizr.dll Syntax public class ExtendedHttpHandlerBuilder Constructors ExtendedHttpHandlerBuilder(IApizrManagerOptionsBase) Initializes a new instance of the T:ExtendedHttpTracerHandler:ExtendedHttpTracerHandler class. Declaration public ExtendedHttpHandlerBuilder(IApizrManagerOptionsBase apizrOptions) Parameters Type Name Description IApizrManagerOptionsBase apizrOptions ExtendedHttpHandlerBuilder(ExtendedHttpTracerHandler) Initializes a new instance of the T:ExtendedHttpTracerHandler:ExtendedHttpTracerHandler class. Declaration public ExtendedHttpHandlerBuilder(ExtendedHttpTracerHandler tracerHandler) Parameters Type Name Description ExtendedHttpTracerHandler tracerHandler Tracer handler. ExtendedHttpHandlerBuilder(HttpClientHandler, IApizrManagerOptionsBase) Initializes a new instance of the T:ExtendedHttpTracerHandler:ExtendedHttpTracerHandler class. Declaration public ExtendedHttpHandlerBuilder(HttpClientHandler innerHandler, IApizrManagerOptionsBase apizrOptions) Parameters Type Name Description System.Net.Http.HttpClientHandler innerHandler HttpClientHandler. IApizrManagerOptionsBase apizrOptions Properties HttpTracerHandler Underlying instance of the T:HttpTracer.HttpHandlerBuilder:HttpTracer.HttpHandlerBuilder class. Declaration public ExtendedHttpTracerHandler HttpTracerHandler { get; } Property Value Type Description ExtendedHttpTracerHandler Methods AddHandler(DelegatingHandler) Adds a System.Net.Http.HttpMessageHandler to the chain of handlers. Declaration public ExtendedHttpHandlerBuilder AddHandler(DelegatingHandler handler) Parameters Type Name Description System.Net.Http.DelegatingHandler handler Returns Type Description ExtendedHttpHandlerBuilder Build() Adds System.Net.Http.DelegatingHandler as the last link of the chain. Declaration public DelegatingHandler Build() Returns Type Description System.Net.Http.DelegatingHandler"
  },
  "api/Apizr.Logging.ExtendedHttpTracerHandler.html": {
    "href": "api/Apizr.Logging.ExtendedHttpTracerHandler.html",
    "title": "Class ExtendedHttpTracerHandler | Apizr",
    "keywords": "Class ExtendedHttpTracerHandler The Http tracer delegating handler Inheritance System.Object System.Net.Http.HttpMessageHandler System.Net.Http.DelegatingHandler ExtendedHttpTracerHandler Implements System.IDisposable Inherited Members System.Net.Http.DelegatingHandler.Dispose(System.Boolean) System.Net.Http.DelegatingHandler.InnerHandler System.Net.Http.HttpMessageHandler.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Logging Assembly : Apizr.dll Syntax public class ExtendedHttpTracerHandler : DelegatingHandler, IDisposable Constructors ExtendedHttpTracerHandler(IApizrManagerOptionsBase) Constructs the ExtendedHttpTracerHandler with a custom Microsoft.Extensions.Logging.ILogger and a custom System.Net.Http.HttpMessageHandler Declaration public ExtendedHttpTracerHandler(IApizrManagerOptionsBase apizrOptions) Parameters Type Name Description IApizrManagerOptionsBase apizrOptions Apizr options ExtendedHttpTracerHandler(HttpMessageHandler, IApizrManagerOptionsBase) Constructs the ExtendedHttpTracerHandler with a custom Microsoft.Extensions.Logging.ILogger and a custom System.Net.Http.HttpMessageHandler Declaration public ExtendedHttpTracerHandler(HttpMessageHandler handler, IApizrManagerOptionsBase apizrOptions) Parameters Type Name Description System.Net.Http.HttpMessageHandler handler User defined System.Net.Http.HttpMessageHandler IApizrManagerOptionsBase apizrOptions Apizr options Fields LogMessageIndicatorPrefix Declaration public static string LogMessageIndicatorPrefix Field Value Type Description System.String LogMessageIndicatorSuffix Declaration public static string LogMessageIndicatorSuffix Field Value Type Description System.String Properties DefaultDurationFormat Duration string format. Defaults to \"Duration: {0:ss\\:fffffff}\" Declaration public static string DefaultDurationFormat { get; set; } Property Value Type Description System.String Remarks Receives a TimeSpan at the [0] index. See https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings for more details on TimeSpan formatting. Methods GetRequestBody(HttpRequestMessage) Get the request body Declaration protected Task<string> GetRequestBody(HttpRequestMessage request) Parameters Type Name Description System.Net.Http.HttpRequestMessage request The request Returns Type Description System.Threading.Tasks.Task < System.String > GetResponseBody(HttpResponseMessage) Get the response body Declaration protected Task<string> GetResponseBody(HttpResponseMessage response) Parameters Type Name Description System.Net.Http.HttpResponseMessage response The response Returns Type Description System.Threading.Tasks.Task < System.String > LogHttpException(HttpRequestMessage, Exception, ILogger, LogLevel[]) Logs Http exceptions Declaration protected void LogHttpException(HttpRequestMessage request, Exception ex, ILogger logger, LogLevel[] logLevels) Parameters Type Name Description System.Net.Http.HttpRequestMessage request The request System.Exception ex The exception Microsoft.Extensions.Logging.ILogger logger The logger Microsoft.Extensions.Logging.LogLevel [] logLevels The log levels LogHttpRequest(HttpRequestMessage, ILogger, LogLevel[], HttpMessageParts) Logs Http request Declaration protected virtual async Task LogHttpRequest(HttpRequestMessage request, ILogger logger, LogLevel[] logLevels, HttpMessageParts verbosity) Parameters Type Name Description System.Net.Http.HttpRequestMessage request The request Microsoft.Extensions.Logging.ILogger logger The logger Microsoft.Extensions.Logging.LogLevel [] logLevels The log levels HttpMessageParts verbosity The verbosity Returns Type Description System.Threading.Tasks.Task LogHttpResponse(HttpResponseMessage, TimeSpan, ILogger, LogLevel[], HttpMessageParts) Logs Http response Declaration protected virtual async Task LogHttpResponse(HttpResponseMessage response, TimeSpan duration, ILogger logger, LogLevel[] logLevels, HttpMessageParts verbosity) Parameters Type Name Description System.Net.Http.HttpResponseMessage response The response System.TimeSpan duration The duration Microsoft.Extensions.Logging.ILogger logger The logger Microsoft.Extensions.Logging.LogLevel [] logLevels The log levels HttpMessageParts verbosity The verbosity Returns Type Description System.Threading.Tasks.Task SendAsync(HttpRequestMessage, CancellationToken) Declaration protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters Type Name Description System.Net.Http.HttpRequestMessage request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > Overrides System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken) Implements System.IDisposable"
  },
  "api/Apizr.Logging.html": {
    "href": "api/Apizr.Logging.html",
    "title": "Namespace Apizr.Logging | Apizr",
    "keywords": "Namespace Apizr.Logging Classes ExtendedHttpHandlerBuilder HttpHandler builder ExtendedHttpTracerHandler The Http tracer delegating handler HttpMessagePartsExtensions Enums HttpMessageParts Http message parts to log HttpTracerMode The Http tracer logging mode"
  },
  "api/Apizr.Logging.HttpMessageParts.html": {
    "href": "api/Apizr.Logging.HttpMessageParts.html",
    "title": "Enum HttpMessageParts | Apizr",
    "keywords": "Enum HttpMessageParts Http message parts to log Namespace : Apizr.Logging Assembly : Apizr.dll Syntax [Flags] public enum HttpMessageParts Fields Name Description All Logs all parts None Logs no parts RequestAll Logs request body, headers and cookies only RequestBody Logs request body only RequestCookies Logs request cookies only RequestHeaders Logs request headers only ResponseAll Logs response body and headers only ResponseBody Logs response body only ResponseHeaders Logs response headers only Unspecified Unspecified Extension Methods HttpMessagePartsExtensions.HasRequestFlags() HttpMessagePartsExtensions.HasResponseFlags()"
  },
  "api/Apizr.Logging.HttpMessagePartsExtensions.html": {
    "href": "api/Apizr.Logging.HttpMessagePartsExtensions.html",
    "title": "Class HttpMessagePartsExtensions | Apizr",
    "keywords": "Class HttpMessagePartsExtensions Inheritance System.Object HttpMessagePartsExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Logging Assembly : Apizr.dll Syntax public static class HttpMessagePartsExtensions Methods HasRequestFlags(HttpMessageParts) Declaration public static bool HasRequestFlags(this HttpMessageParts parts) Parameters Type Name Description HttpMessageParts parts Returns Type Description System.Boolean HasResponseFlags(HttpMessageParts) Declaration public static bool HasResponseFlags(this HttpMessageParts parts) Parameters Type Name Description HttpMessageParts parts Returns Type Description System.Boolean"
  },
  "api/Apizr.Logging.HttpTracerMode.html": {
    "href": "api/Apizr.Logging.HttpTracerMode.html",
    "title": "Enum HttpTracerMode | Apizr",
    "keywords": "Enum HttpTracerMode The Http tracer logging mode Namespace : Apizr.Logging Assembly : Apizr.dll Syntax public enum HttpTracerMode Fields Name Description ErrorsAndExceptionsOnly Logs given parts only when an exception or an error occurs Everything Logs given parts anytime ExceptionsOnly Logs given parts only when an exception occurs Unspecified"
  },
  "api/Apizr.Mapping.html": {
    "href": "api/Apizr.Mapping.html",
    "title": "Namespace Apizr.Mapping | Apizr",
    "keywords": "Namespace Apizr.Mapping Classes MappedCrudEntityAttribute Tells Apizr to auto register an IApizrManager<TWebApi> for the referenced api entity and mapped to this decorated model entity (works only with IServiceCollection extensions registration) MappedEntity<TModelEntity, TApiEntity> [AutoMapper integration required] Tells Apizr that Api entity is mapped with a model entity MappedWithAttribute Tells Apizr to map api request object with model object VoidMappingHandler Void mapping should never be used and will just be ignored Interfaces IMappingHandler The mapping handler definition"
  },
  "api/Apizr.Mapping.IMappingHandler.html": {
    "href": "api/Apizr.Mapping.IMappingHandler.html",
    "title": "Interface IMappingHandler | Apizr",
    "keywords": "Interface IMappingHandler The mapping handler definition Namespace : Apizr.Mapping Assembly : Apizr.dll Syntax public interface IMappingHandler Methods Map(Object, Object, Type, Type) Execute a mapping from the source object to existing destination object with explicit System.Type objects Declaration object Map(object source, object destination, Type sourceType, Type destinationType) Parameters Type Name Description System.Object source Source object to map from System.Object destination Destination object to map into System.Type sourceType Source type to use System.Type destinationType Destination type to use Returns Type Description System.Object Mapped destination object, same instance as the destination object Map(Object, Type, Type) Execute a mapping from the source object to a new destination object with explicit System.Type objects Declaration object Map(object source, Type sourceType, Type destinationType) Parameters Type Name Description System.Object source Source object to map from System.Type sourceType Source type to use System.Type destinationType Destination type to create Returns Type Description System.Object Mapped destination object Map<TDestination>(Object) Execute a mapping from the source object to a new destination object. The source type is inferred from the source object. Declaration TDestination Map<TDestination>(object source) Parameters Type Name Description System.Object source Source object to map from Returns Type Description TDestination Mapped destination object Type Parameters Name Description TDestination Destination type to create Map<TSource, TDestination>(TSource) Execute a mapping from the source object to a new destination object. Declaration TDestination Map<TSource, TDestination>(TSource source) Parameters Type Name Description TSource source Source object to map from Returns Type Description TDestination Mapped destination object Type Parameters Name Description TSource Source type to use, regardless of the runtime type TDestination Destination type to create Map<TSource, TDestination>(TSource, TDestination) Execute a mapping from the source object to the existing destination object. Declaration TDestination Map<TSource, TDestination>(TSource source, TDestination destination) Parameters Type Name Description TSource source Source object to map from TDestination destination Destination object to map into Returns Type Description TDestination The mapped destination object, same instance as the destination object Type Parameters Name Description TSource Source type to use TDestination Destination type"
  },
  "api/Apizr.Mapping.MappedCrudEntityAttribute.html": {
    "href": "api/Apizr.Mapping.MappedCrudEntityAttribute.html",
    "title": "Class MappedCrudEntityAttribute | Apizr",
    "keywords": "Class MappedCrudEntityAttribute Tells Apizr to auto register an IApizrManager<TWebApi> for the referenced api entity and mapped to this decorated model entity (works only with IServiceCollection extensions registration) Inheritance System.Object System.Attribute CrudEntityAttribute MappedCrudEntityAttribute Inherited Members CrudEntityAttribute.BaseUri CrudEntityAttribute.KeyType CrudEntityAttribute.ReadAllResultType CrudEntityAttribute.ReadAllParamsType CrudEntityAttribute.MappedEntityType System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mapping Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class MappedCrudEntityAttribute : CrudEntityAttribute Constructors MappedCrudEntityAttribute(String, Type, Type, Type, Type) Define some crud api settings from this mapped model entity Declaration public MappedCrudEntityAttribute(string apiEntityBaseUri, Type apiEntityType, Type apiEntityKeyType = null, Type apiEntityReadAllResultType = null, Type apiEntityReadAllParamsType = null) Parameters Type Name Description System.String apiEntityBaseUri The mapped api entity's base crud uri System.Type apiEntityType The mapped api entity type System.Type apiEntityKeyType The mapped api entity's crud key type (default: null = typeof(int)) System.Type apiEntityReadAllResultType The mapped api entity \"ReadAll\" query result type (default: null = typeof(IEnumerable{})) System.Type apiEntityReadAllParamsType The mapped api entity ReadAll query parameters type (default: null = typeof(IDictionary{string, object}))"
  },
  "api/Apizr.Mapping.MappedEntity-2.html": {
    "href": "api/Apizr.Mapping.MappedEntity-2.html",
    "title": "Class MappedEntity<TModelEntity, TApiEntity> | Apizr",
    "keywords": "Class MappedEntity<TModelEntity, TApiEntity> [AutoMapper integration required] Tells Apizr that Api entity is mapped with a model entity Inheritance System.Object MappedEntity<TModelEntity, TApiEntity> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mapping Assembly : Apizr.dll Syntax public class MappedEntity<TModelEntity, TApiEntity> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity The friendly model entity to play with TApiEntity The real api entity used for requesting"
  },
  "api/Apizr.Mapping.MappedWithAttribute.html": {
    "href": "api/Apizr.Mapping.MappedWithAttribute.html",
    "title": "Class MappedWithAttribute | Apizr",
    "keywords": "Class MappedWithAttribute Tells Apizr to map api request object with model object Inheritance System.Object System.Attribute MappedWithAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mapping Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Parameter)] public class MappedWithAttribute : Attribute Constructors MappedWithAttribute(Type) Tells Apizr to map api response to a model response Declaration public MappedWithAttribute(Type mappedWithType) Parameters Type Name Description System.Type mappedWithType Properties MappedWithType The model object to map with Declaration public Type MappedWithType { get; } Property Value Type Description System.Type"
  },
  "api/Apizr.Mapping.VoidMappingHandler.html": {
    "href": "api/Apizr.Mapping.VoidMappingHandler.html",
    "title": "Class VoidMappingHandler | Apizr",
    "keywords": "Class VoidMappingHandler Void mapping should never be used and will just be ignored Inheritance System.Object VoidMappingHandler Implements IMappingHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mapping Assembly : Apizr.dll Syntax public class VoidMappingHandler : IMappingHandler Methods Map(Object, Object, Type, Type) Execute a mapping from the source object to existing destination object with explicit System.Type objects Declaration public object Map(object source, object destination, Type sourceType, Type destinationType) Parameters Type Name Description System.Object source Source object to map from System.Object destination Destination object to map into System.Type sourceType Source type to use System.Type destinationType Destination type to use Returns Type Description System.Object Mapped destination object, same instance as the destination object Map(Object, Type, Type) Execute a mapping from the source object to a new destination object with explicit System.Type objects Declaration public object Map(object source, Type sourceType, Type destinationType) Parameters Type Name Description System.Object source Source object to map from System.Type sourceType Source type to use System.Type destinationType Destination type to create Returns Type Description System.Object Mapped destination object Map<TDestination>(Object) Execute a mapping from the source object to a new destination object. The source type is inferred from the source object. Declaration public TDestination Map<TDestination>(object source) Parameters Type Name Description System.Object source Source object to map from Returns Type Description TDestination Mapped destination object Type Parameters Name Description TDestination Destination type to create Map<TSource, TDestination>(TSource) Execute a mapping from the source object to a new destination object. Declaration public TDestination Map<TSource, TDestination>(TSource source) Parameters Type Name Description TSource source Source object to map from Returns Type Description TDestination Mapped destination object Type Parameters Name Description TSource Source type to use, regardless of the runtime type TDestination Destination type to create Map<TSource, TDestination>(TSource, TDestination) Execute a mapping from the source object to the existing destination object. Declaration public TDestination Map<TSource, TDestination>(TSource source, TDestination destination) Parameters Type Name Description TSource source Source object to map from TDestination destination Destination object to map into Returns Type Description TDestination The mapped destination object, same instance as the destination object Type Parameters Name Description TSource Source type to use TDestination Destination type Implements IMappingHandler"
  },
  "api/Apizr.MapsterMappingHandler.html": {
    "href": "api/Apizr.MapsterMappingHandler.html",
    "title": "Class MapsterMappingHandler | Apizr",
    "keywords": "Class MapsterMappingHandler Mapster mapping handler implementation Inheritance System.Object MapsterMappingHandler Implements IMappingHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.Mapster.dll Syntax public class MapsterMappingHandler : IMappingHandler Constructors MapsterMappingHandler(IMapper) Declaration public MapsterMappingHandler(IMapper mapper) Parameters Type Name Description MapsterMapper.IMapper mapper Methods Map(Object, Object, Type, Type) Execute a mapping from the source object to existing destination object with explicit System.Type objects Declaration public object Map(object source, object destination, Type sourceType, Type destinationType) Parameters Type Name Description System.Object source Source object to map from System.Object destination Destination object to map into System.Type sourceType Source type to use System.Type destinationType Destination type to use Returns Type Description System.Object Mapped destination object, same instance as the destination object Map(Object, Type, Type) Execute a mapping from the source object to a new destination object with explicit System.Type objects Declaration public object Map(object source, Type sourceType, Type destinationType) Parameters Type Name Description System.Object source Source object to map from System.Type sourceType Source type to use System.Type destinationType Destination type to create Returns Type Description System.Object Mapped destination object Map<TDestination>(Object) Execute a mapping from the source object to a new destination object. The source type is inferred from the source object. Declaration public TDestination Map<TDestination>(object source) Parameters Type Name Description System.Object source Source object to map from Returns Type Description TDestination Mapped destination object Type Parameters Name Description TDestination Destination type to create Map<TSource, TDestination>(TSource) Execute a mapping from the source object to a new destination object. Declaration public TDestination Map<TSource, TDestination>(TSource source) Parameters Type Name Description TSource source Source object to map from Returns Type Description TDestination Mapped destination object Type Parameters Name Description TSource Source type to use, regardless of the runtime type TDestination Destination type to create Map<TSource, TDestination>(TSource, TDestination) Execute a mapping from the source object to the existing destination object. Declaration public TDestination Map<TSource, TDestination>(TSource source, TDestination destination) Parameters Type Name Description TSource source Source object to map from TDestination destination Destination object to map into Returns Type Description TDestination The mapped destination object, same instance as the destination object Type Parameters Name Description TSource Source type to use TDestination Destination type Implements IMappingHandler"
  },
  "api/Apizr.MapsterOptionsBuilderExtensions.html": {
    "href": "api/Apizr.MapsterOptionsBuilderExtensions.html",
    "title": "Class MapsterOptionsBuilderExtensions | Apizr",
    "keywords": "Class MapsterOptionsBuilderExtensions Mapster options builder extensions Inheritance System.Object MapsterOptionsBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.Mapster.dll Syntax public static class MapsterOptionsBuilderExtensions Methods WithMapsterMappingHandler<TBuilder>(TBuilder) Set Mapster as MappingHandler Declaration public static TBuilder WithMapsterMappingHandler<TBuilder>(this TBuilder builder) where TBuilder : IApizrExtendedCommonOptionsBuilderBase Parameters Type Name Description TBuilder builder Returns Type Description TBuilder Type Parameters Name Description TBuilder WithMapsterMappingHandler<TBuilder>(TBuilder, IMapper) Set Mapster as MappingHandler Declaration public static TBuilder WithMapsterMappingHandler<TBuilder>(this TBuilder builder, IMapper mapper) where TBuilder : IApizrCommonOptionsBuilderBase Parameters Type Name Description TBuilder builder MapsterMapper.IMapper mapper Returns Type Description TBuilder Type Parameters Name Description TBuilder"
  },
  "api/Apizr.Mediation.Commanding.html": {
    "href": "api/Apizr.Mediation.Commanding.html",
    "title": "Namespace Apizr.Mediation.Commanding | Apizr",
    "keywords": "Namespace Apizr.Mediation.Commanding Classes MediationCommandBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation command MediationCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation command MediationCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation command MediationCommandBase<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation command Interfaces IMediationCommand A mediation command IMediationCommand<TRequestData> A mediation command sending a request IMediationCommand<TRequestData, TResultData> A mediation command sending a request and returning a result IMediationCommand<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> A mediation command sending mapped request and returning a mapped result IMediationCommandHandler<TCommand> The mediation command handler IMediationCommandHandler<TCommand, TResponse> The mediation command handler"
  },
  "api/Apizr.Mediation.Commanding.IMediationCommand.html": {
    "href": "api/Apizr.Mediation.Commanding.IMediationCommand.html",
    "title": "Interface IMediationCommand | Apizr",
    "keywords": "Interface IMediationCommand A mediation command Namespace : Apizr.Mediation.Commanding Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IMediationCommand : IRequest<Unit>, IBaseRequest"
  },
  "api/Apizr.Mediation.Commanding.IMediationCommand-1.html": {
    "href": "api/Apizr.Mediation.Commanding.IMediationCommand-1.html",
    "title": "Interface IMediationCommand<TRequestData> | Apizr",
    "keywords": "Interface IMediationCommand<TRequestData> A mediation command sending a request Namespace : Apizr.Mediation.Commanding Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IMediationCommand<out TRequestData> : IRequest<Unit>, IBaseRequest Type Parameters Name Description TRequestData The api request type"
  },
  "api/Apizr.Mediation.Commanding.IMediationCommand-2.html": {
    "href": "api/Apizr.Mediation.Commanding.IMediationCommand-2.html",
    "title": "Interface IMediationCommand<TRequestData, TResultData> | Apizr",
    "keywords": "Interface IMediationCommand<TRequestData, TResultData> A mediation command sending a request and returning a result Namespace : Apizr.Mediation.Commanding Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IMediationCommand<out TRequestData, out TResultData> : IRequest<TResultData>, IBaseRequest Type Parameters Name Description TRequestData The api request type TResultData The api result type"
  },
  "api/Apizr.Mediation.Commanding.IMediationCommand-4.html": {
    "href": "api/Apizr.Mediation.Commanding.IMediationCommand-4.html",
    "title": "Interface IMediationCommand<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> | Apizr",
    "keywords": "Interface IMediationCommand<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> A mediation command sending mapped request and returning a mapped result Namespace : Apizr.Mediation.Commanding Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IMediationCommand<out TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : IRequest<TModelResultData>, IBaseRequest Type Parameters Name Description TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from"
  },
  "api/Apizr.Mediation.Commanding.IMediationCommandHandler-1.html": {
    "href": "api/Apizr.Mediation.Commanding.IMediationCommandHandler-1.html",
    "title": "Interface IMediationCommandHandler<TCommand> | Apizr",
    "keywords": "Interface IMediationCommandHandler<TCommand> The mediation command handler Inherited Members MediatR.IRequestHandler<TCommand, MediatR.Unit>.Handle(TCommand, System.Threading.CancellationToken) Namespace : Apizr.Mediation.Commanding Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IMediationCommandHandler<in TCommand> : IMediationCommandHandler<TCommand, Unit>, IRequestHandler<TCommand, Unit> where TCommand : IRequest<Unit> Type Parameters Name Description TCommand The handled command type"
  },
  "api/Apizr.Mediation.Commanding.IMediationCommandHandler-2.html": {
    "href": "api/Apizr.Mediation.Commanding.IMediationCommandHandler-2.html",
    "title": "Interface IMediationCommandHandler<TCommand, TResponse> | Apizr",
    "keywords": "Interface IMediationCommandHandler<TCommand, TResponse> The mediation command handler Inherited Members MediatR.IRequestHandler<TCommand, TResponse>.Handle(TCommand, System.Threading.CancellationToken) Namespace : Apizr.Mediation.Commanding Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IMediationCommandHandler<in TCommand, TResponse> : IRequestHandler<TCommand, TResponse> where TCommand : IRequest<TResponse> Type Parameters Name Description TCommand The handled command type TResponse The response type"
  },
  "api/Apizr.Mediation.Commanding.MediationCommandBase-2.html": {
    "href": "api/Apizr.Mediation.Commanding.MediationCommandBase-2.html",
    "title": "Class MediationCommandBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class MediationCommandBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation command Inheritance System.Object RequestBase < MediatR.Unit , TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationCommand MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Commanding Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class MediationCommandBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand, IRequest<Unit>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors MediationCommandBase(Action<TApizrRequestOptionsBuilder>) Declaration protected MediationCommandBase(Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action <TApizrRequestOptionsBuilder> optionsBuilder Implements IMediationCommand MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Commanding.MediationCommandBase-3.html": {
    "href": "api/Apizr.Mediation.Commanding.MediationCommandBase-3.html",
    "title": "Class MediationCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class MediationCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation command Inheritance System.Object RequestBase < MediatR.Unit , TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationCommand <TRequestData> MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Commanding Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class MediationCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand<TRequestData>, IRequest<Unit>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TRequestData The api request type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors MediationCommandBase(Action<TApizrRequestOptionsBuilder>) Declaration protected MediationCommandBase(Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action <TApizrRequestOptionsBuilder> optionsBuilder Implements IMediationCommand<TRequestData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Commanding.MediationCommandBase-4.html": {
    "href": "api/Apizr.Mediation.Commanding.MediationCommandBase-4.html",
    "title": "Class MediationCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class MediationCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation command Inheritance System.Object RequestBase <TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> CreateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandBase<T, TKey, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandBase<TKey, TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> UploadCommand<TUploadApi, TUploadApiResultData> UploadOptionalCommand<TUploadApi, TUploadApiResultData> Implements IMediationCommand <TRequestData, TResultData> MediatR.IRequest <TResultData> MediatR.IBaseRequest Inherited Members RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Commanding Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class MediationCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand<TRequestData, TResultData>, IRequest<TResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TRequestData The api request type TResultData The api result type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors MediationCommandBase(Action<TApizrRequestOptionsBuilder>) Declaration protected MediationCommandBase(Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action <TApizrRequestOptionsBuilder> optionsBuilder Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Commanding.MediationCommandBase-6.html": {
    "href": "api/Apizr.Mediation.Commanding.MediationCommandBase-6.html",
    "title": "Class MediationCommandBase<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class MediationCommandBase<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation command Inheritance System.Object RequestBase <TModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements IMediationCommand <TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> MediatR.IRequest <TModelResultData> MediatR.IBaseRequest Inherited Members RequestBase<TModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Commanding Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class MediationCommandBase<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestBase<TModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IRequest<TModelResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors MediationCommandBase(Action<TApizrRequestOptionsBuilder>) Declaration protected MediationCommandBase(Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action <TApizrRequestOptionsBuilder> optionsBuilder Implements IMediationCommand<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Configuring.Registry.ApizrMediationRegistry.html": {
    "href": "api/Apizr.Mediation.Configuring.Registry.ApizrMediationRegistry.html",
    "title": "Class ApizrMediationRegistry | Apizr",
    "keywords": "Class ApizrMediationRegistry Registry options available for extended registrations with mediation Inheritance System.Object ApizrMediationRegistryBase ApizrMediationRegistry Implements IApizrMediationConcurrentRegistry IApizrMediationRegistry IApizrMediationEnumerableRegistry System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.Type , System.Func < IApizrMediatorBase >>> System.Collections.IEnumerable IApizrExtendedConcurrentRegistryBase Inherited Members ApizrMediationRegistryBase.ConcurrentRegistry ApizrMediationRegistryBase.GetEnumerator() ApizrMediationRegistryBase.IEnumerable.GetEnumerator() ApizrMediationRegistryBase.GetCrudMediatorFor<T>() ApizrMediationRegistryBase.GetCrudMediatorFor<T, TKey>() ApizrMediationRegistryBase.GetCrudMediatorFor<T, TKey, TReadAllResult>() ApizrMediationRegistryBase.GetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrMediationRegistryBase.GetMediatorFor<TWebApi>() ApizrMediationRegistryBase.TryGetCrudMediatorFor<T>(IApizrCrudMediator<T, Int32, IEnumerable<T>, IDictionary<String, Object>>) ApizrMediationRegistryBase.TryGetCrudMediatorFor<T, TKey>(IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<String, Object>>) ApizrMediationRegistryBase.TryGetCrudMediatorFor<T, TKey, TReadAllResult>(IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<String, Object>>) ApizrMediationRegistryBase.TryGetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams>) ApizrMediationRegistryBase.TryGetMediatorFor<TWebApi>(IApizrMediator<TWebApi>) ApizrMediationRegistryBase.Count ApizrMediationRegistryBase.ContainsCrudMediatorFor<T>() ApizrMediationRegistryBase.ContainsCrudMediatorFor<T, TKey>() ApizrMediationRegistryBase.ContainsCrudMediatorFor<T, TKey, TReadAllResult>() ApizrMediationRegistryBase.ContainsCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrMediationRegistryBase.ContainsMediatorFor<TWebApi>() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Configuring.Registry Assembly : Apizr.Integrations.MediatR.dll Syntax public class ApizrMediationRegistry : ApizrMediationRegistryBase, IApizrMediationConcurrentRegistry, IApizrMediationRegistry, IApizrMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrMediatorBase>>>, IEnumerable, IApizrExtendedConcurrentRegistryBase Methods AddOrUpdateManager(Type) Declaration public void AddOrUpdateManager(Type managerType) Parameters Type Name Description System.Type managerType Implements IApizrMediationConcurrentRegistry IApizrMediationRegistry IApizrMediationEnumerableRegistry System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IApizrExtendedConcurrentRegistryBase"
  },
  "api/Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.html": {
    "href": "api/Apizr.Mediation.Configuring.Registry.ApizrMediationRegistryBase.html",
    "title": "Class ApizrMediationRegistryBase | Apizr",
    "keywords": "Class ApizrMediationRegistryBase Registry options available for extended registrations with mediation Inheritance System.Object ApizrMediationRegistryBase ApizrMediationRegistry Implements IApizrMediationEnumerableRegistry System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.Type , System.Func < IApizrMediatorBase >>> System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Configuring.Registry Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ApizrMediationRegistryBase : IApizrMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrMediatorBase>>>, IEnumerable Constructors ApizrMediationRegistryBase() Declaration protected ApizrMediationRegistryBase() Fields ConcurrentRegistry Declaration protected readonly IDictionary<Type, Func<IApizrMediatorBase>> ConcurrentRegistry Field Value Type Description System.Collections.Generic.IDictionary < System.Type , System.Func < IApizrMediatorBase >> Properties Count Mediators count Declaration public int Count { get; } Property Value Type Description System.Int32 Methods ContainsCrudMediatorFor<T>() Check if registry contains a mediator for T entity type Declaration public bool ContainsCrudMediatorFor<T>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage ContainsCrudMediatorFor<T, TKey>() Check if registry contains a mediator for T entity type with TKey key type Declaration public bool ContainsCrudMediatorFor<T, TKey>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type ContainsCrudMediatorFor<T, TKey, TReadAllResult>() Check if registry contains a mediator for T entity type with TKey key type and TReadAllResult ReadAll result type Declaration public bool ContainsCrudMediatorFor<T, TKey, TReadAllResult>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type ContainsCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Check if registry contains a mediator for T entity type with TKey key type, TReadAllResult ReadAll result type and TReadAllParams ReadAll params type Declaration public bool ContainsCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type TReadAllParams The ReadAll params type ContainsMediatorFor<TWebApi>() Check if registry contains a mediator for TWebApi api type Declaration public bool ContainsMediatorFor<TWebApi>() Returns Type Description System.Boolean Type Parameters Name Description TWebApi The api type GetCrudMediatorFor<T>() Get a Crud mediator instance for an entity type Declaration public IApizrCrudMediator<T, int, IEnumerable<T>, IDictionary<string, object>> GetCrudMediatorFor<T>() where T : class Returns Type Description IApizrCrudMediator <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T The managed entity type GetCrudMediatorFor<T, TKey>() Get a Crud mediator instance for an entity type with a specific key type Declaration public IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> GetCrudMediatorFor<T, TKey>() where T : class Returns Type Description IApizrCrudMediator <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T The managed entity type TKey The entity's key type GetCrudMediatorFor<T, TKey, TReadAllResult>() Get a Crud mediator instance for an entity type with a specific key type and ReadAll result type Declaration public IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<string, object>> GetCrudMediatorFor<T, TKey, TReadAllResult>() where T : class Returns Type Description IApizrCrudMediator <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type GetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Get a Crud mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type Declaration public IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams> GetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description IApizrCrudMediator <T, TKey, TReadAllResult, TReadAllParams> Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type GetEnumerator() Get factory enumerator Declaration public IEnumerator<KeyValuePair<Type, Func<IApizrMediatorBase>>> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Collections.Generic.KeyValuePair < System.Type , System.Func < IApizrMediatorBase >>> GetMediatorFor<TWebApi>() Get an api mediator instance Declaration public IApizrMediator<TWebApi> GetMediatorFor<TWebApi>() Returns Type Description IApizrMediator <TWebApi> Type Parameters Name Description TWebApi The managed api type TryGetCrudMediatorFor<T>(out IApizrCrudMediator<T, Int32, IEnumerable<T>, IDictionary<String, Object>>) Try to get a Crud mediator instance for an entity type Declaration public bool TryGetCrudMediatorFor<T>(out IApizrCrudMediator<T, int, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudMediator <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TryGetCrudMediatorFor<T, TKey>(out IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<String, Object>>) Try to get a Crud mediator instance for an entity type with a specific key type Declaration public bool TryGetCrudMediatorFor<T, TKey>(out IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudMediator <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TryGetCrudMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<String, Object>>) Try to get a Crud mediator instance for an entity type with a specific key type and ReadAll result type Declaration public bool TryGetCrudMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudMediator <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TryGetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams>) Try to get a Crud mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type Declaration public bool TryGetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams> mediator) where T : class Parameters Type Name Description IApizrCrudMediator <T, TKey, TReadAllResult, TReadAllParams> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type TryGetMediatorFor<TWebApi>(out IApizrMediator<TWebApi>) Try to get an api mediator instance Declaration public bool TryGetMediatorFor<TWebApi>(out IApizrMediator<TWebApi> mediator) Parameters Type Name Description IApizrMediator <TWebApi> mediator Returns Type Description System.Boolean Type Parameters Name Description TWebApi The managed api type Explicit Interface Implementations IEnumerable.GetEnumerator() Get factory enumerator Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements IApizrMediationEnumerableRegistry System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Apizr.Mediation.Configuring.Registry.html": {
    "href": "api/Apizr.Mediation.Configuring.Registry.html",
    "title": "Namespace Apizr.Mediation.Configuring.Registry | Apizr",
    "keywords": "Namespace Apizr.Mediation.Configuring.Registry Classes ApizrMediationRegistry Registry options available for extended registrations with mediation ApizrMediationRegistryBase Registry options available for extended registrations with mediation Interfaces IApizrMediationConcurrentRegistry IApizrMediationEnumerableRegistry Registry options available for extended registrations with mediation IApizrMediationRegistry"
  },
  "api/Apizr.Mediation.Configuring.Registry.IApizrMediationConcurrentRegistry.html": {
    "href": "api/Apizr.Mediation.Configuring.Registry.IApizrMediationConcurrentRegistry.html",
    "title": "Interface IApizrMediationConcurrentRegistry | Apizr",
    "keywords": "Interface IApizrMediationConcurrentRegistry Inherited Members IApizrMediationEnumerableRegistry.Count IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T>() IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T, TKey>() IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T, TKey, TReadAllResult>() IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrMediationEnumerableRegistry.ContainsMediatorFor<TWebApi>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T, TKey>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T, TKey, TReadAllResult>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrMediationEnumerableRegistry.GetMediatorFor<TWebApi>() IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T>(IApizrCrudMediator<T, Int32, IEnumerable<T>, IDictionary<String, Object>>) IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T, TKey>(IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<String, Object>>) IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T, TKey, TReadAllResult>(IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<String, Object>>) IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams>) IApizrMediationEnumerableRegistry.TryGetMediatorFor<TWebApi>(IApizrMediator<TWebApi>) System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Func<Apizr.Mediation.Requesting.Sending.IApizrMediatorBase>>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() IApizrExtendedConcurrentRegistryBase.AddOrUpdateManager(Type) Namespace : Apizr.Mediation.Configuring.Registry Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IApizrMediationConcurrentRegistry : IApizrMediationRegistry, IApizrMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrMediatorBase>>>, IEnumerable, IApizrExtendedConcurrentRegistryBase"
  },
  "api/Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.html": {
    "href": "api/Apizr.Mediation.Configuring.Registry.IApizrMediationEnumerableRegistry.html",
    "title": "Interface IApizrMediationEnumerableRegistry | Apizr",
    "keywords": "Interface IApizrMediationEnumerableRegistry Registry options available for extended registrations with mediation Inherited Members System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Func<Apizr.Mediation.Requesting.Sending.IApizrMediatorBase>>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() Namespace : Apizr.Mediation.Configuring.Registry Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IApizrMediationEnumerableRegistry : IEnumerable<KeyValuePair<Type, Func<IApizrMediatorBase>>>, IEnumerable Properties Count Mediators count Declaration int Count { get; } Property Value Type Description System.Int32 Methods ContainsCrudMediatorFor<T>() Check if registry contains a mediator for T entity type Declaration bool ContainsCrudMediatorFor<T>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage ContainsCrudMediatorFor<T, TKey>() Check if registry contains a mediator for T entity type with TKey key type Declaration bool ContainsCrudMediatorFor<T, TKey>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type ContainsCrudMediatorFor<T, TKey, TReadAllResult>() Check if registry contains a mediator for T entity type with TKey key type and TReadAllResult ReadAll result type Declaration bool ContainsCrudMediatorFor<T, TKey, TReadAllResult>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type ContainsCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Check if registry contains a mediator for T entity type with TKey key type, TReadAllResult ReadAll result type and TReadAllParams ReadAll params type Declaration bool ContainsCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type TReadAllParams The ReadAll params type ContainsMediatorFor<TWebApi>() Check if registry contains a mediator for TWebApi api type Declaration bool ContainsMediatorFor<TWebApi>() Returns Type Description System.Boolean Type Parameters Name Description TWebApi The api type GetCrudMediatorFor<T>() Get a Crud mediator instance for an entity type Declaration IApizrCrudMediator<T, int, IEnumerable<T>, IDictionary<string, object>> GetCrudMediatorFor<T>() where T : class Returns Type Description IApizrCrudMediator <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T The managed entity type GetCrudMediatorFor<T, TKey>() Get a Crud mediator instance for an entity type with a specific key type Declaration IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> GetCrudMediatorFor<T, TKey>() where T : class Returns Type Description IApizrCrudMediator <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T The managed entity type TKey The entity's key type GetCrudMediatorFor<T, TKey, TReadAllResult>() Get a Crud mediator instance for an entity type with a specific key type and ReadAll result type Declaration IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<string, object>> GetCrudMediatorFor<T, TKey, TReadAllResult>() where T : class Returns Type Description IApizrCrudMediator <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type GetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Get a Crud mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type Declaration IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams> GetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description IApizrCrudMediator <T, TKey, TReadAllResult, TReadAllParams> Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type GetMediatorFor<TWebApi>() Get an api mediator instance Declaration IApizrMediator<TWebApi> GetMediatorFor<TWebApi>() Returns Type Description IApizrMediator <TWebApi> Type Parameters Name Description TWebApi The managed api type TryGetCrudMediatorFor<T>(out IApizrCrudMediator<T, Int32, IEnumerable<T>, IDictionary<String, Object>>) Try to get a Crud mediator instance for an entity type Declaration bool TryGetCrudMediatorFor<T>(out IApizrCrudMediator<T, int, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudMediator <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TryGetCrudMediatorFor<T, TKey>(out IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<String, Object>>) Try to get a Crud mediator instance for an entity type with a specific key type Declaration bool TryGetCrudMediatorFor<T, TKey>(out IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudMediator <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TryGetCrudMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<String, Object>>) Try to get a Crud mediator instance for an entity type with a specific key type and ReadAll result type Declaration bool TryGetCrudMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudMediator <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TryGetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams>) Try to get a Crud mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type Declaration bool TryGetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams> mediator) where T : class Parameters Type Name Description IApizrCrudMediator <T, TKey, TReadAllResult, TReadAllParams> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type TryGetMediatorFor<TWebApi>(out IApizrMediator<TWebApi>) Try to get an api mediator instance Declaration bool TryGetMediatorFor<TWebApi>(out IApizrMediator<TWebApi> mediator) Parameters Type Name Description IApizrMediator <TWebApi> mediator Returns Type Description System.Boolean Type Parameters Name Description TWebApi The managed api type"
  },
  "api/Apizr.Mediation.Configuring.Registry.IApizrMediationRegistry.html": {
    "href": "api/Apizr.Mediation.Configuring.Registry.IApizrMediationRegistry.html",
    "title": "Interface IApizrMediationRegistry | Apizr",
    "keywords": "Interface IApizrMediationRegistry Inherited Members IApizrMediationEnumerableRegistry.Count IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T>() IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T, TKey>() IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T, TKey, TReadAllResult>() IApizrMediationEnumerableRegistry.ContainsCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrMediationEnumerableRegistry.ContainsMediatorFor<TWebApi>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T, TKey>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T, TKey, TReadAllResult>() IApizrMediationEnumerableRegistry.GetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrMediationEnumerableRegistry.GetMediatorFor<TWebApi>() IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T>(IApizrCrudMediator<T, Int32, IEnumerable<T>, IDictionary<String, Object>>) IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T, TKey>(IApizrCrudMediator<T, TKey, IEnumerable<T>, IDictionary<String, Object>>) IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T, TKey, TReadAllResult>(IApizrCrudMediator<T, TKey, TReadAllResult, IDictionary<String, Object>>) IApizrMediationEnumerableRegistry.TryGetCrudMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<T, TKey, TReadAllResult, TReadAllParams>) IApizrMediationEnumerableRegistry.TryGetMediatorFor<TWebApi>(IApizrMediator<TWebApi>) System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Func<Apizr.Mediation.Requesting.Sending.IApizrMediatorBase>>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() Namespace : Apizr.Mediation.Configuring.Registry Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IApizrMediationRegistry : IApizrMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrMediatorBase>>>, IEnumerable"
  },
  "api/Apizr.Mediation.Cruding.Base.CreateCommandBase-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.CreateCommandBase-4.html",
    "title": "Class CreateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class CreateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Create command Inheritance System.Object RequestBase <TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase <TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> CreateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> CreateCommand<TModelData> CreateOptionalCommand<TModelData> Implements IMediationCommand <TRequestData, TResultData> MediatR.IRequest <TResultData> MediatR.IBaseRequest Inherited Members RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class CreateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : MediationCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand<TRequestData, TResultData>, IRequest<TResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TRequestData The api request type TResultData The api result type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors CreateCommandBase(TRequestData, Action<TApizrRequestOptionsBuilder>) Declaration protected CreateCommandBase(TRequestData requestData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TRequestData requestData The api request System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request Properties RequestData The request data to send Declaration public TRequestData RequestData { get; } Property Value Type Description TRequestData Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Cruding.Base.DeleteCommandBase-3.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.DeleteCommandBase-3.html",
    "title": "Class DeleteCommandBase<T, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class DeleteCommandBase<T, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Delete command Inheritance System.Object RequestBase < MediatR.Unit , TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase < System.Int32 , MediatR.Unit , TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandBase <T, System.Int32 , MediatR.Unit , TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandBase <T, MediatR.Unit , TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandBase<T, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommand<T> Implements IMediationCommand < System.Int32 , MediatR.Unit > MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members DeleteCommandBase<T, Int32, Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Key RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class DeleteCommandBase<T, TApizrRequestOptions, TApizrRequestOptionsBuilder> : DeleteCommandBase<T, Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand<int, Unit>, IRequest<Unit>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description T The api entity type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors DeleteCommandBase(Int32, Action<TApizrRequestOptionsBuilder>) Declaration protected DeleteCommandBase(int key, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Int32 key System.Action <TApizrRequestOptionsBuilder> optionsBuilder Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Cruding.Base.DeleteCommandBase-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.DeleteCommandBase-4.html",
    "title": "Class DeleteCommandBase<T, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class DeleteCommandBase<T, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Delete command Inheritance System.Object RequestBase <TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase < System.Int32 , TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandBase <T, System.Int32 , TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandBase<T, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandBase<T, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteOptionalCommand<T> Implements IMediationCommand < System.Int32 , TResultData> MediatR.IRequest <TResultData> MediatR.IBaseRequest Inherited Members DeleteCommandBase<T, Int32, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Key RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class DeleteCommandBase<T, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : DeleteCommandBase<T, int, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand<int, TResultData>, IRequest<TResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description T The api entity type TResultData The api result type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors DeleteCommandBase(Int32, Action<TApizrRequestOptionsBuilder>) Declaration protected DeleteCommandBase(int key, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Int32 key System.Action <TApizrRequestOptionsBuilder> optionsBuilder Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Cruding.Base.DeleteCommandBase-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.DeleteCommandBase-5.html",
    "title": "Class DeleteCommandBase<T, TKey, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class DeleteCommandBase<T, TKey, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Delete command Inheritance System.Object RequestBase <TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase <TKey, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandBase<T, TKey, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandBase<T, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommand<T, TKey> DeleteOptionalCommand<T, TKey> Implements IMediationCommand <TKey, TResultData> MediatR.IRequest <TResultData> MediatR.IBaseRequest Inherited Members RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class DeleteCommandBase<T, TKey, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : MediationCommandBase<TKey, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand<TKey, TResultData>, IRequest<TResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description T The api entity type TKey The entity's crud key type TResultData The api result type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors DeleteCommandBase(TKey, Action<TApizrRequestOptionsBuilder>) The top level base mediation Delete command constructor Declaration protected DeleteCommandBase(TKey key, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TKey key The entity's crud key System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request Properties Key The entity's crud key Declaration public TKey Key { get; } Property Value Type Description TKey Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Cruding.Base.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.html",
    "title": "Namespace Apizr.Mediation.Cruding.Base | Apizr",
    "keywords": "Namespace Apizr.Mediation.Cruding.Base Classes CreateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Create command DeleteCommandBase<T, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Delete command DeleteCommandBase<T, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Delete command DeleteCommandBase<T, TKey, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Delete command ReadAllQueryBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation ReadAll query ReadAllQueryBase<TReadAllParams, TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation ReadAll query ReadQueryBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Read query ReadQueryBase<TResponse, TKey, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Read query UpdateCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Update command UpdateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Update command UpdateCommandBase<TKey, TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Update command"
  },
  "api/Apizr.Mediation.Cruding.Base.ReadAllQueryBase-3.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.ReadAllQueryBase-3.html",
    "title": "Class ReadAllQueryBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ReadAllQueryBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation ReadAll query Inheritance System.Object RequestBase <TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationQueryBase <TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadAllQueryBase < System.Collections.Generic.IDictionary < System.String , System.Object >, TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadAllQueryBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadAllQuery<TReadAllResult> ReadAllOptionalQuery<TReadAllResult> Implements IMediationQuery <TReadAllResult> MediatR.IRequest <TReadAllResult> MediatR.IBaseRequest Inherited Members ReadAllQueryBase<IDictionary<String, Object>, TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Parameters RequestBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ReadAllQueryBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ReadAllQueryBase<IDictionary<string, object>, TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationQuery<TReadAllResult>, IRequest<TReadAllResult>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TReadAllResult The api result type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ReadAllQueryBase(IDictionary<String, Object>, Action<TApizrRequestOptionsBuilder>) Declaration protected ReadAllQueryBase(IDictionary<string, object> parameters, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > parameters System.Action <TApizrRequestOptionsBuilder> optionsBuilder Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Cruding.Base.ReadAllQueryBase-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.ReadAllQueryBase-4.html",
    "title": "Class ReadAllQueryBase<TReadAllParams, TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ReadAllQueryBase<TReadAllParams, TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation ReadAll query Inheritance System.Object RequestBase <TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationQueryBase <TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadAllQueryBase<TReadAllParams, TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadAllQueryBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadAllQuery<TReadAllParams, TReadAllResult> ReadAllOptionalQuery<TReadAllParams, TReadAllResult> Implements IMediationQuery <TReadAllResult> MediatR.IRequest <TReadAllResult> MediatR.IBaseRequest Inherited Members RequestBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ReadAllQueryBase<TReadAllParams, TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : MediationQueryBase<TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationQuery<TReadAllResult>, IRequest<TReadAllResult>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TReadAllParams The ReadAll parameters type TReadAllResult The api result type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ReadAllQueryBase(TReadAllParams, Action<TApizrRequestOptionsBuilder>) The top level base mediation ReadAll query constructor Declaration protected ReadAllQueryBase(TReadAllParams parameters, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TReadAllParams parameters The query parameters to send System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request Properties Parameters The query parameters to send Declaration public TReadAllParams Parameters { get; } Property Value Type Description TReadAllParams Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Cruding.Base.ReadQueryBase-3.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.ReadQueryBase-3.html",
    "title": "Class ReadQueryBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ReadQueryBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Read query Inheritance System.Object RequestBase <TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationQueryBase <TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQueryBase <TResponse, System.Int32 , TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQueryBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQuery<TResultData> ReadOptionalQuery<TResultData> Implements IMediationQuery <TResponse> MediatR.IRequest <TResponse> MediatR.IBaseRequest Inherited Members ReadQueryBase<TResponse, Int32, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Key RequestBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ReadQueryBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ReadQueryBase<TResponse, int, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationQuery<TResponse>, IRequest<TResponse>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TResponse The result entity type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ReadQueryBase(Int32, Action<TApizrRequestOptionsBuilder>) Declaration protected ReadQueryBase(int key, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Int32 key System.Action <TApizrRequestOptionsBuilder> optionsBuilder Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Cruding.Base.ReadQueryBase-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.ReadQueryBase-4.html",
    "title": "Class ReadQueryBase<TResponse, TKey, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ReadQueryBase<TResponse, TKey, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Read query Inheritance System.Object RequestBase <TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationQueryBase <TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQueryBase<TResponse, TKey, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQueryBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQuery<TResultData, TKey> ReadOptionalQuery<TResultData, TKey> Implements IMediationQuery <TResponse> MediatR.IRequest <TResponse> MediatR.IBaseRequest Inherited Members RequestBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ReadQueryBase<TResponse, TKey, TApizrRequestOptions, TApizrRequestOptionsBuilder> : MediationQueryBase<TResponse, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationQuery<TResponse>, IRequest<TResponse>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TResponse The result entity type TKey The entity's crud key type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ReadQueryBase(TKey, Action<TApizrRequestOptionsBuilder>) The top level base mediation Read query Declaration protected ReadQueryBase(TKey key, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TKey key The entity's crud key System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request Properties Key The entity's crud key Declaration public TKey Key { get; } Property Value Type Description TKey Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Cruding.Base.UpdateCommandBase-3.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.UpdateCommandBase-3.html",
    "title": "Class UpdateCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class UpdateCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Update command Inheritance System.Object RequestBase < MediatR.Unit , TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase <TRequestData, MediatR.Unit , TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandBase < System.Int32 , TRequestData, MediatR.Unit , TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandBase <TRequestData, MediatR.Unit , TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommand<TRequestData> Implements IMediationCommand <TRequestData, MediatR.Unit > MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members UpdateCommandBase<Int32, TRequestData, Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Key UpdateCommandBase<Int32, TRequestData, Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.RequestData RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class UpdateCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : UpdateCommandBase<TRequestData, Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand<TRequestData, Unit>, IRequest<Unit>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TRequestData The request data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors UpdateCommandBase(Int32, TRequestData, Action<TApizrRequestOptionsBuilder>) Declaration protected UpdateCommandBase(int key, TRequestData requestData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Int32 key TRequestData requestData System.Action <TApizrRequestOptionsBuilder> optionsBuilder Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Cruding.Base.UpdateCommandBase-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.UpdateCommandBase-4.html",
    "title": "Class UpdateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class UpdateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Update command Inheritance System.Object RequestBase <TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase <TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandBase < System.Int32 , TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateOptionalCommand<TRequestData> Implements IMediationCommand <TRequestData, TResultData> MediatR.IRequest <TResultData> MediatR.IBaseRequest Inherited Members UpdateCommandBase<Int32, TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Key UpdateCommandBase<Int32, TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.RequestData RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class UpdateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : UpdateCommandBase<int, TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand<TRequestData, TResultData>, IRequest<TResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TRequestData The request data type TResultData The result data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors UpdateCommandBase(Int32, TRequestData, Action<TApizrRequestOptionsBuilder>) Declaration protected UpdateCommandBase(int key, TRequestData requestData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Int32 key TRequestData requestData System.Action <TApizrRequestOptionsBuilder> optionsBuilder Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Cruding.Base.UpdateCommandBase-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Base.UpdateCommandBase-5.html",
    "title": "Class UpdateCommandBase<TKey, TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class UpdateCommandBase<TKey, TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation Update command Inheritance System.Object RequestBase <TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase <TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandBase<TKey, TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommand<TKey, TRequestData> UpdateOptionalCommand<TKey, TRequestData> Implements IMediationCommand <TRequestData, TResultData> MediatR.IRequest <TResultData> MediatR.IBaseRequest Inherited Members RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class UpdateCommandBase<TKey, TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : MediationCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommand<TRequestData, TResultData>, IRequest<TResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TKey The entity's crud key type TRequestData The request data type TResultData The result data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors UpdateCommandBase(TKey, TRequestData, Action<TApizrRequestOptionsBuilder>) The top level base mediation Update command constructor Declaration protected UpdateCommandBase(TKey key, TRequestData requestData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TKey key The entity's crud key TRequestData requestData The request data to send System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request Properties Key The entity's crud key Declaration public TKey Key { get; } Property Value Type Description TKey RequestData The request data to send Declaration public TRequestData RequestData { get; } Property Value Type Description TRequestData Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Cruding.CreateCommand-1.html": {
    "href": "api/Apizr.Mediation.Cruding.CreateCommand-1.html",
    "title": "Class CreateCommand<TModelData> | Apizr",
    "keywords": "Class CreateCommand<TModelData> The mediation Create command Inheritance System.Object RequestBase <TModelData, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationCommandBase <TModelData, TModelData, IApizrRequestOptions , IApizrRequestOptionsBuilder > CreateCommandBase <TModelData, TModelData, IApizrRequestOptions , IApizrRequestOptionsBuilder > CreateCommand<TModelData> Implements IMediationCommand <TModelData, TModelData> MediatR.IRequest <TModelData> MediatR.IBaseRequest Inherited Members CreateCommandBase<TModelData, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.RequestData RequestBase<TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding Assembly : Apizr.Integrations.MediatR.dll Syntax public class CreateCommand<TModelData> : CreateCommandBase<TModelData, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<TModelData, TModelData>, IRequest<TModelData>, IBaseRequest Type Parameters Name Description TModelData The data type Constructors CreateCommand(TModelData, Action<IApizrRequestOptionsBuilder>) The mediation Create command constructor Declaration public CreateCommand(TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TModelData modelData The request data to send System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Cruding.DeleteCommand-1.html": {
    "href": "api/Apizr.Mediation.Cruding.DeleteCommand-1.html",
    "title": "Class DeleteCommand<T> | Apizr",
    "keywords": "Class DeleteCommand<T> The mediation Delete command Inheritance System.Object RequestBase < MediatR.Unit , IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationCommandBase < System.Int32 , MediatR.Unit , IApizrRequestOptions , IApizrRequestOptionsBuilder > DeleteCommandBase <T, System.Int32 , MediatR.Unit , IApizrRequestOptions , IApizrRequestOptionsBuilder > DeleteCommandBase <T, MediatR.Unit , IApizrRequestOptions , IApizrRequestOptionsBuilder > DeleteCommandBase <T, IApizrRequestOptions , IApizrRequestOptionsBuilder > DeleteCommand<T> Implements IMediationCommand < System.Int32 , MediatR.Unit > MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members DeleteCommandBase<T, Int32, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key RequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding Assembly : Apizr.Integrations.MediatR.dll Syntax public class DeleteCommand<T> : DeleteCommandBase<T, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<int, Unit>, IRequest<Unit>, IBaseRequest Type Parameters Name Description T The api entity type Constructors DeleteCommand(Int32, Action<IApizrRequestOptionsBuilder>) The mediation Delete command constructor Declaration public DeleteCommand(int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Int32 key The entity's crud key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Cruding.DeleteCommand-2.html": {
    "href": "api/Apizr.Mediation.Cruding.DeleteCommand-2.html",
    "title": "Class DeleteCommand<T, TKey> | Apizr",
    "keywords": "Class DeleteCommand<T, TKey> The mediation Delete command Inheritance System.Object RequestBase < MediatR.Unit , IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationCommandBase <TKey, MediatR.Unit , IApizrRequestOptions , IApizrRequestOptionsBuilder > DeleteCommandBase <T, TKey, MediatR.Unit , IApizrRequestOptions , IApizrRequestOptionsBuilder > DeleteCommand<T, TKey> Implements IMediationCommand <TKey, MediatR.Unit > MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members DeleteCommandBase<T, TKey, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key RequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding Assembly : Apizr.Integrations.MediatR.dll Syntax public class DeleteCommand<T, TKey> : DeleteCommandBase<T, TKey, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<TKey, Unit>, IRequest<Unit>, IBaseRequest Type Parameters Name Description T The api entity type TKey The entity's crud key type Constructors DeleteCommand(TKey, Action<IApizrRequestOptionsBuilder>) The mediation Delete command constructor Declaration public DeleteCommand(TKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TKey key The entity's crud key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.CreateCommandHandlerBase-9.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.CreateCommandHandlerBase-9.html",
    "title": "Class CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Create command handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> CreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> CreateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler <TCommand, TCommandResult> MediatR.IRequestHandler <TCommand, TCommandResult> Inherited Members CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommandHandler<TCommand, TCommandResult>, IRequestHandler<TCommand, TCommandResult> where TModelEntity : class where TApiEntity : class where TCommand : CreateCommandBase<TModelEntity, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params TCommand The command to handle TCommandResult The command result to return TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors CreateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration protected CreateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(TCommand, CancellationToken) Handling the Create command Declaration public abstract Task<TCommandResult> Handle(TCommand request, CancellationToken cancellationToken) Parameters Type Name Description TCommand request The Create command System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TCommandResult> Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.CrudRequestHandlerBase-6.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.CrudRequestHandlerBase-6.html",
    "title": "Class CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base CRUD request handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApiEntity : class where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors CrudRequestHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration protected CrudRequestHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Fields CrudApiManager Declaration protected readonly IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> CrudApiManager Field Value Type Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase-8.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase-8.html",
    "title": "Class DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Delete command handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler <TCommand, TCommandResult> MediatR.IRequestHandler <TCommand, TCommandResult> Inherited Members CrudRequestHandlerBase<TApiEntity, Int32, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommandHandler<TCommand, TCommandResult>, IRequestHandler<TCommand, TCommandResult> where TModelEntity : class where TApiEntity : class where TCommand : DeleteCommandBase<TModelEntity, int, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params TCommand The command to handle TCommandResult The command result to return TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors DeleteCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, Int32, TReadAllResult, TReadAllParams>>) Declaration protected DeleteCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(TCommand, CancellationToken) Handling the Delete command Declaration public abstract Task<TCommandResult> Handle(TCommand request, CancellationToken cancellationToken) Parameters Type Name Description TCommand request The Delete command System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TCommandResult> Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase-9.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase-9.html",
    "title": "Class DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Delete command handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> DeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler <TCommand, TCommandResult> MediatR.IRequestHandler <TCommand, TCommandResult> Inherited Members CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommandHandler<TCommand, TCommandResult>, IRequestHandler<TCommand, TCommandResult> where TModelEntity : class where TApiEntity : class where TCommand : DeleteCommandBase<TModelEntity, TApiEntityKey, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params type TCommand The command type to handle TCommandResult The command result type to return TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors DeleteCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration protected DeleteCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(TCommand, CancellationToken) Handling the Delete command Declaration public abstract Task<TCommandResult> Handle(TCommand request, CancellationToken cancellationToken) Parameters Type Name Description TCommand request The Delete command System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TCommandResult> Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.html",
    "title": "Namespace Apizr.Mediation.Cruding.Handling.Base | Apizr",
    "keywords": "Namespace Apizr.Mediation.Cruding.Handling.Base Classes CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Create command handler CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base CRUD request handler DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Delete command handler DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Delete command handler ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base ReadAll query handler ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base ReadAll query handler ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Read query handler ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Read query handler UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Update command handler UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Update command handler UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Update command handler"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase-8.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase-8.html",
    "title": "Class ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base ReadAll query handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TApiEntityReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult> Implements IMediationQueryHandler <TQuery, TQueryResult> MediatR.IRequestHandler <TQuery, TQueryResult> Inherited Members CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<String, Object>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<string, object>, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationQueryHandler<TQuery, TQueryResult>, IRequestHandler<TQuery, TQueryResult> where TApiEntity : class where TQuery : ReadAllQueryBase<TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TApiEntity TApiEntityKey The api entity type TModelEntityReadAllResult The returned model result type TApiEntityReadAllResult The received api result type TQuery The query type to handle TQueryResult The query result type to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ReadAllQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<String, Object>>>) Declaration protected ReadAllQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<string, object>>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TApiEntityReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >>> crudApiManager Methods Handle(TQuery, CancellationToken) Handling the ReadAll query Declaration public abstract Task<TQueryResult> Handle(TQuery request, CancellationToken cancellationToken) Parameters Type Name Description TQuery request The ReadAll query System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TQueryResult> Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase-9.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase-9.html",
    "title": "Class ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base ReadAll query handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams> Implements IMediationQueryHandler <TQuery, TQueryResult> MediatR.IRequestHandler <TQuery, TQueryResult> Inherited Members CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationQueryHandler<TQuery, TQueryResult>, IRequestHandler<TQuery, TQueryResult> where TApiEntity : class where TQuery : ReadAllQueryBase<TReadAllParams, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TApiEntity TApiEntityKey The api entity type TModelEntityReadAllResult The returned model result type TApiEntityReadAllResult The received api result type TReadAllParams The query parameters type TQuery The query type to handle TQueryResult The query result type to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ReadAllQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams>>) Declaration protected ReadAllQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams>> crudApiManager Methods Handle(TQuery, CancellationToken) Handling the ReadAll query Declaration public abstract Task<TQueryResult> Handle(TQuery request, CancellationToken cancellationToken) Parameters Type Name Description TQuery request The ReadAll query System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TQueryResult> Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase-8.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase-8.html",
    "title": "Class ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Read query handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> ReadOptionalQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationQueryHandler <TQuery, TQueryResult> MediatR.IRequestHandler <TQuery, TQueryResult> Inherited Members CrudRequestHandlerBase<TApiEntity, Int32, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationQueryHandler<TQuery, TQueryResult>, IRequestHandler<TQuery, TQueryResult> where TApiEntity : class where TQuery : ReadQueryBase<TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params type TQuery The query type to handle TQueryResult The query result type to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ReadQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, Int32, TReadAllResult, TReadAllParams>>) Declaration protected ReadQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(TQuery, CancellationToken) Handling the Read query Declaration public abstract Task<TQueryResult> Handle(TQuery request, CancellationToken cancellationToken) Parameters Type Name Description TQuery request The Read query System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TQueryResult> Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase-9.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase-9.html",
    "title": "Class ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Read query handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> ReadOptionalQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationQueryHandler <TQuery, TQueryResult> MediatR.IRequestHandler <TQuery, TQueryResult> Inherited Members CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TQuery, TQueryResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationQueryHandler<TQuery, TQueryResult>, IRequestHandler<TQuery, TQueryResult> where TModelEntity : class where TApiEntity : class where TQuery : ReadQueryBase<TQueryResult, TApiEntityKey, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params type TQuery The query type to handle TQueryResult The query result type to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ReadQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration protected ReadQueryHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(TQuery, CancellationToken) Handling the Read query Declaration public abstract Task<TQueryResult> Handle(TQuery request, CancellationToken cancellationToken) Parameters Type Name Description TQuery request The Read query System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TQueryResult> Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase-7.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase-7.html",
    "title": "Class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Update command handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler <TCommand, MediatR.Unit > MediatR.IRequestHandler <TCommand, MediatR.Unit > Inherited Members CrudRequestHandlerBase<TApiEntity, Int32, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TApizrRequestOptions, TApizrRequestOptionsBuilder> : CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommandHandler<TCommand, Unit>, IRequestHandler<TCommand, Unit> where TModelEntity : class where TApiEntity : class where TCommand : UpdateCommandBase<int, TModelEntity, Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params type TCommand The command type to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors UpdateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, Int32, TReadAllResult, TReadAllParams>>) Declaration protected UpdateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(TCommand, CancellationToken) Handling the Update command Declaration public abstract Task<Unit> Handle(TCommand request, CancellationToken cancellationToken) Parameters Type Name Description TCommand request The Update command System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < MediatR.Unit > Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase-8.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase-8.html",
    "title": "Class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Update command handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler <TCommand, TCommandResult> MediatR.IRequestHandler <TCommand, TCommandResult> Inherited Members CrudRequestHandlerBase<TApiEntity, Int32, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : CrudRequestHandlerBase<TApiEntity, int, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommandHandler<TCommand, TCommandResult>, IRequestHandler<TCommand, TCommandResult> where TModelEntity : class where TApiEntity : class where TCommand : UpdateCommandBase<int, TModelEntity, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params type TCommand The command type to handle TCommandResult The command result type to return TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors UpdateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, Int32, TReadAllResult, TReadAllParams>>) Declaration protected UpdateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(TCommand, CancellationToken) Handling the Update command Declaration public abstract Task<TCommandResult> Handle(TCommand request, CancellationToken cancellationToken) Parameters Type Name Description TCommand request The Update command System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TCommandResult> Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase-9.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase-9.html",
    "title": "Class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base Update command handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> UpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler <TCommand, TCommandResult> MediatR.IRequestHandler <TCommand, TCommandResult> Inherited Members CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TCommand, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> : CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationCommandHandler<TCommand, TCommandResult>, IRequestHandler<TCommand, TCommandResult> where TModelEntity : class where TApiEntity : class where TCommand : UpdateCommandBase<TApiEntityKey, TModelEntity, TCommandResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params type TCommand The command type to handle TCommandResult The command result type to return TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors UpdateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration protected UpdateCommandHandlerBase(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(TCommand, CancellationToken) Handling the Update command Declaration public abstract Task<TCommandResult> Handle(TCommand request, CancellationToken cancellationToken) Parameters Type Name Description TCommand request The Update command System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TCommandResult> Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.CreateCommandHandler-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.CreateCommandHandler-5.html",
    "title": "Class CreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class CreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Create command handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions , IApizrRequestOptionsBuilder > CreateCommandHandlerBase <TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, CreateCommand <TModelEntity>, TModelEntity, IApizrRequestOptions , IApizrRequestOptionsBuilder > CreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler < CreateCommand <TModelEntity>, TModelEntity> MediatR.IRequestHandler < CreateCommand <TModelEntity>, TModelEntity> Inherited Members CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, CreateCommand<TModelEntity>, TModelEntity, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(CreateCommand<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class CreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, CreateCommand<TModelEntity>, TModelEntity, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<CreateCommand<TModelEntity>, TModelEntity>, IRequestHandler<CreateCommand<TModelEntity>, TModelEntity> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params Constructors CreateCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration public CreateCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(CreateCommand<TModelEntity>, CancellationToken) Handling the Create command Declaration public override Task<TModelEntity> Handle(CreateCommand<TModelEntity> request, CancellationToken cancellationToken) Parameters Type Name Description CreateCommand <TModelEntity> request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TModelEntity> Overrides Apizr.Mediation.Cruding.Handling.Base.CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, Apizr.Mediation.Cruding.CreateCommand<TModelEntity>, TModelEntity, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Mediation.Cruding.CreateCommand<TModelEntity>, System.Threading.CancellationToken) Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.DeleteCommandHandler-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.DeleteCommandHandler-4.html",
    "title": "Class DeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class DeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> The Delete command handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > CrudRequestHandlerBase <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams, IApizrRequestOptions , IApizrRequestOptionsBuilder > DeleteCommandHandlerBase <TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, DeleteCommand <TModelEntity>, MediatR.Unit , IApizrRequestOptions , IApizrRequestOptionsBuilder > DeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler < DeleteCommand <TModelEntity>, MediatR.Unit > MediatR.IRequestHandler < DeleteCommand <TModelEntity>, MediatR.Unit > Inherited Members DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, DeleteCommand<TModelEntity>, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(DeleteCommand<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, Int32, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class DeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> : DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, DeleteCommand<TModelEntity>, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<DeleteCommand<TModelEntity>, Unit>, IRequestHandler<DeleteCommand<TModelEntity>, Unit> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params type Constructors DeleteCommandHandler(IApizrManager<ICrudApi<TApiEntity, Int32, TReadAllResult, TReadAllParams>>) Declaration public DeleteCommandHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(DeleteCommand<TModelEntity>, CancellationToken) Handling the Delete command Declaration public override Task<Unit> Handle(DeleteCommand<TModelEntity> request, CancellationToken cancellationToken) Parameters Type Name Description DeleteCommand <TModelEntity> request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < MediatR.Unit > Overrides Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, Apizr.Mediation.Cruding.DeleteCommand<TModelEntity>, MediatR.Unit, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Mediation.Cruding.DeleteCommand<TModelEntity>, System.Threading.CancellationToken) Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.DeleteCommandHandler-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.DeleteCommandHandler-5.html",
    "title": "Class DeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class DeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Delete command handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions , IApizrRequestOptionsBuilder > DeleteCommandHandlerBase <TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, DeleteCommand <TModelEntity, TApiEntityKey>, MediatR.Unit , IApizrRequestOptions , IApizrRequestOptionsBuilder > DeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler < DeleteCommand <TModelEntity, TApiEntityKey>, MediatR.Unit > MediatR.IRequestHandler < DeleteCommand <TModelEntity, TApiEntityKey>, MediatR.Unit > Inherited Members DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, DeleteCommand<TModelEntity, TApiEntityKey>, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(DeleteCommand<TModelEntity, TApiEntityKey>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class DeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, DeleteCommand<TModelEntity, TApiEntityKey>, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<DeleteCommand<TModelEntity, TApiEntityKey>, Unit>, IRequestHandler<DeleteCommand<TModelEntity, TApiEntityKey>, Unit> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params type Constructors DeleteCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration public DeleteCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(DeleteCommand<TModelEntity, TApiEntityKey>, CancellationToken) Handling the Delete command Declaration public override Task<Unit> Handle(DeleteCommand<TModelEntity, TApiEntityKey> request, CancellationToken cancellationToken) Parameters Type Name Description DeleteCommand <TModelEntity, TApiEntityKey> request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < MediatR.Unit > Overrides Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, Apizr.Mediation.Cruding.DeleteCommand<TModelEntity, TApiEntityKey>, MediatR.Unit, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Mediation.Cruding.DeleteCommand<TModelEntity, TApiEntityKey>, System.Threading.CancellationToken) Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.html",
    "title": "Namespace Apizr.Mediation.Cruding.Handling | Apizr",
    "keywords": "Namespace Apizr.Mediation.Cruding.Handling Classes CreateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Create command handler DeleteCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> The Delete command handler DeleteCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Delete command handler ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> The ReadAll query handler ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> The ReadAll query handler ReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> The Read query handler ReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Read query handler UpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> The Update command handler UpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Update command handler"
  },
  "api/Apizr.Mediation.Cruding.Handling.ReadAllQueryHandler-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.ReadAllQueryHandler-4.html",
    "title": "Class ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> | Apizr",
    "keywords": "Class ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> The ReadAll query handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TApiReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadAllQueryHandlerBase <TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, ReadAllQuery <TModelReadAllResult>, TModelReadAllResult, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> Implements IMediationQueryHandler < ReadAllQuery <TModelReadAllResult>, TModelReadAllResult> MediatR.IRequestHandler < ReadAllQuery <TModelReadAllResult>, TModelReadAllResult> Inherited Members ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, ReadAllQuery<TModelReadAllResult>, TModelReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ReadAllQuery<TModelReadAllResult>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiReadAllResult, IDictionary<String, Object>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult> : ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, ReadAllQuery<TModelReadAllResult>, TModelReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQueryHandler<ReadAllQuery<TModelReadAllResult>, TModelReadAllResult>, IRequestHandler<ReadAllQuery<TModelReadAllResult>, TModelReadAllResult> where TApiEntity : class Type Parameters Name Description TApiEntity TApiEntityKey The api entity type TModelReadAllResult The returned model result type TApiReadAllResult The received api result type Constructors ReadAllQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiReadAllResult, IDictionary<String, Object>>>) Declaration public ReadAllQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiReadAllResult, IDictionary<string, object>>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TApiReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >>> crudApiManager Methods Handle(ReadAllQuery<TModelReadAllResult>, CancellationToken) Handling the ReadAll query Declaration public override Task<TModelReadAllResult> Handle(ReadAllQuery<TModelReadAllResult> request, CancellationToken cancellationToken) Parameters Type Name Description ReadAllQuery <TModelReadAllResult> request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Overrides Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, Apizr.Mediation.Cruding.ReadAllQuery<TModelReadAllResult>, TModelReadAllResult, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Mediation.Cruding.ReadAllQuery<TModelReadAllResult>, System.Threading.CancellationToken) Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.ReadAllQueryHandler-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.ReadAllQueryHandler-5.html",
    "title": "Class ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> The ReadAll query handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadAllQueryHandlerBase <TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams, ReadAllQuery <TReadAllParams, TModelReadAllResult>, TModelReadAllResult, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> Implements IMediationQueryHandler < ReadAllQuery <TReadAllParams, TModelReadAllResult>, TModelReadAllResult> MediatR.IRequestHandler < ReadAllQuery <TReadAllParams, TModelReadAllResult>, TModelReadAllResult> Inherited Members ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams, ReadAllQuery<TReadAllParams, TModelReadAllResult>, TModelReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ReadAllQuery<TReadAllParams, TModelReadAllResult>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class ReadAllQueryHandler<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams> : ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams, ReadAllQuery<TReadAllParams, TModelReadAllResult>, TModelReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQueryHandler<ReadAllQuery<TReadAllParams, TModelReadAllResult>, TModelReadAllResult>, IRequestHandler<ReadAllQuery<TReadAllParams, TModelReadAllResult>, TModelReadAllResult> where TApiEntity : class Type Parameters Name Description TApiEntity TApiEntityKey The api entity type TModelReadAllResult The returned model result type TApiReadAllResult The received api result type TReadAllParams The query parameters type Constructors ReadAllQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>>) Declaration public ReadAllQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TApiReadAllResult, TReadAllParams>> crudApiManager Methods Handle(ReadAllQuery<TReadAllParams, TModelReadAllResult>, CancellationToken) Handling the ReadAll query Declaration public override Task<TModelReadAllResult> Handle(ReadAllQuery<TReadAllParams, TModelReadAllResult> request, CancellationToken cancellationToken) Parameters Type Name Description ReadAllQuery <TReadAllParams, TModelReadAllResult> request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Overrides Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelReadAllResult, TApiReadAllResult, TReadAllParams, Apizr.Mediation.Cruding.ReadAllQuery<TReadAllParams, TModelReadAllResult>, TModelReadAllResult, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Mediation.Cruding.ReadAllQuery<TReadAllParams, TModelReadAllResult>, System.Threading.CancellationToken) Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.ReadQueryHandler-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.ReadQueryHandler-4.html",
    "title": "Class ReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> The Read query handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > CrudRequestHandlerBase <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadQueryHandlerBase <TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, ReadQuery <TModelEntity>, TModelEntity, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationQueryHandler < ReadQuery <TModelEntity>, TModelEntity> MediatR.IRequestHandler < ReadQuery <TModelEntity>, TModelEntity> Inherited Members ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, ReadQuery<TModelEntity>, TModelEntity, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ReadQuery<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, Int32, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class ReadQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> : ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, ReadQuery<TModelEntity>, TModelEntity, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQueryHandler<ReadQuery<TModelEntity>, TModelEntity>, IRequestHandler<ReadQuery<TModelEntity>, TModelEntity> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params type Constructors ReadQueryHandler(IApizrManager<ICrudApi<TApiEntity, Int32, TReadAllResult, TReadAllParams>>) Declaration public ReadQueryHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(ReadQuery<TModelEntity>, CancellationToken) Handling the Read query Declaration public override Task<TModelEntity> Handle(ReadQuery<TModelEntity> request, CancellationToken cancellationToken) Parameters Type Name Description ReadQuery <TModelEntity> request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TModelEntity> Overrides Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, Apizr.Mediation.Cruding.ReadQuery<TModelEntity>, TModelEntity, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Mediation.Cruding.ReadQuery<TModelEntity>, System.Threading.CancellationToken) Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.ReadQueryHandler-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.ReadQueryHandler-5.html",
    "title": "Class ReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Read query handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadQueryHandlerBase <TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, ReadQuery <TModelEntity, TApiEntityKey>, TModelEntity, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationQueryHandler < ReadQuery <TModelEntity, TApiEntityKey>, TModelEntity> MediatR.IRequestHandler < ReadQuery <TModelEntity, TApiEntityKey>, TModelEntity> Inherited Members ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, ReadQuery<TModelEntity, TApiEntityKey>, TModelEntity, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ReadQuery<TModelEntity, TApiEntityKey>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class ReadQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, ReadQuery<TModelEntity, TApiEntityKey>, TModelEntity, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQueryHandler<ReadQuery<TModelEntity, TApiEntityKey>, TModelEntity>, IRequestHandler<ReadQuery<TModelEntity, TApiEntityKey>, TModelEntity> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params type Constructors ReadQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration public ReadQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(ReadQuery<TModelEntity, TApiEntityKey>, CancellationToken) Handling the Read query Declaration public override Task<TModelEntity> Handle(ReadQuery<TModelEntity, TApiEntityKey> request, CancellationToken cancellationToken) Parameters Type Name Description ReadQuery <TModelEntity, TApiEntityKey> request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TModelEntity> Overrides Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, Apizr.Mediation.Cruding.ReadQuery<TModelEntity, TApiEntityKey>, TModelEntity, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Mediation.Cruding.ReadQuery<TModelEntity, TApiEntityKey>, System.Threading.CancellationToken) Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.UpdateCommandHandler-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.UpdateCommandHandler-4.html",
    "title": "Class UpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class UpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> The Update command handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > CrudRequestHandlerBase <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams, IApizrRequestOptions , IApizrRequestOptionsBuilder > UpdateCommandHandlerBase <TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, UpdateCommand <TModelEntity>, IApizrRequestOptions , IApizrRequestOptionsBuilder > UpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler < UpdateCommand <TModelEntity>, MediatR.Unit > MediatR.IRequestHandler < UpdateCommand <TModelEntity>, MediatR.Unit > Inherited Members UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, UpdateCommand<TModelEntity>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(UpdateCommand<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, Int32, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class UpdateCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> : UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, UpdateCommand<TModelEntity>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<UpdateCommand<TModelEntity>, Unit>, IRequestHandler<UpdateCommand<TModelEntity>, Unit> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params type Constructors UpdateCommandHandler(IApizrManager<ICrudApi<TApiEntity, Int32, TReadAllResult, TReadAllParams>>) Declaration public UpdateCommandHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(UpdateCommand<TModelEntity>, CancellationToken) Handling the Update command Declaration public override Task<Unit> Handle(UpdateCommand<TModelEntity> request, CancellationToken cancellationToken) Parameters Type Name Description UpdateCommand <TModelEntity> request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < MediatR.Unit > Overrides Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, Apizr.Mediation.Cruding.UpdateCommand<TModelEntity>, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Mediation.Cruding.UpdateCommand<TModelEntity>, System.Threading.CancellationToken) Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Cruding.Handling.UpdateCommandHandler-5.html": {
    "href": "api/Apizr.Mediation.Cruding.Handling.UpdateCommandHandler-5.html",
    "title": "Class UpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class UpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Update command handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions , IApizrRequestOptionsBuilder > UpdateCommandHandlerBase <TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, UpdateCommand <TApiEntityKey, TModelEntity>, MediatR.Unit , IApizrRequestOptions , IApizrRequestOptionsBuilder > UpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler < UpdateCommand <TApiEntityKey, TModelEntity>, MediatR.Unit > MediatR.IRequestHandler < UpdateCommand <TApiEntityKey, TModelEntity>, MediatR.Unit > Inherited Members UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, UpdateCommand<TApiEntityKey, TModelEntity>, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(UpdateCommand<TApiEntityKey, TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class UpdateCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, UpdateCommand<TApiEntityKey, TModelEntity>, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<UpdateCommand<TApiEntityKey, TModelEntity>, Unit>, IRequestHandler<UpdateCommand<TApiEntityKey, TModelEntity>, Unit> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params type Constructors UpdateCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration public UpdateCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(UpdateCommand<TApiEntityKey, TModelEntity>, CancellationToken) Handling the Update command Declaration public override Task<Unit> Handle(UpdateCommand<TApiEntityKey, TModelEntity> request, CancellationToken cancellationToken) Parameters Type Name Description UpdateCommand <TApiEntityKey, TModelEntity> request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < MediatR.Unit > Overrides Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, Apizr.Mediation.Cruding.UpdateCommand<TApiEntityKey, TModelEntity>, MediatR.Unit, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Mediation.Cruding.UpdateCommand<TApiEntityKey, TModelEntity>, System.Threading.CancellationToken) Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Cruding.html": {
    "href": "api/Apizr.Mediation.Cruding.html",
    "title": "Namespace Apizr.Mediation.Cruding | Apizr",
    "keywords": "Namespace Apizr.Mediation.Cruding Classes CreateCommand<TModelData> The mediation Create command DeleteCommand<T> The mediation Delete command DeleteCommand<T, TKey> The mediation Delete command ReadAllQuery<TReadAllResult> The mediation ReadAll query ReadAllQuery<TReadAllParams, TReadAllResult> The mediation ReadAll query ReadQuery<TResultData> The mediation Read query ReadQuery<TResultData, TKey> The mediation Read query UpdateCommand<TRequestData> The mediation Update command UpdateCommand<TKey, TRequestData> The mediation Update command"
  },
  "api/Apizr.Mediation.Cruding.ReadAllQuery-1.html": {
    "href": "api/Apizr.Mediation.Cruding.ReadAllQuery-1.html",
    "title": "Class ReadAllQuery<TReadAllResult> | Apizr",
    "keywords": "Class ReadAllQuery<TReadAllResult> The mediation ReadAll query Inheritance System.Object RequestBase <TReadAllResult, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationQueryBase <TReadAllResult, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadAllQueryBase < System.Collections.Generic.IDictionary < System.String , System.Object >, TReadAllResult, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadAllQueryBase <TReadAllResult, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadAllQuery<TReadAllResult> Implements IMediationQuery <TReadAllResult> MediatR.IRequest <TReadAllResult> MediatR.IBaseRequest Inherited Members ReadAllQueryBase<IDictionary<String, Object>, TReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Parameters RequestBase<TReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding Assembly : Apizr.Integrations.MediatR.dll Syntax public class ReadAllQuery<TReadAllResult> : ReadAllQueryBase<TReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<TReadAllResult>, IRequest<TReadAllResult>, IBaseRequest Type Parameters Name Description TReadAllResult The api result type Constructors ReadAllQuery(Action<IApizrRequestOptionsBuilder>) The mediation ReadAll query constructor Declaration public ReadAllQuery(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request ReadAllQuery(IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) The mediation ReadAll query constructor Declaration public ReadAllQuery(IDictionary<string, object> parameters, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > parameters The query parameters to send System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Cruding.ReadAllQuery-2.html": {
    "href": "api/Apizr.Mediation.Cruding.ReadAllQuery-2.html",
    "title": "Class ReadAllQuery<TReadAllParams, TReadAllResult> | Apizr",
    "keywords": "Class ReadAllQuery<TReadAllParams, TReadAllResult> The mediation ReadAll query Inheritance System.Object RequestBase <TReadAllResult, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationQueryBase <TReadAllResult, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadAllQueryBase <TReadAllParams, TReadAllResult, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadAllQuery<TReadAllParams, TReadAllResult> Implements IMediationQuery <TReadAllResult> MediatR.IRequest <TReadAllResult> MediatR.IBaseRequest Inherited Members ReadAllQueryBase<TReadAllParams, TReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Parameters RequestBase<TReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding Assembly : Apizr.Integrations.MediatR.dll Syntax public class ReadAllQuery<TReadAllParams, TReadAllResult> : ReadAllQueryBase<TReadAllParams, TReadAllResult, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<TReadAllResult>, IRequest<TReadAllResult>, IBaseRequest Type Parameters Name Description TReadAllParams The ReadAll parameters type TReadAllResult The api result type Constructors ReadAllQuery(TReadAllParams, Action<IApizrRequestOptionsBuilder>) The mediation ReadAll query constructor Declaration public ReadAllQuery(TReadAllParams parameters, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TReadAllParams parameters The query parameters to send System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request ReadAllQuery(Action<IApizrRequestOptionsBuilder>) The mediation ReadAll query constructor Declaration public ReadAllQuery(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Cruding.ReadQuery-1.html": {
    "href": "api/Apizr.Mediation.Cruding.ReadQuery-1.html",
    "title": "Class ReadQuery<TResultData> | Apizr",
    "keywords": "Class ReadQuery<TResultData> The mediation Read query Inheritance System.Object RequestBase <TResultData, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationQueryBase <TResultData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadQueryBase <TResultData, System.Int32 , IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadQueryBase <TResultData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadQuery<TResultData> Implements IMediationQuery <TResultData> MediatR.IRequest <TResultData> MediatR.IBaseRequest Inherited Members ReadQueryBase<TResultData, Int32, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key RequestBase<TResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding Assembly : Apizr.Integrations.MediatR.dll Syntax public class ReadQuery<TResultData> : ReadQueryBase<TResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<TResultData>, IRequest<TResultData>, IBaseRequest Type Parameters Name Description TResultData The result entity type Constructors ReadQuery(Int32, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor Declaration public ReadQuery(int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Int32 key The entity's crud key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Cruding.ReadQuery-2.html": {
    "href": "api/Apizr.Mediation.Cruding.ReadQuery-2.html",
    "title": "Class ReadQuery<TResultData, TKey> | Apizr",
    "keywords": "Class ReadQuery<TResultData, TKey> The mediation Read query Inheritance System.Object RequestBase <TResultData, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationQueryBase <TResultData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadQueryBase <TResultData, TKey, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadQuery<TResultData, TKey> Implements IMediationQuery <TResultData> MediatR.IRequest <TResultData> MediatR.IBaseRequest Inherited Members ReadQueryBase<TResultData, TKey, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key RequestBase<TResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding Assembly : Apizr.Integrations.MediatR.dll Syntax public class ReadQuery<TResultData, TKey> : ReadQueryBase<TResultData, TKey, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<TResultData>, IRequest<TResultData>, IBaseRequest Type Parameters Name Description TResultData The result entity type TKey The entity's crud key type Constructors ReadQuery(TKey, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor Declaration public ReadQuery(TKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TKey key The entity's crud key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Cruding.Sending.ApizrCrudMediator.html": {
    "href": "api/Apizr.Mediation.Cruding.Sending.ApizrCrudMediator.html",
    "title": "Class ApizrCrudMediator | Apizr",
    "keywords": "Class ApizrCrudMediator Apizr mediator dedicated to cruding Inheritance System.Object ApizrMediatorBase ApizrCrudMediator Implements IApizrCrudMediator IApizrCrudMediatorBase IApizrMediatorBase Inherited Members ApizrMediatorBase.CreateRequestOptionsBuilder(Action<IApizrRequestOptionsBuilder>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Sending Assembly : Apizr.Integrations.MediatR.dll Syntax public class ApizrCrudMediator : ApizrMediatorBase, IApizrCrudMediator, IApizrCrudMediatorBase, IApizrMediatorBase Constructors ApizrCrudMediator(IMediator) Declaration public ApizrCrudMediator(IMediator mediator) Parameters Type Name Description MediatR.IMediator mediator Methods SendCreateCommand<TApiEntity>(TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a CreateCommand<TModelData> to Apizr using MediatR Declaration public Task<TApiEntity> SendCreateCommand<TApiEntity>(TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntity entity The entity to create System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Declaration public Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TModelEntity entity The entity to create System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Declaration public Task SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadAllQuery<TReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration public Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration public Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllQuery<TModelReadAllResult, TReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TReadAllResult SendReadAllQuery<TModelReadAllResult, TReadAllResult, TReadAllParams>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TReadAllResult TReadAllParams The ReadAll parameters type SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration public Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration public Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration public Task SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity entity The entity to update System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration public Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity entity The entity to update System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type Implements IApizrCrudMediator IApizrCrudMediatorBase IApizrMediatorBase Extension Methods ApizrCrudMediatorExtensions.SendCreateCommand<TApiEntity>(IApizrCrudMediator, TApiEntity, Action<Exception>) ApizrCrudMediatorExtensions.SendCreateCommand<TApiEntity>(IApizrCrudMediator, TApiEntity, Context, Action<Exception>) ApizrCrudMediatorExtensions.SendCreateCommand<TApiEntity>(IApizrCrudMediator, TApiEntity, CancellationToken, Action<Exception>) ApizrCrudMediatorExtensions.SendCreateCommand<TApiEntity>(IApizrCrudMediator, TApiEntity, Context, CancellationToken, Action<Exception>) ApizrCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity>(IApizrCrudMediator, TModelEntity, Action<Exception>) ApizrCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity>(IApizrCrudMediator, TModelEntity, Context, Action<Exception>) ApizrCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity>(IApizrCrudMediator, TModelEntity, CancellationToken, Action<Exception>) ApizrCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity>(IApizrCrudMediator, TModelEntity, Context, CancellationToken, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Int32, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Int32, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Int32, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Int32, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Int32, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Int32, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TApiEntity, Action<Exception>) ApizrCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TApiEntity, Context, Action<Exception>) ApizrCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TApiEntity, CancellationToken, Action<Exception>) ApizrCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TApiEntity, Context, CancellationToken, Action<Exception>) ApizrCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TModelEntity, Action<Exception>) ApizrCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TModelEntity, Context, Action<Exception>) ApizrCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TModelEntity, CancellationToken, Action<Exception>) ApizrCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TModelEntity, Context, CancellationToken, Action<Exception>) ApizrCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Action<Exception>) ApizrCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, Action<Exception>) ApizrCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, CancellationToken, Action<Exception>) ApizrCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, CancellationToken, Action<Exception>)"
  },
  "api/Apizr.Mediation.Cruding.Sending.ApizrCrudMediator-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Sending.ApizrCrudMediator-4.html",
    "title": "Class ApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Apizr mediator dedicated to cruding Inheritance System.Object ApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> IApizrCrudMediatorBase IApizrMediatorBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding.Sending Assembly : Apizr.Integrations.MediatR.dll Syntax public class ApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, IApizrCrudMediatorBase, IApizrMediatorBase where TApiEntity : class Type Parameters Name Description TApiEntity TApiEntityKey TReadAllResult TReadAllParams Constructors ApizrCrudMediator(IApizrCrudMediator) Declaration public ApizrCrudMediator(IApizrCrudMediator apizrMediator) Parameters Type Name Description IApizrCrudMediator apizrMediator Methods SendCreateCommand(TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a CreateCommand<TModelData> to Apizr using MediatR Declaration public Task<TApiEntity> SendCreateCommand(TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntity entity The entity to create System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendCreateCommand<TModelEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Declaration public Task<TModelEntity> SendCreateCommand<TModelEntity>(TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TModelEntity entity The entity to create System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendDeleteCommand(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Declaration public Task SendDeleteCommand(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task SendReadAllQuery(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration public Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration public Task<TReadAllResult> SendReadAllQuery(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery<TModelReadAllResult>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult SendReadAllQuery<TModelReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Declaration public Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult SendReadQuery(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration public Task<TApiEntity> SendReadQuery(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendReadQuery<TModelEntity>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration public Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendUpdateCommand(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration public Task SendUpdateCommand(TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity entity The entity to update System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration public Task SendUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity entity The entity to update System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity Implements IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> IApizrCrudMediatorBase IApizrMediatorBase Extension Methods ApizrTypedCrudMediatorExtensions.SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Context, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, CancellationToken, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Context, CancellationToken, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Context, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, CancellationToken, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Context, CancellationToken, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Context, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, CancellationToken, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Context, CancellationToken, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Context, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, CancellationToken, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Context, CancellationToken, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Action<Exception>)"
  },
  "api/Apizr.Mediation.Cruding.Sending.html": {
    "href": "api/Apizr.Mediation.Cruding.Sending.html",
    "title": "Namespace Apizr.Mediation.Cruding.Sending | Apizr",
    "keywords": "Namespace Apizr.Mediation.Cruding.Sending Classes ApizrCrudMediator Apizr mediator dedicated to cruding ApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Apizr mediator dedicated to cruding Interfaces IApizrCrudMediator Apizr mediator dedicated to cruding IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Apizr mediator dedicated to TApiEntity cruding, getting all shorter IApizrCrudMediatorBase Apizr base mediator dedicated to cruding"
  },
  "api/Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.html": {
    "href": "api/Apizr.Mediation.Cruding.Sending.IApizrCrudMediator.html",
    "title": "Interface IApizrCrudMediator | Apizr",
    "keywords": "Interface IApizrCrudMediator Apizr mediator dedicated to cruding Namespace : Apizr.Mediation.Cruding.Sending Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IApizrCrudMediator : IApizrCrudMediatorBase, IApizrMediatorBase Methods SendCreateCommand<TApiEntity>(TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a CreateCommand<TModelData> to Apizr using MediatR Declaration Task<TApiEntity> SendCreateCommand<TApiEntity>(TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntity entity The entity to create System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity>(TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TModelEntity entity The entity to create System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Declaration Task SendDeleteCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadAllQuery<TReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Declaration Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration Task SendUpdateCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity entity The entity to update System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity entity The entity to update System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type Extension Methods ApizrCrudMediatorExtensions.SendCreateCommand<TApiEntity>(IApizrCrudMediator, TApiEntity, Action<Exception>) ApizrCrudMediatorExtensions.SendCreateCommand<TApiEntity>(IApizrCrudMediator, TApiEntity, Context, Action<Exception>) ApizrCrudMediatorExtensions.SendCreateCommand<TApiEntity>(IApizrCrudMediator, TApiEntity, CancellationToken, Action<Exception>) ApizrCrudMediatorExtensions.SendCreateCommand<TApiEntity>(IApizrCrudMediator, TApiEntity, Context, CancellationToken, Action<Exception>) ApizrCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity>(IApizrCrudMediator, TModelEntity, Action<Exception>) ApizrCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity>(IApizrCrudMediator, TModelEntity, Context, Action<Exception>) ApizrCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity>(IApizrCrudMediator, TModelEntity, CancellationToken, Action<Exception>) ApizrCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity>(IApizrCrudMediator, TModelEntity, Context, CancellationToken, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Int32, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Int32, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Int32, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Int32, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Int32, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Int32, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Context, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TApiEntity, Action<Exception>) ApizrCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TApiEntity, Context, Action<Exception>) ApizrCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TApiEntity, CancellationToken, Action<Exception>) ApizrCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TApiEntity, Context, CancellationToken, Action<Exception>) ApizrCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TModelEntity, Action<Exception>) ApizrCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TModelEntity, Context, Action<Exception>) ApizrCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TModelEntity, CancellationToken, Action<Exception>) ApizrCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TModelEntity, Context, CancellationToken, Action<Exception>) ApizrCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Action<Exception>) ApizrCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, Action<Exception>) ApizrCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, CancellationToken, Action<Exception>) ApizrCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, CancellationToken, Action<Exception>)"
  },
  "api/Apizr.Mediation.Cruding.Sending.IApizrCrudMediator-4.html": {
    "href": "api/Apizr.Mediation.Cruding.Sending.IApizrCrudMediator-4.html",
    "title": "Interface IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Interface IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Apizr mediator dedicated to TApiEntity cruding, getting all shorter Namespace : Apizr.Mediation.Cruding.Sending Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IApizrCrudMediator<TApiEntity, in TApiEntityKey, TReadAllResult, in TReadAllParams> : IApizrCrudMediatorBase, IApizrMediatorBase where TApiEntity : class Type Parameters Name Description TApiEntity TApiEntityKey TReadAllResult TReadAllParams Methods SendCreateCommand(TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a CreateCommand<TModelData> to Apizr using MediatR Declaration Task<TApiEntity> SendCreateCommand(TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntity entity The entity to create System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendCreateCommand<TModelEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntity> SendCreateCommand<TModelEntity>(TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TModelEntity entity The entity to create System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendDeleteCommand(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Declaration Task SendDeleteCommand(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task SendReadAllQuery(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration Task<TReadAllResult> SendReadAllQuery(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery(Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration Task<TReadAllResult> SendReadAllQuery(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelEntityReadAllResult> Type Parameters Name Description TModelEntityReadAllResult SendReadAllQuery<TModelEntityReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Declaration Task<TModelEntityReadAllResult> SendReadAllQuery<TModelEntityReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelEntityReadAllResult> Type Parameters Name Description TModelEntityReadAllResult The mapped result SendReadQuery(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration Task<TApiEntity> SendReadQuery(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiEntity> SendReadQuery<TModelEntity>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration Task<TModelEntity> SendReadQuery<TModelEntity>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity SendUpdateCommand(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration Task SendUpdateCommand(TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity entity The entity to update System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task SendUpdateCommand<TModelEntity>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration Task SendUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity entity The entity to update System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity Extension Methods ApizrTypedCrudMediatorExtensions.SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Context, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, CancellationToken, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Context, CancellationToken, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Context, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, CancellationToken, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Context, CancellationToken, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Context, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, CancellationToken, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Context, CancellationToken, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Context, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, CancellationToken, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Context, CancellationToken, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Action<Exception>) ApizrTypedCrudMediatorExtensions.SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Action<Exception>)"
  },
  "api/Apizr.Mediation.Cruding.Sending.IApizrCrudMediatorBase.html": {
    "href": "api/Apizr.Mediation.Cruding.Sending.IApizrCrudMediatorBase.html",
    "title": "Interface IApizrCrudMediatorBase | Apizr",
    "keywords": "Interface IApizrCrudMediatorBase Apizr base mediator dedicated to cruding Namespace : Apizr.Mediation.Cruding.Sending Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IApizrCrudMediatorBase : IApizrMediatorBase"
  },
  "api/Apizr.Mediation.Cruding.UpdateCommand-1.html": {
    "href": "api/Apizr.Mediation.Cruding.UpdateCommand-1.html",
    "title": "Class UpdateCommand<TRequestData> | Apizr",
    "keywords": "Class UpdateCommand<TRequestData> The mediation Update command Inheritance System.Object RequestBase < MediatR.Unit , IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationCommandBase <TRequestData, MediatR.Unit , IApizrRequestOptions , IApizrRequestOptionsBuilder > UpdateCommandBase < System.Int32 , TRequestData, MediatR.Unit , IApizrRequestOptions , IApizrRequestOptionsBuilder > UpdateCommandBase <TRequestData, MediatR.Unit , IApizrRequestOptions , IApizrRequestOptionsBuilder > UpdateCommandBase <TRequestData, IApizrRequestOptions , IApizrRequestOptionsBuilder > UpdateCommand<TRequestData> Implements IMediationCommand <TRequestData, MediatR.Unit > MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members UpdateCommandBase<Int32, TRequestData, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key UpdateCommandBase<Int32, TRequestData, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.RequestData RequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding Assembly : Apizr.Integrations.MediatR.dll Syntax public class UpdateCommand<TRequestData> : UpdateCommandBase<TRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<TRequestData, Unit>, IRequest<Unit>, IBaseRequest Type Parameters Name Description TRequestData The request data type Constructors UpdateCommand(Int32, TRequestData, Action<IApizrRequestOptionsBuilder>) The mediation Update command constructor Declaration public UpdateCommand(int key, TRequestData requestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Int32 key The entity's crud key TRequestData requestData The request data to send System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Cruding.UpdateCommand-2.html": {
    "href": "api/Apizr.Mediation.Cruding.UpdateCommand-2.html",
    "title": "Class UpdateCommand<TKey, TRequestData> | Apizr",
    "keywords": "Class UpdateCommand<TKey, TRequestData> The mediation Update command Inheritance System.Object RequestBase < MediatR.Unit , IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationCommandBase <TRequestData, MediatR.Unit , IApizrRequestOptions , IApizrRequestOptionsBuilder > UpdateCommandBase <TKey, TRequestData, MediatR.Unit , IApizrRequestOptions , IApizrRequestOptionsBuilder > UpdateCommand<TKey, TRequestData> Implements IMediationCommand <TRequestData, MediatR.Unit > MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members UpdateCommandBase<TKey, TRequestData, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key UpdateCommandBase<TKey, TRequestData, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.RequestData RequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Cruding Assembly : Apizr.Integrations.MediatR.dll Syntax public class UpdateCommand<TKey, TRequestData> : UpdateCommandBase<TKey, TRequestData, Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<TRequestData, Unit>, IRequest<Unit>, IBaseRequest Type Parameters Name Description TKey The entity's crud key type TRequestData The request data type Constructors UpdateCommand(TKey, TRequestData, Action<IApizrRequestOptionsBuilder>) The mediation Update command constructor Declaration public UpdateCommand(TKey key, TRequestData requestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TKey key The entity's crud key TRequestData requestData The request data to send System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.html": {
    "href": "api/Apizr.Mediation.Extending.ApizrCrudMediatorExtensions.html",
    "title": "Class ApizrCrudMediatorExtensions | Apizr",
    "keywords": "Class ApizrCrudMediatorExtensions Apizr mediator dedicated to cruding Inheritance System.Object ApizrCrudMediatorExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Extending Assembly : Apizr.Integrations.MediatR.dll Syntax public static class ApizrCrudMediatorExtensions Methods SendCreateCommand<TApiEntity>(IApizrCrudMediator, TApiEntity, Context, Action<Exception>) Send a CreateCommand<TModelData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendCreateCommand<TApiEntity>(this IApizrCrudMediator mediator, TApiEntity entity, Context context, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntity entity The entity to create Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type SendCreateCommand<TApiEntity>(IApizrCrudMediator, TApiEntity, Context, CancellationToken, Action<Exception>) Send a CreateCommand<TModelData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendCreateCommand<TApiEntity>(this IApizrCrudMediator mediator, TApiEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntity entity The entity to create Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type SendCreateCommand<TApiEntity>(IApizrCrudMediator, TApiEntity, Action<Exception>) Send a CreateCommand<TModelData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendCreateCommand<TApiEntity>(this IApizrCrudMediator mediator, TApiEntity entity, Action<Exception> onException) Parameters Type Name Description IApizrCrudMediator mediator TApiEntity entity The entity to create System.Action < System.Exception > onException Handle exception Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type SendCreateCommand<TApiEntity>(IApizrCrudMediator, TApiEntity, CancellationToken, Action<Exception>) Send a CreateCommand<TModelData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendCreateCommand<TApiEntity>(this IApizrCrudMediator mediator, TApiEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntity entity The entity to create System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type SendCreateCommand<TModelEntity, TApiEntity>(IApizrCrudMediator, TModelEntity, Context, Action<Exception>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity>(this IApizrCrudMediator mediator, TModelEntity entity, Context context, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TModelEntity entity The entity to create Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendCreateCommand<TModelEntity, TApiEntity>(IApizrCrudMediator, TModelEntity, Context, CancellationToken, Action<Exception>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity>(this IApizrCrudMediator mediator, TModelEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TModelEntity entity The entity to create Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendCreateCommand<TModelEntity, TApiEntity>(IApizrCrudMediator, TModelEntity, Action<Exception>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity>(this IApizrCrudMediator mediator, TModelEntity entity, Action<Exception> onException) Parameters Type Name Description IApizrCrudMediator mediator TModelEntity entity The entity to create System.Action < System.Exception > onException Handle exception Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendCreateCommand<TModelEntity, TApiEntity>(IApizrCrudMediator, TModelEntity, CancellationToken, Action<Exception>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity>(this IApizrCrudMediator mediator, TModelEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TModelEntity entity The entity to create System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendDeleteCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, Action<Exception>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendDeleteCommand<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, Context context, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendDeleteCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, CancellationToken, Action<Exception>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendDeleteCommand<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendDeleteCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Action<Exception>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendDeleteCommand<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, Action<Exception> onException) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key System.Action < System.Exception > onException Handle exception Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendDeleteCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, CancellationToken, Action<Exception>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendDeleteCommand<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Context, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(this IApizrCrudMediator mediator, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(this IApizrCrudMediator mediator, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(this IApizrCrudMediator mediator, Action<Exception> onException) Parameters Type Name Description IApizrCrudMediator mediator System.Action < System.Exception > onException Handle exception and return cached result Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(this IApizrCrudMediator mediator, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator System.Boolean clearCache System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Int32, Context, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(this IApizrCrudMediator mediator, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(this IApizrCrudMediator mediator, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Int32, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(this IApizrCrudMediator mediator, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, Int32, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(this IApizrCrudMediator mediator, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllQuery<TReadAllResult>(IApizrCrudMediator, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult>(this IApizrCrudMediator mediator, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Context, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, Action<Exception> onException) Parameters Type Name Description IApizrCrudMediator mediator TReadAllParams readAllParams The read all filters System.Action < System.Exception > onException Handle exception and return cached result Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TReadAllParams readAllParams The read all filters System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Context, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllQuery<TReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TReadAllParams readAllParams The read all filters System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Context, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudMediator mediator, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Context, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudMediator mediator, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudMediator mediator, Action<Exception> onException) Parameters Type Name Description IApizrCrudMediator mediator System.Action < System.Exception > onException Handle exception and return cached result Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudMediator mediator, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Int32, Context, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudMediator mediator, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudMediator mediator, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Int32, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudMediator mediator, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, Int32, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudMediator mediator, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudMediator, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudMediator mediator, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Context, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, Action<Exception> onException) Parameters Type Name Description IApizrCrudMediator mediator TReadAllParams readAllParams The read all filters System.Action < System.Exception > onException Handle exception and return cached result Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TReadAllParams readAllParams The read all filters System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Context, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudMediator, TReadAllParams, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudMediator mediator, TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TReadAllParams readAllParams The read all filters System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, Action<Exception> onException) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key System.Action < System.Exception > onException Handle exception and return cached result Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Context, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadQuery<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, Action<Exception> onException) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key System.Action < System.Exception > onException Handle exception and return cached result Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Context, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, int priority, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TApiEntity, Context, Action<Exception>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendUpdateCommand<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, TApiEntity entity, Context context, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key TApiEntity entity The entity to update Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TApiEntity, Context, CancellationToken, Action<Exception>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendUpdateCommand<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, TApiEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key TApiEntity entity The entity to update Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TApiEntity, Action<Exception>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendUpdateCommand<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, TApiEntity entity, Action<Exception> onException) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key TApiEntity entity The entity to update System.Action < System.Exception > onException Handle exception Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateCommand<TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TApiEntity, CancellationToken, Action<Exception>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendUpdateCommand<TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, TApiEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key TApiEntity entity The entity to update System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TModelEntity, Context, Action<Exception>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, TModelEntity entity, Context context, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key TModelEntity entity The entity to update Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TModelEntity, Context, CancellationToken, Action<Exception>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, TModelEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key TModelEntity entity The entity to update Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TModelEntity, Action<Exception>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, TModelEntity entity, Action<Exception> onException) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key TModelEntity entity The entity to update System.Action < System.Exception > onException Handle exception Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudMediator, TApiEntityKey, TModelEntity, CancellationToken, Action<Exception>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudMediator mediator, TApiEntityKey key, TModelEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) Parameters Type Name Description IApizrCrudMediator mediator TApiEntityKey key The entity key TModelEntity entity The entity to update System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type"
  },
  "api/Apizr.Mediation.Extending.ApizrMediatorExtensions.html": {
    "href": "api/Apizr.Mediation.Extending.ApizrMediatorExtensions.html",
    "title": "Class ApizrMediatorExtensions | Apizr",
    "keywords": "Class ApizrMediatorExtensions Apizr mediator extensions to send request using MediatR by calling expression Inheritance System.Object ApizrMediatorExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Extending Assembly : Apizr.Integrations.MediatR.dll Syntax public static class ApizrMediatorExtensions Methods SendFor<TWebApi>(IApizrMediator, Expression<Func<TWebApi, Task>>, Action<Exception>) Send an api call to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendFor<TWebApi>(this IApizrMediator mediator, Expression<Func<TWebApi, Task>> executeApiMethod, Action<Exception> onException) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Action < System.Exception > onException Handle exception Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type SendFor<TWebApi>(IApizrMediator, Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendFor<TWebApi>(this IApizrMediator mediator, Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context = null, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type SendFor<TWebApi>(IApizrMediator, Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendFor<TWebApi>(this IApizrMediator mediator, Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type SendFor<TWebApi>(IApizrMediator, Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken, Action<Exception>) Send an api call to Apizr using MediatR with a cancellation token Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendFor<TWebApi>(this IApizrMediator mediator, Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type SendFor<TWebApi, TApiData>(IApizrMediator, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>) Send an api call to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiData> SendFor<TWebApi, TApiData>(this IApizrMediator mediator, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<Exception> onException) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < System.Exception > onException Handle exception and return cached result Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api type TApiData The api result type SendFor<TWebApi, TApiData>(IApizrMediator, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Send an api call to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiData> SendFor<TWebApi, TApiData>(this IApizrMediator mediator, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api type TApiData The api result type SendFor<TWebApi, TApiData>(IApizrMediator, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiData> SendFor<TWebApi, TApiData>(this IApizrMediator mediator, Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api type TApiData The api response SendFor<TWebApi, TApiData>(IApizrMediator, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiData> SendFor<TWebApi, TApiData>(this IApizrMediator mediator, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api type TApiData The api response SendFor<TWebApi, TApiData>(IApizrMediator, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a cancellation token Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiData> SendFor<TWebApi, TApiData>(this IApizrMediator mediator, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api type TApiData The api response SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator mediator, Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<Exception> onException) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator mediator, Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<Exception>) Send an api call to Apizr using MediatR with mapped request Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator mediator, Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<Exception> onException) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < System.Exception > onException Handle exception Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>) Send an api call to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator mediator, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<Exception> onException) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < System.Exception > onException Handle exception and return cached result Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Send an api call to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator mediator, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator mediator, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>) Send an api call to Apizr using MediatR with mapped request and a Polly Context Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator mediator, Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator mediator, Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator mediator, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken token A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken, Action<Exception>) Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator mediator, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken token A cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator mediator, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator mediator, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Threading.CancellationToken token A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken, Action<Exception>) Send an api call to Apizr using MediatR with mapped request and a cancellation token Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator mediator, Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Threading.CancellationToken token A cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a cancellation token and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator mediator, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrMediator mediator, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<Exception> onException) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Action < System.Exception > onException Handle exception and return cached result Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrMediator mediator, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrMediator mediator, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrMediator mediator, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrMediator mediator, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from"
  },
  "api/Apizr.Mediation.Extending.ApizrMediatorFileTransferExtensions.html": {
    "href": "api/Apizr.Mediation.Extending.ApizrMediatorFileTransferExtensions.html",
    "title": "Class ApizrMediatorFileTransferExtensions | Apizr",
    "keywords": "Class ApizrMediatorFileTransferExtensions Inheritance System.Object ApizrMediatorFileTransferExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Extending Assembly : Apizr.Integrations.FileTransfer.MediatR.dll Syntax public static class ApizrMediatorFileTransferExtensions Methods SendDownloadQuery(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for IDownloadApi Declaration public static Task<FileInfo> SendDownloadQuery(this IApizrMediator apizrMediator, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrMediator apizrMediator The extended mediator System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > SendDownloadQuery(IApizrMediator, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for IDownloadApi with a dictionary query parameters type Declaration public static Task<FileInfo> SendDownloadQuery(this IApizrMediator apizrMediator, FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrMediator apizrMediator The extended mediator System.IO.FileInfo fileInfo Some information about the file to download System.Collections.Generic.IDictionary < System.String , System.Object > downloadParams Some custom query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > SendDownloadQueryFor<TDownloadApi>(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for TDownloadApi Declaration public static Task<FileInfo> SendDownloadQueryFor<TDownloadApi>(this IApizrMediator apizrMediator, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi Parameters Type Name Description IApizrMediator apizrMediator The extended mediator System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > Type Parameters Name Description TDownloadApi The download api type SendDownloadQueryFor<TDownloadApi>(IApizrMediator, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for TDownloadApi with a dictionary query parameters type Declaration public static Task<FileInfo> SendDownloadQueryFor<TDownloadApi>(this IApizrMediator apizrMediator, FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi Parameters Type Name Description IApizrMediator apizrMediator The extended mediator System.IO.FileInfo fileInfo Some information about the file to download System.Collections.Generic.IDictionary < System.String , System.Object > downloadParams Some custom query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > Type Parameters Name Description TDownloadApi The download api type SendDownloadQueryFor<TDownloadApi, TDownloadParams>(IApizrMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for TDownloadApi with a custom query parameters type Declaration public static Task<FileInfo> SendDownloadQueryFor<TDownloadApi, TDownloadParams>(this IApizrMediator apizrMediator, FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters Type Name Description IApizrMediator apizrMediator The extended mediator System.IO.FileInfo fileInfo Some information about the file to download TDownloadParams downloadParams Some custom query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > Type Parameters Name Description TDownloadApi The download api type TDownloadParams The query parameters type SendDownloadQueryFor<TDownloadApi, TDownloadParams>(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for TDownloadApi Declaration public static Task<FileInfo> SendDownloadQueryFor<TDownloadApi, TDownloadParams>(this IApizrMediator apizrMediator, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters Type Name Description IApizrMediator apizrMediator The extended mediator System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > Type Parameters Name Description TDownloadApi The download api type TDownloadParams The query parameters type SendDownloadWithQuery<TDownloadParams>(IApizrMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR with TDownloadParams Declaration public static Task<FileInfo> SendDownloadWithQuery<TDownloadParams>(this IApizrMediator apizrMediator, FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrMediator apizrMediator The extended mediator System.IO.FileInfo fileInfo Some information about the file to download TDownloadParams downloadParams Some custom query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > Type Parameters Name Description TDownloadParams The query parameters type SendDownloadWithQuery<TDownloadParams>(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR with TDownloadParams Declaration public static Task<FileInfo> SendDownloadWithQuery<TDownloadParams>(this IApizrMediator apizrMediator, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrMediator apizrMediator The extended mediator System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > Type Parameters Name Description TDownloadParams The query parameters type SendUploadCommand(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for IUploadApi from file bytes data Declaration public static Task SendUploadCommand(this IApizrMediator apizrMediator, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrMediator apizrMediator The extended mediator Refit.ByteArrayPart byteArrayPart The file bytes data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task SendUploadCommand(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for IUploadApi from file info data Declaration public static Task SendUploadCommand(this IApizrMediator apizrMediator, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrMediator apizrMediator The extended mediator Refit.FileInfoPart fileInfoPart The file info data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task SendUploadCommand(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for IUploadApi from file stream data Declaration public static Task SendUploadCommand(this IApizrMediator apizrMediator, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrMediator apizrMediator The extended mediator Refit.StreamPart streamPart The file stream data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task SendUploadCommandFor<TUploadApi>(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file bytes data Declaration public static Task SendUploadCommandFor<TUploadApi>(this IApizrMediator apizrMediator, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi Parameters Type Name Description IApizrMediator apizrMediator The extended mediator Refit.ByteArrayPart byteArrayPart The file bytes data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TUploadApi The upload api type SendUploadCommandFor<TUploadApi>(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file info data Declaration public static Task SendUploadCommandFor<TUploadApi>(this IApizrMediator apizrMediator, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi Parameters Type Name Description IApizrMediator apizrMediator The extended mediator Refit.FileInfoPart fileInfoPart The file info data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TUploadApi The upload api type SendUploadCommandFor<TUploadApi>(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file stream data Declaration public static Task SendUploadCommandFor<TUploadApi>(this IApizrMediator apizrMediator, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi Parameters Type Name Description IApizrMediator apizrMediator The extended mediator Refit.StreamPart streamPart The file stream data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TUploadApi The upload api type SendUploadCommandFor<TUploadApi, TUploadApiResultData>(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file bytes data Declaration public static Task<TUploadApiResultData> SendUploadCommandFor<TUploadApi, TUploadApiResultData>(this IApizrMediator apizrMediator, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters Type Name Description IApizrMediator apizrMediator The extended mediator Refit.ByteArrayPart byteArrayPart The file bytes data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> Type Parameters Name Description TUploadApi The upload api type TUploadApiResultData The upload api result data type SendUploadCommandFor<TUploadApi, TUploadApiResultData>(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file info data Declaration public static Task<TUploadApiResultData> SendUploadCommandFor<TUploadApi, TUploadApiResultData>(this IApizrMediator apizrMediator, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters Type Name Description IApizrMediator apizrMediator The extended mediator Refit.FileInfoPart fileInfoPart The file info data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> Type Parameters Name Description TUploadApi The upload api type TUploadApiResultData The upload api result data type SendUploadCommandFor<TUploadApi, TUploadApiResultData>(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file stream data Declaration public static Task<TUploadApiResultData> SendUploadCommandFor<TUploadApi, TUploadApiResultData>(this IApizrMediator apizrMediator, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters Type Name Description IApizrMediator apizrMediator The extended mediator Refit.StreamPart streamPart The file stream data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> Type Parameters Name Description TUploadApi The upload api type TUploadApiResultData The upload api result data type SendUploadWithCommand<TUploadApiResultData>(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR with TUploadApiResultData from file bytes data Declaration public static Task<TUploadApiResultData> SendUploadWithCommand<TUploadApiResultData>(this IApizrMediator apizrMediator, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrMediator apizrMediator The extended mediator Refit.ByteArrayPart byteArrayPart The file bytes data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> Type Parameters Name Description TUploadApiResultData The upload api result data type SendUploadWithCommand<TUploadApiResultData>(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR with TUploadApiResultData from file info data Declaration public static Task<TUploadApiResultData> SendUploadWithCommand<TUploadApiResultData>(this IApizrMediator apizrMediator, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrMediator apizrMediator The extended mediator Refit.FileInfoPart fileInfoPart The file info data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> Type Parameters Name Description TUploadApiResultData The upload api result data type SendUploadWithCommand<TUploadApiResultData>(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR with TUploadApiResultData from file stream data Declaration public static Task<TUploadApiResultData> SendUploadWithCommand<TUploadApiResultData>(this IApizrMediator apizrMediator, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrMediator apizrMediator The extended mediator Refit.StreamPart streamPart The file stream data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> Type Parameters Name Description TUploadApiResultData The upload api result data type"
  },
  "api/Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.html": {
    "href": "api/Apizr.Mediation.Extending.ApizrTypedCrudMediatorExtensions.html",
    "title": "Class ApizrTypedCrudMediatorExtensions | Apizr",
    "keywords": "Class ApizrTypedCrudMediatorExtensions Inheritance System.Object ApizrTypedCrudMediatorExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Extending Assembly : Apizr.Integrations.MediatR.dll Syntax public static class ApizrTypedCrudMediatorExtensions Methods SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Context, Action<Exception>) Send a CreateCommand<TModelData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntity entity, Context context, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntity entity The entity to create Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Context, CancellationToken, Action<Exception>) Send a CreateCommand<TModelData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntity entity The entity to create Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Action<Exception>) Send a CreateCommand<TModelData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntity entity, Action<Exception> onException) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntity entity The entity to create System.Action < System.Exception > onException Handle exception Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, CancellationToken, Action<Exception>) Send a CreateCommand<TModelData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendCreateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntity entity The entity to create System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Context, Action<Exception>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TModelEntity entity, Context context, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TModelEntity entity The entity to create Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Context, CancellationToken, Action<Exception>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TModelEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TModelEntity entity The entity to create Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Action<Exception>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TModelEntity entity, Action<Exception> onException) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TModelEntity entity The entity to create System.Action < System.Exception > onException Handle exception Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, CancellationToken, Action<Exception>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendCreateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TModelEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TModelEntity entity The entity to create System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Action<Exception>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Action<Exception>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Action<Exception>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Action<Exception> onException) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Action < System.Exception > onException Handle exception Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Action<Exception>) Send a DeleteCommand<T, TKey> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendDeleteCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, CancellationToken cancellationToken, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, Context context, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, Action<Exception> onException) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Action < System.Exception > onException Handle exception and return cached result Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, bool clearCache, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, Context context, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, Action<Exception> onException) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Action < System.Exception > onException Handle exception and return cached result Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, bool clearCache, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Boolean clearCache System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, CancellationToken, Boolean, Action<Exception>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TReadAllResult> SendReadAllQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, Context context, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, Action<Exception> onException) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Action < System.Exception > onException Handle exception and return cached result Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, bool clearCache, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, Context context, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, Action<Exception> onException) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Action < System.Exception > onException Handle exception and return cached result Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, bool clearCache, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority returning mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, CancellationToken, Boolean, Action<Exception>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR returning mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelReadAllResult> SendReadAllQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelReadAllResult> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Action<Exception> onException) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Action < System.Exception > onException Handle exception and return cached result Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, bool clearCache, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiEntity> SendReadQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiEntity> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Action<Exception> onException) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Action < System.Exception > onException Handle exception and return cached result Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, bool clearCache, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, Context context, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Boolean, Action<Exception>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelEntity> SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelEntity> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Context, Action<Exception>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TApiEntity entity, Context context, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key TApiEntity entity The entity to update Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Context, CancellationToken, Action<Exception>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TApiEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key TApiEntity entity The entity to update Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Action<Exception>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TApiEntity entity, Action<Exception> onException) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key TApiEntity entity The entity to update System.Action < System.Exception > onException Handle exception Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, CancellationToken, Action<Exception>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendUpdateCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TApiEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key TApiEntity entity The entity to update System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Context, Action<Exception>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TModelEntity entity, Context context, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key TModelEntity entity The entity to update Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Context, CancellationToken, Action<Exception>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TModelEntity entity, Context context, CancellationToken cancellationToken, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key TModelEntity entity The entity to update Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Action<Exception>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TModelEntity entity, Action<Exception> onException) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key TModelEntity entity The entity to update System.Action < System.Exception > onException Handle exception Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, CancellationToken, Action<Exception>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TModelEntity entity, CancellationToken cancellationToken, Action<Exception> onException = null) where TApiEntity : class Parameters Type Name Description IApizrCrudMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key TModelEntity entity The entity to update System.Threading.CancellationToken cancellationToken The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type"
  },
  "api/Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.html": {
    "href": "api/Apizr.Mediation.Extending.ApizrTypedMediatorExtensions.html",
    "title": "Class ApizrTypedMediatorExtensions | Apizr",
    "keywords": "Class ApizrTypedMediatorExtensions Apizr mediator extensions to send request using MediatR by calling expression Inheritance System.Object ApizrTypedMediatorExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Extending Assembly : Apizr.Integrations.MediatR.dll Syntax public static class ApizrTypedMediatorExtensions Methods SendFor<TWebApi>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, Task>>, Action<Exception>) Send an api call to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendFor<TWebApi>(this IApizrMediator<TWebApi> mediator, Expression<Func<TWebApi, Task>> executeApiMethod, Action<Exception> onException) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Action < System.Exception > onException Handle exception Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type SendFor<TWebApi>(IApizrMediator<TWebApi>, Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendFor<TWebApi>(this IApizrMediator<TWebApi> mediator, Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context = null, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type SendFor<TWebApi>(IApizrMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendFor<TWebApi>(this IApizrMediator<TWebApi> mediator, Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type SendFor<TWebApi>(IApizrMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken, Action<Exception>) Send an api call to Apizr using MediatR with a cancellation token Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendFor<TWebApi>(this IApizrMediator<TWebApi> mediator, Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type SendFor<TWebApi, TApiData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>) Send an api call to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiData> SendFor<TWebApi, TApiData>(this IApizrMediator<TWebApi> mediator, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<Exception> onException) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < System.Exception > onException Handle exception and return cached result Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api type TApiData The api result type SendFor<TWebApi, TApiData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Send an api call to Apizr using MediatR Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiData> SendFor<TWebApi, TApiData>(this IApizrMediator<TWebApi> mediator, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api type TApiData The api result type SendFor<TWebApi, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiData> SendFor<TWebApi, TApiData>(this IApizrMediator<TWebApi> mediator, Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api type TApiData The api response SendFor<TWebApi, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiData> SendFor<TWebApi, TApiData>(this IApizrMediator<TWebApi> mediator, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api type TApiData The api response SendFor<TWebApi, TApiData>(IApizrMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a cancellation token Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TApiData> SendFor<TWebApi, TApiData>(this IApizrMediator<TWebApi> mediator, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api type TApiData The api response SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator<TWebApi> mediator, Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<Exception> onException) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator<TWebApi> mediator, Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<Exception>) Send an api call to Apizr using MediatR with mapped request Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator<TWebApi> mediator, Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<Exception> onException) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < System.Exception > onException Handle exception Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>) Send an api call to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator<TWebApi> mediator, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<Exception> onException) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < System.Exception > onException Handle exception and return cached result Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) Send an api call to Apizr using MediatR returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator<TWebApi> mediator, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator<TWebApi> mediator, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>) Send an api call to Apizr using MediatR with mapped request and a Polly Context Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator<TWebApi> mediator, Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator<TWebApi> mediator, Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator<TWebApi> mediator, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken token A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken, Action<Exception>) Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator<TWebApi> mediator, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken token A cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator<TWebApi> mediator, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator<TWebApi> mediator, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Threading.CancellationToken token A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken, Action<Exception>) Send an api call to Apizr using MediatR with mapped request and a cancellation token Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator<TWebApi> mediator, Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken), Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Threading.CancellationToken token A cancellation token System.Action < System.Exception > onException Handle exception (default: null = throwing) Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a cancellation token and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(this IApizrMediator<TWebApi> mediator, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrMediator<TWebApi> mediator, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<Exception> onException) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Action < System.Exception > onException Handle exception and return cached result Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrMediator<TWebApi> mediator, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator<TWebApi>, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrMediator<TWebApi> mediator, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrMediator<TWebApi> mediator, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean, Action<Exception>) Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning a mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrMediator<TWebApi> mediator, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, CancellationToken token = default(CancellationToken), bool clearCache = false, Action<Exception> onException = null) Parameters Type Name Description IApizrMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) System.Action < System.Exception > onException Handle exception and return cached result (default: null = throwing) Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from"
  },
  "api/Apizr.Mediation.Extending.html": {
    "href": "api/Apizr.Mediation.Extending.html",
    "title": "Namespace Apizr.Mediation.Extending | Apizr",
    "keywords": "Namespace Apizr.Mediation.Extending Classes ApizrCrudMediatorExtensions Apizr mediator dedicated to cruding ApizrMediatorExtensions Apizr mediator extensions to send request using MediatR by calling expression ApizrMediatorFileTransferExtensions ApizrTypedCrudMediatorExtensions ApizrTypedMediatorExtensions Apizr mediator extensions to send request using MediatR by calling expression"
  },
  "api/Apizr.Mediation.Querying.html": {
    "href": "api/Apizr.Mediation.Querying.html",
    "title": "Namespace Apizr.Mediation.Querying | Apizr",
    "keywords": "Namespace Apizr.Mediation.Querying Classes MediationQueryBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base mediation query getting some TResultData data Interfaces IMediationQuery<TResultData> A mediation query getting some TResultData data IMediationQueryHandler<TQuery, TResponse> The mediation query handler"
  },
  "api/Apizr.Mediation.Querying.IMediationQuery-1.html": {
    "href": "api/Apizr.Mediation.Querying.IMediationQuery-1.html",
    "title": "Interface IMediationQuery<TResultData> | Apizr",
    "keywords": "Interface IMediationQuery<TResultData> A mediation query getting some TResultData data Namespace : Apizr.Mediation.Querying Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IMediationQuery<out TResultData> : IRequest<TResultData>, IBaseRequest Type Parameters Name Description TResultData The returned data"
  },
  "api/Apizr.Mediation.Querying.IMediationQueryHandler-2.html": {
    "href": "api/Apizr.Mediation.Querying.IMediationQueryHandler-2.html",
    "title": "Interface IMediationQueryHandler<TQuery, TResponse> | Apizr",
    "keywords": "Interface IMediationQueryHandler<TQuery, TResponse> The mediation query handler Inherited Members MediatR.IRequestHandler<TQuery, TResponse>.Handle(TQuery, System.Threading.CancellationToken) Namespace : Apizr.Mediation.Querying Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IMediationQueryHandler<in TQuery, TResponse> : IRequestHandler<TQuery, TResponse> where TQuery : IMediationQuery<TResponse> Type Parameters Name Description TQuery The query to handle TResponse The response to send back"
  },
  "api/Apizr.Mediation.Querying.MediationQueryBase-3.html": {
    "href": "api/Apizr.Mediation.Querying.MediationQueryBase-3.html",
    "title": "Class MediationQueryBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class MediationQueryBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The base mediation query getting some TResultData data Inheritance System.Object RequestBase <TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationQueryBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadAllQueryBase<TReadAllParams, TReadAllResult, TApizrRequestOptions, TApizrRequestOptionsBuilder> ReadQueryBase<TResponse, TKey, TApizrRequestOptions, TApizrRequestOptionsBuilder> DownloadQuery<TDownloadApi, TDownloadParams> DownloadOptionalQuery<TDownloadApi, TDownloadParams> Implements IMediationQuery <TResultData> MediatR.IRequest <TResultData> MediatR.IBaseRequest Inherited Members RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Querying Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class MediationQueryBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IMediationQuery<TResultData>, IRequest<TResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TResultData The returned data TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors MediationQueryBase(Action<TApizrRequestOptionsBuilder>) The base mediation query constructor Declaration protected MediationQueryBase(Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteRequestBase-2.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteRequestBase-2.html",
    "title": "Class ExecuteRequestBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteRequestBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute request Inheritance System.Object RequestBase < MediatR.Unit , TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase < MediatR.Unit , TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteRequestBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteRequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<Unit>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteRequestBase(Expression, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute request constructor Declaration protected ExecuteRequestBase(Expression executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression executeApiMethod The request to execute System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteRequestBase-3.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteRequestBase-3.html",
    "title": "Class ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute request Inheritance System.Object RequestBase <TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestBase<TWebApi, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements MediatR.IRequest <TFormattedModelResultData> MediatR.IBaseRequest Inherited Members RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<TFormattedModelResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TFormattedModelResultData The result type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteRequestBase(Expression, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute request constructor Declaration protected ExecuteRequestBase(Expression executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression executeApiMethod The request to execute System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request Properties ExecuteApiMethod The request to execute Declaration public Expression ExecuteApiMethod { get; } Property Value Type Description System.Linq.Expressions.Expression Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteRequestBase-4.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteRequestBase-4.html",
    "title": "Class ExecuteRequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteRequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute request Inheritance System.Object RequestBase <TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase <TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements MediatR.IRequest <TFormattedModelResultData> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteRequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<TFormattedModelResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TFormattedModelResultData The result type TModelRequestData The request data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteRequestBase(Expression, TModelRequestData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute request constructor Declaration protected ExecuteRequestBase(Expression executeApiMethod, TModelRequestData modelRequestData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression executeApiMethod The request to execute TModelRequestData modelRequestData The data provided to the request System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request ExecuteRequestBase(Expression, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute request constructor Declaration protected ExecuteRequestBase(Expression executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression executeApiMethod The request to execute System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request Properties ModelRequestData The data provided to the request Declaration public TModelRequestData ModelRequestData { get; } Property Value Type Description TModelRequestData Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-4.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-4.html",
    "title": "Class ExecuteResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning result) Inheritance System.Object RequestBase <TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase <TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase <TApiData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase <TWebApi, TApiData, TApiData, TApiData, TApiData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase <TWebApi, TApiData, TApiData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase <TWebApi, TApiData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequest<TWebApi, TApiData> Implements MediatR.IRequest <TApiData> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<TApiData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteResultRequestBase<TWebApi, TApiData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<TApiData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TApiData The api data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>>, Action<TApizrRequestOptionsBuilder>) Declaration protected ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Action <TApizrRequestOptionsBuilder> optionsBuilder ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<TApizrRequestOptionsBuilder>) Declaration protected ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TApizrRequestOptions, TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Action <TApizrRequestOptionsBuilder> optionsBuilder Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-5.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-5.html",
    "title": "Class ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning result) Inheritance System.Object RequestBase <TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase <TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase <TModelData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase <TWebApi, TModelData, TApiData, TModelData, TApiData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase <TWebApi, TModelData, TApiData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequest<TWebApi, TModelData, TApiData> Implements MediatR.IRequest <TModelData> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<TModelData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<TModelData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TModelData The model data type TApiData The api data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteResultRequestBase(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<TApizrRequestOptionsBuilder>) Declaration protected ExecuteResultRequestBase(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Action <TApizrRequestOptionsBuilder> optionsBuilder ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>>, Action<TApizrRequestOptionsBuilder>) Declaration protected ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Action <TApizrRequestOptionsBuilder> optionsBuilder ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<TApizrRequestOptionsBuilder>) Declaration protected ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TApizrRequestOptions, TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Action <TApizrRequestOptionsBuilder> optionsBuilder ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<TApizrRequestOptionsBuilder>) Declaration protected ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TApizrRequestOptions, TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Action <TApizrRequestOptionsBuilder> optionsBuilder Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-6.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-6.html",
    "title": "Class ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning result) Inheritance System.Object RequestBase <TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase <TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase <TFormattedModelResultData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase <TWebApi, TModelData, TApiData, TFormattedModelResultData, TApiData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements MediatR.IRequest <TFormattedModelResultData> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<TFormattedModelResultData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApiData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<TFormattedModelResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TModelData The model data type TApiData The api data type TFormattedModelResultData The formatted model result type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteResultRequestBase(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<TApizrRequestOptionsBuilder>) Declaration protected ExecuteResultRequestBase(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Action <TApizrRequestOptionsBuilder> optionsBuilder ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>>, Action<TApizrRequestOptionsBuilder>) Declaration protected ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Action <TApizrRequestOptionsBuilder> optionsBuilder ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<TApizrRequestOptionsBuilder>) Declaration protected ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TApizrRequestOptions, TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Action <TApizrRequestOptionsBuilder> optionsBuilder ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<TApizrRequestOptionsBuilder>) Declaration protected ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TApizrRequestOptions, TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Action <TApizrRequestOptionsBuilder> optionsBuilder Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-7.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-7.html",
    "title": "Class ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning result) Inheritance System.Object RequestBase <TModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase <TModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase <TModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase <TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements MediatR.IRequest <TModelResultData> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<TModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<TModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<TModelResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TApiRequestData The api request type TModelRequestData The model request type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteResultRequestBase(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<TApizrRequestOptionsBuilder>) Declaration protected ExecuteResultRequestBase(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData System.Action <TApizrRequestOptionsBuilder> optionsBuilder ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiResultData>>>, Action<TApizrRequestOptionsBuilder>) Declaration protected ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiResultData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod System.Action <TApizrRequestOptionsBuilder> optionsBuilder ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<TApizrRequestOptionsBuilder>) Declaration protected ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TApizrRequestOptions, TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod TModelRequestData modelRequestData System.Action <TApizrRequestOptionsBuilder> optionsBuilder ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiResultData>>>, Action<TApizrRequestOptionsBuilder>) Declaration protected ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiResultData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TApizrRequestOptions, TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod System.Action <TApizrRequestOptionsBuilder> optionsBuilder Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-8.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteResultRequestBase-8.html",
    "title": "Class ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning result) Inheritance System.Object RequestBase <TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase <TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase <TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements MediatR.IRequest <TFormattedModelResultData> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteRequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<TFormattedModelResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TFormattedModelResultData The formatted model result type TApiRequestData The api request type TModelRequestData The model request type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteResultRequestBase(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor Declaration protected ExecuteResultRequestBase(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The request to execute TModelRequestData modelRequestData The data provided to the request System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiResultData>>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor Declaration protected ExecuteResultRequestBase(Expression<Func<TWebApi, Task<TApiResultData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The request to execute System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor Declaration protected ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TApizrRequestOptions, TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The request to execute TModelRequestData modelRequestData The data provided to the request System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiResultData>>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute result request constructor Declaration protected ExecuteResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiResultData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TApizrRequestOptions, TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The request to execute System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-3.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-3.html",
    "title": "Class ExecuteUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request (returning no result) Inheritance System.Object RequestBase < MediatR.Unit , TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase < MediatR.Unit , TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequest<TWebApi> Implements MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteRequestBase<TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<Unit>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteUnitRequestBase(Expression<Func<TWebApi, Task>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute unit request constructor Declaration protected ExecuteUnitRequestBase(Expression<Func<TWebApi, Task>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The request to execute System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request ExecuteUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute unit request constructor Declaration protected ExecuteUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TApizrRequestOptions, TWebApi, System.Threading.Tasks.Task >> executeApiMethod The request to execute System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-4.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-4.html",
    "title": "Class ExecuteUnitRequestBase<TWebApi, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteUnitRequestBase<TWebApi, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request (returning no result) Inheritance System.Object RequestBase <TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase <TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestBase<TWebApi, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements MediatR.IRequest <TFormattedModelResultData> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteUnitRequestBase<TWebApi, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<TFormattedModelResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TFormattedModelResultData The formatted model result data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteUnitRequestBase(Expression<Func<TWebApi, Task>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute unit request constructor Declaration protected ExecuteUnitRequestBase(Expression<Func<TWebApi, Task>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The request to execute System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request ExecuteUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute unit request constructor Declaration protected ExecuteUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TApizrRequestOptions, TWebApi, System.Threading.Tasks.Task >> executeApiMethod The request to execute System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-5.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-5.html",
    "title": "Class ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request (returning no result) Inheritance System.Object RequestBase < MediatR.Unit , TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase < MediatR.Unit , TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase < MediatR.Unit , TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequest<TWebApi, TModelData, TApiData> Implements MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Unit, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Unit, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteRequestBase<Unit, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<Unit>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TModelData The model data type TApiData The api data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteUnitRequestBase(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute unit request constructor Declaration protected ExecuteUnitRequestBase(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The request to execute TModelData modelData The data provided to the request System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request ExecuteUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute unit request constructor Declaration protected ExecuteUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TApizrRequestOptions, TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The request to execute TModelData modelData The data provided to the request System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-6.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.ExecuteUnitRequestBase-6.html",
    "title": "Class ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request (returning no result) Inheritance System.Object RequestBase <TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase <TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase <TFormattedModelResultData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements MediatR.IRequest <TFormattedModelResultData> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<TFormattedModelResultData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteRequestBase<TFormattedModelResultData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<TFormattedModelResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TModelData The model data type TApiData The api data type TFormattedModelResultData The formatted model result data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteUnitRequestBase(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute unit request constructor Declaration protected ExecuteUnitRequestBase(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The request to execute TModelData modelData The data provided to the request System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request ExecuteUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute unit request constructor Declaration protected ExecuteUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TApizrRequestOptions, TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The request to execute TModelData modelData The data provided to the request System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.Base.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.html",
    "title": "Namespace Apizr.Mediation.Requesting.Base | Apizr",
    "keywords": "Namespace Apizr.Mediation.Requesting.Base Classes ExecuteRequestBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute request ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute request ExecuteRequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute request ExecuteResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning result) ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning result) ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning result) ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning result) ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning result) ExecuteUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request (returning no result) ExecuteUnitRequestBase<TWebApi, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request (returning no result) ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request (returning no result) ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request (returning no result) RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation request RequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation request"
  },
  "api/Apizr.Mediation.Requesting.Base.RequestBase-3.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.RequestBase-3.html",
    "title": "Class RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation request Inheritance System.Object RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<TRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<TRequestData, TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationCommandBase<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> MediationQueryBase<TResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> RequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements MediatR.IRequest <TFormattedModelResultData> MediatR.IBaseRequest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : IRequest<TFormattedModelResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TFormattedModelResultData The result type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors RequestBase(Action<TApizrRequestOptionsBuilder>) The base request constructor Declaration protected RequestBase(Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request Properties OptionsBuilder The request options builder Declaration public Action<TApizrRequestOptionsBuilder> OptionsBuilder { get; protected set; } Property Value Type Description System.Action <TApizrRequestOptionsBuilder> Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.Base.RequestBase-4.html": {
    "href": "api/Apizr.Mediation.Requesting.Base.RequestBase-4.html",
    "title": "Class RequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class RequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation request Inheritance System.Object RequestBase <TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> RequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements MediatR.IRequest <TFormattedModelResultData> MediatR.IBaseRequest Inherited Members RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class RequestBase<TFormattedModelResultData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestBase<TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<TFormattedModelResultData>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TFormattedModelResultData The result type TModelRequestData The request type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors RequestBase(TModelRequestData, Action<TApizrRequestOptionsBuilder>) The base request constructor Declaration protected RequestBase(TModelRequestData modelRequestData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TModelRequestData modelRequestData The request type System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request Properties ModelRequestData The request to send Declaration public TModelRequestData ModelRequestData { get; } Property Value Type Description TModelRequestData Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.DownloadQuery.html": {
    "href": "api/Apizr.Mediation.Requesting.DownloadQuery.html",
    "title": "Class DownloadQuery | Apizr",
    "keywords": "Class DownloadQuery The mediation download query with a dictionary query parameters type Inheritance System.Object RequestBase < System.IO.FileInfo , IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationQueryBase < System.IO.FileInfo , IApizrRequestOptions , IApizrRequestOptionsBuilder > DownloadQuery < IDownloadApi , System.Collections.Generic.IDictionary < System.String , System.Object >> DownloadQuery < IDownloadApi > DownloadQuery Implements IMediationQuery < System.IO.FileInfo > MediatR.IRequest < System.IO.FileInfo > MediatR.IBaseRequest Inherited Members DownloadQuery<IDownloadApi, IDictionary<String, Object>>.FileInfo DownloadQuery<IDownloadApi, IDictionary<String, Object>>.DownloadParams RequestBase<FileInfo, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting Assembly : Apizr.Integrations.FileTransfer.MediatR.dll Syntax public class DownloadQuery : DownloadQuery<IDownloadApi>, IMediationQuery<FileInfo>, IRequest<FileInfo>, IBaseRequest Constructors DownloadQuery(FileInfo, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor Declaration public DownloadQuery(FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options DownloadQuery(FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor Declaration public DownloadQuery(FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download System.Collections.Generic.IDictionary < System.String , System.Object > downloadParams Some query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.DownloadQuery-1.html": {
    "href": "api/Apizr.Mediation.Requesting.DownloadQuery-1.html",
    "title": "Class DownloadQuery<TDownloadApi> | Apizr",
    "keywords": "Class DownloadQuery<TDownloadApi> The mediation download query with a dictionary query parameters type Inheritance System.Object RequestBase < System.IO.FileInfo , IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationQueryBase < System.IO.FileInfo , IApizrRequestOptions , IApizrRequestOptionsBuilder > DownloadQuery <TDownloadApi, System.Collections.Generic.IDictionary < System.String , System.Object >> DownloadQuery<TDownloadApi> DownloadQuery Implements IMediationQuery < System.IO.FileInfo > MediatR.IRequest < System.IO.FileInfo > MediatR.IBaseRequest Inherited Members DownloadQuery<TDownloadApi, IDictionary<String, Object>>.FileInfo DownloadQuery<TDownloadApi, IDictionary<String, Object>>.DownloadParams RequestBase<FileInfo, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting Assembly : Apizr.Integrations.FileTransfer.MediatR.dll Syntax public class DownloadQuery<TDownloadApi> : DownloadQuery<TDownloadApi, IDictionary<string, object>>, IMediationQuery<FileInfo>, IRequest<FileInfo>, IBaseRequest where TDownloadApi : IDownloadApi Type Parameters Name Description TDownloadApi Constructors DownloadQuery(FileInfo, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor Declaration public DownloadQuery(FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options DownloadQuery(FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor Declaration public DownloadQuery(FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download System.Collections.Generic.IDictionary < System.String , System.Object > downloadParams Some query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.DownloadQuery-2.html": {
    "href": "api/Apizr.Mediation.Requesting.DownloadQuery-2.html",
    "title": "Class DownloadQuery<TDownloadApi, TDownloadParams> | Apizr",
    "keywords": "Class DownloadQuery<TDownloadApi, TDownloadParams> The mediation download query with a custom query parameters type Inheritance System.Object RequestBase < System.IO.FileInfo , IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationQueryBase < System.IO.FileInfo , IApizrRequestOptions , IApizrRequestOptionsBuilder > DownloadQuery<TDownloadApi, TDownloadParams> DownloadQuery<TDownloadApi> DownloadWithQuery<TDownloadParams> Implements IMediationQuery < System.IO.FileInfo > MediatR.IRequest < System.IO.FileInfo > MediatR.IBaseRequest Inherited Members RequestBase<FileInfo, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting Assembly : Apizr.Integrations.FileTransfer.MediatR.dll Syntax public class DownloadQuery<TDownloadApi, TDownloadParams> : MediationQueryBase<FileInfo, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<FileInfo>, IRequest<FileInfo>, IBaseRequest where TDownloadApi : IDownloadApi<TDownloadParams> Type Parameters Name Description TDownloadApi The download api type to manage TDownloadParams The query parameters type Constructors DownloadQuery(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor Declaration public DownloadQuery(FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download TDownloadParams downloadParams Some custom query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Properties DownloadParams Some custom query parameters Declaration public TDownloadParams DownloadParams { get; } Property Value Type Description TDownloadParams FileInfo Some information about the file to download Declaration public FileInfo FileInfo { get; } Property Value Type Description System.IO.FileInfo Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.DownloadWithQuery-1.html": {
    "href": "api/Apizr.Mediation.Requesting.DownloadWithQuery-1.html",
    "title": "Class DownloadWithQuery<TDownloadParams> | Apizr",
    "keywords": "Class DownloadWithQuery<TDownloadParams> The mediation download query with a dictionary query parameters type Inheritance System.Object RequestBase < System.IO.FileInfo , IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationQueryBase < System.IO.FileInfo , IApizrRequestOptions , IApizrRequestOptionsBuilder > DownloadQuery < IDownloadApi <TDownloadParams>, TDownloadParams> DownloadWithQuery<TDownloadParams> Implements IMediationQuery < System.IO.FileInfo > MediatR.IRequest < System.IO.FileInfo > MediatR.IBaseRequest Inherited Members DownloadQuery<IDownloadApi<TDownloadParams>, TDownloadParams>.FileInfo DownloadQuery<IDownloadApi<TDownloadParams>, TDownloadParams>.DownloadParams RequestBase<FileInfo, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting Assembly : Apizr.Integrations.FileTransfer.MediatR.dll Syntax public class DownloadWithQuery<TDownloadParams> : DownloadQuery<IDownloadApi<TDownloadParams>, TDownloadParams>, IMediationQuery<FileInfo>, IRequest<FileInfo>, IBaseRequest Type Parameters Name Description TDownloadParams Constructors DownloadWithQuery(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor Declaration public DownloadWithQuery(FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download TDownloadParams downloadParams Some query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options DownloadWithQuery(FileInfo, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor Declaration public DownloadWithQuery(FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.ExecuteResultRequest-2.html": {
    "href": "api/Apizr.Mediation.Requesting.ExecuteResultRequest-2.html",
    "title": "Class ExecuteResultRequest<TWebApi, TApiData> | Apizr",
    "keywords": "Class ExecuteResultRequest<TWebApi, TApiData> The mediation execute result request (returning result) Inheritance System.Object RequestBase <TApiData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteRequestBase <TApiData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteRequestBase <TApiData, TApiData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestBase <TWebApi, TApiData, TApiData, TApiData, TApiData, TApiData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestBase <TWebApi, TApiData, TApiData, TApiData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestBase <TWebApi, TApiData, TApiData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestBase <TWebApi, TApiData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequest<TWebApi, TApiData> Implements MediatR.IRequest <TApiData> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<TApiData, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting Assembly : Apizr.Integrations.MediatR.dll Syntax public class ExecuteResultRequest<TWebApi, TApiData> : ExecuteResultRequestBase<TWebApi, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<TApiData>, IBaseRequest Type Parameters Name Description TWebApi The web api type TApiData The api data type Constructors ExecuteResultRequest(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor Declaration public ExecuteResultRequest(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The request to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request ExecuteResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor Declaration public ExecuteResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The request to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.ExecuteResultRequest-3.html": {
    "href": "api/Apizr.Mediation.Requesting.ExecuteResultRequest-3.html",
    "title": "Class ExecuteResultRequest<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteResultRequest<TWebApi, TModelData, TApiData> The mediation execute result request (returning result) Inheritance System.Object RequestBase <TModelData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteRequestBase <TModelData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteRequestBase <TModelData, TModelData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestBase <TWebApi, TModelData, TApiData, TModelData, TApiData, TModelData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestBase <TWebApi, TModelData, TApiData, TModelData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestBase <TWebApi, TModelData, TApiData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequest<TWebApi, TModelData, TApiData> Implements MediatR.IRequest <TModelData> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<TModelData, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting Assembly : Apizr.Integrations.MediatR.dll Syntax public class ExecuteResultRequest<TWebApi, TModelData, TApiData> : ExecuteResultRequestBase<TWebApi, TModelData, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<TModelData>, IBaseRequest Type Parameters Name Description TWebApi The web api type TModelData The model data type TApiData The api data type Constructors ExecuteResultRequest(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor Declaration public ExecuteResultRequest(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The request to execute TModelData modelData The data provided to the request System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request ExecuteResultRequest(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor Declaration public ExecuteResultRequest(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The request to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request ExecuteResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor Declaration public ExecuteResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The request to execute TModelData modelData The data provided to the request System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request ExecuteResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor Declaration public ExecuteResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The request to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.ExecuteResultRequest-5.html": {
    "href": "api/Apizr.Mediation.Requesting.ExecuteResultRequest-5.html",
    "title": "Class ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> | Apizr",
    "keywords": "Class ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> The mediation execute result request (returning result) Inheritance System.Object RequestBase <TModelResultData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteRequestBase <TModelResultData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteRequestBase <TModelResultData, TModelRequestData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestBase <TWebApi, TModelResultData, TApiResultData, TModelResultData, TApiRequestData, TModelRequestData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestBase <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements MediatR.IRequest <TModelResultData> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<TModelResultData, TModelRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<TModelResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<TModelResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting Assembly : Apizr.Integrations.MediatR.dll Syntax public class ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<TModelResultData>, IBaseRequest Type Parameters Name Description TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TApiRequestData The api request type TModelRequestData The model request type Constructors ExecuteResultRequest(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor Declaration public ExecuteResultRequest(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The request to execute TModelRequestData modelRequestData The data provided to the request System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request ExecuteResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) The mediation execute result request constructor Declaration public ExecuteResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The request to execute TModelRequestData modelRequestData The data provided to the request System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.ExecuteUnitRequest-1.html": {
    "href": "api/Apizr.Mediation.Requesting.ExecuteUnitRequest-1.html",
    "title": "Class ExecuteUnitRequest<TWebApi> | Apizr",
    "keywords": "Class ExecuteUnitRequest<TWebApi> The mediation execute unit request (returning no result) Inheritance System.Object RequestBase < MediatR.Unit , IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteRequestBase < MediatR.Unit , IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteRequestBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteUnitRequestBase <TWebApi, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteUnitRequest<TWebApi> Implements MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting Assembly : Apizr.Integrations.MediatR.dll Syntax public class ExecuteUnitRequest<TWebApi> : ExecuteUnitRequestBase<TWebApi, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<Unit>, IBaseRequest Type Parameters Name Description TWebApi The web api type Constructors ExecuteUnitRequest(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) The mediation execute unit request constructor Declaration public ExecuteUnitRequest(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The request to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request ExecuteUnitRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) The mediation execute unit request constructor Declaration public ExecuteUnitRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The request to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.ExecuteUnitRequest-3.html": {
    "href": "api/Apizr.Mediation.Requesting.ExecuteUnitRequest-3.html",
    "title": "Class ExecuteUnitRequest<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteUnitRequest<TWebApi, TModelData, TApiData> The mediation execute unit request (returning no result) Inheritance System.Object RequestBase < MediatR.Unit , IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteRequestBase < MediatR.Unit , IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteRequestBase < MediatR.Unit , TModelData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteUnitRequestBase <TWebApi, TModelData, TApiData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteUnitRequest<TWebApi, TModelData, TApiData> Implements MediatR.IRequest < MediatR.Unit > MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Unit, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Unit, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting Assembly : Apizr.Integrations.MediatR.dll Syntax public class ExecuteUnitRequest<TWebApi, TModelData, TApiData> : ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<Unit>, IBaseRequest Type Parameters Name Description TWebApi The web api type TModelData The model data type TApiData The api data type Constructors ExecuteUnitRequest(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) The mediation execute unit request constructor Declaration public ExecuteUnitRequest(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The request to execute TModelData modelData The data provided to the request System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request ExecuteUnitRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) The mediation execute unit request constructor Declaration public ExecuteUnitRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The request to execute TModelData modelData The data provided to the request System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-5.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-5.html",
    "title": "Class ExecuteResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request handler Inheritance System.Object ExecuteResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandler<TWebApi, TApiData> Implements MediatR.IRequestHandler <TRequest, TApiData> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : IRequestHandler<TRequest, TApiData> where TRequest : ExecuteResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TApiData The api data type TRequest The request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteResultRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Fields WebApiManager Declaration protected readonly IApizrManager<TWebApi> WebApiManager Field Value Type Description IApizrManager <TWebApi> Methods Handle(TRequest, CancellationToken) Handling the execute result request Declaration public abstract Task<TApiData> Handle(TRequest request, CancellationToken cancellationToken) Parameters Type Name Description TRequest request The execute result request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TApiData> Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-6.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-6.html",
    "title": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandler<TWebApi, TModelData, TApiData> Implements MediatR.IRequestHandler <TRequest, TModelData> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, TModelData> where TRequest : ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TModelData The model data type TApiData The api data type TRequest The request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteResultRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Fields WebApiManager Declaration protected readonly IApizrManager<TWebApi> WebApiManager Field Value Type Description IApizrManager <TWebApi> Methods Handle(TRequest, CancellationToken) Handling the execute result request Declaration public abstract Task<TModelData> Handle(TRequest request, CancellationToken cancellationToken) Parameters Type Name Description TRequest request The execute result request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TModelData> Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-7.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-7.html",
    "title": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements MediatR.IRequestHandler <TRequest, TFormattedModelResultData> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, TFormattedModelResultData> where TRequest : ExecuteResultRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TModelData The model data type TApiData The api data type TFormattedModelResultData The formatted model result type TRequest The request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteResultRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Fields WebApiManager Declaration protected readonly IApizrManager<TWebApi> WebApiManager Field Value Type Description IApizrManager <TWebApi> Methods Handle(TRequest, CancellationToken) Handling the execute result request Declaration public abstract Task<TFormattedModelResultData> Handle(TRequest request, CancellationToken cancellationToken) Parameters Type Name Description TRequest request The execute result request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TFormattedModelResultData> Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-8.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-8.html",
    "title": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements MediatR.IRequestHandler <TRequest, TModelResultData> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, TModelResultData> where TRequest : ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TApiRequestData The api request type TModelRequestData The model request type TRequest The request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteResultRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Fields WebApiManager Declaration protected readonly IApizrManager<TWebApi> WebApiManager Field Value Type Description IApizrManager <TWebApi> Methods Handle(TRequest, CancellationToken) Handling the execute result request Declaration public abstract Task<TModelResultData> Handle(TRequest request, CancellationToken cancellationToken) Parameters Type Name Description TRequest request The execute result request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TModelResultData> Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-9.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase-9.html",
    "title": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements MediatR.IRequestHandler <TRequest, TFormattedModelResultData> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, TFormattedModelResultData> where TRequest : ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TFormattedModelResultData The formatted model result type TApiRequestData The api request type TModelRequestData The model request type TRequest The request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteResultRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Fields WebApiManager Declaration protected readonly IApizrManager<TWebApi> WebApiManager Field Value Type Description IApizrManager <TWebApi> Methods Handle(TRequest, CancellationToken) Handling the execute result request Declaration public abstract Task<TFormattedModelResultData> Handle(TRequest request, CancellationToken cancellationToken) Parameters Type Name Description TRequest request The execute result request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TFormattedModelResultData> Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-4.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-4.html",
    "title": "Class ExecuteUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandler<TWebApi> Implements MediatR.IRequestHandler <TRequest, MediatR.Unit > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, Unit> where TRequest : ExecuteUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TRequest The execute unit request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Fields WebApiManager Declaration protected readonly IApizrManager<TWebApi> WebApiManager Field Value Type Description IApizrManager <TWebApi> Methods Handle(TRequest, CancellationToken) Handling the execute unit request Declaration public abstract Task<Unit> Handle(TRequest request, CancellationToken cancellationToken) Parameters Type Name Description TRequest request The execute result request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < MediatR.Unit > Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-5.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-5.html",
    "title": "Class ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements MediatR.IRequestHandler <TRequest, TFormattedModelResultData> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, TFormattedModelResultData> where TRequest : ExecuteUnitRequestBase<TWebApi, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TFormattedModelResultData The formatted model result data type TRequest The execute unit request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Fields WebApiManager Declaration protected readonly IApizrManager<TWebApi> WebApiManager Field Value Type Description IApizrManager <TWebApi> Methods Handle(TRequest, CancellationToken) Handling the execute unit request Declaration public abstract Task<TFormattedModelResultData> Handle(TRequest request, CancellationToken cancellationToken) Parameters Type Name Description TRequest request The execute result request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TFormattedModelResultData> Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-6.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-6.html",
    "title": "Class ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandler<TWebApi, TModelData, TApiData> Implements MediatR.IRequestHandler <TRequest, MediatR.Unit > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, Unit> where TRequest : ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TModelData The model data type TApiData The api data type TRequest The execute unit request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Fields WebApiManager Declaration protected readonly IApizrManager<TWebApi> WebApiManager Field Value Type Description IApizrManager <TWebApi> Methods Handle(TRequest, CancellationToken) Handling the execute unit request Declaration public abstract Task<Unit> Handle(TRequest request, CancellationToken cancellationToken) Parameters Type Name Description TRequest request The execute result request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < MediatR.Unit > Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-7.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase-7.html",
    "title": "Class ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> Implements MediatR.IRequestHandler <TRequest, TFormattedModelResultData> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, TFormattedModelResultData> where TRequest : ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TModelData The model data type TApiData The api data type TFormattedModelResultData The formatted model result data type TRequest The execute unit request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteUnitRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Fields WebApiManager Declaration protected readonly IApizrManager<TWebApi> WebApiManager Field Value Type Description IApizrManager <TWebApi> Methods Handle(TRequest, CancellationToken) Handling the execute unit request Declaration public abstract Task<TFormattedModelResultData> Handle(TRequest request, CancellationToken cancellationToken) Parameters Type Name Description TRequest request The execute result request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TFormattedModelResultData> Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.html",
    "title": "Namespace Apizr.Mediation.Requesting.Handling.Base | Apizr",
    "keywords": "Namespace Apizr.Mediation.Requesting.Handling.Base Classes ExecuteResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request handler ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request handler ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request handler ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request handler ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request handler ExecuteUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request handler ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request handler ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request handler ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute unit request handler RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base request handler"
  },
  "api/Apizr.Mediation.Requesting.Handling.Base.RequestHandlerBase-2.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.Base.RequestHandlerBase-2.html",
    "title": "Class RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base request handler Inheritance System.Object RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TFormattedModelResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TFormattedModelResultData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> DownloadQueryHandler<TDownloadApi> DownloadQueryHandler<TDownloadApi, TDownloadParams> DownloadWithQueryHandler<TDownloadParams> UploadCommandHandler<TUploadApi> UploadCommandHandler<TUploadApi, TUploadApiResultData> UploadWithCommandHandler<TUploadApiResultData> DownloadOptionalQueryHandler<TDownloadApi> DownloadOptionalQueryHandler<TDownloadApi, TDownloadParams> DownloadWithOptionalQueryHandler<TDownloadParams> UploadOptionalCommandHandler<TUploadApi> UploadOptionalCommandHandler<TUploadApi, TUploadApiResultData> UploadWithOptionalCommandHandler<TUploadApiResultData> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling.Base Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class RequestHandlerBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptionsBase where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilderBase<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TApizrRequestOptions TApizrRequestOptionsBuilder"
  },
  "api/Apizr.Mediation.Requesting.Handling.DownloadQueryHandler-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.DownloadQueryHandler-1.html",
    "title": "Class DownloadQueryHandler<TDownloadApi> | Apizr",
    "keywords": "Class DownloadQueryHandler<TDownloadApi> The mediation handler for DownloadQuery<TDownloadApi> Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > DownloadQueryHandler<TDownloadApi> Implements MediatR.IRequestHandler < DownloadQuery <TDownloadApi>, System.IO.FileInfo > MediatR.IRequestHandler < DownloadQuery , System.IO.FileInfo > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling Assembly : Apizr.Integrations.FileTransfer.MediatR.dll Syntax public class DownloadQueryHandler<TDownloadApi> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<DownloadQuery<TDownloadApi>, FileInfo>, IRequestHandler<DownloadQuery, FileInfo> where TDownloadApi : IDownloadApi Type Parameters Name Description TDownloadApi The download api type to manage Constructors DownloadQueryHandler(IApizrDownloadManager<TDownloadApi>) Declaration public DownloadQueryHandler(IApizrDownloadManager<TDownloadApi> downloadManager) Parameters Type Name Description IApizrDownloadManager <TDownloadApi> downloadManager Methods Handle(DownloadQuery, CancellationToken) Handling the download request Declaration public Task<FileInfo> Handle(DownloadQuery request, CancellationToken cancellationToken) Parameters Type Name Description DownloadQuery request The download request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > Handle(DownloadQuery<TDownloadApi>, CancellationToken) Handling the download request Declaration public Task<FileInfo> Handle(DownloadQuery<TDownloadApi> request, CancellationToken cancellationToken) Parameters Type Name Description DownloadQuery <TDownloadApi> request The download request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > Implements MediatR.IRequestHandler<TRequest, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Requesting.Handling.DownloadQueryHandler-2.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.DownloadQueryHandler-2.html",
    "title": "Class DownloadQueryHandler<TDownloadApi, TDownloadParams> | Apizr",
    "keywords": "Class DownloadQueryHandler<TDownloadApi, TDownloadParams> The mediation handler for DownloadQuery<TDownloadApi, TDownloadParams> Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > DownloadQueryHandler<TDownloadApi, TDownloadParams> Implements MediatR.IRequestHandler < DownloadQuery <TDownloadApi, TDownloadParams>, System.IO.FileInfo > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling Assembly : Apizr.Integrations.FileTransfer.MediatR.dll Syntax public class DownloadQueryHandler<TDownloadApi, TDownloadParams> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<DownloadQuery<TDownloadApi, TDownloadParams>, FileInfo> where TDownloadApi : IDownloadApi<TDownloadParams> Type Parameters Name Description TDownloadApi The download api type to manage TDownloadParams The query parameters type Constructors DownloadQueryHandler(IApizrDownloadManager<TDownloadApi, TDownloadParams>) Declaration public DownloadQueryHandler(IApizrDownloadManager<TDownloadApi, TDownloadParams> downloadManager) Parameters Type Name Description IApizrDownloadManager <TDownloadApi, TDownloadParams> downloadManager Methods Handle(DownloadQuery<TDownloadApi, TDownloadParams>, CancellationToken) Handling the download request Declaration public Task<FileInfo> Handle(DownloadQuery<TDownloadApi, TDownloadParams> request, CancellationToken cancellationToken) Parameters Type Name Description DownloadQuery <TDownloadApi, TDownloadParams> request The download request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Requesting.Handling.DownloadWithQueryHandler-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.DownloadWithQueryHandler-1.html",
    "title": "Class DownloadWithQueryHandler<TDownloadParams> | Apizr",
    "keywords": "Class DownloadWithQueryHandler<TDownloadParams> The mediation handler for DownloadQuery<TDownloadApi, TDownloadParams> Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > DownloadWithQueryHandler<TDownloadParams> Implements MediatR.IRequestHandler < DownloadWithQuery <TDownloadParams>, System.IO.FileInfo > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling Assembly : Apizr.Integrations.FileTransfer.MediatR.dll Syntax public class DownloadWithQueryHandler<TDownloadParams> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<DownloadWithQuery<TDownloadParams>, FileInfo> Type Parameters Name Description TDownloadParams The query parameters type Constructors DownloadWithQueryHandler(IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>) Declaration public DownloadWithQueryHandler(IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams> downloadManager) Parameters Type Name Description IApizrDownloadManager < IDownloadApi <TDownloadParams>, TDownloadParams> downloadManager Methods Handle(DownloadWithQuery<TDownloadParams>, CancellationToken) Handling the download request Declaration public Task<FileInfo> Handle(DownloadWithQuery<TDownloadParams> request, CancellationToken cancellationToken) Parameters Type Name Description DownloadWithQuery <TDownloadParams> request The download request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler-2.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler-2.html",
    "title": "Class ExecuteResultRequestHandler<TWebApi, TApiData> | Apizr",
    "keywords": "Class ExecuteResultRequestHandler<TWebApi, TApiData> The mediation execute result request handler Inheritance System.Object ExecuteResultRequestHandlerBase <TWebApi, TApiData, ExecuteResultRequest <TWebApi, TApiData>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestHandler<TWebApi, TApiData> Implements MediatR.IRequestHandler < ExecuteResultRequest <TWebApi, TApiData>, TApiData> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TApiData, ExecuteResultRequest<TWebApi, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TApiData, ExecuteResultRequest<TWebApi, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteResultRequest<TWebApi, TApiData>, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class ExecuteResultRequestHandler<TWebApi, TApiData> : ExecuteResultRequestHandlerBase<TWebApi, TApiData, ExecuteResultRequest<TWebApi, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteResultRequest<TWebApi, TApiData>, TApiData> Type Parameters Name Description TWebApi The web api type TApiData The api data type Constructors ExecuteResultRequestHandler(IApizrManager<TWebApi>) Declaration public ExecuteResultRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Methods Handle(ExecuteResultRequest<TWebApi, TApiData>, CancellationToken) Handling the execute result request Declaration public override Task<TApiData> Handle(ExecuteResultRequest<TWebApi, TApiData> request, CancellationToken cancellationToken) Parameters Type Name Description ExecuteResultRequest <TWebApi, TApiData> request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TApiData> Overrides Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase<TWebApi, TApiData, Apizr.Mediation.Requesting.ExecuteResultRequest<TWebApi, TApiData>, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Mediation.Requesting.ExecuteResultRequest<TWebApi, TApiData>, System.Threading.CancellationToken) Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler-3.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler-3.html",
    "title": "Class ExecuteResultRequestHandler<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteResultRequestHandler<TWebApi, TModelData, TApiData> The mediation execute result request handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestHandlerBase <TWebApi, TModelData, TApiData, ExecuteResultRequest <TWebApi, TModelData, TApiData>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestHandler<TWebApi, TModelData, TApiData> Implements MediatR.IRequestHandler < ExecuteResultRequest <TWebApi, TModelData, TApiData>, TModelData> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteResultRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteResultRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteResultRequest<TWebApi, TModelData, TApiData>, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class ExecuteResultRequestHandler<TWebApi, TModelData, TApiData> : ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteResultRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteResultRequest<TWebApi, TModelData, TApiData>, TModelData> Type Parameters Name Description TWebApi The web api type TModelData The model data type TApiData The api data type Constructors ExecuteResultRequestHandler(IApizrManager<TWebApi>) Declaration public ExecuteResultRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Methods Handle(ExecuteResultRequest<TWebApi, TModelData, TApiData>, CancellationToken) Handling the execute result request Declaration public override Task<TModelData> Handle(ExecuteResultRequest<TWebApi, TModelData, TApiData> request, CancellationToken cancellationToken) Parameters Type Name Description ExecuteResultRequest <TWebApi, TModelData, TApiData> request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TModelData> Overrides Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, Apizr.Mediation.Requesting.ExecuteResultRequest<TWebApi, TModelData, TApiData>, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Mediation.Requesting.ExecuteResultRequest<TWebApi, TModelData, TApiData>, System.Threading.CancellationToken) Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler-5.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.ExecuteResultRequestHandler-5.html",
    "title": "Class ExecuteResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> | Apizr",
    "keywords": "Class ExecuteResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> The mediation execute result request handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestHandlerBase <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, ExecuteResultRequest <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements MediatR.IRequestHandler < ExecuteResultRequest <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, TModelResultData> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class ExecuteResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, TModelResultData> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TApiRequestData The api request type TModelRequestData The model request type Constructors ExecuteResultRequestHandler(IApizrManager<TWebApi>) Declaration public ExecuteResultRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Methods Handle(ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, CancellationToken) Handling the execute result request Declaration public override Task<TModelResultData> Handle(ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> request, CancellationToken cancellationToken) Parameters Type Name Description ExecuteResultRequest <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TModelResultData> Overrides Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, Apizr.Mediation.Requesting.ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Mediation.Requesting.ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, System.Threading.CancellationToken) Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Requesting.Handling.ExecuteUnitRequestHandler-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.ExecuteUnitRequestHandler-1.html",
    "title": "Class ExecuteUnitRequestHandler<TWebApi> | Apizr",
    "keywords": "Class ExecuteUnitRequestHandler<TWebApi> The mediation execute unit request handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteUnitRequestHandlerBase <TWebApi, ExecuteUnitRequest <TWebApi>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteUnitRequestHandler<TWebApi> Implements MediatR.IRequestHandler < ExecuteUnitRequest <TWebApi>, MediatR.Unit > Inherited Members ExecuteUnitRequestHandlerBase<TWebApi, ExecuteUnitRequest<TWebApi>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteUnitRequestHandlerBase<TWebApi, ExecuteUnitRequest<TWebApi>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteUnitRequest<TWebApi>, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class ExecuteUnitRequestHandler<TWebApi> : ExecuteUnitRequestHandlerBase<TWebApi, ExecuteUnitRequest<TWebApi>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteUnitRequest<TWebApi>, Unit> Type Parameters Name Description TWebApi The web api type Constructors ExecuteUnitRequestHandler(IApizrManager<TWebApi>) Declaration public ExecuteUnitRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Methods Handle(ExecuteUnitRequest<TWebApi>, CancellationToken) Handling the execute unit request Declaration public override Task<Unit> Handle(ExecuteUnitRequest<TWebApi> request, CancellationToken cancellationToken) Parameters Type Name Description ExecuteUnitRequest <TWebApi> request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < MediatR.Unit > Overrides Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase<TWebApi, Apizr.Mediation.Requesting.ExecuteUnitRequest<TWebApi>, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Mediation.Requesting.ExecuteUnitRequest<TWebApi>, System.Threading.CancellationToken) Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Requesting.Handling.ExecuteUnitRequestHandler-3.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.ExecuteUnitRequestHandler-3.html",
    "title": "Class ExecuteUnitRequestHandler<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteUnitRequestHandler<TWebApi, TModelData, TApiData> The mediation execute unit request handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteUnitRequestHandlerBase <TWebApi, TModelData, TApiData, ExecuteUnitRequest <TWebApi, TModelData, TApiData>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteUnitRequestHandler<TWebApi, TModelData, TApiData> Implements MediatR.IRequestHandler < ExecuteUnitRequest <TWebApi, TModelData, TApiData>, MediatR.Unit > Inherited Members ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteUnitRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteUnitRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteUnitRequest<TWebApi, TModelData, TApiData>, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling Assembly : Apizr.Integrations.MediatR.dll Syntax public class ExecuteUnitRequestHandler<TWebApi, TModelData, TApiData> : ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteUnitRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteUnitRequest<TWebApi, TModelData, TApiData>, Unit> Type Parameters Name Description TWebApi The web api type TModelData The model data type TApiData The api data type Constructors ExecuteUnitRequestHandler(IApizrManager<TWebApi>) Declaration public ExecuteUnitRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Methods Handle(ExecuteUnitRequest<TWebApi, TModelData, TApiData>, CancellationToken) Handling the execute unit request Declaration public override Task<Unit> Handle(ExecuteUnitRequest<TWebApi, TModelData, TApiData> request, CancellationToken cancellationToken) Parameters Type Name Description ExecuteUnitRequest <TWebApi, TModelData, TApiData> request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < MediatR.Unit > Overrides Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, Apizr.Mediation.Requesting.ExecuteUnitRequest<TWebApi, TModelData, TApiData>, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Mediation.Requesting.ExecuteUnitRequest<TWebApi, TModelData, TApiData>, System.Threading.CancellationToken) Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Requesting.Handling.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.html",
    "title": "Namespace Apizr.Mediation.Requesting.Handling | Apizr",
    "keywords": "Namespace Apizr.Mediation.Requesting.Handling Classes DownloadQueryHandler<TDownloadApi> The mediation handler for DownloadQuery<TDownloadApi> DownloadQueryHandler<TDownloadApi, TDownloadParams> The mediation handler for DownloadQuery<TDownloadApi, TDownloadParams> DownloadWithQueryHandler<TDownloadParams> The mediation handler for DownloadQuery<TDownloadApi, TDownloadParams> ExecuteResultRequestHandler<TWebApi, TApiData> The mediation execute result request handler ExecuteResultRequestHandler<TWebApi, TModelData, TApiData> The mediation execute result request handler ExecuteResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> The mediation execute result request handler ExecuteUnitRequestHandler<TWebApi> The mediation execute unit request handler ExecuteUnitRequestHandler<TWebApi, TModelData, TApiData> The mediation execute unit request handler UploadCommandHandler<TUploadApi> UploadCommandHandler<TUploadApi, TUploadApiResultData> UploadWithCommandHandler<TUploadApiResultData>"
  },
  "api/Apizr.Mediation.Requesting.Handling.UploadCommandHandler-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.UploadCommandHandler-1.html",
    "title": "Class UploadCommandHandler<TUploadApi> | Apizr",
    "keywords": "Class UploadCommandHandler<TUploadApi> Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > UploadCommandHandler<TUploadApi> Implements MediatR.IRequestHandler < UploadCommand <TUploadApi>, System.Net.Http.HttpResponseMessage > MediatR.IRequestHandler < UploadCommand , System.Net.Http.HttpResponseMessage > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling Assembly : Apizr.Integrations.FileTransfer.MediatR.dll Syntax public class UploadCommandHandler<TUploadApi> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<UploadCommand<TUploadApi>, HttpResponseMessage>, IRequestHandler<UploadCommand, HttpResponseMessage> where TUploadApi : IUploadApi Type Parameters Name Description TUploadApi Constructors UploadCommandHandler(IApizrUploadManager<TUploadApi>) Declaration public UploadCommandHandler(IApizrUploadManager<TUploadApi> uploadManager) Parameters Type Name Description IApizrUploadManager <TUploadApi> uploadManager Methods Handle(UploadCommand, CancellationToken) Handling the upload request Declaration public Task<HttpResponseMessage> Handle(UploadCommand request, CancellationToken cancellationToken) Parameters Type Name Description UploadCommand request The upload request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > Handle(UploadCommand<TUploadApi>, CancellationToken) Handling the upload request Declaration public Task<HttpResponseMessage> Handle(UploadCommand<TUploadApi> request, CancellationToken cancellationToken) Parameters Type Name Description UploadCommand <TUploadApi> request The upload request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > Implements MediatR.IRequestHandler<TRequest, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Requesting.Handling.UploadCommandHandler-2.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.UploadCommandHandler-2.html",
    "title": "Class UploadCommandHandler<TUploadApi, TUploadApiResultData> | Apizr",
    "keywords": "Class UploadCommandHandler<TUploadApi, TUploadApiResultData> Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > UploadCommandHandler<TUploadApi, TUploadApiResultData> Implements MediatR.IRequestHandler < UploadCommand <TUploadApi, TUploadApiResultData>, TUploadApiResultData> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling Assembly : Apizr.Integrations.FileTransfer.MediatR.dll Syntax public class UploadCommandHandler<TUploadApi, TUploadApiResultData> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<UploadCommand<TUploadApi, TUploadApiResultData>, TUploadApiResultData> where TUploadApi : IUploadApi<TUploadApiResultData> Type Parameters Name Description TUploadApi TUploadApiResultData Constructors UploadCommandHandler(IApizrUploadManager<TUploadApi, TUploadApiResultData>) Declaration public UploadCommandHandler(IApizrUploadManager<TUploadApi, TUploadApiResultData> uploadManager) Parameters Type Name Description IApizrUploadManager <TUploadApi, TUploadApiResultData> uploadManager Methods Handle(UploadCommand<TUploadApi, TUploadApiResultData>, CancellationToken) Handling the upload request Declaration public Task<TUploadApiResultData> Handle(UploadCommand<TUploadApi, TUploadApiResultData> request, CancellationToken cancellationToken) Parameters Type Name Description UploadCommand <TUploadApi, TUploadApiResultData> request The upload request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Requesting.Handling.UploadWithCommandHandler-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Handling.UploadWithCommandHandler-1.html",
    "title": "Class UploadWithCommandHandler<TUploadApiResultData> | Apizr",
    "keywords": "Class UploadWithCommandHandler<TUploadApiResultData> Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > UploadWithCommandHandler<TUploadApiResultData> Implements MediatR.IRequestHandler < UploadWithCommand <TUploadApiResultData>, TUploadApiResultData> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Handling Assembly : Apizr.Integrations.FileTransfer.MediatR.dll Syntax public class UploadWithCommandHandler<TUploadApiResultData> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<UploadWithCommand<TUploadApiResultData>, TUploadApiResultData> Type Parameters Name Description TUploadApiResultData Constructors UploadWithCommandHandler(IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>) Declaration public UploadWithCommandHandler(IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData> uploadManager) Parameters Type Name Description IApizrUploadManager < IUploadApi <TUploadApiResultData>, TUploadApiResultData> uploadManager Methods Handle(UploadWithCommand<TUploadApiResultData>, CancellationToken) Handling the upload request Declaration public Task<TUploadApiResultData> Handle(UploadWithCommand<TUploadApiResultData> request, CancellationToken cancellationToken) Parameters Type Name Description UploadWithCommand <TUploadApiResultData> request The upload request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Mediation.Requesting.html": {
    "href": "api/Apizr.Mediation.Requesting.html",
    "title": "Namespace Apizr.Mediation.Requesting | Apizr",
    "keywords": "Namespace Apizr.Mediation.Requesting Classes DownloadQuery The mediation download query with a dictionary query parameters type DownloadQuery<TDownloadApi> The mediation download query with a dictionary query parameters type DownloadQuery<TDownloadApi, TDownloadParams> The mediation download query with a custom query parameters type DownloadWithQuery<TDownloadParams> The mediation download query with a dictionary query parameters type ExecuteResultRequest<TWebApi, TApiData> The mediation execute result request (returning result) ExecuteResultRequest<TWebApi, TModelData, TApiData> The mediation execute result request (returning result) ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> The mediation execute result request (returning result) ExecuteUnitRequest<TWebApi> The mediation execute unit request (returning no result) ExecuteUnitRequest<TWebApi, TModelData, TApiData> The mediation execute unit request (returning no result) UploadCommand The mediation upload command UploadCommand<TUploadApi> The mediation upload command UploadCommand<TUploadApi, TUploadApiResultData> The mediation upload command UploadWithCommand<TUploadApiResultData> The mediation upload command"
  },
  "api/Apizr.Mediation.Requesting.Sending.ApizrMediator.html": {
    "href": "api/Apizr.Mediation.Requesting.Sending.ApizrMediator.html",
    "title": "Class ApizrMediator | Apizr",
    "keywords": "Class ApizrMediator Apizr mediator to send request using MediatR by calling expression Inheritance System.Object ApizrMediatorBase ApizrMediator Implements IApizrMediator IApizrMediatorBase Inherited Members ApizrMediatorBase.CreateRequestOptionsBuilder(Action<IApizrRequestOptionsBuilder>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Sending Assembly : Apizr.Integrations.MediatR.dll Syntax public class ApizrMediator : ApizrMediatorBase, IApizrMediator, IApizrMediatorBase Constructors ApizrMediator(IMediator) Declaration public ApizrMediator(IMediator mediator) Parameters Type Name Description MediatR.IMediator mediator Methods SendFor<TWebApi>(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR Declaration public Task SendFor<TWebApi>(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type SendFor<TWebApi>(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token Declaration public Task SendFor<TWebApi>(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR Declaration public Task<TApiData> SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api type TApiData The api result type SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token Declaration public Task<TApiData> SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api type TApiData The api response SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Declaration public Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request Declaration public Task SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning a mapped result Declaration public Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result Declaration public Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token Declaration public Task SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning a mapped result Declaration public Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Declaration public Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result Declaration public Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from Implements IApizrMediator IApizrMediatorBase Extension Methods ApizrMediatorExtensions.SendFor<TWebApi>(IApizrMediator, Expression<Func<TWebApi, Task>>, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi>(IApizrMediator, Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi>(IApizrMediator, Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi>(IApizrMediator, Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrMediator, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrMediator, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrMediator, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrMediator, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrMediator, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean, Action<Exception>) ApizrMediatorFileTransferExtensions.SendDownloadQueryFor<TDownloadApi, TDownloadParams>(IApizrMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadQueryFor<TDownloadApi, TDownloadParams>(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadQueryFor<TDownloadApi>(IApizrMediator, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadQueryFor<TDownloadApi>(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadQuery(IApizrMediator, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadQuery(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadWithQuery<TDownloadParams>(IApizrMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadWithQuery<TDownloadParams>(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi, TUploadApiResultData>(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi, TUploadApiResultData>(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi, TUploadApiResultData>(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi>(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi>(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi>(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommand(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommand(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommand(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadWithCommand<TUploadApiResultData>(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadWithCommand<TUploadApiResultData>(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadWithCommand<TUploadApiResultData>(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>)"
  },
  "api/Apizr.Mediation.Requesting.Sending.ApizrMediator-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Sending.ApizrMediator-1.html",
    "title": "Class ApizrMediator<TWebApi> | Apizr",
    "keywords": "Class ApizrMediator<TWebApi> Apizr mediator to send request using MediatR by calling expression Inheritance System.Object ApizrMediator<TWebApi> Implements IApizrMediator <TWebApi> IApizrMediatorBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Sending Assembly : Apizr.Integrations.MediatR.dll Syntax public class ApizrMediator<TWebApi> : IApizrMediator<TWebApi>, IApizrMediatorBase Type Parameters Name Description TWebApi Constructors ApizrMediator(IApizrMediator) Declaration public ApizrMediator(IApizrMediator apizrMediator) Parameters Type Name Description IApizrMediator apizrMediator Methods SendFor(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR Declaration public Task SendFor(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task SendFor(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token Declaration public Task SendFor(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR Declaration public Task<TApiData> SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TApiData The api result type SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token Declaration public Task<TApiData> SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TApiData The api response SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Declaration public Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request Declaration public Task SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning a mapped result Declaration public Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result Declaration public Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token Declaration public Task SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning a mapped result Declaration public Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Declaration public Task<TModelResultData> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result Declaration public Task<TModelResultData> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from Implements IApizrMediator<TWebApi> IApizrMediatorBase Extension Methods ApizrTypedMediatorExtensions.SendFor<TWebApi>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, Task>>, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi>(IApizrMediator<TWebApi>, Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi>(IApizrMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi>(IApizrMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator<TWebApi>, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean, Action<Exception>)"
  },
  "api/Apizr.Mediation.Requesting.Sending.ApizrMediatorBase.html": {
    "href": "api/Apizr.Mediation.Requesting.Sending.ApizrMediatorBase.html",
    "title": "Class ApizrMediatorBase | Apizr",
    "keywords": "Class ApizrMediatorBase Inheritance System.Object ApizrMediatorBase ApizrCrudMediator ApizrMediator ApizrCrudOptionalMediator ApizrOptionalMediator Implements IApizrMediatorBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting.Sending Assembly : Apizr.Integrations.MediatR.dll Syntax public abstract class ApizrMediatorBase : IApizrMediatorBase Methods CreateRequestOptionsBuilder(Action<IApizrRequestOptionsBuilder>) Declaration protected static IApizrRequestOptionsBuilder CreateRequestOptionsBuilder(Action<IApizrRequestOptionsBuilder> optionsBuilder) Parameters Type Name Description System.Action < IApizrRequestOptionsBuilder > optionsBuilder Returns Type Description IApizrRequestOptionsBuilder Implements IApizrMediatorBase"
  },
  "api/Apizr.Mediation.Requesting.Sending.html": {
    "href": "api/Apizr.Mediation.Requesting.Sending.html",
    "title": "Namespace Apizr.Mediation.Requesting.Sending | Apizr",
    "keywords": "Namespace Apizr.Mediation.Requesting.Sending Classes ApizrMediator Apizr mediator to send request using MediatR by calling expression ApizrMediator<TWebApi> Apizr mediator to send request using MediatR by calling expression ApizrMediatorBase Interfaces IApizrMediator Apizr mediator to send request using MediatR by calling expression IApizrMediator<TWebApi> IApizrMediator but dedicated to TWebApi , getting all shorter IApizrMediatorBase Apizr base mediator"
  },
  "api/Apizr.Mediation.Requesting.Sending.IApizrMediator.html": {
    "href": "api/Apizr.Mediation.Requesting.Sending.IApizrMediator.html",
    "title": "Interface IApizrMediator | Apizr",
    "keywords": "Interface IApizrMediator Apizr mediator to send request using MediatR by calling expression Namespace : Apizr.Mediation.Requesting.Sending Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IApizrMediator : IApizrMediatorBase Methods SendFor<TWebApi>(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR Declaration Task SendFor<TWebApi>(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type SendFor<TWebApi>(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token Declaration Task SendFor<TWebApi>(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR Declaration Task<TApiData> SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api type TApiData The api result type SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token Declaration Task<TApiData> SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TWebApi The web api type TApiData The api response SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Declaration Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request Declaration Task SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning a mapped result Declaration Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result Declaration Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token Declaration Task SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning a mapped result Declaration Task<TModelData> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Declaration Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result Declaration Task<TModelResultData> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from Extension Methods ApizrMediatorExtensions.SendFor<TWebApi>(IApizrMediator, Expression<Func<TWebApi, Task>>, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi>(IApizrMediator, Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi>(IApizrMediator, Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi>(IApizrMediator, Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrMediator, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrMediator, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrMediator, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrMediator, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrMediator, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>) ApizrMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean, Action<Exception>) ApizrMediatorFileTransferExtensions.SendDownloadQueryFor<TDownloadApi, TDownloadParams>(IApizrMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadQueryFor<TDownloadApi, TDownloadParams>(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadQueryFor<TDownloadApi>(IApizrMediator, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadQueryFor<TDownloadApi>(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadQuery(IApizrMediator, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadQuery(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadWithQuery<TDownloadParams>(IApizrMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendDownloadWithQuery<TDownloadParams>(IApizrMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi, TUploadApiResultData>(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi, TUploadApiResultData>(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi, TUploadApiResultData>(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi>(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi>(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommandFor<TUploadApi>(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommand(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommand(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadCommand(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadWithCommand<TUploadApiResultData>(IApizrMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadWithCommand<TUploadApiResultData>(IApizrMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrMediatorFileTransferExtensions.SendUploadWithCommand<TUploadApiResultData>(IApizrMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>)"
  },
  "api/Apizr.Mediation.Requesting.Sending.IApizrMediator-1.html": {
    "href": "api/Apizr.Mediation.Requesting.Sending.IApizrMediator-1.html",
    "title": "Interface IApizrMediator<TWebApi> | Apizr",
    "keywords": "Interface IApizrMediator<TWebApi> IApizrMediator but dedicated to TWebApi , getting all shorter Namespace : Apizr.Mediation.Requesting.Sending Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IApizrMediator<TWebApi> : IApizrMediatorBase Type Parameters Name Description TWebApi The api interface to play with MediatR Methods SendFor(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR Declaration Task SendFor(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task SendFor(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token Declaration Task SendFor(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR Declaration Task<TApiData> SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TApiData The api result type SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token Declaration Task<TApiData> SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TApiData> Type Parameters Name Description TApiData The api response SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Declaration Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request Declaration Task SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning a mapped result Declaration Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result Declaration Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token Declaration Task SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning a mapped result Declaration Task<TModelData> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelData> Type Parameters Name Description TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning a mapped result Declaration Task<TModelResultData> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning a mapped result Declaration Task<TModelResultData> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task <TModelResultData> Type Parameters Name Description TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from Extension Methods ApizrTypedMediatorExtensions.SendFor<TWebApi>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, Task>>, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi>(IApizrMediator<TWebApi>, Expression<Func<Context, TWebApi, Task>>, Context, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi>(IApizrMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi>(IApizrMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator<TWebApi>, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean, Action<Exception>) ApizrTypedMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean, Action<Exception>)"
  },
  "api/Apizr.Mediation.Requesting.Sending.IApizrMediatorBase.html": {
    "href": "api/Apizr.Mediation.Requesting.Sending.IApizrMediatorBase.html",
    "title": "Interface IApizrMediatorBase | Apizr",
    "keywords": "Interface IApizrMediatorBase Apizr base mediator Namespace : Apizr.Mediation.Requesting.Sending Assembly : Apizr.Integrations.MediatR.dll Syntax public interface IApizrMediatorBase"
  },
  "api/Apizr.Mediation.Requesting.UploadCommand.html": {
    "href": "api/Apizr.Mediation.Requesting.UploadCommand.html",
    "title": "Class UploadCommand | Apizr",
    "keywords": "Class UploadCommand The mediation upload command Inheritance System.Object RequestBase < System.Net.Http.HttpResponseMessage , IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationCommandBase < MediatR.Unit , System.Net.Http.HttpResponseMessage , IApizrRequestOptions , IApizrRequestOptionsBuilder > UploadCommand < IUploadApi , System.Net.Http.HttpResponseMessage > UploadCommand < IUploadApi > UploadCommand Implements IMediationCommand < MediatR.Unit , System.Net.Http.HttpResponseMessage > MediatR.IRequest < System.Net.Http.HttpResponseMessage > MediatR.IBaseRequest Inherited Members UploadCommand<IUploadApi, HttpResponseMessage>.FileInfoPart UploadCommand<IUploadApi, HttpResponseMessage>.StreamPart UploadCommand<IUploadApi, HttpResponseMessage>.ByteArrayPart RequestBase<HttpResponseMessage, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting Assembly : Apizr.Integrations.FileTransfer.MediatR.dll Syntax public class UploadCommand : UploadCommand<IUploadApi>, IMediationCommand<Unit, HttpResponseMessage>, IRequest<HttpResponseMessage>, IBaseRequest Constructors UploadCommand(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Declaration public UploadCommand(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.ByteArrayPart byteArrayPart System.Action < IApizrRequestOptionsBuilder > optionsBuilder UploadCommand(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Declaration public UploadCommand(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.FileInfoPart fileInfoPart System.Action < IApizrRequestOptionsBuilder > optionsBuilder UploadCommand(StreamPart, Action<IApizrRequestOptionsBuilder>) Declaration public UploadCommand(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.StreamPart streamPart System.Action < IApizrRequestOptionsBuilder > optionsBuilder Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.UploadCommand-1.html": {
    "href": "api/Apizr.Mediation.Requesting.UploadCommand-1.html",
    "title": "Class UploadCommand<TUploadApi> | Apizr",
    "keywords": "Class UploadCommand<TUploadApi> The mediation upload command Inheritance System.Object RequestBase < System.Net.Http.HttpResponseMessage , IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationCommandBase < MediatR.Unit , System.Net.Http.HttpResponseMessage , IApizrRequestOptions , IApizrRequestOptionsBuilder > UploadCommand <TUploadApi, System.Net.Http.HttpResponseMessage > UploadCommand<TUploadApi> UploadCommand Implements IMediationCommand < MediatR.Unit , System.Net.Http.HttpResponseMessage > MediatR.IRequest < System.Net.Http.HttpResponseMessage > MediatR.IBaseRequest Inherited Members UploadCommand<TUploadApi, HttpResponseMessage>.FileInfoPart UploadCommand<TUploadApi, HttpResponseMessage>.StreamPart UploadCommand<TUploadApi, HttpResponseMessage>.ByteArrayPart RequestBase<HttpResponseMessage, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting Assembly : Apizr.Integrations.FileTransfer.MediatR.dll Syntax public class UploadCommand<TUploadApi> : UploadCommand<TUploadApi, HttpResponseMessage>, IMediationCommand<Unit, HttpResponseMessage>, IRequest<HttpResponseMessage>, IBaseRequest where TUploadApi : IUploadApi Type Parameters Name Description TUploadApi Constructors UploadCommand(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Declaration public UploadCommand(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.ByteArrayPart byteArrayPart System.Action < IApizrRequestOptionsBuilder > optionsBuilder UploadCommand(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Declaration public UploadCommand(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.FileInfoPart fileInfoPart System.Action < IApizrRequestOptionsBuilder > optionsBuilder UploadCommand(StreamPart, Action<IApizrRequestOptionsBuilder>) Declaration public UploadCommand(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.StreamPart streamPart System.Action < IApizrRequestOptionsBuilder > optionsBuilder Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.UploadCommand-2.html": {
    "href": "api/Apizr.Mediation.Requesting.UploadCommand-2.html",
    "title": "Class UploadCommand<TUploadApi, TUploadApiResultData> | Apizr",
    "keywords": "Class UploadCommand<TUploadApi, TUploadApiResultData> The mediation upload command Inheritance System.Object RequestBase <TUploadApiResultData, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationCommandBase < MediatR.Unit , TUploadApiResultData, IApizrRequestOptions , IApizrRequestOptionsBuilder > UploadCommand<TUploadApi, TUploadApiResultData> UploadCommand<TUploadApi> UploadWithCommand<TUploadApiResultData> Implements IMediationCommand < MediatR.Unit , TUploadApiResultData> MediatR.IRequest <TUploadApiResultData> MediatR.IBaseRequest Inherited Members RequestBase<TUploadApiResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting Assembly : Apizr.Integrations.FileTransfer.MediatR.dll Syntax public class UploadCommand<TUploadApi, TUploadApiResultData> : MediationCommandBase<Unit, TUploadApiResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<Unit, TUploadApiResultData>, IRequest<TUploadApiResultData>, IBaseRequest where TUploadApi : IUploadApi<TUploadApiResultData> Type Parameters Name Description TUploadApi The upload api type to manage TUploadApiResultData The upload api result data type Constructors UploadCommand(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data Declaration public UploadCommand(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.ByteArrayPart byteArrayPart The file bytes data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options UploadCommand(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data Declaration public UploadCommand(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.FileInfoPart fileInfoPart The file info data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options UploadCommand(StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data Declaration public UploadCommand(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.StreamPart streamPart The file stream data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Properties ByteArrayPart The file bytes data Declaration public ByteArrayPart ByteArrayPart { get; } Property Value Type Description Refit.ByteArrayPart FileInfoPart The file info data Declaration public FileInfoPart FileInfoPart { get; } Property Value Type Description Refit.FileInfoPart StreamPart The file stream data Declaration public StreamPart StreamPart { get; } Property Value Type Description Refit.StreamPart Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Mediation.Requesting.UploadWithCommand-1.html": {
    "href": "api/Apizr.Mediation.Requesting.UploadWithCommand-1.html",
    "title": "Class UploadWithCommand<TUploadApiResultData> | Apizr",
    "keywords": "Class UploadWithCommand<TUploadApiResultData> The mediation upload command Inheritance System.Object RequestBase <TUploadApiResultData, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationCommandBase < MediatR.Unit , TUploadApiResultData, IApizrRequestOptions , IApizrRequestOptionsBuilder > UploadCommand < IUploadApi <TUploadApiResultData>, TUploadApiResultData> UploadWithCommand<TUploadApiResultData> Implements IMediationCommand < MediatR.Unit , TUploadApiResultData> MediatR.IRequest <TUploadApiResultData> MediatR.IBaseRequest Inherited Members UploadCommand<IUploadApi<TUploadApiResultData>, TUploadApiResultData>.FileInfoPart UploadCommand<IUploadApi<TUploadApiResultData>, TUploadApiResultData>.StreamPart UploadCommand<IUploadApi<TUploadApiResultData>, TUploadApiResultData>.ByteArrayPart RequestBase<TUploadApiResultData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Mediation.Requesting Assembly : Apizr.Integrations.FileTransfer.MediatR.dll Syntax public class UploadWithCommand<TUploadApiResultData> : UploadCommand<IUploadApi<TUploadApiResultData>, TUploadApiResultData>, IMediationCommand<Unit, TUploadApiResultData>, IRequest<TUploadApiResultData>, IBaseRequest Type Parameters Name Description TUploadApiResultData Constructors UploadWithCommand(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Declaration public UploadWithCommand(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.ByteArrayPart byteArrayPart System.Action < IApizrRequestOptionsBuilder > optionsBuilder UploadWithCommand(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Declaration public UploadWithCommand(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.FileInfoPart fileInfoPart System.Action < IApizrRequestOptionsBuilder > optionsBuilder UploadWithCommand(StreamPart, Action<IApizrRequestOptionsBuilder>) Declaration public UploadWithCommand(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.StreamPart streamPart System.Action < IApizrRequestOptionsBuilder > optionsBuilder Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.MediationFileTransferOptionsBuilderExtensions.html": {
    "href": "api/Apizr.MediationFileTransferOptionsBuilderExtensions.html",
    "title": "Class MediationFileTransferOptionsBuilderExtensions | Apizr",
    "keywords": "Class MediationFileTransferOptionsBuilderExtensions Inheritance System.Object MediationFileTransferOptionsBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.FileTransfer.MediatR.dll Syntax public static class MediationFileTransferOptionsBuilderExtensions Methods WithFileTransferMediation(IApizrExtendedCommonOptionsBuilder) Let Apizr handle file transfer requests management with some mediation Declaration public static IApizrExtendedCommonOptionsBuilder WithFileTransferMediation(this IApizrExtendedCommonOptionsBuilder optionsBuilder) Parameters Type Name Description IApizrExtendedCommonOptionsBuilder optionsBuilder Returns Type Description IApizrExtendedCommonOptionsBuilder WithFileTransferMediation(IApizrExtendedManagerOptionsBuilder) Let Apizr handle file transfer requests management with some mediation Declaration public static IApizrExtendedManagerOptionsBuilder WithFileTransferMediation(this IApizrExtendedManagerOptionsBuilder optionsBuilder) Parameters Type Name Description IApizrExtendedManagerOptionsBuilder optionsBuilder Returns Type Description IApizrExtendedManagerOptionsBuilder"
  },
  "api/Apizr.MediationOptionsBuilderExtensions.html": {
    "href": "api/Apizr.MediationOptionsBuilderExtensions.html",
    "title": "Class MediationOptionsBuilderExtensions | Apizr",
    "keywords": "Class MediationOptionsBuilderExtensions MediatR options builder extensions Inheritance System.Object MediationOptionsBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.MediatR.dll Syntax public static class MediationOptionsBuilderExtensions Methods WithMediation(IApizrExtendedCommonOptionsBuilder) Let Apizr handle requests execution with some mediation Declaration public static IApizrExtendedCommonOptionsBuilder WithMediation(this IApizrExtendedCommonOptionsBuilder optionsBuilder) Parameters Type Name Description IApizrExtendedCommonOptionsBuilder optionsBuilder Returns Type Description IApizrExtendedCommonOptionsBuilder WithMediation(IApizrExtendedManagerOptionsBuilder) Let Apizr handle requests execution with some mediation Declaration public static IApizrExtendedManagerOptionsBuilder WithMediation(this IApizrExtendedManagerOptionsBuilder optionsBuilder) Parameters Type Name Description IApizrExtendedManagerOptionsBuilder optionsBuilder Returns Type Description IApizrExtendedManagerOptionsBuilder"
  },
  "api/Apizr.MicrosoftCachingOptionsBuilderExtensions.html": {
    "href": "api/Apizr.MicrosoftCachingOptionsBuilderExtensions.html",
    "title": "Class MicrosoftCachingOptionsBuilderExtensions | Apizr",
    "keywords": "Class MicrosoftCachingOptionsBuilderExtensions Microsoft Caching options builder extensions Inheritance System.Object MicrosoftCachingOptionsBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Extensions.Microsoft.Caching.dll Syntax public static class MicrosoftCachingOptionsBuilderExtensions Methods WithDistributedCacheHandler<TBuilder, TCache>(TBuilder) Use any registered IDistributedCache implementation Declaration public static TBuilder WithDistributedCacheHandler<TBuilder, TCache>(this TBuilder builder) where TBuilder : IApizrExtendedCommonOptionsBuilder Parameters Type Name Description TBuilder builder Returns Type Description TBuilder Type Parameters Name Description TBuilder TCache WithInMemoryCacheHandler<TBuilder>(TBuilder) Use any registered IMemoryCache implementation Declaration public static TBuilder WithInMemoryCacheHandler<TBuilder>(this TBuilder builder) where TBuilder : IApizrExtendedCommonOptionsBuilder Parameters Type Name Description TBuilder builder Returns Type Description TBuilder Type Parameters Name Description TBuilder"
  },
  "api/Apizr.MonkeyCacheHandler.html": {
    "href": "api/Apizr.MonkeyCacheHandler.html",
    "title": "Class MonkeyCacheHandler | Apizr",
    "keywords": "Class MonkeyCacheHandler MonkeyCache cache handler implementation Inheritance System.Object MonkeyCacheHandler Implements ICacheHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.MonkeyCache.dll Syntax public class MonkeyCacheHandler : ICacheHandler Constructors MonkeyCacheHandler(IBarrel) Declaration public MonkeyCacheHandler(IBarrel barrel) Parameters Type Name Description MonkeyCache.IBarrel barrel Methods ClearAsync(CancellationToken) Map Apizr cache clearing method to your cache handler method Declaration public Task ClearAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task GetAsync<T>(String, CancellationToken) Map Apizr cache getting method to your cache handler method Declaration public Task<T> GetAsync<T>(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key The key to get from System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task <T> Type Parameters Name Description T The expected value type RemoveAsync(String, CancellationToken) Map Apizr cache removing method to your cache handler method Declaration public Task<bool> RemoveAsync(string key, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key The key to remove from System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Boolean > SetAsync(String, Object, Nullable<TimeSpan>, CancellationToken) Map Apizr cache saving method to your cache handler method Declaration public Task SetAsync(string key, object value, TimeSpan? lifeSpan = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String key The key to cache at System.Object value The value to cache System.Nullable < System.TimeSpan > lifeSpan The optional life span System.Threading.CancellationToken cancellationToken An optional cancellation token Returns Type Description System.Threading.Tasks.Task Implements ICacheHandler"
  },
  "api/Apizr.Optional.Commanding.html": {
    "href": "api/Apizr.Optional.Commanding.html",
    "title": "Namespace Apizr.Optional.Commanding | Apizr",
    "keywords": "Namespace Apizr.Optional.Commanding Interfaces IOptionalCommand<TError> A mediation command returning an optional error"
  },
  "api/Apizr.Optional.Commanding.IOptionalCommand-1.html": {
    "href": "api/Apizr.Optional.Commanding.IOptionalCommand-1.html",
    "title": "Interface IOptionalCommand<TError> | Apizr",
    "keywords": "Interface IOptionalCommand<TError> A mediation command returning an optional error Namespace : Apizr.Optional.Commanding Assembly : Apizr.Integrations.Optional.dll Syntax public interface IOptionalCommand<TError> : IRequest<Option<Unit, TError>>, IBaseRequest Type Parameters Name Description TError The optional error"
  },
  "api/Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistry.html": {
    "href": "api/Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistry.html",
    "title": "Class ApizrOptionalMediationRegistry | Apizr",
    "keywords": "Class ApizrOptionalMediationRegistry Registry options available for extended registrations with optional mediation Inheritance System.Object ApizrOptionalMediationRegistryBase ApizrOptionalMediationRegistry Implements IApizrOptionalMediationConcurrentRegistry IApizrOptionalMediationRegistry IApizrOptionalMediationEnumerableRegistry System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.Type , System.Func < IApizrOptionalMediatorBase >>> System.Collections.IEnumerable IApizrExtendedConcurrentRegistryBase Inherited Members ApizrOptionalMediationRegistryBase.ConcurrentRegistry ApizrOptionalMediationRegistryBase.GetEnumerator() ApizrOptionalMediationRegistryBase.IEnumerable.GetEnumerator() ApizrOptionalMediationRegistryBase.GetCrudOptionalMediatorFor<T>() ApizrOptionalMediationRegistryBase.GetCrudOptionalMediatorFor<T, TKey>() ApizrOptionalMediationRegistryBase.GetCrudOptionalMediatorFor<T, TKey, TReadAllResult>() ApizrOptionalMediationRegistryBase.GetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrOptionalMediationRegistryBase.GetOptionalMediatorFor<TWebApi>() ApizrOptionalMediationRegistryBase.TryGetCrudOptionalMediatorFor<T>(IApizrCrudOptionalMediator<T, Int32, IEnumerable<T>, IDictionary<String, Object>>) ApizrOptionalMediationRegistryBase.TryGetCrudOptionalMediatorFor<T, TKey>(IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<String, Object>>) ApizrOptionalMediationRegistryBase.TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult>(IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<String, Object>>) ApizrOptionalMediationRegistryBase.TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams>) ApizrOptionalMediationRegistryBase.TryGetOptionalMediatorFor<TWebApi>(IApizrOptionalMediator<TWebApi>) ApizrOptionalMediationRegistryBase.Count ApizrOptionalMediationRegistryBase.ContainsCrudOptionalMediatorFor<T>() ApizrOptionalMediationRegistryBase.ContainsCrudOptionalMediatorFor<T, TKey>() ApizrOptionalMediationRegistryBase.ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult>() ApizrOptionalMediationRegistryBase.ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() ApizrOptionalMediationRegistryBase.ContainsOptionalMediatorFor<TWebApi>() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Configuring.Registry Assembly : Apizr.Integrations.Optional.dll Syntax public class ApizrOptionalMediationRegistry : ApizrOptionalMediationRegistryBase, IApizrOptionalMediationConcurrentRegistry, IApizrOptionalMediationRegistry, IApizrOptionalMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>>, IEnumerable, IApizrExtendedConcurrentRegistryBase Methods AddOrUpdateManager(Type) Declaration public void AddOrUpdateManager(Type managerType) Parameters Type Name Description System.Type managerType Implements IApizrOptionalMediationConcurrentRegistry IApizrOptionalMediationRegistry IApizrOptionalMediationEnumerableRegistry System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IApizrExtendedConcurrentRegistryBase"
  },
  "api/Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.html": {
    "href": "api/Apizr.Optional.Configuring.Registry.ApizrOptionalMediationRegistryBase.html",
    "title": "Class ApizrOptionalMediationRegistryBase | Apizr",
    "keywords": "Class ApizrOptionalMediationRegistryBase Registry options available for extended registrations with optional mediation Inheritance System.Object ApizrOptionalMediationRegistryBase ApizrOptionalMediationRegistry Implements IApizrOptionalMediationEnumerableRegistry System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.Type , System.Func < IApizrOptionalMediatorBase >>> System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Configuring.Registry Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ApizrOptionalMediationRegistryBase : IApizrOptionalMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>>, IEnumerable Constructors ApizrOptionalMediationRegistryBase() Declaration protected ApizrOptionalMediationRegistryBase() Fields ConcurrentRegistry Declaration protected readonly IDictionary<Type, Func<IApizrOptionalMediatorBase>> ConcurrentRegistry Field Value Type Description System.Collections.Generic.IDictionary < System.Type , System.Func < IApizrOptionalMediatorBase >> Properties Count Optional mediators count Declaration public int Count { get; } Property Value Type Description System.Int32 Methods ContainsCrudOptionalMediatorFor<T>() Check if registry contains an optional mediator for T entity type Declaration public bool ContainsCrudOptionalMediatorFor<T>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage ContainsCrudOptionalMediatorFor<T, TKey>() Check if registry contains an optional mediator for T entity type with TKey key type Declaration public bool ContainsCrudOptionalMediatorFor<T, TKey>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult>() Check if registry contains an optional mediator for T entity type with TKey key type and TReadAllResult ReadAll result type Declaration public bool ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Check if registry contains an optional mediator for T entity type with TKey key type, TReadAllResult ReadAll result type and TReadAllParams ReadAll params type Declaration public bool ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type TReadAllParams The ReadAll params type ContainsOptionalMediatorFor<TWebApi>() Check if registry contains an optional mediator for TWebApi api type Declaration public bool ContainsOptionalMediatorFor<TWebApi>() Returns Type Description System.Boolean Type Parameters Name Description TWebApi The api type GetCrudOptionalMediatorFor<T>() Get a Crud optional mediator instance for an entity type Declaration public IApizrCrudOptionalMediator<T, int, IEnumerable<T>, IDictionary<string, object>> GetCrudOptionalMediatorFor<T>() where T : class Returns Type Description IApizrCrudOptionalMediator <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T The managed entity type GetCrudOptionalMediatorFor<T, TKey>() Get a Crud optional mediator instance for an entity type with a specific key type Declaration public IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> GetCrudOptionalMediatorFor<T, TKey>() where T : class Returns Type Description IApizrCrudOptionalMediator <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T The managed entity type TKey The entity's key type GetCrudOptionalMediatorFor<T, TKey, TReadAllResult>() Get a Crud optional mediator instance for an entity type with a specific key type and ReadAll result type Declaration public IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<string, object>> GetCrudOptionalMediatorFor<T, TKey, TReadAllResult>() where T : class Returns Type Description IApizrCrudOptionalMediator <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type GetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Get a Crud optional mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type Declaration public IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams> GetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description IApizrCrudOptionalMediator <T, TKey, TReadAllResult, TReadAllParams> Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type GetEnumerator() Get factory enumerator Declaration public IEnumerator<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Collections.Generic.KeyValuePair < System.Type , System.Func < IApizrOptionalMediatorBase >>> GetOptionalMediatorFor<TWebApi>() Get an api optional mediator instance Declaration public IApizrOptionalMediator<TWebApi> GetOptionalMediatorFor<TWebApi>() Returns Type Description IApizrOptionalMediator <TWebApi> Type Parameters Name Description TWebApi The managed api type TryGetCrudOptionalMediatorFor<T>(out IApizrCrudOptionalMediator<T, Int32, IEnumerable<T>, IDictionary<String, Object>>) Try to get a Crud optional mediator instance for an entity type Declaration public bool TryGetCrudOptionalMediatorFor<T>(out IApizrCrudOptionalMediator<T, int, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudOptionalMediator <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TryGetCrudOptionalMediatorFor<T, TKey>(out IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<String, Object>>) Try to get a Crud optional mediator instance for an entity type with a specific key type Declaration public bool TryGetCrudOptionalMediatorFor<T, TKey>(out IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudOptionalMediator <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<String, Object>>) Try to get a Crud optional mediator instance for an entity type with a specific key type and ReadAll result type Declaration public bool TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudOptionalMediator <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams>) Try to get a Crud optional mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type Declaration public bool TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams> mediator) where T : class Parameters Type Name Description IApizrCrudOptionalMediator <T, TKey, TReadAllResult, TReadAllParams> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type TryGetOptionalMediatorFor<TWebApi>(out IApizrOptionalMediator<TWebApi>) Try to get an api optional mediator instance Declaration public bool TryGetOptionalMediatorFor<TWebApi>(out IApizrOptionalMediator<TWebApi> mediator) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator Returns Type Description System.Boolean Type Parameters Name Description TWebApi The managed api type Explicit Interface Implementations IEnumerable.GetEnumerator() Get factory enumerator Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements IApizrOptionalMediationEnumerableRegistry System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Apizr.Optional.Configuring.Registry.html": {
    "href": "api/Apizr.Optional.Configuring.Registry.html",
    "title": "Namespace Apizr.Optional.Configuring.Registry | Apizr",
    "keywords": "Namespace Apizr.Optional.Configuring.Registry Classes ApizrOptionalMediationRegistry Registry options available for extended registrations with optional mediation ApizrOptionalMediationRegistryBase Registry options available for extended registrations with optional mediation Interfaces IApizrOptionalMediationConcurrentRegistry IApizrOptionalMediationEnumerableRegistry Registry options available for extended registrations with optional mediation IApizrOptionalMediationRegistry"
  },
  "api/Apizr.Optional.Configuring.Registry.IApizrOptionalMediationConcurrentRegistry.html": {
    "href": "api/Apizr.Optional.Configuring.Registry.IApizrOptionalMediationConcurrentRegistry.html",
    "title": "Interface IApizrOptionalMediationConcurrentRegistry | Apizr",
    "keywords": "Interface IApizrOptionalMediationConcurrentRegistry Inherited Members IApizrOptionalMediationEnumerableRegistry.Count IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T>() IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T, TKey>() IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult>() IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrOptionalMediationEnumerableRegistry.ContainsOptionalMediatorFor<TWebApi>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T, TKey>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T, TKey, TReadAllResult>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrOptionalMediationEnumerableRegistry.GetOptionalMediatorFor<TWebApi>() IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T>(IApizrCrudOptionalMediator<T, Int32, IEnumerable<T>, IDictionary<String, Object>>) IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T, TKey>(IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<String, Object>>) IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult>(IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<String, Object>>) IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams>) IApizrOptionalMediationEnumerableRegistry.TryGetOptionalMediatorFor<TWebApi>(IApizrOptionalMediator<TWebApi>) System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Func<Apizr.Optional.Requesting.Sending.IApizrOptionalMediatorBase>>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() IApizrExtendedConcurrentRegistryBase.AddOrUpdateManager(Type) Namespace : Apizr.Optional.Configuring.Registry Assembly : Apizr.Integrations.Optional.dll Syntax public interface IApizrOptionalMediationConcurrentRegistry : IApizrOptionalMediationRegistry, IApizrOptionalMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>>, IEnumerable, IApizrExtendedConcurrentRegistryBase"
  },
  "api/Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.html": {
    "href": "api/Apizr.Optional.Configuring.Registry.IApizrOptionalMediationEnumerableRegistry.html",
    "title": "Interface IApizrOptionalMediationEnumerableRegistry | Apizr",
    "keywords": "Interface IApizrOptionalMediationEnumerableRegistry Registry options available for extended registrations with optional mediation Inherited Members System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Func<Apizr.Optional.Requesting.Sending.IApizrOptionalMediatorBase>>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() Namespace : Apizr.Optional.Configuring.Registry Assembly : Apizr.Integrations.Optional.dll Syntax public interface IApizrOptionalMediationEnumerableRegistry : IEnumerable<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>>, IEnumerable Properties Count Optional mediators count Declaration int Count { get; } Property Value Type Description System.Int32 Methods ContainsCrudOptionalMediatorFor<T>() Check if registry contains an optional mediator for T entity type Declaration bool ContainsCrudOptionalMediatorFor<T>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage ContainsCrudOptionalMediatorFor<T, TKey>() Check if registry contains an optional mediator for T entity type with TKey key type Declaration bool ContainsCrudOptionalMediatorFor<T, TKey>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult>() Check if registry contains an optional mediator for T entity type with TKey key type and TReadAllResult ReadAll result type Declaration bool ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Check if registry contains an optional mediator for T entity type with TKey key type, TReadAllResult ReadAll result type and TReadAllParams ReadAll params type Declaration bool ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description System.Boolean Type Parameters Name Description T The entity type to manage TKey The entity key type TReadAllResult The ReadAll result type TReadAllParams The ReadAll params type ContainsOptionalMediatorFor<TWebApi>() Check if registry contains an optional mediator for TWebApi api type Declaration bool ContainsOptionalMediatorFor<TWebApi>() Returns Type Description System.Boolean Type Parameters Name Description TWebApi The api type GetCrudOptionalMediatorFor<T>() Get a Crud optional mediator instance for an entity type Declaration IApizrCrudOptionalMediator<T, int, IEnumerable<T>, IDictionary<string, object>> GetCrudOptionalMediatorFor<T>() where T : class Returns Type Description IApizrCrudOptionalMediator <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T The managed entity type GetCrudOptionalMediatorFor<T, TKey>() Get a Crud optional mediator instance for an entity type with a specific key type Declaration IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> GetCrudOptionalMediatorFor<T, TKey>() where T : class Returns Type Description IApizrCrudOptionalMediator <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T The managed entity type TKey The entity's key type GetCrudOptionalMediatorFor<T, TKey, TReadAllResult>() Get a Crud optional mediator instance for an entity type with a specific key type and ReadAll result type Declaration IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<string, object>> GetCrudOptionalMediatorFor<T, TKey, TReadAllResult>() where T : class Returns Type Description IApizrCrudOptionalMediator <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >> Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type GetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() Get a Crud optional mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type Declaration IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams> GetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() where T : class Returns Type Description IApizrCrudOptionalMediator <T, TKey, TReadAllResult, TReadAllParams> Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type GetOptionalMediatorFor<TWebApi>() Get an api optional mediator instance Declaration IApizrOptionalMediator<TWebApi> GetOptionalMediatorFor<TWebApi>() Returns Type Description IApizrOptionalMediator <TWebApi> Type Parameters Name Description TWebApi The managed api type TryGetCrudOptionalMediatorFor<T>(out IApizrCrudOptionalMediator<T, Int32, IEnumerable<T>, IDictionary<String, Object>>) Try to get a Crud optional mediator instance for an entity type Declaration bool TryGetCrudOptionalMediatorFor<T>(out IApizrCrudOptionalMediator<T, int, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudOptionalMediator <T, System.Int32 , System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TryGetCrudOptionalMediatorFor<T, TKey>(out IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<String, Object>>) Try to get a Crud optional mediator instance for an entity type with a specific key type Declaration bool TryGetCrudOptionalMediatorFor<T, TKey>(out IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudOptionalMediator <T, TKey, System.Collections.Generic.IEnumerable <T>, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<String, Object>>) Try to get a Crud optional mediator instance for an entity type with a specific key type and ReadAll result type Declaration bool TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<string, object>> mediator) where T : class Parameters Type Name Description IApizrCrudOptionalMediator <T, TKey, TReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams>) Try to get a Crud optional mediator instance for an entity type with a specific key type, ReadAll result type and ReadAll params type Declaration bool TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(out IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams> mediator) where T : class Parameters Type Name Description IApizrCrudOptionalMediator <T, TKey, TReadAllResult, TReadAllParams> mediator Returns Type Description System.Boolean Type Parameters Name Description T The managed entity type TKey The entity's key type TReadAllResult The ReadAll request result type TReadAllParams The ReadAll request params type TryGetOptionalMediatorFor<TWebApi>(out IApizrOptionalMediator<TWebApi>) Try to get an api optional mediator instance Declaration bool TryGetOptionalMediatorFor<TWebApi>(out IApizrOptionalMediator<TWebApi> mediator) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator Returns Type Description System.Boolean Type Parameters Name Description TWebApi The managed api type"
  },
  "api/Apizr.Optional.Configuring.Registry.IApizrOptionalMediationRegistry.html": {
    "href": "api/Apizr.Optional.Configuring.Registry.IApizrOptionalMediationRegistry.html",
    "title": "Interface IApizrOptionalMediationRegistry | Apizr",
    "keywords": "Interface IApizrOptionalMediationRegistry Inherited Members IApizrOptionalMediationEnumerableRegistry.Count IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T>() IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T, TKey>() IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult>() IApizrOptionalMediationEnumerableRegistry.ContainsCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrOptionalMediationEnumerableRegistry.ContainsOptionalMediatorFor<TWebApi>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T, TKey>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T, TKey, TReadAllResult>() IApizrOptionalMediationEnumerableRegistry.GetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>() IApizrOptionalMediationEnumerableRegistry.GetOptionalMediatorFor<TWebApi>() IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T>(IApizrCrudOptionalMediator<T, Int32, IEnumerable<T>, IDictionary<String, Object>>) IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T, TKey>(IApizrCrudOptionalMediator<T, TKey, IEnumerable<T>, IDictionary<String, Object>>) IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult>(IApizrCrudOptionalMediator<T, TKey, TReadAllResult, IDictionary<String, Object>>) IApizrOptionalMediationEnumerableRegistry.TryGetCrudOptionalMediatorFor<T, TKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<T, TKey, TReadAllResult, TReadAllParams>) IApizrOptionalMediationEnumerableRegistry.TryGetOptionalMediatorFor<TWebApi>(IApizrOptionalMediator<TWebApi>) System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Type, System.Func<Apizr.Optional.Requesting.Sending.IApizrOptionalMediatorBase>>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() Namespace : Apizr.Optional.Configuring.Registry Assembly : Apizr.Integrations.Optional.dll Syntax public interface IApizrOptionalMediationRegistry : IApizrOptionalMediationEnumerableRegistry, IEnumerable<KeyValuePair<Type, Func<IApizrOptionalMediatorBase>>>, IEnumerable"
  },
  "api/Apizr.Optional.Cruding.CreateOptionalCommand-1.html": {
    "href": "api/Apizr.Optional.Cruding.CreateOptionalCommand-1.html",
    "title": "Class CreateOptionalCommand<TModelData> | Apizr",
    "keywords": "Class CreateOptionalCommand<TModelData> The mediation Create optional command Inheritance System.Object RequestBase < Optional.Option <TModelData, ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationCommandBase <TModelData, Optional.Option <TModelData, ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > CreateCommandBase <TModelData, Optional.Option <TModelData, ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > CreateOptionalCommand<TModelData> Implements IMediationCommand <TModelData, Optional.Option <TModelData, ApizrException >> MediatR.IRequest < Optional.Option <TModelData, ApizrException >> MediatR.IBaseRequest Inherited Members CreateCommandBase<TModelData, Option<TModelData, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.RequestData RequestBase<Option<TModelData, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding Assembly : Apizr.Integrations.Optional.dll Syntax public class CreateOptionalCommand<TModelData> : CreateCommandBase<TModelData, Option<TModelData, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<TModelData, Option<TModelData, ApizrException>>, IRequest<Option<TModelData, ApizrException>>, IBaseRequest Type Parameters Name Description TModelData The data type Constructors CreateOptionalCommand(TModelData, Action<IApizrRequestOptionsBuilder>) The mediation Create optional command constructor Declaration public CreateOptionalCommand(TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TModelData modelData The request data to send System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Cruding.DeleteOptionalCommand-1.html": {
    "href": "api/Apizr.Optional.Cruding.DeleteOptionalCommand-1.html",
    "title": "Class DeleteOptionalCommand<T> | Apizr",
    "keywords": "Class DeleteOptionalCommand<T> The mediation Delete optional command Inheritance System.Object RequestBase < Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationCommandBase < System.Int32 , Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > DeleteCommandBase <T, System.Int32 , Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > DeleteCommandBase <T, Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > DeleteOptionalCommand<T> Implements IMediationCommand < System.Int32 , Optional.Option < MediatR.Unit , ApizrException >> MediatR.IRequest < Optional.Option < MediatR.Unit , ApizrException >> MediatR.IBaseRequest Inherited Members DeleteCommandBase<T, Int32, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key RequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding Assembly : Apizr.Integrations.Optional.dll Syntax public class DeleteOptionalCommand<T> : DeleteCommandBase<T, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<int, Option<Unit, ApizrException>>, IRequest<Option<Unit, ApizrException>>, IBaseRequest Type Parameters Name Description T The api entity type Constructors DeleteOptionalCommand(Int32, Action<IApizrRequestOptionsBuilder>) The mediation Delete optional command constructor Declaration public DeleteOptionalCommand(int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Int32 key The entity's crud key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Cruding.DeleteOptionalCommand-2.html": {
    "href": "api/Apizr.Optional.Cruding.DeleteOptionalCommand-2.html",
    "title": "Class DeleteOptionalCommand<T, TKey> | Apizr",
    "keywords": "Class DeleteOptionalCommand<T, TKey> The mediation Delete optional command Inheritance System.Object RequestBase < Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationCommandBase <TKey, Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > DeleteCommandBase <T, TKey, Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > DeleteOptionalCommand<T, TKey> Implements IMediationCommand <TKey, Optional.Option < MediatR.Unit , ApizrException >> MediatR.IRequest < Optional.Option < MediatR.Unit , ApizrException >> MediatR.IBaseRequest Inherited Members DeleteCommandBase<T, TKey, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key RequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding Assembly : Apizr.Integrations.Optional.dll Syntax public class DeleteOptionalCommand<T, TKey> : DeleteCommandBase<T, TKey, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<TKey, Option<Unit, ApizrException>>, IRequest<Option<Unit, ApizrException>>, IBaseRequest Type Parameters Name Description T The api entity type TKey The entity's crud key type Constructors DeleteOptionalCommand(TKey, Action<IApizrRequestOptionsBuilder>) The mediation Delete optional command constructor Declaration public DeleteOptionalCommand(TKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TKey key The entity's crud key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Cruding.Handling.CreateOptionalCommandHandler-5.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.CreateOptionalCommandHandler-5.html",
    "title": "Class CreateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class CreateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Create optional command handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions , IApizrRequestOptionsBuilder > CreateCommandHandlerBase <TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, CreateOptionalCommand <TModelEntity>, Optional.Option <TModelEntity, ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > CreateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler < CreateOptionalCommand <TModelEntity>, Optional.Option <TModelEntity, ApizrException >> MediatR.IRequestHandler < CreateOptionalCommand <TModelEntity>, Optional.Option <TModelEntity, ApizrException >> Inherited Members CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, CreateOptionalCommand<TModelEntity>, Option<TModelEntity, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(CreateOptionalCommand<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class CreateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, CreateOptionalCommand<TModelEntity>, Option<TModelEntity, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<CreateOptionalCommand<TModelEntity>, Option<TModelEntity, ApizrException>>, IRequestHandler<CreateOptionalCommand<TModelEntity>, Option<TModelEntity, ApizrException>> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params Constructors CreateOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration public CreateOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(CreateOptionalCommand<TModelEntity>, CancellationToken) Declaration public override async Task<Option<TModelEntity, ApizrException>> Handle(CreateOptionalCommand<TModelEntity> request, CancellationToken cancellationToken) Parameters Type Name Description CreateOptionalCommand <TModelEntity> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Overrides Apizr.Mediation.Cruding.Handling.Base.CreateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, Apizr.Optional.Cruding.CreateOptionalCommand<TModelEntity>, Optional.Option<TModelEntity, Apizr.ApizrException>, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Optional.Cruding.CreateOptionalCommand<TModelEntity>, System.Threading.CancellationToken) Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Cruding.Handling.DeleteOptionalCommandHandler-4.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.DeleteOptionalCommandHandler-4.html",
    "title": "Class DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> The Delete optional command handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > CrudRequestHandlerBase <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams, IApizrRequestOptions , IApizrRequestOptionsBuilder > DeleteCommandHandlerBase <TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, DeleteOptionalCommand <TModelEntity>, Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler < DeleteOptionalCommand <TModelEntity>, Optional.Option < MediatR.Unit , ApizrException >> MediatR.IRequestHandler < DeleteOptionalCommand <TModelEntity>, Optional.Option < MediatR.Unit , ApizrException >> Inherited Members DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, DeleteOptionalCommand<TModelEntity>, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(DeleteOptionalCommand<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, Int32, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> : DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, DeleteOptionalCommand<TModelEntity>, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<DeleteOptionalCommand<TModelEntity>, Option<Unit, ApizrException>>, IRequestHandler<DeleteOptionalCommand<TModelEntity>, Option<Unit, ApizrException>> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params type Constructors DeleteOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, Int32, TReadAllResult, TReadAllParams>>) Declaration public DeleteOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(DeleteOptionalCommand<TModelEntity>, CancellationToken) Declaration public override async Task<Option<Unit, ApizrException>> Handle(DeleteOptionalCommand<TModelEntity> request, CancellationToken cancellationToken) Parameters Type Name Description DeleteOptionalCommand <TModelEntity> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Overrides Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, Apizr.Optional.Cruding.DeleteOptionalCommand<TModelEntity>, Optional.Option<MediatR.Unit, Apizr.ApizrException>, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Optional.Cruding.DeleteOptionalCommand<TModelEntity>, System.Threading.CancellationToken) Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Cruding.Handling.DeleteOptionalCommandHandler-5.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.DeleteOptionalCommandHandler-5.html",
    "title": "Class DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Delete optional command handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions , IApizrRequestOptionsBuilder > DeleteCommandHandlerBase <TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, DeleteOptionalCommand <TModelEntity, TApiEntityKey>, Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler < DeleteOptionalCommand <TModelEntity, TApiEntityKey>, Optional.Option < MediatR.Unit , ApizrException >> MediatR.IRequestHandler < DeleteOptionalCommand <TModelEntity, TApiEntityKey>, Optional.Option < MediatR.Unit , ApizrException >> Inherited Members DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, DeleteOptionalCommand<TModelEntity, TApiEntityKey>, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(DeleteOptionalCommand<TModelEntity, TApiEntityKey>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, DeleteOptionalCommand<TModelEntity, TApiEntityKey>, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<DeleteOptionalCommand<TModelEntity, TApiEntityKey>, Option<Unit, ApizrException>>, IRequestHandler<DeleteOptionalCommand<TModelEntity, TApiEntityKey>, Option<Unit, ApizrException>> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params type Constructors DeleteOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration public DeleteOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(DeleteOptionalCommand<TModelEntity, TApiEntityKey>, CancellationToken) Declaration public override async Task<Option<Unit, ApizrException>> Handle(DeleteOptionalCommand<TModelEntity, TApiEntityKey> request, CancellationToken cancellationToken) Parameters Type Name Description DeleteOptionalCommand <TModelEntity, TApiEntityKey> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Overrides Apizr.Mediation.Cruding.Handling.Base.DeleteCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, Apizr.Optional.Cruding.DeleteOptionalCommand<TModelEntity, TApiEntityKey>, Optional.Option<MediatR.Unit, Apizr.ApizrException>, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Optional.Cruding.DeleteOptionalCommand<TModelEntity, TApiEntityKey>, System.Threading.CancellationToken) Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Cruding.Handling.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.html",
    "title": "Namespace Apizr.Optional.Cruding.Handling | Apizr",
    "keywords": "Namespace Apizr.Optional.Cruding.Handling Classes CreateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Create optional command handler DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> The Delete optional command handler DeleteOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Delete optional command handler ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult> The ReadAll optional query handler ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams> The ReadAll optional query handler ReadOptionalQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> The Read optional query handler ReadOptionalQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Read optional query handler UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> The Update optional command handler UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Update optional command handler"
  },
  "api/Apizr.Optional.Cruding.Handling.ReadAllOptionalQueryHandler-4.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.ReadAllOptionalQueryHandler-4.html",
    "title": "Class ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult> | Apizr",
    "keywords": "Class ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult> The ReadAll optional query handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TApiEntityReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadAllQueryHandlerBase <TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, ReadAllOptionalQuery <TModelEntityReadAllResult>, Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult> Implements IMediationQueryHandler < ReadAllOptionalQuery <TModelEntityReadAllResult>, Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> MediatR.IRequestHandler < ReadAllOptionalQuery <TModelEntityReadAllResult>, Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Inherited Members ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, ReadAllOptionalQuery<TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ReadAllOptionalQuery<TModelEntityReadAllResult>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<String, Object>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult> : ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, ReadAllOptionalQuery<TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQueryHandler<ReadAllOptionalQuery<TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>>, IRequestHandler<ReadAllOptionalQuery<TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> where TApiEntity : class Type Parameters Name Description TApiEntity TApiEntityKey The api entity type TModelEntityReadAllResult The returned model result type TApiEntityReadAllResult The received api result type Constructors ReadAllOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<String, Object>>>) Declaration public ReadAllOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, IDictionary<string, object>>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TApiEntityReadAllResult, System.Collections.Generic.IDictionary < System.String , System.Object >>> crudApiManager Methods Handle(ReadAllOptionalQuery<TModelEntityReadAllResult>, CancellationToken) Declaration public override async Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> Handle(ReadAllOptionalQuery<TModelEntityReadAllResult> request, CancellationToken cancellationToken) Parameters Type Name Description ReadAllOptionalQuery <TModelEntityReadAllResult> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Overrides Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, Apizr.Optional.Cruding.ReadAllOptionalQuery<TModelEntityReadAllResult>, Optional.Option<TModelEntityReadAllResult, Apizr.ApizrException<TModelEntityReadAllResult>>, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Optional.Cruding.ReadAllOptionalQuery<TModelEntityReadAllResult>, System.Threading.CancellationToken) Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Cruding.Handling.ReadAllOptionalQueryHandler-5.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.ReadAllOptionalQueryHandler-5.html",
    "title": "Class ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams> The ReadAll optional query handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadAllQueryHandlerBase <TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, ReadAllOptionalQuery <TReadAllParams, TModelEntityReadAllResult>, Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams> Implements IMediationQueryHandler < ReadAllOptionalQuery <TReadAllParams, TModelEntityReadAllResult>, Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> MediatR.IRequestHandler < ReadAllOptionalQuery <TReadAllParams, TModelEntityReadAllResult>, Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Inherited Members ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class ReadAllOptionalQueryHandler<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams> : ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQueryHandler<ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>>, IRequestHandler<ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> where TApiEntity : class Type Parameters Name Description TApiEntity TApiEntityKey The api entity type TModelEntityReadAllResult The returned model result type TApiEntityReadAllResult The received api result type TReadAllParams The query parameters type Constructors ReadAllOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams>>) Declaration public ReadAllOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TApiEntityReadAllResult, TReadAllParams>> crudApiManager Methods Handle(ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, CancellationToken) Declaration public override async Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> Handle(ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult> request, CancellationToken cancellationToken) Parameters Type Name Description ReadAllOptionalQuery <TReadAllParams, TModelEntityReadAllResult> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Overrides Apizr.Mediation.Cruding.Handling.Base.ReadAllQueryHandlerBase<TApiEntity, TApiEntityKey, TModelEntityReadAllResult, TApiEntityReadAllResult, TReadAllParams, Apizr.Optional.Cruding.ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, Optional.Option<TModelEntityReadAllResult, Apizr.ApizrException<TModelEntityReadAllResult>>, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Optional.Cruding.ReadAllOptionalQuery<TReadAllParams, TModelEntityReadAllResult>, System.Threading.CancellationToken) Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Cruding.Handling.ReadOptionalQueryHandler-4.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.ReadOptionalQueryHandler-4.html",
    "title": "Class ReadOptionalQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ReadOptionalQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> The Read optional query handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > CrudRequestHandlerBase <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadQueryHandlerBase <TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, ReadOptionalQuery <TModelEntity>, Optional.Option <TModelEntity, ApizrException <TModelEntity>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadOptionalQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationQueryHandler < ReadOptionalQuery <TModelEntity>, Optional.Option <TModelEntity, ApizrException <TModelEntity>>> MediatR.IRequestHandler < ReadOptionalQuery <TModelEntity>, Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Inherited Members ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, ReadOptionalQuery<TModelEntity>, Option<TModelEntity, ApizrException<TModelEntity>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ReadOptionalQuery<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, Int32, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class ReadOptionalQueryHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> : ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, ReadOptionalQuery<TModelEntity>, Option<TModelEntity, ApizrException<TModelEntity>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQueryHandler<ReadOptionalQuery<TModelEntity>, Option<TModelEntity, ApizrException<TModelEntity>>>, IRequestHandler<ReadOptionalQuery<TModelEntity>, Option<TModelEntity, ApizrException<TModelEntity>>> where TApiEntity : class Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params type Constructors ReadOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, Int32, TReadAllResult, TReadAllParams>>) Declaration public ReadOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(ReadOptionalQuery<TModelEntity>, CancellationToken) Declaration public override async Task<Option<TModelEntity, ApizrException<TModelEntity>>> Handle(ReadOptionalQuery<TModelEntity> request, CancellationToken cancellationToken) Parameters Type Name Description ReadOptionalQuery <TModelEntity> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Overrides Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, Apizr.Optional.Cruding.ReadOptionalQuery<TModelEntity>, Optional.Option<TModelEntity, Apizr.ApizrException<TModelEntity>>, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Optional.Cruding.ReadOptionalQuery<TModelEntity>, System.Threading.CancellationToken) Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Cruding.Handling.ReadOptionalQueryHandler-5.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.ReadOptionalQueryHandler-5.html",
    "title": "Class ReadOptionalQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ReadOptionalQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Read optional query handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadQueryHandlerBase <TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, ReadOptionalQuery <TModelEntity, TApiEntityKey>, Optional.Option <TModelEntity, ApizrException <TModelEntity>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadOptionalQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationQueryHandler < ReadOptionalQuery <TModelEntity, TApiEntityKey>, Optional.Option <TModelEntity, ApizrException <TModelEntity>>> MediatR.IRequestHandler < ReadOptionalQuery <TModelEntity, TApiEntityKey>, Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Inherited Members ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, ReadOptionalQuery<TModelEntity, TApiEntityKey>, Option<TModelEntity, ApizrException<TModelEntity>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ReadOptionalQuery<TModelEntity, TApiEntityKey>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class ReadOptionalQueryHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, ReadOptionalQuery<TModelEntity, TApiEntityKey>, Option<TModelEntity, ApizrException<TModelEntity>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQueryHandler<ReadOptionalQuery<TModelEntity, TApiEntityKey>, Option<TModelEntity, ApizrException<TModelEntity>>>, IRequestHandler<ReadOptionalQuery<TModelEntity, TApiEntityKey>, Option<TModelEntity, ApizrException<TModelEntity>>> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params type Constructors ReadOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration public ReadOptionalQueryHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(ReadOptionalQuery<TModelEntity, TApiEntityKey>, CancellationToken) Declaration public override async Task<Option<TModelEntity, ApizrException<TModelEntity>>> Handle(ReadOptionalQuery<TModelEntity, TApiEntityKey> request, CancellationToken cancellationToken) Parameters Type Name Description ReadOptionalQuery <TModelEntity, TApiEntityKey> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Overrides Apizr.Mediation.Cruding.Handling.Base.ReadQueryHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, Apizr.Optional.Cruding.ReadOptionalQuery<TModelEntity, TApiEntityKey>, Optional.Option<TModelEntity, Apizr.ApizrException<TModelEntity>>, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Optional.Cruding.ReadOptionalQuery<TModelEntity, TApiEntityKey>, System.Threading.CancellationToken) Implements IMediationQueryHandler<TQuery, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Cruding.Handling.UpdateOptionalCommandHandler-4.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.UpdateOptionalCommandHandler-4.html",
    "title": "Class UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> The Update optional command handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > CrudRequestHandlerBase <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams, IApizrRequestOptions , IApizrRequestOptionsBuilder > UpdateCommandHandlerBase <TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, UpdateOptionalCommand <TModelEntity>, Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler < UpdateOptionalCommand <TModelEntity>, Optional.Option < MediatR.Unit , ApizrException >> MediatR.IRequestHandler < UpdateOptionalCommand <TModelEntity>, Optional.Option < MediatR.Unit , ApizrException >> Inherited Members UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, UpdateOptionalCommand<TModelEntity>, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(UpdateOptionalCommand<TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, Int32, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams> : UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, UpdateOptionalCommand<TModelEntity>, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<UpdateOptionalCommand<TModelEntity>, Option<Unit, ApizrException>>, IRequestHandler<UpdateOptionalCommand<TModelEntity>, Option<Unit, ApizrException>> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TReadAllResult The returned result type TReadAllParams The read all params type Constructors UpdateOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, Int32, TReadAllResult, TReadAllParams>>) Declaration public UpdateOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, int, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, System.Int32 , TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(UpdateOptionalCommand<TModelEntity>, CancellationToken) Declaration public override async Task<Option<Unit, ApizrException>> Handle(UpdateOptionalCommand<TModelEntity> request, CancellationToken cancellationToken) Parameters Type Name Description UpdateOptionalCommand <TModelEntity> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Overrides Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase<TModelEntity, TApiEntity, TReadAllResult, TReadAllParams, Apizr.Optional.Cruding.UpdateOptionalCommand<TModelEntity>, Optional.Option<MediatR.Unit, Apizr.ApizrException>, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Optional.Cruding.UpdateOptionalCommand<TModelEntity>, System.Threading.CancellationToken) Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Cruding.Handling.UpdateOptionalCommandHandler-5.html": {
    "href": "api/Apizr.Optional.Cruding.Handling.UpdateOptionalCommandHandler-5.html",
    "title": "Class UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> The Update optional command handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > CrudRequestHandlerBase <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions , IApizrRequestOptionsBuilder > UpdateCommandHandlerBase <TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, UpdateOptionalCommand <TApiEntityKey, TModelEntity>, Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IMediationCommandHandler < UpdateOptionalCommand <TApiEntityKey, TModelEntity>, Optional.Option < MediatR.Unit , ApizrException >> MediatR.IRequestHandler < UpdateOptionalCommand <TApiEntityKey, TModelEntity>, Optional.Option < MediatR.Unit , ApizrException >> Inherited Members UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, UpdateOptionalCommand<TApiEntityKey, TModelEntity>, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(UpdateOptionalCommand<TApiEntityKey, TModelEntity>, CancellationToken) CrudRequestHandlerBase<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, IApizrRequestOptions, IApizrRequestOptionsBuilder>.CrudApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class UpdateOptionalCommandHandler<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, UpdateOptionalCommand<TApiEntityKey, TModelEntity>, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommandHandler<UpdateOptionalCommand<TApiEntityKey, TModelEntity>, Option<Unit, ApizrException>>, IRequestHandler<UpdateOptionalCommand<TApiEntityKey, TModelEntity>, Option<Unit, ApizrException>> where TModelEntity : class where TApiEntity : class Type Parameters Name Description TModelEntity The model entity type TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The returned result type TReadAllParams The read all params type Constructors UpdateOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>>) Declaration public UpdateOptionalCommandHandler(IApizrManager<ICrudApi<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager) Parameters Type Name Description IApizrManager < ICrudApi <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>> crudApiManager Methods Handle(UpdateOptionalCommand<TApiEntityKey, TModelEntity>, CancellationToken) Declaration public override async Task<Option<Unit, ApizrException>> Handle(UpdateOptionalCommand<TApiEntityKey, TModelEntity> request, CancellationToken cancellationToken) Parameters Type Name Description UpdateOptionalCommand <TApiEntityKey, TModelEntity> request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Overrides Apizr.Mediation.Cruding.Handling.Base.UpdateCommandHandlerBase<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams, Apizr.Optional.Cruding.UpdateOptionalCommand<TApiEntityKey, TModelEntity>, Optional.Option<MediatR.Unit, Apizr.ApizrException>, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Optional.Cruding.UpdateOptionalCommand<TApiEntityKey, TModelEntity>, System.Threading.CancellationToken) Implements IMediationCommandHandler<TCommand, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Cruding.html": {
    "href": "api/Apizr.Optional.Cruding.html",
    "title": "Namespace Apizr.Optional.Cruding | Apizr",
    "keywords": "Namespace Apizr.Optional.Cruding Classes CreateOptionalCommand<TModelData> The mediation Create optional command DeleteOptionalCommand<T> The mediation Delete optional command DeleteOptionalCommand<T, TKey> The mediation Delete optional command ReadAllOptionalQuery<TReadAllResult> The mediation ReadAll optional query ReadAllOptionalQuery<TReadAllParams, TReadAllResult> The mediation ReadAll optional query ReadOptionalQuery<TResultData> The mediation Read optional query ReadOptionalQuery<TResultData, TKey> The mediation Read optional query UpdateOptionalCommand<TRequestData> The mediation Update optional command UpdateOptionalCommand<TKey, TRequestData> The mediation Update optional command"
  },
  "api/Apizr.Optional.Cruding.ReadAllOptionalQuery-1.html": {
    "href": "api/Apizr.Optional.Cruding.ReadAllOptionalQuery-1.html",
    "title": "Class ReadAllOptionalQuery<TReadAllResult> | Apizr",
    "keywords": "Class ReadAllOptionalQuery<TReadAllResult> The mediation ReadAll optional query Inheritance System.Object RequestBase < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationQueryBase < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadAllQueryBase < System.Collections.Generic.IDictionary < System.String , System.Object >, Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadAllQueryBase < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadAllOptionalQuery<TReadAllResult> Implements IMediationQuery < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> MediatR.IRequest < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> MediatR.IBaseRequest Inherited Members ReadAllQueryBase<IDictionary<String, Object>, Option<TReadAllResult, ApizrException<TReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Parameters RequestBase<Option<TReadAllResult, ApizrException<TReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding Assembly : Apizr.Integrations.Optional.dll Syntax public class ReadAllOptionalQuery<TReadAllResult> : ReadAllQueryBase<Option<TReadAllResult, ApizrException<TReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<Option<TReadAllResult, ApizrException<TReadAllResult>>>, IRequest<Option<TReadAllResult, ApizrException<TReadAllResult>>>, IBaseRequest Type Parameters Name Description TReadAllResult The api result type Constructors ReadAllOptionalQuery(Action<IApizrRequestOptionsBuilder>) The mediation ReadAll optional query constructor Declaration public ReadAllOptionalQuery(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request ReadAllOptionalQuery(IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) The mediation ReadAll optional query constructor Declaration public ReadAllOptionalQuery(IDictionary<string, object> parameters, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Object > parameters The query parameters to send System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Cruding.ReadAllOptionalQuery-2.html": {
    "href": "api/Apizr.Optional.Cruding.ReadAllOptionalQuery-2.html",
    "title": "Class ReadAllOptionalQuery<TReadAllParams, TReadAllResult> | Apizr",
    "keywords": "Class ReadAllOptionalQuery<TReadAllParams, TReadAllResult> The mediation ReadAll optional query Inheritance System.Object RequestBase < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationQueryBase < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadAllQueryBase <TReadAllParams, Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadAllOptionalQuery<TReadAllParams, TReadAllResult> Implements IMediationQuery < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> MediatR.IRequest < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> MediatR.IBaseRequest Inherited Members ReadAllQueryBase<TReadAllParams, Option<TReadAllResult, ApizrException<TReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Parameters RequestBase<Option<TReadAllResult, ApizrException<TReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding Assembly : Apizr.Integrations.Optional.dll Syntax public class ReadAllOptionalQuery<TReadAllParams, TReadAllResult> : ReadAllQueryBase<TReadAllParams, Option<TReadAllResult, ApizrException<TReadAllResult>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<Option<TReadAllResult, ApizrException<TReadAllResult>>>, IRequest<Option<TReadAllResult, ApizrException<TReadAllResult>>>, IBaseRequest Type Parameters Name Description TReadAllParams The ReadAll parameters type TReadAllResult The api result type Constructors ReadAllOptionalQuery(TReadAllParams, Action<IApizrRequestOptionsBuilder>) The mediation ReadAll optional query constructor Declaration public ReadAllOptionalQuery(TReadAllParams parameters, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TReadAllParams parameters The query parameters to send System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request ReadAllOptionalQuery(Action<IApizrRequestOptionsBuilder>) The mediation ReadAll optional query constructor Declaration public ReadAllOptionalQuery(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Cruding.ReadOptionalQuery-1.html": {
    "href": "api/Apizr.Optional.Cruding.ReadOptionalQuery-1.html",
    "title": "Class ReadOptionalQuery<TResultData> | Apizr",
    "keywords": "Class ReadOptionalQuery<TResultData> The mediation Read optional query Inheritance System.Object RequestBase < Optional.Option <TResultData, ApizrException <TResultData>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationQueryBase < Optional.Option <TResultData, ApizrException <TResultData>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadQueryBase < Optional.Option <TResultData, ApizrException <TResultData>>, System.Int32 , IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadQueryBase < Optional.Option <TResultData, ApizrException <TResultData>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadOptionalQuery<TResultData> Implements IMediationQuery < Optional.Option <TResultData, ApizrException <TResultData>>> MediatR.IRequest < Optional.Option <TResultData, ApizrException <TResultData>>> MediatR.IBaseRequest Inherited Members ReadQueryBase<Option<TResultData, ApizrException<TResultData>>, Int32, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key RequestBase<Option<TResultData, ApizrException<TResultData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding Assembly : Apizr.Integrations.Optional.dll Syntax public class ReadOptionalQuery<TResultData> : ReadQueryBase<Option<TResultData, ApizrException<TResultData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<Option<TResultData, ApizrException<TResultData>>>, IRequest<Option<TResultData, ApizrException<TResultData>>>, IBaseRequest Type Parameters Name Description TResultData The result entity type Constructors ReadOptionalQuery(Int32, Action<IApizrRequestOptionsBuilder>) The mediation Read optional query constructor Declaration public ReadOptionalQuery(int key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Int32 key The entity's crud key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Cruding.ReadOptionalQuery-2.html": {
    "href": "api/Apizr.Optional.Cruding.ReadOptionalQuery-2.html",
    "title": "Class ReadOptionalQuery<TResultData, TKey> | Apizr",
    "keywords": "Class ReadOptionalQuery<TResultData, TKey> The mediation Read optional query Inheritance System.Object RequestBase < Optional.Option <TResultData, ApizrException <TResultData>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationQueryBase < Optional.Option <TResultData, ApizrException <TResultData>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadQueryBase < Optional.Option <TResultData, ApizrException <TResultData>>, TKey, IApizrRequestOptions , IApizrRequestOptionsBuilder > ReadOptionalQuery<TResultData, TKey> Implements IMediationQuery < Optional.Option <TResultData, ApizrException <TResultData>>> MediatR.IRequest < Optional.Option <TResultData, ApizrException <TResultData>>> MediatR.IBaseRequest Inherited Members ReadQueryBase<Option<TResultData, ApizrException<TResultData>>, TKey, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key RequestBase<Option<TResultData, ApizrException<TResultData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding Assembly : Apizr.Integrations.Optional.dll Syntax public class ReadOptionalQuery<TResultData, TKey> : ReadQueryBase<Option<TResultData, ApizrException<TResultData>>, TKey, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<Option<TResultData, ApizrException<TResultData>>>, IRequest<Option<TResultData, ApizrException<TResultData>>>, IBaseRequest Type Parameters Name Description TResultData The result entity type TKey The entity's crud key type Constructors ReadOptionalQuery(TKey, Action<IApizrRequestOptionsBuilder>) The mediation Read optional query constructor Declaration public ReadOptionalQuery(TKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TKey key The entity's crud key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator.html": {
    "href": "api/Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator.html",
    "title": "Class ApizrCrudOptionalMediator | Apizr",
    "keywords": "Class ApizrCrudOptionalMediator Apizr mediator dedicated to cruding and with optional result Inheritance System.Object ApizrMediatorBase ApizrCrudOptionalMediator Implements IApizrCrudOptionalMediator IApizrCrudOptionalMediatorBase IApizrCrudMediatorBase IApizrOptionalMediatorBase IApizrMediatorBase Inherited Members ApizrMediatorBase.CreateRequestOptionsBuilder(Action<IApizrRequestOptionsBuilder>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Sending Assembly : Apizr.Integrations.Optional.dll Syntax public class ApizrCrudOptionalMediator : ApizrMediatorBase, IApizrCrudOptionalMediator, IApizrCrudOptionalMediatorBase, IApizrCrudMediatorBase, IApizrOptionalMediatorBase, IApizrMediatorBase Constructors ApizrCrudOptionalMediator(IMediator) Declaration public ApizrCrudOptionalMediator(IMediator mediator) Parameters Type Name Description MediatR.IMediator mediator Methods SendCreateOptionalCommand<TApiEntity>(TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result Declaration public Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntity entity The entity to create System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> Type Parameters Name Description TApiEntity The api entity type SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result Declaration public Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TModelEntity entity The entity to create System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result Declaration public Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadAllOptionalQuery<TReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Declaration public Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Declaration public Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity entity The entity to update System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity entity The entity to update System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type Implements IApizrCrudOptionalMediator IApizrCrudOptionalMediatorBase IApizrCrudMediatorBase IApizrOptionalMediatorBase IApizrMediatorBase Extension Methods ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity>(IApizrCrudOptionalMediator, TApiEntity, Context) ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity>(IApizrCrudOptionalMediator, TApiEntity, CancellationToken) ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity>(IApizrCrudOptionalMediator, TApiEntity, Context, CancellationToken) ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity>(IApizrCrudOptionalMediator, TModelEntity, Context) ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity>(IApizrCrudOptionalMediator, TModelEntity, CancellationToken) ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity>(IApizrCrudOptionalMediator, TModelEntity, Context, CancellationToken) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Int32, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Int32, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Int32, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Int32, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Int32, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Int32, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Int32, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Int32, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, Context) ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, CancellationToken) ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, Context, CancellationToken) ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, Context) ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, CancellationToken) ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, Context, CancellationToken) ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context) ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, CancellationToken) ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, CancellationToken)"
  },
  "api/Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator-4.html": {
    "href": "api/Apizr.Optional.Cruding.Sending.ApizrCrudOptionalMediator-4.html",
    "title": "Class ApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Class ApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Apizr mediator dedicated to cruding and with optional result Inheritance System.Object ApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Implements IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> IApizrCrudOptionalMediatorBase IApizrCrudMediatorBase IApizrOptionalMediatorBase IApizrMediatorBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding.Sending Assembly : Apizr.Integrations.Optional.dll Syntax public class ApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> : IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, IApizrCrudOptionalMediatorBase, IApizrCrudMediatorBase, IApizrOptionalMediatorBase, IApizrMediatorBase where TApiEntity : class Type Parameters Name Description TApiEntity TApiEntityKey TReadAllResult TReadAllParams Constructors ApizrCrudOptionalMediator(IApizrCrudOptionalMediator) Declaration public ApizrCrudOptionalMediator(IApizrCrudOptionalMediator apizrMediator) Parameters Type Name Description IApizrCrudOptionalMediator apizrMediator Methods SendCreateOptionalCommand(TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result Declaration public Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand(TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntity entity System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> SendCreateOptionalCommand<TModelEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result Declaration public Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity>(TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TModelEntity entity System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity SendDeleteOptionalCommand(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result Declaration public Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendReadAllOptionalQuery(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration public Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult SendReadAllOptionalQuery<TModelReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Declaration public Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult SendReadOptionalQuery(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Declaration public Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Declaration public Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand(TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity entity System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration public Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity entity System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity Implements IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> IApizrCrudOptionalMediatorBase IApizrCrudMediatorBase IApizrOptionalMediatorBase IApizrMediatorBase Extension Methods ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Context) ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, CancellationToken) ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Context, CancellationToken) ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Context) ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, CancellationToken) ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Context, CancellationToken) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Context) ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, CancellationToken) ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Context, CancellationToken) ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Context) ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, CancellationToken) ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Context, CancellationToken) ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context) ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken) ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken)"
  },
  "api/Apizr.Optional.Cruding.Sending.html": {
    "href": "api/Apizr.Optional.Cruding.Sending.html",
    "title": "Namespace Apizr.Optional.Cruding.Sending | Apizr",
    "keywords": "Namespace Apizr.Optional.Cruding.Sending Classes ApizrCrudOptionalMediator Apizr mediator dedicated to cruding and with optional result ApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> Apizr mediator dedicated to cruding and with optional result Interfaces IApizrCrudOptionalMediator Apizr mediator dedicated to cruding and with optional result IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> IApizrCrudOptionalMediator but dedicated to TApiEntity cruding with optional result, getting all shorter IApizrCrudOptionalMediatorBase Apizr base optional mediator dedicated to cruding"
  },
  "api/Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.html": {
    "href": "api/Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator.html",
    "title": "Interface IApizrCrudOptionalMediator | Apizr",
    "keywords": "Interface IApizrCrudOptionalMediator Apizr mediator dedicated to cruding and with optional result Namespace : Apizr.Optional.Cruding.Sending Assembly : Apizr.Integrations.Optional.dll Syntax public interface IApizrCrudOptionalMediator : IApizrCrudOptionalMediatorBase, IApizrCrudMediatorBase, IApizrOptionalMediatorBase, IApizrMediatorBase Methods SendCreateOptionalCommand<TApiEntity>(TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntity entity The entity to create System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> Type Parameters Name Description TApiEntity The api entity type SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TModelEntity entity The entity to create System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadAllOptionalQuery<TReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Declaration Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(TApiEntityKey key, TApiEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity entity The entity to update System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(TApiEntityKey key, TModelEntity entity, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity entity The entity to update System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type Extension Methods ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity>(IApizrCrudOptionalMediator, TApiEntity, Context) ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity>(IApizrCrudOptionalMediator, TApiEntity, CancellationToken) ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity>(IApizrCrudOptionalMediator, TApiEntity, Context, CancellationToken) ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity>(IApizrCrudOptionalMediator, TModelEntity, Context) ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity>(IApizrCrudOptionalMediator, TModelEntity, CancellationToken) ApizrCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity>(IApizrCrudOptionalMediator, TModelEntity, Context, CancellationToken) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Int32, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Int32, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Int32, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Int32, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Int32, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Int32, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Int32, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Int32, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean) ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, Context) ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, CancellationToken) ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, Context, CancellationToken) ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, Context) ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, CancellationToken) ApizrCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, Context, CancellationToken) ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context) ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, CancellationToken) ApizrCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, CancellationToken)"
  },
  "api/Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator-4.html": {
    "href": "api/Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediator-4.html",
    "title": "Interface IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Interface IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> IApizrCrudOptionalMediator but dedicated to TApiEntity cruding with optional result, getting all shorter Namespace : Apizr.Optional.Cruding.Sending Assembly : Apizr.Integrations.Optional.dll Syntax public interface IApizrCrudOptionalMediator<TApiEntity, in TApiEntityKey, TReadAllResult, in TReadAllParams> : IApizrCrudOptionalMediatorBase, IApizrCrudMediatorBase, IApizrOptionalMediatorBase, IApizrMediatorBase where TApiEntity : class Type Parameters Name Description TApiEntity TApiEntityKey TReadAllResult TReadAllParams Methods SendCreateOptionalCommand(TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand(TApiEntity payload, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntity payload The entity to create System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> SendCreateOptionalCommand<TModelEntity>(TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity>(TModelEntity payload, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TModelEntity payload The entity to create System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity SendDeleteOptionalCommand(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendReadAllOptionalQuery(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery(Action<IApizrRequestOptionsBuilder>) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams, Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(TReadAllParams readAllParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TReadAllParams readAllParams The read all filters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Type Parameters Name Description TModelEntityReadAllResult SendReadAllOptionalQuery<TModelEntityReadAllResult>(Action<IApizrRequestOptionsBuilder>) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Declaration Task<Option<TModelEntityReadAllResult, ApizrException<TModelEntityReadAllResult>>> SendReadAllOptionalQuery<TModelEntityReadAllResult>(Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntityReadAllResult, ApizrException <TModelEntityReadAllResult>>> Type Parameters Name Description TModelEntityReadAllResult The mapped result SendReadOptionalQuery(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey, Action<IApizrRequestOptionsBuilder>) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Declaration Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity>(TApiEntityKey key, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity SendUpdateOptionalCommand(TApiEntityKey, TApiEntity, Action<IApizrRequestOptionsBuilder>) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand(TApiEntityKey key, TApiEntity payload, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key TApiEntity payload The entity to update System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey, TModelEntity, Action<IApizrRequestOptionsBuilder>) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey key, TModelEntity payload, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TApiEntityKey key The entity key TModelEntity payload The entity to update System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity Extension Methods ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Context) ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, CancellationToken) ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Context, CancellationToken) ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Context) ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, CancellationToken) ApizrTypedCrudOptionalMediatorExtensions.SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Context, CancellationToken) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, CancellationToken, Boolean) ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Context) ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, CancellationToken) ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Context, CancellationToken) ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Context) ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, CancellationToken) ApizrTypedCrudOptionalMediatorExtensions.SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Context, CancellationToken) ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context) ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken) ApizrTypedCrudOptionalMediatorExtensions.SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken)"
  },
  "api/Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediatorBase.html": {
    "href": "api/Apizr.Optional.Cruding.Sending.IApizrCrudOptionalMediatorBase.html",
    "title": "Interface IApizrCrudOptionalMediatorBase | Apizr",
    "keywords": "Interface IApizrCrudOptionalMediatorBase Apizr base optional mediator dedicated to cruding Namespace : Apizr.Optional.Cruding.Sending Assembly : Apizr.Integrations.Optional.dll Syntax public interface IApizrCrudOptionalMediatorBase : IApizrCrudMediatorBase, IApizrOptionalMediatorBase, IApizrMediatorBase"
  },
  "api/Apizr.Optional.Cruding.UpdateOptionalCommand-1.html": {
    "href": "api/Apizr.Optional.Cruding.UpdateOptionalCommand-1.html",
    "title": "Class UpdateOptionalCommand<TRequestData> | Apizr",
    "keywords": "Class UpdateOptionalCommand<TRequestData> The mediation Update optional command Inheritance System.Object RequestBase < Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationCommandBase <TRequestData, Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > UpdateCommandBase < System.Int32 , TRequestData, Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > UpdateCommandBase <TRequestData, Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > UpdateOptionalCommand<TRequestData> Implements IMediationCommand <TRequestData, Optional.Option < MediatR.Unit , ApizrException >> MediatR.IRequest < Optional.Option < MediatR.Unit , ApizrException >> MediatR.IBaseRequest Inherited Members UpdateCommandBase<Int32, TRequestData, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key UpdateCommandBase<Int32, TRequestData, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.RequestData RequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding Assembly : Apizr.Integrations.Optional.dll Syntax public class UpdateOptionalCommand<TRequestData> : UpdateCommandBase<TRequestData, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<TRequestData, Option<Unit, ApizrException>>, IRequest<Option<Unit, ApizrException>>, IBaseRequest Type Parameters Name Description TRequestData The request data type Constructors UpdateOptionalCommand(Int32, TRequestData, Action<IApizrRequestOptionsBuilder>) The mediation Update optional command constructor Declaration public UpdateOptionalCommand(int key, TRequestData requestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Int32 key The entity's crud key TRequestData requestData The request data to send System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Cruding.UpdateOptionalCommand-2.html": {
    "href": "api/Apizr.Optional.Cruding.UpdateOptionalCommand-2.html",
    "title": "Class UpdateOptionalCommand<TKey, TRequestData> | Apizr",
    "keywords": "Class UpdateOptionalCommand<TKey, TRequestData> The mediation Update optional command Inheritance System.Object RequestBase < Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationCommandBase <TRequestData, Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > UpdateCommandBase <TKey, TRequestData, Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > UpdateOptionalCommand<TKey, TRequestData> Implements IMediationCommand <TRequestData, Optional.Option < MediatR.Unit , ApizrException >> MediatR.IRequest < Optional.Option < MediatR.Unit , ApizrException >> MediatR.IBaseRequest Inherited Members UpdateCommandBase<TKey, TRequestData, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Key UpdateCommandBase<TKey, TRequestData, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.RequestData RequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Cruding Assembly : Apizr.Integrations.Optional.dll Syntax public class UpdateOptionalCommand<TKey, TRequestData> : UpdateCommandBase<TKey, TRequestData, Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<TRequestData, Option<Unit, ApizrException>>, IRequest<Option<Unit, ApizrException>>, IBaseRequest Type Parameters Name Description TKey The entity's crud key type TRequestData The request data type Constructors UpdateOptionalCommand(TKey, TRequestData, Action<IApizrRequestOptionsBuilder>) The mediation Update optional command constructor Declaration public UpdateOptionalCommand(TKey key, TRequestData requestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description TKey key The entity's crud key TRequestData requestData The request data to send System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.html": {
    "href": "api/Apizr.Optional.Extending.ApizrCrudOptionalMediatorExtensions.html",
    "title": "Class ApizrCrudOptionalMediatorExtensions | Apizr",
    "keywords": "Class ApizrCrudOptionalMediatorExtensions Inheritance System.Object ApizrCrudOptionalMediatorExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Extending Assembly : Apizr.Integrations.Optional.dll Syntax public static class ApizrCrudOptionalMediatorExtensions Methods SendCreateOptionalCommand<TApiEntity>(IApizrCrudOptionalMediator, TApiEntity, Context) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(this IApizrCrudOptionalMediator mediator, TApiEntity entity, Context context) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntity entity The entity to create Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> Type Parameters Name Description TApiEntity The api entity type SendCreateOptionalCommand<TApiEntity>(IApizrCrudOptionalMediator, TApiEntity, Context, CancellationToken) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(this IApizrCrudOptionalMediator mediator, TApiEntity entity, Context context, CancellationToken cancellationToken) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntity entity The entity to create Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> Type Parameters Name Description TApiEntity The api entity type SendCreateOptionalCommand<TApiEntity>(IApizrCrudOptionalMediator, TApiEntity, CancellationToken) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity>(this IApizrCrudOptionalMediator mediator, TApiEntity entity, CancellationToken cancellationToken) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntity entity The entity to create System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> Type Parameters Name Description TApiEntity The api entity type SendCreateOptionalCommand<TModelEntity, TApiEntity>(IApizrCrudOptionalMediator, TModelEntity, Context) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(this IApizrCrudOptionalMediator mediator, TModelEntity entity, Context context) Parameters Type Name Description IApizrCrudOptionalMediator mediator TModelEntity entity The entity to create Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendCreateOptionalCommand<TModelEntity, TApiEntity>(IApizrCrudOptionalMediator, TModelEntity, Context, CancellationToken) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(this IApizrCrudOptionalMediator mediator, TModelEntity entity, Context context, CancellationToken cancellationToken) Parameters Type Name Description IApizrCrudOptionalMediator mediator TModelEntity entity The entity to create Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendCreateOptionalCommand<TModelEntity, TApiEntity>(IApizrCrudOptionalMediator, TModelEntity, CancellationToken) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity>(this IApizrCrudOptionalMediator mediator, TModelEntity entity, CancellationToken cancellationToken) Parameters Type Name Description IApizrCrudOptionalMediator mediator TModelEntity entity The entity to create System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, Context context) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, CancellationToken) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, CancellationToken) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, CancellationToken cancellationToken) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Context, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(this IApizrCrudOptionalMediator mediator, Context context, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Context, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(this IApizrCrudOptionalMediator mediator, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Int32, Context, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(this IApizrCrudOptionalMediator mediator, int priority, Context context, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Int32, Context, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(this IApizrCrudOptionalMediator mediator, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Int32, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(this IApizrCrudOptionalMediator mediator, int priority, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, Int32, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(this IApizrCrudOptionalMediator mediator, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllOptionalQuery<TReadAllResult>(IApizrCrudOptionalMediator, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult>(this IApizrCrudOptionalMediator mediator, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The \"ReadAll\" query result type SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Context, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, Context context, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Context, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TReadAllParams readAllParams The read all filters System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, int priority, Context context, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, int priority, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TReadAllParams readAllParams The read all filters System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TReadAllResult The api result type TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Context, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudOptionalMediator mediator, Context context, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Context, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudOptionalMediator mediator, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudOptionalMediator mediator, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Int32, Context, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudOptionalMediator mediator, int priority, Context context, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Int32, Context, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudOptionalMediator mediator, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Int32, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudOptionalMediator mediator, int priority, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, Int32, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudOptionalMediator mediator, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(IApizrCrudOptionalMediator, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult>(this IApizrCrudOptionalMediator mediator, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Context, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, Context context, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Context, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TReadAllParams readAllParams The read all filters System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, int priority, Context context, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Context, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, int priority, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, Int32, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator, TReadAllParams, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator mediator, TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TReadAllParams readAllParams The read all filters System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiReadAllResult The api result type to map from TReadAllParams The ReadAll parameters type SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, Context context, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, int priority, Context context, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, int priority, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadOptionalQuery<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, Context context, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Context, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, int priority, Context context, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Context, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, int priority, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, Int32, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, Context) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, TApiEntity entity, Context context) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key TApiEntity entity The entity to update Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, Context, CancellationToken) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, TApiEntity entity, Context context, CancellationToken cancellationToken) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key TApiEntity entity The entity to update Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TApiEntity, CancellationToken) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, TApiEntity entity, CancellationToken cancellationToken) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key TApiEntity entity The entity to update System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, Context) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, TModelEntity entity, Context context) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key TModelEntity entity The entity to update Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, Context, CancellationToken) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, TModelEntity entity, Context context, CancellationToken cancellationToken) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key TModelEntity entity The entity to update Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(IApizrCrudOptionalMediator, TApiEntityKey, TModelEntity, CancellationToken) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey>(this IApizrCrudOptionalMediator mediator, TApiEntityKey key, TModelEntity entity, CancellationToken cancellationToken) Parameters Type Name Description IApizrCrudOptionalMediator mediator TApiEntityKey key The entity key TModelEntity entity The entity to update System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type to map to TApiEntityKey The entity's crud key type"
  },
  "api/Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.html": {
    "href": "api/Apizr.Optional.Extending.ApizrOptionalMediatorExtensions.html",
    "title": "Class ApizrOptionalMediatorExtensions | Apizr",
    "keywords": "Class ApizrOptionalMediatorExtensions Inheritance System.Object ApizrOptionalMediatorExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Extending Assembly : Apizr.Integrations.Optional.dll Syntax public static class ApizrOptionalMediatorExtensions Methods SendFor<TWebApi>(IApizrOptionalMediator, Expression<Func<Context, TWebApi, Task>>, Context) Send an api call to Apizr using MediatR with a Polly Context and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendFor<TWebApi>(this IApizrOptionalMediator mediator, Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context = null) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type SendFor<TWebApi>(IApizrOptionalMediator, Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendFor<TWebApi>(this IApizrOptionalMediator mediator, Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type SendFor<TWebApi>(IApizrOptionalMediator, Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken) Send an api call to Apizr using MediatR with a cancellation token and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendFor<TWebApi>(this IApizrOptionalMediator mediator, Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type SendFor<TWebApi, TApiData>(IApizrOptionalMediator, Expression<Func<TWebApi, Task<TApiData>>>, Boolean) Send an api call to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(this IApizrOptionalMediator mediator, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TWebApi The web api type TApiData The api result type SendFor<TWebApi, TApiData>(IApizrOptionalMediator, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) Send an api call to Apizr using MediatR with a Polly Context and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(this IApizrOptionalMediator mediator, Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TWebApi The web api type TApiData The api response SendFor<TWebApi, TApiData>(IApizrOptionalMediator, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(this IApizrOptionalMediator mediator, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TWebApi The web api type TApiData The api response SendFor<TWebApi, TApiData>(IApizrOptionalMediator, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a cancellation token and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(this IApizrOptionalMediator mediator, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TWebApi The web api type TApiData The api response SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator mediator, Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<TWebApi, TApiData, Task>>, TModelData) Send an api call to Apizr using MediatR with mapped request and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator mediator, Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<TWebApi, Task<TApiData>>>, Boolean) Send an api call to Apizr using MediatR returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator mediator, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean) Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator mediator, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context) Send an api call to Apizr using MediatR with mapped request and a Polly Context and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator mediator, Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) Send an api call to Apizr using MediatR with a Polly Context and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator mediator, Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator mediator, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken token A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken) Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator mediator, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken token A cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator mediator, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator mediator, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Threading.CancellationToken token A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken) Send an api call to Apizr using MediatR with mapped request and a cancellation token and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator mediator, Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Threading.CancellationToken token A cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a cancellation token and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator mediator, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrOptionalMediator mediator, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean) Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrOptionalMediator mediator, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrOptionalMediator mediator, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrOptionalMediator mediator, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from"
  },
  "api/Apizr.Optional.Extending.ApizrOptionalMediatorFileTransferExtensions.html": {
    "href": "api/Apizr.Optional.Extending.ApizrOptionalMediatorFileTransferExtensions.html",
    "title": "Class ApizrOptionalMediatorFileTransferExtensions | Apizr",
    "keywords": "Class ApizrOptionalMediatorFileTransferExtensions Inheritance System.Object ApizrOptionalMediatorFileTransferExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Extending Assembly : Apizr.Integrations.FileTransfer.Optional.dll Syntax public static class ApizrOptionalMediatorFileTransferExtensions Methods SendDownloadOptionalQuery(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for IDownloadApi with optional result Declaration public static Task<Option<FileInfo, ApizrException>> SendDownloadOptionalQuery(this IApizrOptionalMediator apizrMediator, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrOptionalMediator apizrMediator The extended mediator System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < Optional.Option < System.IO.FileInfo , ApizrException >> SendDownloadOptionalQuery(IApizrOptionalMediator, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for IDownloadApi with a dictionary query parameters type and optional result Declaration public static Task<Option<FileInfo, ApizrException>> SendDownloadOptionalQuery(this IApizrOptionalMediator apizrMediator, FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrOptionalMediator apizrMediator The extended mediator System.IO.FileInfo fileInfo Some information about the file to download System.Collections.Generic.IDictionary < System.String , System.Object > downloadParams Some custom query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < Optional.Option < System.IO.FileInfo , ApizrException >> SendDownloadOptionalQueryFor<TDownloadApi>(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for TDownloadApi with optional result Declaration public static Task<Option<FileInfo, ApizrException>> SendDownloadOptionalQueryFor<TDownloadApi>(this IApizrOptionalMediator apizrMediator, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi Parameters Type Name Description IApizrOptionalMediator apizrMediator The extended mediator System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < Optional.Option < System.IO.FileInfo , ApizrException >> Type Parameters Name Description TDownloadApi The download api type SendDownloadOptionalQueryFor<TDownloadApi>(IApizrOptionalMediator, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for TDownloadApi with a dictionary query parameters type and optional result Declaration public static Task<Option<FileInfo, ApizrException>> SendDownloadOptionalQueryFor<TDownloadApi>(this IApizrOptionalMediator apizrMediator, FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi Parameters Type Name Description IApizrOptionalMediator apizrMediator The extended mediator System.IO.FileInfo fileInfo Some information about the file to download System.Collections.Generic.IDictionary < System.String , System.Object > downloadParams Some custom query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < Optional.Option < System.IO.FileInfo , ApizrException >> Type Parameters Name Description TDownloadApi The download api type SendDownloadOptionalQueryFor<TDownloadApi, TDownloadParams>(IApizrOptionalMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for TDownloadApi with a custom query parameters type and optional result Declaration public static Task<Option<FileInfo, ApizrException>> SendDownloadOptionalQueryFor<TDownloadApi, TDownloadParams>(this IApizrOptionalMediator apizrMediator, FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters Type Name Description IApizrOptionalMediator apizrMediator The extended mediator System.IO.FileInfo fileInfo Some information about the file to download TDownloadParams downloadParams Some custom query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < Optional.Option < System.IO.FileInfo , ApizrException >> Type Parameters Name Description TDownloadApi The download api type TDownloadParams The query parameters type SendDownloadOptionalQueryFor<TDownloadApi, TDownloadParams>(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR for TDownloadApi with optional result Declaration public static Task<Option<FileInfo, ApizrException>> SendDownloadOptionalQueryFor<TDownloadApi, TDownloadParams>(this IApizrOptionalMediator apizrMediator, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TDownloadApi : IDownloadApi<TDownloadParams> Parameters Type Name Description IApizrOptionalMediator apizrMediator The extended mediator System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < Optional.Option < System.IO.FileInfo , ApizrException >> Type Parameters Name Description TDownloadApi The download api type TDownloadParams The query parameters type SendDownloadWithOptionalQuery<TDownloadParams>(IApizrOptionalMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR with TDownloadParams and optional result Declaration public static Task<Option<FileInfo, ApizrException>> SendDownloadWithOptionalQuery<TDownloadParams>(this IApizrOptionalMediator apizrMediator, FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrOptionalMediator apizrMediator The extended mediator System.IO.FileInfo fileInfo Some information about the file to download TDownloadParams downloadParams Some custom query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < Optional.Option < System.IO.FileInfo , ApizrException >> Type Parameters Name Description TDownloadParams The query parameters type SendDownloadWithOptionalQueryWith<TDownloadParams>(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) Send a download query to Apizr using MediatR with TDownloadParams and optional result Declaration public static Task<Option<FileInfo, ApizrException>> SendDownloadWithOptionalQueryWith<TDownloadParams>(this IApizrOptionalMediator apizrMediator, FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrOptionalMediator apizrMediator The extended mediator System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < Optional.Option < System.IO.FileInfo , ApizrException >> Type Parameters Name Description TDownloadParams The query parameters type SendUploadOptionalCommand(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for IUploadApi from file bytes data with optional result Declaration public static Task<Option<HttpResponseMessage, ApizrException>> SendUploadOptionalCommand(this IApizrOptionalMediator apizrMediator, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrOptionalMediator apizrMediator The extended mediator Refit.ByteArrayPart byteArrayPart The file bytes data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < Optional.Option < System.Net.Http.HttpResponseMessage , ApizrException >> SendUploadOptionalCommand(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for IUploadApi from file info data with optional result Declaration public static Task<Option<HttpResponseMessage, ApizrException>> SendUploadOptionalCommand(this IApizrOptionalMediator apizrMediator, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrOptionalMediator apizrMediator The extended mediator Refit.FileInfoPart fileInfoPart The file info data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < Optional.Option < System.Net.Http.HttpResponseMessage , ApizrException >> SendUploadOptionalCommand(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for IUploadApi from file stream data with optional result Declaration public static Task<Option<HttpResponseMessage, ApizrException>> SendUploadOptionalCommand(this IApizrOptionalMediator apizrMediator, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrOptionalMediator apizrMediator The extended mediator Refit.StreamPart streamPart The file stream data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < Optional.Option < System.Net.Http.HttpResponseMessage , ApizrException >> SendUploadOptionalCommandFor<TUploadApi>(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file bytes data with optional result Declaration public static Task<Option<HttpResponseMessage, ApizrException>> SendUploadOptionalCommandFor<TUploadApi>(this IApizrOptionalMediator apizrMediator, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi Parameters Type Name Description IApizrOptionalMediator apizrMediator The extended mediator Refit.ByteArrayPart byteArrayPart The file bytes data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < Optional.Option < System.Net.Http.HttpResponseMessage , ApizrException >> Type Parameters Name Description TUploadApi The upload api type SendUploadOptionalCommandFor<TUploadApi>(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file info data with optional result Declaration public static Task<Option<HttpResponseMessage, ApizrException>> SendUploadOptionalCommandFor<TUploadApi>(this IApizrOptionalMediator apizrMediator, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi Parameters Type Name Description IApizrOptionalMediator apizrMediator The extended mediator Refit.FileInfoPart fileInfoPart The file info data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < Optional.Option < System.Net.Http.HttpResponseMessage , ApizrException >> Type Parameters Name Description TUploadApi The upload api type SendUploadOptionalCommandFor<TUploadApi>(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file stream data with optional result Declaration public static Task<Option<HttpResponseMessage, ApizrException>> SendUploadOptionalCommandFor<TUploadApi>(this IApizrOptionalMediator apizrMediator, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi Parameters Type Name Description IApizrOptionalMediator apizrMediator The extended mediator Refit.StreamPart streamPart The file stream data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < Optional.Option < System.Net.Http.HttpResponseMessage , ApizrException >> Type Parameters Name Description TUploadApi The upload api type SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file bytes data with optional result Declaration public static Task<Option<TUploadApiResultData, ApizrException>> SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(this IApizrOptionalMediator apizrMediator, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters Type Name Description IApizrOptionalMediator apizrMediator The extended mediator Refit.ByteArrayPart byteArrayPart The file bytes data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < Optional.Option <TUploadApiResultData, ApizrException >> Type Parameters Name Description TUploadApi The upload api type TUploadApiResultData The upload api result data type SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file info data with optional result Declaration public static Task<Option<TUploadApiResultData, ApizrException>> SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(this IApizrOptionalMediator apizrMediator, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters Type Name Description IApizrOptionalMediator apizrMediator The extended mediator Refit.FileInfoPart fileInfoPart The file info data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < Optional.Option <TUploadApiResultData, ApizrException >> Type Parameters Name Description TUploadApi The upload api type TUploadApiResultData The upload api result data type SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR for TUploadApi from file stream data with optional result Declaration public static Task<Option<TUploadApiResultData, ApizrException>> SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(this IApizrOptionalMediator apizrMediator, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) where TUploadApi : IUploadApi<TUploadApiResultData> Parameters Type Name Description IApizrOptionalMediator apizrMediator The extended mediator Refit.StreamPart streamPart The file stream data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < Optional.Option <TUploadApiResultData, ApizrException >> Type Parameters Name Description TUploadApi The upload api type TUploadApiResultData The upload api result data type SendUploadWithOptionalCommand<TUploadApiResultData>(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR with TUploadApiResultData from file bytes data with optional result Declaration public static Task<Option<TUploadApiResultData, ApizrException>> SendUploadWithOptionalCommand<TUploadApiResultData>(this IApizrOptionalMediator apizrMediator, ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrOptionalMediator apizrMediator The extended mediator Refit.ByteArrayPart byteArrayPart The file bytes data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < Optional.Option <TUploadApiResultData, ApizrException >> Type Parameters Name Description TUploadApiResultData The upload api result data type SendUploadWithOptionalCommand<TUploadApiResultData>(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR with TUploadApiResultData from file info data with optional result Declaration public static Task<Option<TUploadApiResultData, ApizrException>> SendUploadWithOptionalCommand<TUploadApiResultData>(this IApizrOptionalMediator apizrMediator, FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrOptionalMediator apizrMediator The extended mediator Refit.FileInfoPart fileInfoPart The file info data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < Optional.Option <TUploadApiResultData, ApizrException >> Type Parameters Name Description TUploadApiResultData The upload api result data type SendUploadWithOptionalCommand<TUploadApiResultData>(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) Send a upload command to Apizr using MediatR with TUploadApiResultData from file stream data with optional result Declaration public static Task<Option<TUploadApiResultData, ApizrException>> SendUploadWithOptionalCommand<TUploadApiResultData>(this IApizrOptionalMediator apizrMediator, StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description IApizrOptionalMediator apizrMediator The extended mediator Refit.StreamPart streamPart The file stream data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < Optional.Option <TUploadApiResultData, ApizrException >> Type Parameters Name Description TUploadApiResultData The upload api result data type"
  },
  "api/Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.html": {
    "href": "api/Apizr.Optional.Extending.ApizrTypedCrudOptionalMediatorExtensions.html",
    "title": "Class ApizrTypedCrudOptionalMediatorExtensions | Apizr",
    "keywords": "Class ApizrTypedCrudOptionalMediatorExtensions Inheritance System.Object ApizrTypedCrudOptionalMediatorExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Extending Assembly : Apizr.Integrations.Optional.dll Syntax public static class ApizrTypedCrudOptionalMediatorExtensions Methods SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Context) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntity entity, Context context) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntity entity The entity to create Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, Context, CancellationToken) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntity entity, Context context, CancellationToken cancellationToken) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntity entity The entity to create Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntity, CancellationToken) Send a CreateOptionalCommand<TModelData> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException>> SendCreateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntity entity, CancellationToken cancellationToken) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntity entity The entity to create System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Context) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TModelEntity entity, Context context) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TModelEntity entity The entity to create Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, Context, CancellationToken) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TModelEntity entity, Context context, CancellationToken cancellationToken) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TModelEntity entity The entity to create Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TModelEntity, CancellationToken) Send a mapped CreateCommand<TModelData> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException>> SendCreateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TModelEntity entity, CancellationToken cancellationToken) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TModelEntity entity The entity to create System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken) Send a DeleteCommand<T, TKey> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendDeleteOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, CancellationToken cancellationToken) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, Context context, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, Context context, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, Context context, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, Context context, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, Context context, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, CancellationToken, Boolean) Send a ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TReadAllResult, ApizrException<TReadAllResult>>> SendReadAllOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TReadAllResult, ApizrException <TReadAllResult>>> Type Parameters Name Description TApiEntity TApiEntityKey TReadAllResult The \"ReadAll\" query result type TReadAllParams SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, Context context, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Context, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, Context context, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, Context context, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Context, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, Int32, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, int priority, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TReadAllParams, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TReadAllParams readAllParams, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TReadAllParams readAllParams The read all filters System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, Context context, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Context, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, Context context, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, Context context, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Context, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, Int32, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR with priority and returning mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, int priority, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, CancellationToken, Boolean) Send a mapped ReadAllQuery<TReadAllResult> to Apizr using MediatR and returning mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelReadAllResult, ApizrException<TModelReadAllResult>>> SendReadAllOptionalQuery<TModelReadAllResult, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelReadAllResult, ApizrException <TModelReadAllResult>>> Type Parameters Name Description TModelReadAllResult The model result type to map to TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, Context context, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiEntity, ApizrException<TApiEntity>>> SendReadOptionalQuery<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiEntity, ApizrException <TApiEntity>>> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Context, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, Context context, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, Context context, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Context, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, Context context, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Int32 priority The execution priority Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Int32 priority The execution priority System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, Int32, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR with priority and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, int priority, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Int32 priority The execution priority System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, CancellationToken, Boolean) Send a ReadQuery<TResultData, TKey> to Apizr using MediatR and returning a mapped optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelEntity, ApizrException<TModelEntity>>> SendReadOptionalQuery<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, CancellationToken cancellationToken, bool clearCache = false) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key System.Threading.CancellationToken cancellationToken The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelEntity, ApizrException <TModelEntity>>> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Context) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TApiEntity entity, Context context) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key TApiEntity entity The entity to update Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, Context, CancellationToken) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TApiEntity entity, Context context, CancellationToken cancellationToken) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key TApiEntity entity The entity to update Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TApiEntity, CancellationToken) Send a UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TApiEntity entity, CancellationToken cancellationToken) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key TApiEntity entity The entity to update System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Context) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TModelEntity entity, Context context) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key TModelEntity entity The entity to update Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, Context, CancellationToken) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TModelEntity entity, Context context, CancellationToken cancellationToken) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key TModelEntity entity The entity to update Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>, TApiEntityKey, TModelEntity, CancellationToken) Send a mapped UpdateCommand<TKey, TRequestData> to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendUpdateOptionalCommand<TModelEntity, TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams>(this IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator, TApiEntityKey key, TModelEntity entity, CancellationToken cancellationToken) where TApiEntity : class Parameters Type Name Description IApizrCrudOptionalMediator <TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> mediator TApiEntityKey key The entity key TModelEntity entity The entity to update System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelEntity The model entity type to map from TApiEntity The api entity type TApiEntityKey The api entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type"
  },
  "api/Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.html": {
    "href": "api/Apizr.Optional.Extending.ApizrTypedOptionalMediatorExtensions.html",
    "title": "Class ApizrTypedOptionalMediatorExtensions | Apizr",
    "keywords": "Class ApizrTypedOptionalMediatorExtensions Inheritance System.Object ApizrTypedOptionalMediatorExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Extending Assembly : Apizr.Integrations.Optional.dll Syntax public static class ApizrTypedOptionalMediatorExtensions Methods SendFor<TWebApi>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, TWebApi, Task>>, Context) Send an api call to Apizr using MediatR with a Polly Context and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendFor<TWebApi>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<Context, TWebApi, Task>> executeApiMethod, Context context = null) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type SendFor<TWebApi>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendFor<TWebApi>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<Context, CancellationToken, TWebApi, Task>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type SendFor<TWebApi>(IApizrOptionalMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken) Send an api call to Apizr using MediatR with a cancellation token and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendFor<TWebApi>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<CancellationToken, TWebApi, Task>> executeApiMethod, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type SendFor<TWebApi, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean) Send an api call to Apizr using MediatR and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TWebApi The web api type TApiData The api result type SendFor<TWebApi, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) Send an api call to Apizr using MediatR with a Polly Context and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TWebApi The web api type TApiData The api response SendFor<TWebApi, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TWebApi The web api type TApiData The api response SendFor<TWebApi, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a cancellation token and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TWebApi The web api type TApiData The api response SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<TWebApi, TApiData, Task>>, TModelData) Send an api call to Apizr using MediatR with mapped request and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean) Send an api call to Apizr using MediatR returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean) Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context) Send an api call to Apizr using MediatR with mapped request and a Polly Context and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<Context, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) Send an api call to Apizr using MediatR with a Polly Context and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<Context, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken token A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken) Send an api call to Apizr using MediatR with mapped request, a Polly Context and cancellation token and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Context context = null, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map Polly.Context context The Polly Context to pass through it all System.Threading.CancellationToken token A cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a Polly Context and a cancellation token and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Threading.CancellationToken token A cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken) Send an api call to Apizr using MediatR with mapped request and a cancellation token and returning an optional result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<CancellationToken, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, CancellationToken token = default(CancellationToken)) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Threading.CancellationToken token A cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a cancellation token and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>> executeApiMethod, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean) Send an api call to Apizr using MediatR with a mapped request and a Polly Context and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data Polly.Context context The Polly context System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a mapped request, a Polly Context and a cancellation token and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Context context = null, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < Polly.Context , System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data Polly.Context context The Polly context System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean) Send an api call to Apizr using MediatR with a mapped request and a cancellation token and returning an optional mapped result Declaration [Obsolete(\"Use the one with the request options builder parameter instead\")] public static Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(this IApizrOptionalMediator<TWebApi> mediator, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, CancellationToken token = default(CancellationToken), bool clearCache = false) Parameters Type Name Description IApizrOptionalMediator <TWebApi> mediator System.Linq.Expressions.Expression < System.Func < System.Threading.CancellationToken , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Threading.CancellationToken token The cancellation token System.Boolean clearCache Clear request cache before executing (default: false) Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from"
  },
  "api/Apizr.Optional.Extending.html": {
    "href": "api/Apizr.Optional.Extending.html",
    "title": "Namespace Apizr.Optional.Extending | Apizr",
    "keywords": "Namespace Apizr.Optional.Extending Classes ApizrCrudOptionalMediatorExtensions ApizrOptionalMediatorExtensions ApizrOptionalMediatorFileTransferExtensions ApizrTypedCrudOptionalMediatorExtensions ApizrTypedOptionalMediatorExtensions OptionalMediationExtensions Optional request extensions"
  },
  "api/Apizr.Optional.Extending.OptionalMediationExtensions.html": {
    "href": "api/Apizr.Optional.Extending.OptionalMediationExtensions.html",
    "title": "Class OptionalMediationExtensions | Apizr",
    "keywords": "Class OptionalMediationExtensions Optional request extensions Inheritance System.Object OptionalMediationExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Extending Assembly : Apizr.Integrations.Optional.dll Syntax public static class OptionalMediationExtensions Methods CatchAsync<TResult>(Task<Option<TResult, ApizrException<TResult>>>, Action<Exception>, Boolean) Return TResult (from fetch or cache), no matter of exception (handled by onException ). Could throw if you ask to with letThrowOnExceptionWithEmptyCache in case of exception with empty cache ( onException won't be called), otherwise return the empty cache (have to be managed) after calling onException action. Declaration public static Task<TResult> CatchAsync<TResult>(this Task<Option<TResult, ApizrException<TResult>>> option, Action<Exception> onException, bool letThrowOnExceptionWithEmptyCache = false) Parameters Type Name Description System.Threading.Tasks.Task < Optional.Option <TResult, ApizrException <TResult>>> option System.Action < System.Exception > onException Action to call to handle exception (like informing the user) before returning result from cache System.Boolean letThrowOnExceptionWithEmptyCache True to let it throw the inner exception in case of empty cache, False to handle it with onException action and return empty cache result Returns Type Description System.Threading.Tasks.Task <TResult> Type Parameters Name Description TResult The returned result (from fetch if succeed or cache if failed) OnResultAsync<TResult>(Task<Option<TResult, ApizrException<TResult>>>, Action<TResult>) The action will be invoked just before throwing any exception that might have occurred during request execution Declaration public static Task OnResultAsync<TResult>(this Task<Option<TResult, ApizrException<TResult>>> option, Action<TResult> onResult) Parameters Type Name Description System.Threading.Tasks.Task < Optional.Option <TResult, ApizrException <TResult>>> option System.Action <TResult> onResult The action to invoke Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TResult The returned result (from fetch if succeed or cache if failed) OnResultAsync<TResult>(Task<Option<TResult, ApizrException<TResult>>>, Func<TResult, ApizrException<TResult>, Boolean>) The function will be invoked with the returned result and potential occurred exception. You might decide to throw from the function itself, or to return the success boolean. Declaration public static Task<bool> OnResultAsync<TResult>(this Task<Option<TResult, ApizrException<TResult>>> option, Func<TResult, ApizrException<TResult>, bool> onResult) Parameters Type Name Description System.Threading.Tasks.Task < Optional.Option <TResult, ApizrException <TResult>>> option System.Func <TResult, ApizrException <TResult>, System.Boolean > onResult The function to invoke Returns Type Description System.Threading.Tasks.Task < System.Boolean > Type Parameters Name Description TResult The returned result (from fetch if succeed or cache if failed) OnResultAsync<TResult>(Task<Option<TResult, ApizrException<TResult>>>, Func<TResult, ApizrException<TResult>, Task<Boolean>>) The function will be invoked with the returned result and potential occurred exception. Checking exception, you might decide to throw it from the function itself, or to return the success boolean. Declaration public static Task<bool> OnResultAsync<TResult>(this Task<Option<TResult, ApizrException<TResult>>> option, Func<TResult, ApizrException<TResult>, Task<bool>> onResult) Parameters Type Name Description System.Threading.Tasks.Task < Optional.Option <TResult, ApizrException <TResult>>> option System.Func <TResult, ApizrException <TResult>, System.Threading.Tasks.Task < System.Boolean >> onResult The function to invoke Returns Type Description System.Threading.Tasks.Task < System.Boolean > Type Parameters Name Description TResult The returned result (from fetch if succeed or cache if failed)"
  },
  "api/Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase-4.html": {
    "href": "api/Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase-4.html",
    "title": "Class ExecuteOptionalResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning optional result) Inheritance System.Object RequestBase < Optional.Option <TApiData, ApizrException <TApiData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase < Optional.Option <TApiData, ApizrException <TApiData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase < Optional.Option <TApiData, ApizrException <TApiData>>, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase <TWebApi, TApiData, TApiData, Optional.Option <TApiData, ApizrException <TApiData>>, TApiData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase <TWebApi, TApiData, TApiData, Optional.Option <TApiData, ApizrException <TApiData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequest<TWebApi, TApiData> Implements MediatR.IRequest < Optional.Option <TApiData, ApizrException <TApiData>>> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Option<TApiData, ApizrException<TApiData>>, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<Option<TApiData, ApizrException<TApiData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Option<TApiData, ApizrException<TApiData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Base Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ExecuteOptionalResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteResultRequestBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<Option<TApiData, ApizrException<TApiData>>>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TApiData The api data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>>, Action<TApizrRequestOptionsBuilder>) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Action <TApizrRequestOptionsBuilder> optionsBuilder ExecuteOptionalResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<TApizrRequestOptionsBuilder>) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TApizrRequestOptions, TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Action <TApizrRequestOptionsBuilder> optionsBuilder Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase-5.html": {
    "href": "api/Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase-5.html",
    "title": "Class ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning optional result) Inheritance System.Object RequestBase < Optional.Option <TModelData, ApizrException <TModelData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase < Optional.Option <TModelData, ApizrException <TModelData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase < Optional.Option <TModelData, ApizrException <TModelData>>, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase <TWebApi, TModelData, TApiData, Optional.Option <TModelData, ApizrException <TModelData>>, TApiData, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase <TWebApi, TModelData, TApiData, Optional.Option <TModelData, ApizrException <TModelData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> Implements MediatR.IRequest < Optional.Option <TModelData, ApizrException <TModelData>>> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Option<TModelData, ApizrException<TModelData>>, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<Option<TModelData, ApizrException<TModelData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Option<TModelData, ApizrException<TModelData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Base Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteResultRequestBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<Option<TModelData, ApizrException<TModelData>>>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TModelData The model data type TApiData The api data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<TApizrRequestOptionsBuilder>) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Action <TApizrRequestOptionsBuilder> optionsBuilder ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>>, Action<TApizrRequestOptionsBuilder>) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Action <TApizrRequestOptionsBuilder> optionsBuilder ExecuteOptionalResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<TApizrRequestOptionsBuilder>) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TApizrRequestOptions, TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod TModelData modelData System.Action <TApizrRequestOptionsBuilder> optionsBuilder ExecuteOptionalResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<TApizrRequestOptionsBuilder>) Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TApizrRequestOptions, TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod System.Action <TApizrRequestOptionsBuilder> optionsBuilder Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase-7.html": {
    "href": "api/Apizr.Optional.Requesting.Base.ExecuteOptionalResultRequestBase-7.html",
    "title": "Class ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning optional result) Inheritance System.Object RequestBase < Optional.Option <TModelResultData, ApizrException <TModelResultData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase < Optional.Option <TModelResultData, ApizrException <TModelResultData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase < Optional.Option <TModelResultData, ApizrException <TModelResultData>>, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestBase <TWebApi, TModelResultData, TApiResultData, Optional.Option <TModelResultData, ApizrException <TModelResultData>>, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements MediatR.IRequest < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Option<TModelResultData, ApizrException<TModelResultData>>, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<Option<TModelResultData, ApizrException<TModelResultData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Option<TModelResultData, ApizrException<TModelResultData>>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Base Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteResultRequestBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<Option<TModelResultData, ApizrException<TModelResultData>>>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TApiRequestData The api request type TModelRequestData The model request type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute optional result request constructor Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The request to execute TModelRequestData modelData The data provided to the request System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, Task<TApiResultData>>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute optional result request constructor Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<TWebApi, Task<TApiResultData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The request to execute System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request ExecuteOptionalResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute optional result request constructor Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TApizrRequestOptions, TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The request to execute TModelRequestData modelData The data provided to the request System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request ExecuteOptionalResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiResultData>>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute optional result request constructor Declaration protected ExecuteOptionalResultRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task<TApiResultData>>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TApizrRequestOptions, TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The request to execute System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Requesting.Base.ExecuteOptionalUnitRequestBase-3.html": {
    "href": "api/Apizr.Optional.Requesting.Base.ExecuteOptionalUnitRequestBase-3.html",
    "title": "Class ExecuteOptionalUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute optional unit request (returning no result) Inheritance System.Object RequestBase < Optional.Option < MediatR.Unit , ApizrException >, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase < Optional.Option < MediatR.Unit , ApizrException >, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestBase <TWebApi, Optional.Option < MediatR.Unit , ApizrException >, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalUnitRequest<TWebApi> Implements MediatR.IRequest < Optional.Option < MediatR.Unit , ApizrException >> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Option<Unit, ApizrException>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Option<Unit, ApizrException>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Base Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ExecuteOptionalUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteUnitRequestBase<TWebApi, Option<Unit, ApizrException>, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<Option<Unit, ApizrException>>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteOptionalUnitRequestBase(Expression<Func<TWebApi, Task>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute optional unit request constructor Declaration protected ExecuteOptionalUnitRequestBase(Expression<Func<TWebApi, Task>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The request to execute System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request ExecuteOptionalUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task>>, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute optional unit request constructor Declaration protected ExecuteOptionalUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TApizrRequestOptions, TWebApi, System.Threading.Tasks.Task >> executeApiMethod The request to execute System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Requesting.Base.ExecuteOptionalUnitRequestBase-5.html": {
    "href": "api/Apizr.Optional.Requesting.Base.ExecuteOptionalUnitRequestBase-5.html",
    "title": "Class ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute optional unit request (returning no result) Inheritance System.Object RequestBase < Optional.Option < MediatR.Unit , ApizrException >, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase < Optional.Option < MediatR.Unit , ApizrException >, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteRequestBase < Optional.Option < MediatR.Unit , ApizrException >, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestBase <TWebApi, TModelData, TApiData, Optional.Option < MediatR.Unit , ApizrException >, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> Implements MediatR.IRequest < Optional.Option < MediatR.Unit , ApizrException >> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Option<Unit, ApizrException>, TModelData, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<Option<Unit, ApizrException>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Option<Unit, ApizrException>, TApizrRequestOptions, TApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Base Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteUnitRequestBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequest<Option<Unit, ApizrException>>, IBaseRequest where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TModelData The model data type TApiData The api data type TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteOptionalUnitRequestBase(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute optional unit request constructor Declaration protected ExecuteOptionalUnitRequestBase(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The request to execute TModelData modelData The data provided to the request System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request ExecuteOptionalUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<TApizrRequestOptionsBuilder>) The top level base mediation execute optional unit request constructor Declaration protected ExecuteOptionalUnitRequestBase(Expression<Func<TApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<TApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TApizrRequestOptions, TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The request to execute TModelData modelData The data provided to the request System.Action <TApizrRequestOptionsBuilder> optionsBuilder Options provided to the request Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Requesting.Base.html": {
    "href": "api/Apizr.Optional.Requesting.Base.html",
    "title": "Namespace Apizr.Optional.Requesting.Base | Apizr",
    "keywords": "Namespace Apizr.Optional.Requesting.Base Classes ExecuteOptionalResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning optional result) ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning optional result) ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute result request (returning optional result) ExecuteOptionalUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute optional unit request (returning no result) ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute optional unit request (returning no result)"
  },
  "api/Apizr.Optional.Requesting.DownloadOptionalQuery.html": {
    "href": "api/Apizr.Optional.Requesting.DownloadOptionalQuery.html",
    "title": "Class DownloadOptionalQuery | Apizr",
    "keywords": "Class DownloadOptionalQuery The mediation download query with a dictionary query parameters type Inheritance System.Object RequestBase < Optional.Option < System.IO.FileInfo , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationQueryBase < Optional.Option < System.IO.FileInfo , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > DownloadOptionalQuery < IDownloadApi , System.Collections.Generic.IDictionary < System.String , System.Object >> DownloadOptionalQuery < IDownloadApi > DownloadOptionalQuery Implements IMediationQuery < Optional.Option < System.IO.FileInfo , ApizrException >> MediatR.IRequest < Optional.Option < System.IO.FileInfo , ApizrException >> MediatR.IBaseRequest Inherited Members DownloadOptionalQuery<IDownloadApi, IDictionary<String, Object>>.FileInfo DownloadOptionalQuery<IDownloadApi, IDictionary<String, Object>>.DownloadParams RequestBase<Option<FileInfo, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting Assembly : Apizr.Integrations.FileTransfer.Optional.dll Syntax public class DownloadOptionalQuery : DownloadOptionalQuery<IDownloadApi>, IMediationQuery<Option<FileInfo, ApizrException>>, IRequest<Option<FileInfo, ApizrException>>, IBaseRequest Constructors DownloadOptionalQuery(FileInfo, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor Declaration public DownloadOptionalQuery(FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options DownloadOptionalQuery(FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor Declaration public DownloadOptionalQuery(FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download System.Collections.Generic.IDictionary < System.String , System.Object > downloadParams Some query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Requesting.DownloadOptionalQuery-1.html": {
    "href": "api/Apizr.Optional.Requesting.DownloadOptionalQuery-1.html",
    "title": "Class DownloadOptionalQuery<TDownloadApi> | Apizr",
    "keywords": "Class DownloadOptionalQuery<TDownloadApi> The mediation download query with a dictionary query parameters type Inheritance System.Object RequestBase < Optional.Option < System.IO.FileInfo , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationQueryBase < Optional.Option < System.IO.FileInfo , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > DownloadOptionalQuery <TDownloadApi, System.Collections.Generic.IDictionary < System.String , System.Object >> DownloadOptionalQuery<TDownloadApi> DownloadOptionalQuery Implements IMediationQuery < Optional.Option < System.IO.FileInfo , ApizrException >> MediatR.IRequest < Optional.Option < System.IO.FileInfo , ApizrException >> MediatR.IBaseRequest Inherited Members DownloadOptionalQuery<TDownloadApi, IDictionary<String, Object>>.FileInfo DownloadOptionalQuery<TDownloadApi, IDictionary<String, Object>>.DownloadParams RequestBase<Option<FileInfo, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting Assembly : Apizr.Integrations.FileTransfer.Optional.dll Syntax public class DownloadOptionalQuery<TDownloadApi> : DownloadOptionalQuery<TDownloadApi, IDictionary<string, object>>, IMediationQuery<Option<FileInfo, ApizrException>>, IRequest<Option<FileInfo, ApizrException>>, IBaseRequest where TDownloadApi : IDownloadApi Type Parameters Name Description TDownloadApi The download api type to manage Constructors DownloadOptionalQuery(FileInfo, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor Declaration public DownloadOptionalQuery(FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options DownloadOptionalQuery(FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor Declaration public DownloadOptionalQuery(FileInfo fileInfo, IDictionary<string, object> downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download System.Collections.Generic.IDictionary < System.String , System.Object > downloadParams Some query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Requesting.DownloadOptionalQuery-2.html": {
    "href": "api/Apizr.Optional.Requesting.DownloadOptionalQuery-2.html",
    "title": "Class DownloadOptionalQuery<TDownloadApi, TDownloadParams> | Apizr",
    "keywords": "Class DownloadOptionalQuery<TDownloadApi, TDownloadParams> The mediation download query with a custom query parameters type Inheritance System.Object RequestBase < Optional.Option < System.IO.FileInfo , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationQueryBase < Optional.Option < System.IO.FileInfo , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > DownloadOptionalQuery<TDownloadApi, TDownloadParams> DownloadOptionalQuery<TDownloadApi> DownloadWithOptionalQuery<TDownloadParams> Implements IMediationQuery < Optional.Option < System.IO.FileInfo , ApizrException >> MediatR.IRequest < Optional.Option < System.IO.FileInfo , ApizrException >> MediatR.IBaseRequest Inherited Members RequestBase<Option<FileInfo, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting Assembly : Apizr.Integrations.FileTransfer.Optional.dll Syntax public class DownloadOptionalQuery<TDownloadApi, TDownloadParams> : MediationQueryBase<Option<FileInfo, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationQuery<Option<FileInfo, ApizrException>>, IRequest<Option<FileInfo, ApizrException>>, IBaseRequest where TDownloadApi : IDownloadApi<TDownloadParams> Type Parameters Name Description TDownloadApi The download api type to manage TDownloadParams The query parameters type Constructors DownloadOptionalQuery(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor Declaration public DownloadOptionalQuery(FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download TDownloadParams downloadParams Some custom query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Properties DownloadParams Some custom query parameters Declaration public TDownloadParams DownloadParams { get; } Property Value Type Description TDownloadParams FileInfo Some information about the file to download Declaration public FileInfo FileInfo { get; } Property Value Type Description System.IO.FileInfo Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Requesting.DownloadWithOptionalQuery-1.html": {
    "href": "api/Apizr.Optional.Requesting.DownloadWithOptionalQuery-1.html",
    "title": "Class DownloadWithOptionalQuery<TDownloadParams> | Apizr",
    "keywords": "Class DownloadWithOptionalQuery<TDownloadParams> The mediation download query with a dictionary query parameters type Inheritance System.Object RequestBase < Optional.Option < System.IO.FileInfo , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationQueryBase < Optional.Option < System.IO.FileInfo , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > DownloadOptionalQuery < IDownloadApi <TDownloadParams>, TDownloadParams> DownloadWithOptionalQuery<TDownloadParams> Implements IMediationQuery < Optional.Option < System.IO.FileInfo , ApizrException >> MediatR.IRequest < Optional.Option < System.IO.FileInfo , ApizrException >> MediatR.IBaseRequest Inherited Members DownloadOptionalQuery<IDownloadApi<TDownloadParams>, TDownloadParams>.FileInfo DownloadOptionalQuery<IDownloadApi<TDownloadParams>, TDownloadParams>.DownloadParams RequestBase<Option<FileInfo, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting Assembly : Apizr.Integrations.FileTransfer.Optional.dll Syntax public class DownloadWithOptionalQuery<TDownloadParams> : DownloadOptionalQuery<IDownloadApi<TDownloadParams>, TDownloadParams>, IMediationQuery<Option<FileInfo, ApizrException>>, IRequest<Option<FileInfo, ApizrException>>, IBaseRequest Type Parameters Name Description TDownloadParams The query parameters type Constructors DownloadWithOptionalQuery(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor Declaration public DownloadWithOptionalQuery(FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download TDownloadParams downloadParams Some query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options DownloadWithOptionalQuery(FileInfo, Action<IApizrRequestOptionsBuilder>) The mediation Read query constructor Declaration public DownloadWithOptionalQuery(FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Implements IMediationQuery<TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Requesting.ExecuteOptionalResultRequest-2.html": {
    "href": "api/Apizr.Optional.Requesting.ExecuteOptionalResultRequest-2.html",
    "title": "Class ExecuteOptionalResultRequest<TWebApi, TApiData> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequest<TWebApi, TApiData> The mediation execute optional result request (returning result) Inheritance System.Object RequestBase < Optional.Option <TApiData, ApizrException <TApiData>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteRequestBase < Optional.Option <TApiData, ApizrException <TApiData>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteRequestBase < Optional.Option <TApiData, ApizrException <TApiData>>, TApiData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestBase <TWebApi, TApiData, TApiData, Optional.Option <TApiData, ApizrException <TApiData>>, TApiData, TApiData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestBase <TWebApi, TApiData, TApiData, Optional.Option <TApiData, ApizrException <TApiData>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteOptionalResultRequestBase <TWebApi, TApiData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteOptionalResultRequest<TWebApi, TApiData> Implements MediatR.IRequest < Optional.Option <TApiData, ApizrException <TApiData>>> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Option<TApiData, ApizrException<TApiData>>, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<Option<TApiData, ApizrException<TApiData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Option<TApiData, ApizrException<TApiData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting Assembly : Apizr.Integrations.Optional.dll Syntax public class ExecuteOptionalResultRequest<TWebApi, TApiData> : ExecuteOptionalResultRequestBase<TWebApi, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<Option<TApiData, ApizrException<TApiData>>>, IBaseRequest Type Parameters Name Description TWebApi The web api type TApiData The api data type Constructors ExecuteOptionalResultRequest(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute optional result request constructor Declaration public ExecuteOptionalResultRequest(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The request to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request ExecuteOptionalResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute optional result request constructor Declaration public ExecuteOptionalResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The request to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Requesting.ExecuteOptionalResultRequest-3.html": {
    "href": "api/Apizr.Optional.Requesting.ExecuteOptionalResultRequest-3.html",
    "title": "Class ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> The mediation execute optional result request (returning result) Inheritance System.Object RequestBase < Optional.Option <TModelData, ApizrException <TModelData>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteRequestBase < Optional.Option <TModelData, ApizrException <TModelData>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteRequestBase < Optional.Option <TModelData, ApizrException <TModelData>>, TModelData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestBase <TWebApi, TModelData, TApiData, Optional.Option <TModelData, ApizrException <TModelData>>, TApiData, TModelData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestBase <TWebApi, TModelData, TApiData, Optional.Option <TModelData, ApizrException <TModelData>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteOptionalResultRequestBase <TWebApi, TModelData, TApiData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> Implements MediatR.IRequest < Optional.Option <TModelData, ApizrException <TModelData>>> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Option<TModelData, ApizrException<TModelData>>, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<Option<TModelData, ApizrException<TModelData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Option<TModelData, ApizrException<TModelData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting Assembly : Apizr.Integrations.Optional.dll Syntax public class ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> : ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<Option<TModelData, ApizrException<TModelData>>>, IBaseRequest Type Parameters Name Description TWebApi The web api type TModelData The model data type TApiData The api data type Constructors ExecuteOptionalResultRequest(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) The mediation execute optional result request constructor Declaration public ExecuteOptionalResultRequest(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The request to execute TModelData modelData The data provided to the request System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request ExecuteOptionalResultRequest(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute optional result request constructor Declaration public ExecuteOptionalResultRequest(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The request to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request ExecuteOptionalResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) The mediation execute optional result request constructor Declaration public ExecuteOptionalResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The request to execute TModelData modelData The data provided to the request System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request ExecuteOptionalResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute optional result request constructor Declaration public ExecuteOptionalResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The request to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Requesting.ExecuteOptionalResultRequest-5.html": {
    "href": "api/Apizr.Optional.Requesting.ExecuteOptionalResultRequest-5.html",
    "title": "Class ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> The mediation execute optional result request (returning result) Inheritance System.Object RequestBase < Optional.Option <TModelResultData, ApizrException <TModelResultData>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteRequestBase < Optional.Option <TModelResultData, ApizrException <TModelResultData>>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteRequestBase < Optional.Option <TModelResultData, ApizrException <TModelResultData>>, TModelRequestData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestBase <TWebApi, TModelResultData, TApiResultData, Optional.Option <TModelResultData, ApizrException <TModelResultData>>, TApiRequestData, TModelRequestData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteOptionalResultRequestBase <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements MediatR.IRequest < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Option<TModelResultData, ApizrException<TModelResultData>>, TModelRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<Option<TModelResultData, ApizrException<TModelResultData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Option<TModelResultData, ApizrException<TModelResultData>>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting Assembly : Apizr.Integrations.Optional.dll Syntax public class ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<Option<TModelResultData, ApizrException<TModelResultData>>>, IBaseRequest Type Parameters Name Description TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TApiRequestData The api request type TModelRequestData The model request type Constructors ExecuteOptionalResultRequest(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) The mediation execute optional result request constructor Declaration public ExecuteOptionalResultRequest(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The request to execute TModelRequestData modelData The data provided to the request System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request ExecuteOptionalResultRequest(Expression<Func<TWebApi, Task<TApiResultData>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute optional result request constructor Declaration public ExecuteOptionalResultRequest(Expression<Func<TWebApi, Task<TApiResultData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The request to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request ExecuteOptionalResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) The mediation execute optional result request constructor Declaration public ExecuteOptionalResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The request to execute TModelRequestData modelData The data provided to the request System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request ExecuteOptionalResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiResultData>>>, Action<IApizrRequestOptionsBuilder>) The mediation execute optional result request constructor Declaration public ExecuteOptionalResultRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiResultData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The request to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Requesting.ExecuteOptionalUnitRequest-1.html": {
    "href": "api/Apizr.Optional.Requesting.ExecuteOptionalUnitRequest-1.html",
    "title": "Class ExecuteOptionalUnitRequest<TWebApi> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequest<TWebApi> The mediation execute optional unit request (returning no result) Inheritance System.Object RequestBase < Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteRequestBase < Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteUnitRequestBase <TWebApi, Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteOptionalUnitRequestBase <TWebApi, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteOptionalUnitRequest<TWebApi> Implements MediatR.IRequest < Optional.Option < MediatR.Unit , ApizrException >> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting Assembly : Apizr.Integrations.Optional.dll Syntax public class ExecuteOptionalUnitRequest<TWebApi> : ExecuteOptionalUnitRequestBase<TWebApi, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<Option<Unit, ApizrException>>, IBaseRequest Type Parameters Name Description TWebApi The web api type Constructors ExecuteOptionalUnitRequest(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) The mediation execute optional unit request constructor Declaration public ExecuteOptionalUnitRequest(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The request to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request ExecuteOptionalUnitRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) The mediation execute optional unit request constructor Declaration public ExecuteOptionalUnitRequest(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The request to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Requesting.ExecuteOptionalUnitRequest-3.html": {
    "href": "api/Apizr.Optional.Requesting.ExecuteOptionalUnitRequest-3.html",
    "title": "Class ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> The mediation execute optional unit request (returning no result) Inheritance System.Object RequestBase < Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteRequestBase < Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteRequestBase < Optional.Option < MediatR.Unit , ApizrException >, TModelData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteUnitRequestBase <TWebApi, TModelData, TApiData, Optional.Option < MediatR.Unit , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteOptionalUnitRequestBase <TWebApi, TModelData, TApiData, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> Implements MediatR.IRequest < Optional.Option < MediatR.Unit , ApizrException >> MediatR.IBaseRequest Inherited Members ExecuteRequestBase<Option<Unit, ApizrException>, TModelData, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ModelRequestData ExecuteRequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.ExecuteApiMethod RequestBase<Option<Unit, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting Assembly : Apizr.Integrations.Optional.dll Syntax public class ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> : ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequest<Option<Unit, ApizrException>>, IBaseRequest Type Parameters Name Description TWebApi The web api type TModelData The model data type TApiData The api data type Constructors ExecuteOptionalUnitRequest(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) The mediation execute optional unit request constructor Declaration public ExecuteOptionalUnitRequest(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The request to execute TModelData modelData The data provided to the request System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request ExecuteOptionalUnitRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) The mediation execute optional unit request constructor Declaration public ExecuteOptionalUnitRequest(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The request to execute TModelData modelData The data provided to the request System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Implements MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalResultRequestHandlerBase-5.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalResultRequestHandlerBase-5.html",
    "title": "Class ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute optional result request handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase <TWebApi, TApiData, TApiData, Optional.Option <TApiData, ApizrException <TApiData>>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestHandler<TWebApi, TApiData> Implements MediatR.IRequestHandler <TRequest, Optional.Option <TApiData, ApizrException <TApiData>>> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Handle(TRequest, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling.Base Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteResultRequestHandlerBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, Option<TApiData, ApizrException<TApiData>>> where TRequest : ExecuteOptionalResultRequestBase<TWebApi, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TApiData The api data type TRequest The request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteOptionalResultRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteOptionalResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalResultRequestHandlerBase-6.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalResultRequestHandlerBase-6.html",
    "title": "Class ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute optional result request handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase <TWebApi, TModelData, TApiData, Optional.Option <TModelData, ApizrException <TModelData>>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestHandler<TWebApi, TModelData, TApiData> Implements MediatR.IRequestHandler <TRequest, Optional.Option <TModelData, ApizrException <TModelData>>> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Handle(TRequest, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling.Base Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, Option<TModelData, ApizrException<TModelData>>> where TRequest : ExecuteOptionalResultRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TModelData The model data type TApiData The api data type TRequest The request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteOptionalResultRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteOptionalResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalResultRequestHandlerBase-8.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalResultRequestHandlerBase-8.html",
    "title": "Class ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute optional result request handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteResultRequestHandlerBase <TWebApi, TModelResultData, TApiResultData, Optional.Option <TModelResultData, ApizrException <TModelResultData>>, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements MediatR.IRequestHandler <TRequest, Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Handle(TRequest, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling.Base Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, Option<TModelResultData, ApizrException<TModelResultData>>> where TRequest : ExecuteOptionalResultRequestBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TApiRequestData The api request type TModelRequestData The model request type TRequest The request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteOptionalResultRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteOptionalResultRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase-4.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase-4.html",
    "title": "Class ExecuteOptionalUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute optional unit request handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase <TWebApi, Optional.Option < MediatR.Unit , ApizrException >, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalUnitRequestHandler<TWebApi> Implements MediatR.IRequestHandler <TRequest, Optional.Option < MediatR.Unit , ApizrException >> Inherited Members ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>.WebApiManager ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Handle(TRequest, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling.Base Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ExecuteOptionalUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, Option<Unit, ApizrException>> where TRequest : ExecuteOptionalUnitRequestBase<TWebApi, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TRequest The execute unit request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteOptionalUnitRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteOptionalUnitRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase-6.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.Base.ExecuteOptionalUnitRequestHandlerBase-6.html",
    "title": "Class ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute optional unit request handler Inheritance System.Object RequestHandlerBase <TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteUnitRequestHandlerBase <TWebApi, TModelData, TApiData, Optional.Option < MediatR.Unit , ApizrException >, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> ExecuteOptionalUnitRequestHandler<TWebApi, TModelData, TApiData> Implements MediatR.IRequestHandler <TRequest, Optional.Option < MediatR.Unit , ApizrException >> Inherited Members ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>.WebApiManager ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>.Handle(TRequest, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling.Base Assembly : Apizr.Integrations.Optional.dll Syntax public abstract class ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> : ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder>, IRequestHandler<TRequest, Option<Unit, ApizrException>> where TRequest : ExecuteOptionalUnitRequestBase<TWebApi, TModelData, TApiData, TApizrRequestOptions, TApizrRequestOptionsBuilder> where TApizrRequestOptions : IApizrRequestOptions where TApizrRequestOptionsBuilder : IApizrRequestOptionsBuilder<TApizrRequestOptions, TApizrRequestOptionsBuilder> Type Parameters Name Description TWebApi The web api type TModelData The model data type TApiData The api data type TRequest The execute unit request to handle TApizrRequestOptions Options provided to the request TApizrRequestOptionsBuilder The request options builder Constructors ExecuteOptionalUnitRequestHandlerBase(IApizrManager<TWebApi>) Declaration protected ExecuteOptionalUnitRequestHandlerBase(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Requesting.Handling.Base.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.Base.html",
    "title": "Namespace Apizr.Optional.Requesting.Handling.Base | Apizr",
    "keywords": "Namespace Apizr.Optional.Requesting.Handling.Base Classes ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute optional result request handler ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute optional result request handler ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute optional result request handler ExecuteOptionalUnitRequestHandlerBase<TWebApi, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute optional unit request handler ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, TRequest, TApizrRequestOptions, TApizrRequestOptionsBuilder> The top level base mediation execute optional unit request handler"
  },
  "api/Apizr.Optional.Requesting.Handling.DownloadOptionalQueryHandler-1.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.DownloadOptionalQueryHandler-1.html",
    "title": "Class DownloadOptionalQueryHandler<TDownloadApi> | Apizr",
    "keywords": "Class DownloadOptionalQueryHandler<TDownloadApi> The mediation handler for DownloadOptionalQuery<TDownloadApi> Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > DownloadOptionalQueryHandler<TDownloadApi> Implements MediatR.IRequestHandler < DownloadOptionalQuery <TDownloadApi>, Optional.Option < System.IO.FileInfo , ApizrException >> MediatR.IRequestHandler < DownloadOptionalQuery , Optional.Option < System.IO.FileInfo , ApizrException >> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling Assembly : Apizr.Integrations.FileTransfer.Optional.dll Syntax public class DownloadOptionalQueryHandler<TDownloadApi> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<DownloadOptionalQuery<TDownloadApi>, Option<FileInfo, ApizrException>>, IRequestHandler<DownloadOptionalQuery, Option<FileInfo, ApizrException>> where TDownloadApi : IDownloadApi Type Parameters Name Description TDownloadApi The download api type to manage Constructors DownloadOptionalQueryHandler(IApizrDownloadManager<TDownloadApi>) Declaration public DownloadOptionalQueryHandler(IApizrDownloadManager<TDownloadApi> downloadManager) Parameters Type Name Description IApizrDownloadManager <TDownloadApi> downloadManager Methods Handle(DownloadOptionalQuery, CancellationToken) Handling the download optional request Declaration public async Task<Option<FileInfo, ApizrException>> Handle(DownloadOptionalQuery request, CancellationToken cancellationToken) Parameters Type Name Description DownloadOptionalQuery request The download optional request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < System.IO.FileInfo , ApizrException >> Handle(DownloadOptionalQuery<TDownloadApi>, CancellationToken) Handling the download optional request Declaration public async Task<Option<FileInfo, ApizrException>> Handle(DownloadOptionalQuery<TDownloadApi> request, CancellationToken cancellationToken) Parameters Type Name Description DownloadOptionalQuery <TDownloadApi> request The download optional request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < System.IO.FileInfo , ApizrException >> Implements MediatR.IRequestHandler<TRequest, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Requesting.Handling.DownloadOptionalQueryHandler-2.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.DownloadOptionalQueryHandler-2.html",
    "title": "Class DownloadOptionalQueryHandler<TDownloadApi, TDownloadParams> | Apizr",
    "keywords": "Class DownloadOptionalQueryHandler<TDownloadApi, TDownloadParams> The mediation handler for DownloadOptionalQuery<TDownloadApi, TDownloadParams> Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > DownloadOptionalQueryHandler<TDownloadApi, TDownloadParams> Implements MediatR.IRequestHandler < DownloadOptionalQuery <TDownloadApi, TDownloadParams>, Optional.Option < System.IO.FileInfo , ApizrException >> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling Assembly : Apizr.Integrations.FileTransfer.Optional.dll Syntax public class DownloadOptionalQueryHandler<TDownloadApi, TDownloadParams> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<DownloadOptionalQuery<TDownloadApi, TDownloadParams>, Option<FileInfo, ApizrException>> where TDownloadApi : IDownloadApi<TDownloadParams> Type Parameters Name Description TDownloadApi The download api type to manage TDownloadParams The query parameters type Constructors DownloadOptionalQueryHandler(IApizrDownloadManager<TDownloadApi, TDownloadParams>) Declaration public DownloadOptionalQueryHandler(IApizrDownloadManager<TDownloadApi, TDownloadParams> downloadManager) Parameters Type Name Description IApizrDownloadManager <TDownloadApi, TDownloadParams> downloadManager Methods Handle(DownloadOptionalQuery<TDownloadApi, TDownloadParams>, CancellationToken) Handling the download optional request Declaration public async Task<Option<FileInfo, ApizrException>> Handle(DownloadOptionalQuery<TDownloadApi, TDownloadParams> request, CancellationToken cancellationToken) Parameters Type Name Description DownloadOptionalQuery <TDownloadApi, TDownloadParams> request The download optional request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < System.IO.FileInfo , ApizrException >> Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Requesting.Handling.DownloadWithOptionalQueryHandler-1.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.DownloadWithOptionalQueryHandler-1.html",
    "title": "Class DownloadWithOptionalQueryHandler<TDownloadParams> | Apizr",
    "keywords": "Class DownloadWithOptionalQueryHandler<TDownloadParams> The mediation handler for DownloadWithOptionalQuery<TDownloadParams> Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > DownloadWithOptionalQueryHandler<TDownloadParams> Implements MediatR.IRequestHandler < DownloadWithOptionalQuery <TDownloadParams>, Optional.Option < System.IO.FileInfo , ApizrException >> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling Assembly : Apizr.Integrations.FileTransfer.Optional.dll Syntax public class DownloadWithOptionalQueryHandler<TDownloadParams> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<DownloadWithOptionalQuery<TDownloadParams>, Option<FileInfo, ApizrException>> Type Parameters Name Description TDownloadParams The query parameters type Constructors DownloadWithOptionalQueryHandler(IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams>) Declaration public DownloadWithOptionalQueryHandler(IApizrDownloadManager<IDownloadApi<TDownloadParams>, TDownloadParams> downloadManager) Parameters Type Name Description IApizrDownloadManager < IDownloadApi <TDownloadParams>, TDownloadParams> downloadManager Methods Handle(DownloadWithOptionalQuery<TDownloadParams>, CancellationToken) Handling the download optional request Declaration public async Task<Option<FileInfo, ApizrException>> Handle(DownloadWithOptionalQuery<TDownloadParams> request, CancellationToken cancellationToken) Parameters Type Name Description DownloadWithOptionalQuery <TDownloadParams> request The download optional request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < System.IO.FileInfo , ApizrException >> Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler-2.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler-2.html",
    "title": "Class ExecuteOptionalResultRequestHandler<TWebApi, TApiData> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestHandler<TWebApi, TApiData> The mediation execute optional result request handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestHandlerBase <TWebApi, TApiData, TApiData, Optional.Option <TApiData, ApizrException <TApiData>>, ExecuteOptionalResultRequest <TWebApi, TApiData>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteOptionalResultRequestHandlerBase <TWebApi, TApiData, ExecuteOptionalResultRequest <TWebApi, TApiData>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteOptionalResultRequestHandler<TWebApi, TApiData> Implements MediatR.IRequestHandler < ExecuteOptionalResultRequest <TWebApi, TApiData>, Optional.Option <TApiData, ApizrException <TApiData>>> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, ExecuteOptionalResultRequest<TWebApi, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TApiData, TApiData, Option<TApiData, ApizrException<TApiData>>, ExecuteOptionalResultRequest<TWebApi, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteOptionalResultRequest<TWebApi, TApiData>, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class ExecuteOptionalResultRequestHandler<TWebApi, TApiData> : ExecuteOptionalResultRequestHandlerBase<TWebApi, TApiData, ExecuteOptionalResultRequest<TWebApi, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteOptionalResultRequest<TWebApi, TApiData>, Option<TApiData, ApizrException<TApiData>>> Type Parameters Name Description TWebApi The web api type TApiData The api data type Constructors ExecuteOptionalResultRequestHandler(IApizrManager<TWebApi>) Declaration public ExecuteOptionalResultRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Methods Handle(ExecuteOptionalResultRequest<TWebApi, TApiData>, CancellationToken) Handling the execute result request Declaration public override async Task<Option<TApiData, ApizrException<TApiData>>> Handle(ExecuteOptionalResultRequest<TWebApi, TApiData> request, CancellationToken cancellationToken) Parameters Type Name Description ExecuteOptionalResultRequest <TWebApi, TApiData> request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Overrides Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase<TWebApi, TApiData, TApiData, Optional.Option<TApiData, Apizr.ApizrException<TApiData>>, Apizr.Optional.Requesting.ExecuteOptionalResultRequest<TWebApi, TApiData>, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Optional.Requesting.ExecuteOptionalResultRequest<TWebApi, TApiData>, System.Threading.CancellationToken) Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler-3.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler-3.html",
    "title": "Class ExecuteOptionalResultRequestHandler<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestHandler<TWebApi, TModelData, TApiData> The mediation execute optional result request handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestHandlerBase <TWebApi, TModelData, TApiData, Optional.Option <TModelData, ApizrException <TModelData>>, ExecuteOptionalResultRequest <TWebApi, TModelData, TApiData>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteOptionalResultRequestHandlerBase <TWebApi, TModelData, TApiData, ExecuteOptionalResultRequest <TWebApi, TModelData, TApiData>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteOptionalResultRequestHandler<TWebApi, TModelData, TApiData> Implements MediatR.IRequestHandler < ExecuteOptionalResultRequest <TWebApi, TModelData, TApiData>, Optional.Option <TModelData, ApizrException <TModelData>>> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, Option<TModelData, ApizrException<TModelData>>, ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class ExecuteOptionalResultRequestHandler<TWebApi, TModelData, TApiData> : ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>, Option<TModelData, ApizrException<TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The model data type TApiData The api data type Constructors ExecuteOptionalResultRequestHandler(IApizrManager<TWebApi>) Declaration public ExecuteOptionalResultRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Methods Handle(ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>, CancellationToken) Handling the execute result request Declaration public override async Task<Option<TModelData, ApizrException<TModelData>>> Handle(ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> request, CancellationToken cancellationToken) Parameters Type Name Description ExecuteOptionalResultRequest <TWebApi, TModelData, TApiData> request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Overrides Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase<TWebApi, TModelData, TApiData, Optional.Option<TModelData, Apizr.ApizrException<TModelData>>, Apizr.Optional.Requesting.ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Optional.Requesting.ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData>, System.Threading.CancellationToken) Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler-5.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalResultRequestHandler-5.html",
    "title": "Class ExecuteOptionalResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> | Apizr",
    "keywords": "Class ExecuteOptionalResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> The mediation execute optional result request handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteResultRequestHandlerBase <TWebApi, TModelResultData, TApiResultData, Optional.Option <TModelResultData, ApizrException <TModelResultData>>, TApiRequestData, TModelRequestData, ExecuteOptionalResultRequest <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteOptionalResultRequestHandlerBase <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, ExecuteOptionalResultRequest <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteOptionalResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> Implements MediatR.IRequestHandler < ExecuteOptionalResultRequest <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Inherited Members ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, Option<TModelResultData, ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class ExecuteOptionalResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : ExecuteOptionalResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData, ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, Option<TModelResultData, ApizrException<TModelResultData>>> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type TApiResultData The api result type TApiRequestData The api request type TModelRequestData The model request type Constructors ExecuteOptionalResultRequestHandler(IApizrManager<TWebApi>) Declaration public ExecuteOptionalResultRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Methods Handle(ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, CancellationToken) Handling the execute result request Declaration public override async Task<Option<TModelResultData, ApizrException<TModelResultData>>> Handle(ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> request, CancellationToken cancellationToken) Parameters Type Name Description ExecuteOptionalResultRequest <TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Overrides Apizr.Mediation.Requesting.Handling.Base.ExecuteResultRequestHandlerBase<TWebApi, TModelResultData, TApiResultData, Optional.Option<TModelResultData, Apizr.ApizrException<TModelResultData>>, TApiRequestData, TModelRequestData, Apizr.Optional.Requesting.ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Optional.Requesting.ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>, System.Threading.CancellationToken) Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler-1.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler-1.html",
    "title": "Class ExecuteOptionalUnitRequestHandler<TWebApi> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequestHandler<TWebApi> The mediation execute optional unit request handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteUnitRequestHandlerBase <TWebApi, Optional.Option < MediatR.Unit , ApizrException >, ExecuteOptionalUnitRequest <TWebApi>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteOptionalUnitRequestHandlerBase <TWebApi, ExecuteOptionalUnitRequest <TWebApi>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteOptionalUnitRequestHandler<TWebApi> Implements MediatR.IRequestHandler < ExecuteOptionalUnitRequest <TWebApi>, Optional.Option < MediatR.Unit , ApizrException >> Inherited Members ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, ExecuteOptionalUnitRequest<TWebApi>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteUnitRequestHandlerBase<TWebApi, Option<Unit, ApizrException>, ExecuteOptionalUnitRequest<TWebApi>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteOptionalUnitRequest<TWebApi>, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class ExecuteOptionalUnitRequestHandler<TWebApi> : ExecuteOptionalUnitRequestHandlerBase<TWebApi, ExecuteOptionalUnitRequest<TWebApi>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteOptionalUnitRequest<TWebApi>, Option<Unit, ApizrException>> Type Parameters Name Description TWebApi The web api type Constructors ExecuteOptionalUnitRequestHandler(IApizrManager<TWebApi>) Declaration public ExecuteOptionalUnitRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Methods Handle(ExecuteOptionalUnitRequest<TWebApi>, CancellationToken) Handling the execute unit request Declaration public override async Task<Option<Unit, ApizrException>> Handle(ExecuteOptionalUnitRequest<TWebApi> request, CancellationToken cancellationToken) Parameters Type Name Description ExecuteOptionalUnitRequest <TWebApi> request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Overrides Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase<TWebApi, Optional.Option<MediatR.Unit, Apizr.ApizrException>, Apizr.Optional.Requesting.ExecuteOptionalUnitRequest<TWebApi>, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Optional.Requesting.ExecuteOptionalUnitRequest<TWebApi>, System.Threading.CancellationToken) Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler-3.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.ExecuteOptionalUnitRequestHandler-3.html",
    "title": "Class ExecuteOptionalUnitRequestHandler<TWebApi, TModelData, TApiData> | Apizr",
    "keywords": "Class ExecuteOptionalUnitRequestHandler<TWebApi, TModelData, TApiData> The mediation execute optional unit request handler Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteUnitRequestHandlerBase <TWebApi, TModelData, TApiData, Optional.Option < MediatR.Unit , ApizrException >, ExecuteOptionalUnitRequest <TWebApi, TModelData, TApiData>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteOptionalUnitRequestHandlerBase <TWebApi, TModelData, TApiData, ExecuteOptionalUnitRequest <TWebApi, TModelData, TApiData>, IApizrRequestOptions , IApizrRequestOptionsBuilder > ExecuteOptionalUnitRequestHandler<TWebApi, TModelData, TApiData> Implements MediatR.IRequestHandler < ExecuteOptionalUnitRequest <TWebApi, TModelData, TApiData>, Optional.Option < MediatR.Unit , ApizrException >> Inherited Members ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>, ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.WebApiManager ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, Option<Unit, ApizrException>, ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.Handle(ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>, CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling Assembly : Apizr.Integrations.Optional.dll Syntax public class ExecuteOptionalUnitRequestHandler<TWebApi, TModelData, TApiData> : ExecuteOptionalUnitRequestHandlerBase<TWebApi, TModelData, TApiData, ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>, Option<Unit, ApizrException>> Type Parameters Name Description TWebApi The web api type TModelData The model data type TApiData The api data type Constructors ExecuteOptionalUnitRequestHandler(IApizrManager<TWebApi>) Declaration public ExecuteOptionalUnitRequestHandler(IApizrManager<TWebApi> webApiManager) Parameters Type Name Description IApizrManager <TWebApi> webApiManager Methods Handle(ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>, CancellationToken) Handling the execute unit request Declaration public override async Task<Option<Unit, ApizrException>> Handle(ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> request, CancellationToken cancellationToken) Parameters Type Name Description ExecuteOptionalUnitRequest <TWebApi, TModelData, TApiData> request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Overrides Apizr.Mediation.Requesting.Handling.Base.ExecuteUnitRequestHandlerBase<TWebApi, TModelData, TApiData, Optional.Option<MediatR.Unit, Apizr.ApizrException>, Apizr.Optional.Requesting.ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>, Apizr.Configuring.Request.IApizrRequestOptions, Apizr.Configuring.Request.IApizrRequestOptionsBuilder>.Handle(Apizr.Optional.Requesting.ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData>, System.Threading.CancellationToken) Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Requesting.Handling.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.html",
    "title": "Namespace Apizr.Optional.Requesting.Handling | Apizr",
    "keywords": "Namespace Apizr.Optional.Requesting.Handling Classes DownloadOptionalQueryHandler<TDownloadApi> The mediation handler for DownloadOptionalQuery<TDownloadApi> DownloadOptionalQueryHandler<TDownloadApi, TDownloadParams> The mediation handler for DownloadOptionalQuery<TDownloadApi, TDownloadParams> DownloadWithOptionalQueryHandler<TDownloadParams> The mediation handler for DownloadWithOptionalQuery<TDownloadParams> ExecuteOptionalResultRequestHandler<TWebApi, TApiData> The mediation execute optional result request handler ExecuteOptionalResultRequestHandler<TWebApi, TModelData, TApiData> The mediation execute optional result request handler ExecuteOptionalResultRequestHandler<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> The mediation execute optional result request handler ExecuteOptionalUnitRequestHandler<TWebApi> The mediation execute optional unit request handler ExecuteOptionalUnitRequestHandler<TWebApi, TModelData, TApiData> The mediation execute optional unit request handler UploadOptionalCommandHandler<TUploadApi> UploadOptionalCommandHandler<TUploadApi, TUploadApiResultData> UploadWithOptionalCommandHandler<TUploadApiResultData>"
  },
  "api/Apizr.Optional.Requesting.Handling.UploadOptionalCommandHandler-1.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.UploadOptionalCommandHandler-1.html",
    "title": "Class UploadOptionalCommandHandler<TUploadApi> | Apizr",
    "keywords": "Class UploadOptionalCommandHandler<TUploadApi> Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > UploadOptionalCommandHandler<TUploadApi> Implements MediatR.IRequestHandler < UploadOptionalCommand <TUploadApi>, Optional.Option < System.Net.Http.HttpResponseMessage , ApizrException >> MediatR.IRequestHandler < UploadOptionalCommand , Optional.Option < System.Net.Http.HttpResponseMessage , ApizrException >> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling Assembly : Apizr.Integrations.FileTransfer.Optional.dll Syntax public class UploadOptionalCommandHandler<TUploadApi> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<UploadOptionalCommand<TUploadApi>, Option<HttpResponseMessage, ApizrException>>, IRequestHandler<UploadOptionalCommand, Option<HttpResponseMessage, ApizrException>> where TUploadApi : IUploadApi Type Parameters Name Description TUploadApi Constructors UploadOptionalCommandHandler(IApizrUploadManager<TUploadApi>) Declaration public UploadOptionalCommandHandler(IApizrUploadManager<TUploadApi> uploadManager) Parameters Type Name Description IApizrUploadManager <TUploadApi> uploadManager Methods Handle(UploadOptionalCommand, CancellationToken) Handling the upload optional request Declaration public async Task<Option<HttpResponseMessage, ApizrException>> Handle(UploadOptionalCommand request, CancellationToken cancellationToken) Parameters Type Name Description UploadOptionalCommand request The upload optional request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < System.Net.Http.HttpResponseMessage , ApizrException >> Handle(UploadOptionalCommand<TUploadApi>, CancellationToken) Handling the upload optional request Declaration public async Task<Option<HttpResponseMessage, ApizrException>> Handle(UploadOptionalCommand<TUploadApi> request, CancellationToken cancellationToken) Parameters Type Name Description UploadOptionalCommand <TUploadApi> request The upload optional request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option < System.Net.Http.HttpResponseMessage , ApizrException >> Implements MediatR.IRequestHandler<TRequest, TResponse> MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Requesting.Handling.UploadOptionalCommandHandler-2.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.UploadOptionalCommandHandler-2.html",
    "title": "Class UploadOptionalCommandHandler<TUploadApi, TUploadApiResultData> | Apizr",
    "keywords": "Class UploadOptionalCommandHandler<TUploadApi, TUploadApiResultData> Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > UploadOptionalCommandHandler<TUploadApi, TUploadApiResultData> Implements MediatR.IRequestHandler < UploadOptionalCommand <TUploadApi, TUploadApiResultData>, Optional.Option <TUploadApiResultData, ApizrException >> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling Assembly : Apizr.Integrations.FileTransfer.Optional.dll Syntax public class UploadOptionalCommandHandler<TUploadApi, TUploadApiResultData> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<UploadOptionalCommand<TUploadApi, TUploadApiResultData>, Option<TUploadApiResultData, ApizrException>> where TUploadApi : IUploadApi<TUploadApiResultData> Type Parameters Name Description TUploadApi TUploadApiResultData Constructors UploadOptionalCommandHandler(IApizrUploadManager<TUploadApi, TUploadApiResultData>) Declaration public UploadOptionalCommandHandler(IApizrUploadManager<TUploadApi, TUploadApiResultData> uploadManager) Parameters Type Name Description IApizrUploadManager <TUploadApi, TUploadApiResultData> uploadManager Methods Handle(UploadOptionalCommand<TUploadApi, TUploadApiResultData>, CancellationToken) Handling the upload optional request Declaration public async Task<Option<TUploadApiResultData, ApizrException>> Handle(UploadOptionalCommand<TUploadApi, TUploadApiResultData> request, CancellationToken cancellationToken) Parameters Type Name Description UploadOptionalCommand <TUploadApi, TUploadApiResultData> request The upload optional request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option <TUploadApiResultData, ApizrException >> Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Requesting.Handling.UploadWithOptionalCommandHandler-1.html": {
    "href": "api/Apizr.Optional.Requesting.Handling.UploadWithOptionalCommandHandler-1.html",
    "title": "Class UploadWithOptionalCommandHandler<TUploadApiResultData> | Apizr",
    "keywords": "Class UploadWithOptionalCommandHandler<TUploadApiResultData> Inheritance System.Object RequestHandlerBase < IApizrRequestOptions , IApizrRequestOptionsBuilder > UploadWithOptionalCommandHandler<TUploadApiResultData> Implements MediatR.IRequestHandler < UploadWithOptionalCommand <TUploadApiResultData>, Optional.Option <TUploadApiResultData, ApizrException >> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Handling Assembly : Apizr.Integrations.FileTransfer.Optional.dll Syntax public class UploadWithOptionalCommandHandler<TUploadApiResultData> : RequestHandlerBase<IApizrRequestOptions, IApizrRequestOptionsBuilder>, IRequestHandler<UploadWithOptionalCommand<TUploadApiResultData>, Option<TUploadApiResultData, ApizrException>> Type Parameters Name Description TUploadApiResultData Constructors UploadWithOptionalCommandHandler(IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData>) Declaration public UploadWithOptionalCommandHandler(IApizrUploadManager<IUploadApi<TUploadApiResultData>, TUploadApiResultData> uploadManager) Parameters Type Name Description IApizrUploadManager < IUploadApi <TUploadApiResultData>, TUploadApiResultData> uploadManager Methods Handle(UploadWithOptionalCommand<TUploadApiResultData>, CancellationToken) Handling the upload optional request Declaration public async Task<Option<TUploadApiResultData, ApizrException>> Handle(UploadWithOptionalCommand<TUploadApiResultData> request, CancellationToken cancellationToken) Parameters Type Name Description UploadWithOptionalCommand <TUploadApiResultData> request The upload optional request System.Threading.CancellationToken cancellationToken A cancellation token Returns Type Description System.Threading.Tasks.Task < Optional.Option <TUploadApiResultData, ApizrException >> Implements MediatR.IRequestHandler<TRequest, TResponse>"
  },
  "api/Apizr.Optional.Requesting.html": {
    "href": "api/Apizr.Optional.Requesting.html",
    "title": "Namespace Apizr.Optional.Requesting | Apizr",
    "keywords": "Namespace Apizr.Optional.Requesting Classes DownloadOptionalQuery The mediation download query with a dictionary query parameters type DownloadOptionalQuery<TDownloadApi> The mediation download query with a dictionary query parameters type DownloadOptionalQuery<TDownloadApi, TDownloadParams> The mediation download query with a custom query parameters type DownloadWithOptionalQuery<TDownloadParams> The mediation download query with a dictionary query parameters type ExecuteOptionalResultRequest<TWebApi, TApiData> The mediation execute optional result request (returning result) ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> The mediation execute optional result request (returning result) ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> The mediation execute optional result request (returning result) ExecuteOptionalUnitRequest<TWebApi> The mediation execute optional unit request (returning no result) ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> The mediation execute optional unit request (returning no result) UploadOptionalCommand The mediation upload command UploadOptionalCommand<TUploadApi> The mediation upload command returning an optional result UploadOptionalCommand<TUploadApi, TUploadApiResultData> The mediation upload command returning an optional result UploadWithOptionalCommand<TUploadApiResultData> The mediation upload command returning an optional result"
  },
  "api/Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.html": {
    "href": "api/Apizr.Optional.Requesting.Sending.ApizrOptionalMediator.html",
    "title": "Class ApizrOptionalMediator | Apizr",
    "keywords": "Class ApizrOptionalMediator Apizr mediator to send request using MediatR by calling expression and returning optional result Inheritance System.Object ApizrMediatorBase ApizrOptionalMediator Implements IApizrOptionalMediator IApizrOptionalMediatorBase IApizrMediatorBase Inherited Members ApizrMediatorBase.CreateRequestOptionsBuilder(Action<IApizrRequestOptionsBuilder>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Sending Assembly : Apizr.Integrations.Optional.dll Syntax public class ApizrOptionalMediator : ApizrMediatorBase, IApizrOptionalMediator, IApizrOptionalMediatorBase, IApizrMediatorBase Constructors ApizrOptionalMediator(IMediator) Declaration public ApizrOptionalMediator(IMediator mediator) Parameters Type Name Description MediatR.IMediator mediator Methods SendFor<TWebApi>(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Declaration public Task<Option<Unit, ApizrException>> SendFor<TWebApi>(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type SendFor<TWebApi>(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Declaration public Task<Option<Unit, ApizrException>> SendFor<TWebApi>(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Declaration public Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TWebApi The web api type TApiData The api result type SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Declaration public Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TWebApi The web api type TApiData The api result type SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request and returning an optional result Declaration public Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning an optional mapped result Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request and returning an optional result Declaration public Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning an optional mapped result Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration public Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration public Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from Implements IApizrOptionalMediator IApizrOptionalMediatorBase IApizrMediatorBase Extension Methods ApizrOptionalMediatorExtensions.SendFor<TWebApi>(IApizrOptionalMediator, Expression<Func<Context, TWebApi, Task>>, Context) ApizrOptionalMediatorExtensions.SendFor<TWebApi>(IApizrOptionalMediator, Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken) ApizrOptionalMediatorExtensions.SendFor<TWebApi>(IApizrOptionalMediator, Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<TWebApi, TApiData, Task>>, TModelData) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrOptionalMediator, Expression<Func<TWebApi, Task<TApiData>>>, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrOptionalMediator, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrOptionalMediator, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrOptionalMediator, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<TWebApi, Task<TApiData>>>, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQueryFor<TDownloadApi, TDownloadParams>(IApizrOptionalMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQueryFor<TDownloadApi, TDownloadParams>(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQueryFor<TDownloadApi>(IApizrOptionalMediator, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQueryFor<TDownloadApi>(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQuery(IApizrOptionalMediator, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQuery(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadWithOptionalQuery<TDownloadParams>(IApizrOptionalMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadWithOptionalQueryWith<TDownloadParams>(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi>(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi>(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi>(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommand(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommand(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommand(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadWithOptionalCommand<TUploadApiResultData>(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadWithOptionalCommand<TUploadApiResultData>(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadWithOptionalCommand<TUploadApiResultData>(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>)"
  },
  "api/Apizr.Optional.Requesting.Sending.ApizrOptionalMediator-1.html": {
    "href": "api/Apizr.Optional.Requesting.Sending.ApizrOptionalMediator-1.html",
    "title": "Class ApizrOptionalMediator<TWebApi> | Apizr",
    "keywords": "Class ApizrOptionalMediator<TWebApi> IApizrOptionalMediator but dedicated to TWebApi with optional result, getting all shorter Inheritance System.Object ApizrOptionalMediator<TWebApi> Implements IApizrOptionalMediator <TWebApi> IApizrOptionalMediatorBase IApizrMediatorBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting.Sending Assembly : Apizr.Integrations.Optional.dll Syntax public class ApizrOptionalMediator<TWebApi> : IApizrOptionalMediator<TWebApi>, IApizrOptionalMediatorBase, IApizrMediatorBase Type Parameters Name Description TWebApi Constructors ApizrOptionalMediator(IApizrOptionalMediator) Declaration public ApizrOptionalMediator(IApizrOptionalMediator apizrMediator) Parameters Type Name Description IApizrOptionalMediator apizrMediator Methods SendFor(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Declaration public Task<Option<Unit, ApizrException>> SendFor(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendFor(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Declaration public Task<Option<Unit, ApizrException>> SendFor(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Declaration public Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TApiData The api result type SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Declaration public Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TApiData The api result type SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request and returning an optional result Declaration public Task<Option<Unit, ApizrException>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning an optional mapped result Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request and returning an optional result Declaration public Task<Option<Unit, ApizrException>> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning an optional mapped result Declaration public Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration public Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration public Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from Implements IApizrOptionalMediator<TWebApi> IApizrOptionalMediatorBase IApizrMediatorBase Extension Methods ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, TWebApi, Task>>, Context) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi>(IApizrOptionalMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<TWebApi, TApiData, Task>>, TModelData) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean)"
  },
  "api/Apizr.Optional.Requesting.Sending.html": {
    "href": "api/Apizr.Optional.Requesting.Sending.html",
    "title": "Namespace Apizr.Optional.Requesting.Sending | Apizr",
    "keywords": "Namespace Apizr.Optional.Requesting.Sending Classes ApizrOptionalMediator Apizr mediator to send request using MediatR by calling expression and returning optional result ApizrOptionalMediator<TWebApi> IApizrOptionalMediator but dedicated to TWebApi with optional result, getting all shorter Interfaces IApizrOptionalMediator Apizr mediator to send request using MediatR by calling expression and returning optional result IApizrOptionalMediator<TWebApi> IApizrOptionalMediator but dedicated to TWebApi with optional result, getting all shorter IApizrOptionalMediatorBase Apizr base optional mediator"
  },
  "api/Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.html": {
    "href": "api/Apizr.Optional.Requesting.Sending.IApizrOptionalMediator.html",
    "title": "Interface IApizrOptionalMediator | Apizr",
    "keywords": "Interface IApizrOptionalMediator Apizr mediator to send request using MediatR by calling expression and returning optional result Namespace : Apizr.Optional.Requesting.Sending Assembly : Apizr.Integrations.Optional.dll Syntax public interface IApizrOptionalMediator : IApizrOptionalMediatorBase, IApizrMediatorBase Methods SendFor<TWebApi>(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor<TWebApi>(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type SendFor<TWebApi>(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor<TWebApi>(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TWebApi The web api type TApiData The api result type SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TWebApi, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TWebApi The web api type TApiData The api result type SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TWebApi The web api type TModelData The model request type to map from TApiData The api request type to map to SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TWebApi, TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TWebApi The web api type TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TWebApi The web api type TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from Extension Methods ApizrOptionalMediatorExtensions.SendFor<TWebApi>(IApizrOptionalMediator, Expression<Func<Context, TWebApi, Task>>, Context) ApizrOptionalMediatorExtensions.SendFor<TWebApi>(IApizrOptionalMediator, Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken) ApizrOptionalMediatorExtensions.SendFor<TWebApi>(IApizrOptionalMediator, Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<TWebApi, TApiData, Task>>, TModelData) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrOptionalMediator, Expression<Func<TWebApi, Task<TApiData>>>, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrOptionalMediator, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrOptionalMediator, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrOptionalMediator, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<TWebApi, Task<TApiData>>>, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean) ApizrOptionalMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQueryFor<TDownloadApi, TDownloadParams>(IApizrOptionalMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQueryFor<TDownloadApi, TDownloadParams>(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQueryFor<TDownloadApi>(IApizrOptionalMediator, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQueryFor<TDownloadApi>(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQuery(IApizrOptionalMediator, FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadOptionalQuery(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadWithOptionalQuery<TDownloadParams>(IApizrOptionalMediator, FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendDownloadWithOptionalQueryWith<TDownloadParams>(IApizrOptionalMediator, FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi, TUploadApiResultData>(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi>(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi>(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommandFor<TUploadApi>(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommand(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommand(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadOptionalCommand(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadWithOptionalCommand<TUploadApiResultData>(IApizrOptionalMediator, ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadWithOptionalCommand<TUploadApiResultData>(IApizrOptionalMediator, StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrOptionalMediatorFileTransferExtensions.SendUploadWithOptionalCommand<TUploadApiResultData>(IApizrOptionalMediator, FileInfoPart, Action<IApizrRequestOptionsBuilder>)"
  },
  "api/Apizr.Optional.Requesting.Sending.IApizrOptionalMediator-1.html": {
    "href": "api/Apizr.Optional.Requesting.Sending.IApizrOptionalMediator-1.html",
    "title": "Interface IApizrOptionalMediator<TWebApi> | Apizr",
    "keywords": "Interface IApizrOptionalMediator<TWebApi> IApizrOptionalMediator but dedicated to TWebApi with optional result, getting all shorter Namespace : Apizr.Optional.Requesting.Sending Assembly : Apizr.Integrations.Optional.dll Syntax public interface IApizrOptionalMediator<TWebApi> : IApizrOptionalMediatorBase, IApizrMediatorBase Type Parameters Name Description TWebApi Methods SendFor(Expression<Func<TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor(Expression<Func<TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendFor(Expression<Func<IApizrRequestOptions, TWebApi, Task>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor(Expression<Func<IApizrRequestOptions, TWebApi, Task>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TApiData The api result type SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR and returning an optional result Declaration Task<Option<TApiData, ApizrException<TApiData>>> SendFor<TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TApiData, ApizrException <TApiData>>> Type Parameters Name Description TApiData The api result type SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task<TApiData>>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData The mapped model type to map request from and result to TApiData The api result type to map request to and result from SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>>, TModelData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with mapped request and returning an optional result Declaration Task<Option<Unit, ApizrException>> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiData, Task>> executeApiMethod, TModelData modelData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiData, System.Threading.Tasks.Task >> executeApiMethod The TWebApi call to execute TModelData modelData The model data to map System.Action < IApizrRequestOptionsBuilder > optionsBuilder Returns Type Description System.Threading.Tasks.Task < Optional.Option < MediatR.Unit , ApizrException >> Type Parameters Name Description TModelData The model request type to map from TApiData The api request type to map to SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>>, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR returning an optional mapped result Declaration Task<Option<TModelData, ApizrException<TModelData>>> SendFor<TModelData, TApiData>(Expression<Func<IApizrRequestOptions, TWebApi, Task<TApiData>>> executeApiMethod, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, System.Threading.Tasks.Task <TApiData>>> executeApiMethod The TWebApi call to execute System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelData, ApizrException <TModelData>>> Type Parameters Name Description TModelData The mapped model type to map to TApiData The api result type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Action<IApizrRequestOptionsBuilder>) Send an api call to Apizr using MediatR with a mapped request and returning an optional mapped result Declaration Task<Option<TModelResultData, ApizrException<TModelResultData>>> SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(Expression<Func<IApizrRequestOptions, TWebApi, TApiRequestData, Task<TApiResultData>>> executeApiMethod, TModelRequestData modelRequestData, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func < IApizrRequestOptions , TWebApi, TApiRequestData, System.Threading.Tasks.Task <TApiResultData>>> executeApiMethod The TWebApi call to execute TModelRequestData modelRequestData The model request data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Options provided to the request Returns Type Description System.Threading.Tasks.Task < Optional.Option <TModelResultData, ApizrException <TModelResultData>>> Type Parameters Name Description TModelResultData The model result type to map to TApiResultData The api request type to map to TApiRequestData The api result type to map from TModelRequestData The model request type to map from Extension Methods ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, TWebApi, Task>>, Context) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi>(IApizrOptionalMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task>>, CancellationToken) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task>>, Context, CancellationToken) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<TWebApi, TApiData, Task>>, TModelData) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task>>, TModelData, CancellationToken) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task>>, TModelData, Context) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task>>, TModelData, Context, CancellationToken) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<TWebApi, Task<TApiData>>>, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, TWebApi, Task<TApiData>>>, Context, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, Task<TApiData>>>, CancellationToken, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, Task<TApiData>>>, Context, CancellationToken, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<TWebApi, TApiData, Task<TApiData>>>, TModelData, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, CancellationToken, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelData, TApiData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiData, Task<TApiData>>>, TModelData, Context, CancellationToken, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator<TWebApi>, Expression<Func<TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator<TWebApi>, Expression<Func<CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, CancellationToken, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, Boolean) ApizrTypedOptionalMediatorExtensions.SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData>(IApizrOptionalMediator<TWebApi>, Expression<Func<Context, CancellationToken, TWebApi, TApiRequestData, Task<TApiResultData>>>, TModelRequestData, Context, CancellationToken, Boolean)"
  },
  "api/Apizr.Optional.Requesting.Sending.IApizrOptionalMediatorBase.html": {
    "href": "api/Apizr.Optional.Requesting.Sending.IApizrOptionalMediatorBase.html",
    "title": "Interface IApizrOptionalMediatorBase | Apizr",
    "keywords": "Interface IApizrOptionalMediatorBase Apizr base optional mediator Namespace : Apizr.Optional.Requesting.Sending Assembly : Apizr.Integrations.Optional.dll Syntax public interface IApizrOptionalMediatorBase : IApizrMediatorBase"
  },
  "api/Apizr.Optional.Requesting.UploadOptionalCommand.html": {
    "href": "api/Apizr.Optional.Requesting.UploadOptionalCommand.html",
    "title": "Class UploadOptionalCommand | Apizr",
    "keywords": "Class UploadOptionalCommand The mediation upload command Inheritance System.Object RequestBase < Optional.Option < System.Net.Http.HttpResponseMessage , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationCommandBase < MediatR.Unit , Optional.Option < System.Net.Http.HttpResponseMessage , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > UploadOptionalCommand < IUploadApi , System.Net.Http.HttpResponseMessage > UploadOptionalCommand < IUploadApi > UploadOptionalCommand Implements IMediationCommand < MediatR.Unit , Optional.Option < System.Net.Http.HttpResponseMessage , ApizrException >> MediatR.IRequest < Optional.Option < System.Net.Http.HttpResponseMessage , ApizrException >> MediatR.IBaseRequest Inherited Members UploadOptionalCommand<IUploadApi, HttpResponseMessage>.FileInfoPart UploadOptionalCommand<IUploadApi, HttpResponseMessage>.StreamPart UploadOptionalCommand<IUploadApi, HttpResponseMessage>.ByteArrayPart RequestBase<Option<HttpResponseMessage, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting Assembly : Apizr.Integrations.FileTransfer.Optional.dll Syntax public class UploadOptionalCommand : UploadOptionalCommand<IUploadApi>, IMediationCommand<Unit, Option<HttpResponseMessage, ApizrException>>, IRequest<Option<HttpResponseMessage, ApizrException>>, IBaseRequest Constructors UploadOptionalCommand(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Declaration public UploadOptionalCommand(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.ByteArrayPart byteArrayPart System.Action < IApizrRequestOptionsBuilder > optionsBuilder UploadOptionalCommand(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Declaration public UploadOptionalCommand(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.FileInfoPart fileInfoPart System.Action < IApizrRequestOptionsBuilder > optionsBuilder UploadOptionalCommand(StreamPart, Action<IApizrRequestOptionsBuilder>) Declaration public UploadOptionalCommand(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.StreamPart streamPart System.Action < IApizrRequestOptionsBuilder > optionsBuilder Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Requesting.UploadOptionalCommand-1.html": {
    "href": "api/Apizr.Optional.Requesting.UploadOptionalCommand-1.html",
    "title": "Class UploadOptionalCommand<TUploadApi> | Apizr",
    "keywords": "Class UploadOptionalCommand<TUploadApi> The mediation upload command returning an optional result Inheritance System.Object RequestBase < Optional.Option < System.Net.Http.HttpResponseMessage , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationCommandBase < MediatR.Unit , Optional.Option < System.Net.Http.HttpResponseMessage , ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > UploadOptionalCommand <TUploadApi, System.Net.Http.HttpResponseMessage > UploadOptionalCommand<TUploadApi> UploadOptionalCommand Implements IMediationCommand < MediatR.Unit , Optional.Option < System.Net.Http.HttpResponseMessage , ApizrException >> MediatR.IRequest < Optional.Option < System.Net.Http.HttpResponseMessage , ApizrException >> MediatR.IBaseRequest Inherited Members UploadOptionalCommand<TUploadApi, HttpResponseMessage>.FileInfoPart UploadOptionalCommand<TUploadApi, HttpResponseMessage>.StreamPart UploadOptionalCommand<TUploadApi, HttpResponseMessage>.ByteArrayPart RequestBase<Option<HttpResponseMessage, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting Assembly : Apizr.Integrations.FileTransfer.Optional.dll Syntax public class UploadOptionalCommand<TUploadApi> : UploadOptionalCommand<TUploadApi, HttpResponseMessage>, IMediationCommand<Unit, Option<HttpResponseMessage, ApizrException>>, IRequest<Option<HttpResponseMessage, ApizrException>>, IBaseRequest where TUploadApi : IUploadApi Type Parameters Name Description TUploadApi The upload api type to manage Constructors UploadOptionalCommand(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Declaration public UploadOptionalCommand(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.ByteArrayPart byteArrayPart System.Action < IApizrRequestOptionsBuilder > optionsBuilder UploadOptionalCommand(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Declaration public UploadOptionalCommand(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.FileInfoPart fileInfoPart System.Action < IApizrRequestOptionsBuilder > optionsBuilder UploadOptionalCommand(StreamPart, Action<IApizrRequestOptionsBuilder>) Declaration public UploadOptionalCommand(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.StreamPart streamPart System.Action < IApizrRequestOptionsBuilder > optionsBuilder Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Requesting.UploadOptionalCommand-2.html": {
    "href": "api/Apizr.Optional.Requesting.UploadOptionalCommand-2.html",
    "title": "Class UploadOptionalCommand<TUploadApi, TUploadApiResultData> | Apizr",
    "keywords": "Class UploadOptionalCommand<TUploadApi, TUploadApiResultData> The mediation upload command returning an optional result Inheritance System.Object RequestBase < Optional.Option <TUploadApiResultData, ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationCommandBase < MediatR.Unit , Optional.Option <TUploadApiResultData, ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > UploadOptionalCommand<TUploadApi, TUploadApiResultData> UploadOptionalCommand<TUploadApi> UploadWithOptionalCommand<TUploadApiResultData> Implements IMediationCommand < MediatR.Unit , Optional.Option <TUploadApiResultData, ApizrException >> MediatR.IRequest < Optional.Option <TUploadApiResultData, ApizrException >> MediatR.IBaseRequest Inherited Members RequestBase<Option<TUploadApiResultData, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting Assembly : Apizr.Integrations.FileTransfer.Optional.dll Syntax public class UploadOptionalCommand<TUploadApi, TUploadApiResultData> : MediationCommandBase<Unit, Option<TUploadApiResultData, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>, IMediationCommand<Unit, Option<TUploadApiResultData, ApizrException>>, IRequest<Option<TUploadApiResultData, ApizrException>>, IBaseRequest where TUploadApi : IUploadApi<TUploadApiResultData> Type Parameters Name Description TUploadApi The upload api type to manage TUploadApiResultData The upload api result data type Constructors UploadOptionalCommand(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data Declaration public UploadOptionalCommand(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.ByteArrayPart byteArrayPart The file bytes data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options UploadOptionalCommand(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data Declaration public UploadOptionalCommand(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.FileInfoPart fileInfoPart The file info data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options UploadOptionalCommand(StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data Declaration public UploadOptionalCommand(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.StreamPart streamPart The file stream data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Properties ByteArrayPart The file bytes data Declaration public ByteArrayPart ByteArrayPart { get; } Property Value Type Description Refit.ByteArrayPart FileInfoPart The file info data Declaration public FileInfoPart FileInfoPart { get; } Property Value Type Description Refit.FileInfoPart StreamPart The file stream data Declaration public StreamPart StreamPart { get; } Property Value Type Description Refit.StreamPart Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.Optional.Requesting.UploadWithOptionalCommand-1.html": {
    "href": "api/Apizr.Optional.Requesting.UploadWithOptionalCommand-1.html",
    "title": "Class UploadWithOptionalCommand<TUploadApiResultData> | Apizr",
    "keywords": "Class UploadWithOptionalCommand<TUploadApiResultData> The mediation upload command returning an optional result Inheritance System.Object RequestBase < Optional.Option <TUploadApiResultData, ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > MediationCommandBase < MediatR.Unit , Optional.Option <TUploadApiResultData, ApizrException >, IApizrRequestOptions , IApizrRequestOptionsBuilder > UploadOptionalCommand < IUploadApi <TUploadApiResultData>, TUploadApiResultData> UploadWithOptionalCommand<TUploadApiResultData> Implements IMediationCommand < MediatR.Unit , Optional.Option <TUploadApiResultData, ApizrException >> MediatR.IRequest < Optional.Option <TUploadApiResultData, ApizrException >> MediatR.IBaseRequest Inherited Members UploadOptionalCommand<IUploadApi<TUploadApiResultData>, TUploadApiResultData>.FileInfoPart UploadOptionalCommand<IUploadApi<TUploadApiResultData>, TUploadApiResultData>.StreamPart UploadOptionalCommand<IUploadApi<TUploadApiResultData>, TUploadApiResultData>.ByteArrayPart RequestBase<Option<TUploadApiResultData, ApizrException>, IApizrRequestOptions, IApizrRequestOptionsBuilder>.OptionsBuilder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Optional.Requesting Assembly : Apizr.Integrations.FileTransfer.Optional.dll Syntax public class UploadWithOptionalCommand<TUploadApiResultData> : UploadOptionalCommand<IUploadApi<TUploadApiResultData>, TUploadApiResultData>, IMediationCommand<Unit, Option<TUploadApiResultData, ApizrException>>, IRequest<Option<TUploadApiResultData, ApizrException>>, IBaseRequest Type Parameters Name Description TUploadApiResultData The upload api result data type Constructors UploadWithOptionalCommand(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Declaration public UploadWithOptionalCommand(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.ByteArrayPart byteArrayPart System.Action < IApizrRequestOptionsBuilder > optionsBuilder UploadWithOptionalCommand(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Declaration public UploadWithOptionalCommand(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.FileInfoPart fileInfoPart System.Action < IApizrRequestOptionsBuilder > optionsBuilder UploadWithOptionalCommand(StreamPart, Action<IApizrRequestOptionsBuilder>) Declaration public UploadWithOptionalCommand(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.StreamPart streamPart System.Action < IApizrRequestOptionsBuilder > optionsBuilder Implements IMediationCommand<TRequestData, TResultData> MediatR.IRequest<TResponse> MediatR.IBaseRequest"
  },
  "api/Apizr.OptionalFileTransferOptionsBuilderExtensions.html": {
    "href": "api/Apizr.OptionalFileTransferOptionsBuilderExtensions.html",
    "title": "Class OptionalFileTransferOptionsBuilderExtensions | Apizr",
    "keywords": "Class OptionalFileTransferOptionsBuilderExtensions Inheritance System.Object OptionalFileTransferOptionsBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.FileTransfer.Optional.dll Syntax public static class OptionalFileTransferOptionsBuilderExtensions Methods WithFileTransferOptionalMediation(IApizrExtendedCommonOptionsBuilder) Let Apizr handle file transfer requests management with some mediation and optional result Declaration public static IApizrExtendedCommonOptionsBuilder WithFileTransferOptionalMediation(this IApizrExtendedCommonOptionsBuilder optionsBuilder) Parameters Type Name Description IApizrExtendedCommonOptionsBuilder optionsBuilder Returns Type Description IApizrExtendedCommonOptionsBuilder WithFileTransferOptionalMediation(IApizrExtendedManagerOptionsBuilder) Let Apizr handle file transfer requests management with some mediation and optional result Declaration public static IApizrExtendedManagerOptionsBuilder WithFileTransferOptionalMediation(this IApizrExtendedManagerOptionsBuilder optionsBuilder) Parameters Type Name Description IApizrExtendedManagerOptionsBuilder optionsBuilder Returns Type Description IApizrExtendedManagerOptionsBuilder"
  },
  "api/Apizr.OptionalOptionsBuilderExtensions.html": {
    "href": "api/Apizr.OptionalOptionsBuilderExtensions.html",
    "title": "Class OptionalOptionsBuilderExtensions | Apizr",
    "keywords": "Class OptionalOptionsBuilderExtensions Optional with MediatR options builder extensions Inheritance System.Object OptionalOptionsBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.Optional.dll Syntax public static class OptionalOptionsBuilderExtensions Methods WithOptionalMediation(IApizrExtendedCommonOptionsBuilder) Let Apizr handle requests execution with some mediation and optional result Declaration public static IApizrExtendedCommonOptionsBuilder WithOptionalMediation(this IApizrExtendedCommonOptionsBuilder optionsBuilder) Parameters Type Name Description IApizrExtendedCommonOptionsBuilder optionsBuilder Returns Type Description IApizrExtendedCommonOptionsBuilder WithOptionalMediation(IApizrExtendedManagerOptionsBuilder) Let Apizr handle requests execution with some mediation and optional result Declaration public static IApizrExtendedManagerOptionsBuilder WithOptionalMediation(this IApizrExtendedManagerOptionsBuilder optionsBuilder) Parameters Type Name Description IApizrExtendedManagerOptionsBuilder optionsBuilder Returns Type Description IApizrExtendedManagerOptionsBuilder"
  },
  "api/Apizr.Policing.ContextAttribute.html": {
    "href": "api/Apizr.Policing.ContextAttribute.html",
    "title": "Class ContextAttribute | Apizr",
    "keywords": "Class ContextAttribute The Polly context property attribute Inheritance System.Object System.Attribute Refit.PropertyAttribute ContextAttribute Inherited Members Refit.PropertyAttribute.Key System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax public class ContextAttribute : PropertyAttribute Constructors ContextAttribute() Create a Polly context Declaration public ContextAttribute()"
  },
  "api/Apizr.Policing.CreatePolicyAttribute.html": {
    "href": "api/Apizr.Policing.CreatePolicyAttribute.html",
    "title": "Class CreatePolicyAttribute | Apizr",
    "keywords": "Class CreatePolicyAttribute Tells Apizr to apply some policies to Create method You have to provide a policy registry to Apizr to use this feature Inheritance System.Object System.Attribute PolicyAttributeBase CreatePolicyAttribute Inherited Members PolicyAttributeBase.RegistryKeys System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class CreatePolicyAttribute : PolicyAttributeBase Constructors CreatePolicyAttribute(String[]) Apply policies with keys Declaration public CreatePolicyAttribute(params string[] registryKeys) Parameters Type Name Description System.String [] registryKeys Policy registry keys"
  },
  "api/Apizr.Policing.DeletePolicyAttribute.html": {
    "href": "api/Apizr.Policing.DeletePolicyAttribute.html",
    "title": "Class DeletePolicyAttribute | Apizr",
    "keywords": "Class DeletePolicyAttribute Tells Apizr to apply some policies to Delete method You have to provide a policy registry to Apizr to use this feature Inheritance System.Object System.Attribute PolicyAttributeBase DeletePolicyAttribute Inherited Members PolicyAttributeBase.RegistryKeys System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class DeletePolicyAttribute : PolicyAttributeBase Constructors DeletePolicyAttribute(String[]) Apply policies with keys Declaration public DeletePolicyAttribute(params string[] registryKeys) Parameters Type Name Description System.String [] registryKeys Policy registry keys"
  },
  "api/Apizr.Policing.html": {
    "href": "api/Apizr.Policing.html",
    "title": "Namespace Apizr.Policing | Apizr",
    "keywords": "Namespace Apizr.Policing Classes ContextAttribute The Polly context property attribute CreatePolicyAttribute Tells Apizr to apply some policies to Create method You have to provide a policy registry to Apizr to use this feature DeletePolicyAttribute Tells Apizr to apply some policies to Delete method You have to provide a policy registry to Apizr to use this feature HttpRequestMessageApizrExtensions Extension methods for System.Net.Http.HttpRequestMessage Polly integration. LoggedPolicies Policy logging helper PolicyAttribute Tells Apizr to apply some policies to all method when decorating an assembly or an interface or a specific one when decorating a method You have to provide a policy registry to Apizr to use this feature PolicyAttributeBase Tells Apizr to apply some policies to all method when decorating an assembly or an interface or a specific one when decorating a method You have to provide a policy registry to Apizr to use this feature PolicyHttpMessageHandler A System.Net.Http.DelegatingHandler implementation that executes request processing surrounded by a Polly.Policy . PollyContextExtensions Polly logging extensions ReadAllPolicyAttribute Tells Apizr to apply some policies to ReadAll method You have to provide a policy registry to Apizr to use this feature ReadPolicyAttribute Tells Apizr to apply some policies to Read method You have to provide a policy registry to Apizr to use this feature UpdatePolicyAttribute Tells Apizr to apply some policies to Update method You have to provide a policy registry to Apizr to use this feature"
  },
  "api/Apizr.Policing.HttpRequestMessageApizrExtensions.html": {
    "href": "api/Apizr.Policing.HttpRequestMessageApizrExtensions.html",
    "title": "Class HttpRequestMessageApizrExtensions | Apizr",
    "keywords": "Class HttpRequestMessageApizrExtensions Extension methods for System.Net.Http.HttpRequestMessage Polly integration. Inheritance System.Object HttpRequestMessageApizrExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax public static class HttpRequestMessageApizrExtensions Methods GetApizrPolicyExecutionContext(HttpRequestMessage) Gets the Polly.Context associated with the provided System.Net.Http.HttpRequestMessage . Declaration public static Context GetApizrPolicyExecutionContext(this HttpRequestMessage request) Parameters Type Name Description System.Net.Http.HttpRequestMessage request The System.Net.Http.HttpRequestMessage . Returns Type Description Polly.Context The Polly.Context if set, otherwise null . Remarks The PolicyHttpMessageHandler will attach a context to the System.Net.Http.HttpResponseMessage prior to executing a Polly.Policy , if one does not already exist. The Polly.Context will be provided to the policy for use inside the Polly.Policy and in other message handlers. GetApizrRequestOptions(HttpRequestMessage) Gets the IApizrRequestOptions associated with the provided System.Net.Http.HttpRequestMessage . Declaration public static IApizrRequestOptions GetApizrRequestOptions(this HttpRequestMessage request) Parameters Type Name Description System.Net.Http.HttpRequestMessage request The System.Net.Http.HttpRequestMessage . Returns Type Description IApizrRequestOptions The IApizrRequestOptions if set, otherwise null . GetOrBuildApizrPolicyExecutionContext(HttpRequestMessage) Gets the Polly.Context associated with the provided System.Net.Http.HttpRequestMessage . Declaration public static Context GetOrBuildApizrPolicyExecutionContext(this HttpRequestMessage request) Parameters Type Name Description System.Net.Http.HttpRequestMessage request The System.Net.Http.HttpRequestMessage . Returns Type Description Polly.Context The Polly.Context if set, otherwise null . Remarks The PolicyHttpMessageHandler will attach a context to the System.Net.Http.HttpResponseMessage prior to executing a Polly.Policy , if one does not already exist. The Polly.Context will be provided to the policy for use inside the Polly.Policy and in other message handlers. SetApizrPolicyExecutionContext(HttpRequestMessage, Context) Sets the Polly.Context associated with the provided System.Net.Http.HttpRequestMessage . Declaration public static void SetApizrPolicyExecutionContext(this HttpRequestMessage request, Context context) Parameters Type Name Description System.Net.Http.HttpRequestMessage request The System.Net.Http.HttpRequestMessage . Polly.Context context The Polly.Context , may be null . Remarks The PolicyHttpMessageHandler will attach a context to the System.Net.Http.HttpResponseMessage prior to executing a Polly.Policy , if one does not already exist. The Polly.Context will be provided to the policy for use inside the Polly.Policy and in other message handlers. TryGetOptions(HttpRequestMessage, out IApizrRequestOptions) Try to get the IApizrRequestOptions associated with the provided System.Net.Http.HttpRequestMessage . Declaration public static bool TryGetOptions(this HttpRequestMessage request, out IApizrRequestOptions options) Parameters Type Name Description System.Net.Http.HttpRequestMessage request The System.Net.Http.HttpRequestMessage . IApizrRequestOptions options The IApizrRequestOptions if set, otherwise null . Returns Type Description System.Boolean"
  },
  "api/Apizr.Policing.LoggedPolicies.html": {
    "href": "api/Apizr.Policing.LoggedPolicies.html",
    "title": "Class LoggedPolicies | Apizr",
    "keywords": "Class LoggedPolicies Policy logging helper Inheritance System.Object LoggedPolicies Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax public static class LoggedPolicies Methods OnLoggedRetry(DelegateResult<HttpResponseMessage>, TimeSpan, Int32, Context) Tells Apizr to log retries Declaration public static void OnLoggedRetry(DelegateResult<HttpResponseMessage> result, TimeSpan timeSpan, int retryCount, Context context) Parameters Type Name Description Polly.DelegateResult < System.Net.Http.HttpResponseMessage > result System.TimeSpan timeSpan System.Int32 retryCount Polly.Context context OnLoggedRetry(DelegateResult<HttpResponseMessage>, TimeSpan, Int32, Context, Action<DelegateResult<HttpResponseMessage>, TimeSpan, Int32, Context>) Tells Apizr to log retries plus some more actions Declaration public static void OnLoggedRetry(DelegateResult<HttpResponseMessage> result, TimeSpan timeSpan, int retryCount, Context context, Action<DelegateResult<HttpResponseMessage>, TimeSpan, int, Context> onRetry) Parameters Type Name Description Polly.DelegateResult < System.Net.Http.HttpResponseMessage > result System.TimeSpan timeSpan System.Int32 retryCount Polly.Context context System.Action < Polly.DelegateResult < System.Net.Http.HttpResponseMessage >, System.TimeSpan , System.Int32 , Polly.Context > onRetry"
  },
  "api/Apizr.Policing.PolicyAttribute.html": {
    "href": "api/Apizr.Policing.PolicyAttribute.html",
    "title": "Class PolicyAttribute | Apizr",
    "keywords": "Class PolicyAttribute Tells Apizr to apply some policies to all method when decorating an assembly or an interface or a specific one when decorating a method You have to provide a policy registry to Apizr to use this feature Inheritance System.Object System.Attribute PolicyAttributeBase PolicyAttribute Inherited Members PolicyAttributeBase.RegistryKeys System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Interface)] public class PolicyAttribute : PolicyAttributeBase Constructors PolicyAttribute(String[]) Apply policies with keys Declaration public PolicyAttribute(params string[] registryKeys) Parameters Type Name Description System.String [] registryKeys Policy registry keys"
  },
  "api/Apizr.Policing.PolicyAttributeBase.html": {
    "href": "api/Apizr.Policing.PolicyAttributeBase.html",
    "title": "Class PolicyAttributeBase | Apizr",
    "keywords": "Class PolicyAttributeBase Tells Apizr to apply some policies to all method when decorating an assembly or an interface or a specific one when decorating a method You have to provide a policy registry to Apizr to use this feature Inheritance System.Object System.Attribute PolicyAttributeBase CreatePolicyAttribute DeletePolicyAttribute PolicyAttribute ReadAllPolicyAttribute ReadPolicyAttribute UpdatePolicyAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax public abstract class PolicyAttributeBase : Attribute Constructors PolicyAttributeBase(String[]) Apply policies with keys Declaration protected PolicyAttributeBase(params string[] registryKeys) Parameters Type Name Description System.String [] registryKeys Policy registry keys Properties RegistryKeys Policy registry keys Declaration public string[] RegistryKeys { get; } Property Value Type Description System.String []"
  },
  "api/Apizr.Policing.PolicyHttpMessageHandler.html": {
    "href": "api/Apizr.Policing.PolicyHttpMessageHandler.html",
    "title": "Class PolicyHttpMessageHandler | Apizr",
    "keywords": "Class PolicyHttpMessageHandler A System.Net.Http.DelegatingHandler implementation that executes request processing surrounded by a Polly.Policy . Inheritance System.Object System.Net.Http.HttpMessageHandler System.Net.Http.DelegatingHandler PolicyHttpMessageHandler Implements System.IDisposable Inherited Members System.Net.Http.DelegatingHandler.Dispose(System.Boolean) System.Net.Http.DelegatingHandler.InnerHandler System.Net.Http.HttpMessageHandler.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax public class PolicyHttpMessageHandler : DelegatingHandler, IDisposable Constructors PolicyHttpMessageHandler(IAsyncPolicy<HttpResponseMessage>) Creates a new PolicyHttpMessageHandler . Declaration public PolicyHttpMessageHandler(IAsyncPolicy<HttpResponseMessage> policy) Parameters Type Name Description Polly.IAsyncPolicy < System.Net.Http.HttpResponseMessage > policy The policy. PolicyHttpMessageHandler(Func<HttpRequestMessage, IAsyncPolicy<HttpResponseMessage>>) Creates a new PolicyHttpMessageHandler . Declaration public PolicyHttpMessageHandler(Func<HttpRequestMessage, IAsyncPolicy<HttpResponseMessage>> policySelector) Parameters Type Name Description System.Func < System.Net.Http.HttpRequestMessage , Polly.IAsyncPolicy < System.Net.Http.HttpResponseMessage >> policySelector A function which can select the desired policy for a given System.Net.Http.HttpRequestMessage . Methods SendAsync(HttpRequestMessage, CancellationToken) Declaration protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters Type Name Description System.Net.Http.HttpRequestMessage request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > Overrides System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken) SendCoreAsync(HttpRequestMessage, Context, CancellationToken) Called inside the execution of the Polly.Policy to perform request processing. Declaration protected virtual Task<HttpResponseMessage> SendCoreAsync(HttpRequestMessage request, Context context, CancellationToken cancellationToken) Parameters Type Name Description System.Net.Http.HttpRequestMessage request The System.Net.Http.HttpRequestMessage . Polly.Context context The Polly.Context . System.Threading.CancellationToken cancellationToken The System.Threading.CancellationToken . Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > Returns a System.Threading.Tasks.Task<TResult> that will yield a response when completed. Implements System.IDisposable"
  },
  "api/Apizr.Policing.PollyContextExtensions.html": {
    "href": "api/Apizr.Policing.PollyContextExtensions.html",
    "title": "Class PollyContextExtensions | Apizr",
    "keywords": "Class PollyContextExtensions Polly logging extensions Inheritance System.Object PollyContextExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax public static class PollyContextExtensions Methods TryGetLogger(Context, out ILogger, out LogLevel[], out HttpMessageParts, out HttpTracerMode) Trying to get your Microsoft.Extensions.Logging.ILogger mapping implementation from Polly context Declaration public static bool TryGetLogger(this Context context, out ILogger logger, out LogLevel[] logLevels, out HttpMessageParts verbosity, out HttpTracerMode tracerMode) Parameters Type Name Description Polly.Context context Polly context Microsoft.Extensions.Logging.ILogger logger Your Microsoft.Extensions.Logging.ILogger mapping implementation Microsoft.Extensions.Logging.LogLevel [] logLevels HttpMessageParts verbosity HttpTracerMode tracerMode Returns Type Description System.Boolean WithLogger(Context, ILogger, LogLevel[], HttpMessageParts, HttpTracerMode) Passing your Microsoft.Extensions.Logging.ILogger mapping implementation to Polly context Declaration public static Context WithLogger(this Context context, ILogger logger, LogLevel[] logLevels, HttpMessageParts verbosity, HttpTracerMode tracerMode) Parameters Type Name Description Polly.Context context Polly context Microsoft.Extensions.Logging.ILogger logger Your Microsoft.Extensions.Logging.ILogger mapping implementation Microsoft.Extensions.Logging.LogLevel [] logLevels HttpMessageParts verbosity HttpTracerMode tracerMode Returns Type Description Polly.Context"
  },
  "api/Apizr.Policing.ReadAllPolicyAttribute.html": {
    "href": "api/Apizr.Policing.ReadAllPolicyAttribute.html",
    "title": "Class ReadAllPolicyAttribute | Apizr",
    "keywords": "Class ReadAllPolicyAttribute Tells Apizr to apply some policies to ReadAll method You have to provide a policy registry to Apizr to use this feature Inheritance System.Object System.Attribute PolicyAttributeBase ReadAllPolicyAttribute Inherited Members PolicyAttributeBase.RegistryKeys System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class ReadAllPolicyAttribute : PolicyAttributeBase Constructors ReadAllPolicyAttribute(String[]) Apply policies with keys Declaration public ReadAllPolicyAttribute(params string[] registryKeys) Parameters Type Name Description System.String [] registryKeys Policy registry keys"
  },
  "api/Apizr.Policing.ReadPolicyAttribute.html": {
    "href": "api/Apizr.Policing.ReadPolicyAttribute.html",
    "title": "Class ReadPolicyAttribute | Apizr",
    "keywords": "Class ReadPolicyAttribute Tells Apizr to apply some policies to Read method You have to provide a policy registry to Apizr to use this feature Inheritance System.Object System.Attribute PolicyAttributeBase ReadPolicyAttribute Inherited Members PolicyAttributeBase.RegistryKeys System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class ReadPolicyAttribute : PolicyAttributeBase Constructors ReadPolicyAttribute(String[]) Apply policies with keys Declaration public ReadPolicyAttribute(params string[] registryKeys) Parameters Type Name Description System.String [] registryKeys Policy registry keys"
  },
  "api/Apizr.Policing.UpdatePolicyAttribute.html": {
    "href": "api/Apizr.Policing.UpdatePolicyAttribute.html",
    "title": "Class UpdatePolicyAttribute | Apizr",
    "keywords": "Class UpdatePolicyAttribute Tells Apizr to apply some policies to Update method You have to provide a policy registry to Apizr to use this feature Inheritance System.Object System.Attribute PolicyAttributeBase UpdatePolicyAttribute Inherited Members PolicyAttributeBase.RegistryKeys System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Policing Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class UpdatePolicyAttribute : PolicyAttributeBase Constructors UpdatePolicyAttribute(String[]) Apply policies with keys Declaration public UpdatePolicyAttribute(params string[] registryKeys) Parameters Type Name Description System.String [] registryKeys Policy registry keys"
  },
  "api/Apizr.PriorityAttribute.html": {
    "href": "api/Apizr.PriorityAttribute.html",
    "title": "Class PriorityAttribute | Apizr",
    "keywords": "Class PriorityAttribute The Fusillade priority attribute Inheritance System.Object System.Attribute Refit.PropertyAttribute HandlerParameterAttribute PriorityAttribute Inherited Members HandlerParameterAttribute.Value Refit.PropertyAttribute.Key System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.Fusillade.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Interface | AttributeTargets.Parameter)] public class PriorityAttribute : HandlerParameterAttribute Remarks Info: . Decorating a request parameter with PriorityAttribute is obsolete. Please use the request options parameter instead. . Decorating anything else must come with the priority value. . Don't forget to activate priority management fluently at register time. Constructors PriorityAttribute() Define priority Declaration [Obsolete(\"Please use the request options parameter instead\")] public PriorityAttribute() Remarks Warning: Decorating a request parameter with PriorityAttribute is obsolete. Please use the request options parameter instead. Error: Decorating anything else must come with the priority value. PriorityAttribute(Priority) Define priority Declaration public PriorityAttribute(Priority priority) Parameters Type Name Description Fusillade.Priority priority The priority PriorityAttribute(Int32) Define priority Declaration public PriorityAttribute(int priority) Parameters Type Name Description System.Int32 priority The priority"
  },
  "api/Apizr.PriorityHttpMessageHandler.html": {
    "href": "api/Apizr.PriorityHttpMessageHandler.html",
    "title": "Class PriorityHttpMessageHandler | Apizr",
    "keywords": "Class PriorityHttpMessageHandler Inheritance System.Object System.Net.Http.HttpMessageHandler System.Net.Http.DelegatingHandler Fusillade.LimitingHttpMessageHandler PriorityHttpMessageHandler Implements System.IDisposable Inherited Members System.Net.Http.DelegatingHandler.Dispose(System.Boolean) System.Net.Http.DelegatingHandler.InnerHandler System.Net.Http.HttpMessageHandler.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.Fusillade.dll Syntax public class PriorityHttpMessageHandler : LimitingHttpMessageHandler, IDisposable Constructors PriorityHttpMessageHandler(HttpMessageHandler, ILogger, IApizrManagerOptionsBase, Nullable<Int64>, OperationQueue) Declaration public PriorityHttpMessageHandler(HttpMessageHandler innerHandler, ILogger logger, IApizrManagerOptionsBase apizrOptions, long? maxBytesToRead = null, OperationQueue opQueue = null) Parameters Type Name Description System.Net.Http.HttpMessageHandler innerHandler Microsoft.Extensions.Logging.ILogger logger IApizrManagerOptionsBase apizrOptions System.Nullable < System.Int64 > maxBytesToRead Punchclock.OperationQueue opQueue Methods ResetLimit(Nullable<Int64>) Declaration public override void ResetLimit(long? maxBytesToRead = null) Parameters Type Name Description System.Nullable < System.Int64 > maxBytesToRead Overrides Fusillade.LimitingHttpMessageHandler.ResetLimit(System.Nullable<System.Int64>) SendAsync(HttpRequestMessage, CancellationToken) Declaration protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters Type Name Description System.Net.Http.HttpRequestMessage request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > Overrides System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken) Implements System.IDisposable"
  },
  "api/Apizr.Progressing.ApizrProgress.html": {
    "href": "api/Apizr.Progressing.ApizrProgress.html",
    "title": "Class ApizrProgress | Apizr",
    "keywords": "Class ApizrProgress Inheritance System.Object System.Progress < ApizrProgressEventArgs > ApizrProgress Implements IApizrProgress System.IProgress < ApizrProgressEventArgs > Inherited Members System.Progress<Apizr.Progressing.ApizrProgressEventArgs>.OnReport(Apizr.Progressing.ApizrProgressEventArgs) System.Progress<Apizr.Progressing.ApizrProgressEventArgs>.System.IProgress<Apizr.Progressing.ApizrProgressEventArgs>.Report(Apizr.Progressing.ApizrProgressEventArgs) System.Progress<Apizr.Progressing.ApizrProgressEventArgs>.ProgressChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Progressing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public class ApizrProgress : Progress<ApizrProgressEventArgs>, IApizrProgress, IProgress<ApizrProgressEventArgs> Constructors ApizrProgress() Declaration public ApizrProgress() ApizrProgress(Action<ApizrProgressEventArgs>) Declaration public ApizrProgress(Action<ApizrProgressEventArgs> handler) Parameters Type Name Description System.Action < ApizrProgressEventArgs > handler Implements IApizrProgress System.IProgress<T>"
  },
  "api/Apizr.Progressing.ApizrProgressEventArgs.html": {
    "href": "api/Apizr.Progressing.ApizrProgressEventArgs.html",
    "title": "Class ApizrProgressEventArgs | Apizr",
    "keywords": "Class ApizrProgressEventArgs Provides data for the events generated by ApizrProgressHandler . Inheritance System.Object System.EventArgs System.ComponentModel.ProgressChangedEventArgs ApizrProgressEventArgs Inherited Members System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage System.ComponentModel.ProgressChangedEventArgs.UserState System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Progressing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public class ApizrProgressEventArgs : ProgressChangedEventArgs Constructors ApizrProgressEventArgs(HttpRequestMessage, ApizrProgressType, Int32, Object, Int64, Nullable<Int64>) Initializes a new instance of the ApizrProgressEventArgs with the parameters given. Declaration public ApizrProgressEventArgs(HttpRequestMessage request, ApizrProgressType progressType, int progressPercentage, object userToken, long bytesTransferred, long? totalBytes) Parameters Type Name Description System.Net.Http.HttpRequestMessage request The request ApizrProgressType progressType Type of progress (request or response) System.Int32 progressPercentage The percent completed of the overall exchange. System.Object userToken Any user state provided as part of reading or writing the data. System.Int64 bytesTransferred The current number of bytes either received or sent. System.Nullable < System.Int64 > totalBytes The total number of bytes expected to be received or sent. Properties BytesTransferred Gets the current number of bytes transferred. Declaration public long BytesTransferred { get; } Property Value Type Description System.Int64 ProgressType Gets the type of progress Declaration public ApizrProgressType ProgressType { get; } Property Value Type Description ApizrProgressType Request Gets the request Declaration public HttpRequestMessage Request { get; } Property Value Type Description System.Net.Http.HttpRequestMessage TotalBytes Gets the total number of expected bytes to be sent or received. If the number is not known then this is null. Declaration public long? TotalBytes { get; } Property Value Type Description System.Nullable < System.Int64 >"
  },
  "api/Apizr.Progressing.ApizrProgressHandler.html": {
    "href": "api/Apizr.Progressing.ApizrProgressHandler.html",
    "title": "Class ApizrProgressHandler | Apizr",
    "keywords": "Class ApizrProgressHandler The ApizrProgressHandler provides a mechanism for getting progress event notifications when sending and receiving data in connection with exchanging HTTP requests and responses. Inheritance System.Object System.Net.Http.HttpMessageHandler System.Net.Http.DelegatingHandler ApizrProgressHandler Implements System.IDisposable Inherited Members System.Net.Http.DelegatingHandler.Dispose(System.Boolean) System.Net.Http.DelegatingHandler.InnerHandler System.Net.Http.HttpMessageHandler.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Progressing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public class ApizrProgressHandler : DelegatingHandler, IDisposable Constructors ApizrProgressHandler() Initializes a new instance of the ApizrProgressHandler class. Declaration public ApizrProgressHandler() ApizrProgressHandler(HttpMessageHandler) Initializes a new instance of the ApizrProgressHandler class. Declaration public ApizrProgressHandler(HttpMessageHandler innerHandler) Parameters Type Name Description System.Net.Http.HttpMessageHandler innerHandler The inner handler to which this handler submits requests. Methods SendAsync(HttpRequestMessage, CancellationToken) Declaration protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters Type Name Description System.Net.Http.HttpRequestMessage request System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > Overrides System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken) Implements System.IDisposable"
  },
  "api/Apizr.Progressing.ApizrProgressType.html": {
    "href": "api/Apizr.Progressing.ApizrProgressType.html",
    "title": "Enum ApizrProgressType | Apizr",
    "keywords": "Enum ApizrProgressType Namespace : Apizr.Progressing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public enum ApizrProgressType Fields Name Description Request Response"
  },
  "api/Apizr.Progressing.html": {
    "href": "api/Apizr.Progressing.html",
    "title": "Namespace Apizr.Progressing | Apizr",
    "keywords": "Namespace Apizr.Progressing Classes ApizrProgress ApizrProgressEventArgs Provides data for the events generated by ApizrProgressHandler . ApizrProgressHandler The ApizrProgressHandler provides a mechanism for getting progress event notifications when sending and receiving data in connection with exchanging HTTP requests and responses. Interfaces IApizrProgress Enums ApizrProgressType"
  },
  "api/Apizr.Progressing.IApizrProgress.html": {
    "href": "api/Apizr.Progressing.IApizrProgress.html",
    "title": "Interface IApizrProgress | Apizr",
    "keywords": "Interface IApizrProgress Inherited Members System.IProgress<Apizr.Progressing.ApizrProgressEventArgs>.Report(Apizr.Progressing.ApizrProgressEventArgs) Namespace : Apizr.Progressing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public interface IApizrProgress : IProgress<ApizrProgressEventArgs>"
  },
  "api/Apizr.ReadAllPriorityAttribute.html": {
    "href": "api/Apizr.ReadAllPriorityAttribute.html",
    "title": "Class ReadAllPriorityAttribute | Apizr",
    "keywords": "Class ReadAllPriorityAttribute The Fusillade priority attribute Inheritance System.Object System.Attribute Refit.PropertyAttribute HandlerParameterAttribute CrudHandlerParameterAttribute ReadAllHandlerParameterAttribute ReadAllPriorityAttribute Inherited Members HandlerParameterAttribute.Value Refit.PropertyAttribute.Key System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.Fusillade.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Interface)] public class ReadAllPriorityAttribute : ReadAllHandlerParameterAttribute Remarks Info: . Don't forget to activate priority management fluently at register time. Constructors ReadAllPriorityAttribute(Priority) Define priority Declaration public ReadAllPriorityAttribute(Priority priority) Parameters Type Name Description Fusillade.Priority priority The priority ReadAllPriorityAttribute(Int32) Define priority Declaration public ReadAllPriorityAttribute(int priority) Parameters Type Name Description System.Int32 priority The priority"
  },
  "api/Apizr.ReadPriorityAttribute.html": {
    "href": "api/Apizr.ReadPriorityAttribute.html",
    "title": "Class ReadPriorityAttribute | Apizr",
    "keywords": "Class ReadPriorityAttribute The Fusillade priority attribute Inheritance System.Object System.Attribute Refit.PropertyAttribute HandlerParameterAttribute CrudHandlerParameterAttribute ReadHandlerParameterAttribute ReadPriorityAttribute Inherited Members HandlerParameterAttribute.Value Refit.PropertyAttribute.Key System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Integrations.Fusillade.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Interface)] public class ReadPriorityAttribute : ReadHandlerParameterAttribute Remarks Info: . Don't forget to activate priority management fluently at register time. Constructors ReadPriorityAttribute(Priority) Define priority Declaration public ReadPriorityAttribute(Priority priority) Parameters Type Name Description Fusillade.Priority priority The priority ReadPriorityAttribute(Int32) Define priority Declaration public ReadPriorityAttribute(int priority) Parameters Type Name Description System.Int32 priority The priority"
  },
  "api/Apizr.Requesting.CrudEntityAttribute.html": {
    "href": "api/Apizr.Requesting.CrudEntityAttribute.html",
    "title": "Class CrudEntityAttribute | Apizr",
    "keywords": "Class CrudEntityAttribute Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) Inheritance System.Object System.Attribute CrudEntityAttribute MappedCrudEntityAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Requesting Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class CrudEntityAttribute : Attribute Constructors CrudEntityAttribute(String, Type, Type, Type, Type) Define some crud api settings from this api entity Declaration public CrudEntityAttribute(string baseUri, Type keyType = null, Type readAllResultType = null, Type readAllParamsType = null, Type modelEntityType = null) Parameters Type Name Description System.String baseUri This specific api entity's base crud uri System.Type keyType This specific api entity's crud key type (default: null = typeof(int)) System.Type readAllResultType The \"ReadAll\" query result type (default: null = typeof(IEnumerable{})) System.Type readAllParamsType ReadAll query parameters type (default: null = typeof(IDictionary{string, object})) System.Type modelEntityType Model entity type mapped with this api entity type (default: null = decorated api entity type) Properties BaseUri This specific entity's base crud uri Declaration public string BaseUri { get; } Property Value Type Description System.String KeyType This specific object's crud key type Declaration public Type KeyType { get; } Property Value Type Description System.Type MappedEntityType Model entity type mapped with this Api entity type Declaration public Type MappedEntityType { get; set; } Property Value Type Description System.Type ReadAllParamsType \"ReadAll\" query parameters type Declaration public Type ReadAllParamsType { get; set; } Property Value Type Description System.Type ReadAllResultType \"ReadAll\" query result type Declaration public Type ReadAllResultType { get; set; } Property Value Type Description System.Type"
  },
  "api/Apizr.Requesting.html": {
    "href": "api/Apizr.Requesting.html",
    "title": "Namespace Apizr.Requesting | Apizr",
    "keywords": "Namespace Apizr.Requesting Classes CrudEntityAttribute Tells Apizr to auto register an IApizrManager<TWebApi> for this decorated entity (works only with IServiceCollection extensions registration) Interfaces ICrudApi<T, TKey, TReadAllResult, TReadAllParams> The crud api interface"
  },
  "api/Apizr.Requesting.ICrudApi-4.html": {
    "href": "api/Apizr.Requesting.ICrudApi-4.html",
    "title": "Interface ICrudApi<T, TKey, TReadAllResult, TReadAllParams> | Apizr",
    "keywords": "Interface ICrudApi<T, TKey, TReadAllResult, TReadAllParams> The crud api interface Namespace : Apizr.Requesting Assembly : Apizr.dll Syntax public interface ICrudApi<T, in TKey, TReadAllResult, in TReadAllParams> where T : class Type Parameters Name Description T The entity type TKey The entity's crud key type TReadAllResult The \"ReadAll\" query result type TReadAllParams ReadAll query parameters type Methods Create(T) Send a Create request with a T payload Declaration [Post(\"\")] Task<T> Create([Body] T payload) Parameters Type Name Description T payload The payload Returns Type Description System.Threading.Tasks.Task <T> Create(T, IApizrRequestOptions) Send a Create request with a T payload, passing a Polly context and a cancellation token through the request Declaration [Post(\"\")] Task<T> Create([Body] T payload, [RequestOptions] IApizrRequestOptions options) Parameters Type Name Description T payload The payload IApizrRequestOptions options The request options Returns Type Description System.Threading.Tasks.Task <T> Create(T, Context) Send a Create request with a T payload, passing a Polly context through the request Declaration [Post(\"\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task<T> Create([Body] T payload, [Context] Context context) Parameters Type Name Description T payload The payload Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task <T> Create(T, Context, CancellationToken) Send a Create request with a T payload, passing a Polly context and a cancellation token through the request Declaration [Post(\"\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task<T> Create([Body] T payload, [Context] Context context, CancellationToken cancellationToken) Parameters Type Name Description T payload The payload Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task <T> Delete(TKey) Send a Delete request with a key param Declaration [Delete(\"/{key}\")] Task Delete(TKey key) Parameters Type Name Description TKey key The key Returns Type Description System.Threading.Tasks.Task Delete(TKey, IApizrRequestOptions) Send a Delete request with a key param Declaration [Delete(\"/{key}\")] Task Delete(TKey key, [RequestOptions] IApizrRequestOptions options) Parameters Type Name Description TKey key The key IApizrRequestOptions options The request options Returns Type Description System.Threading.Tasks.Task Delete(TKey, Context) Send a Delete request with a key param, passing a Polly context through the request Declaration [Delete(\"/{key}\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task Delete(TKey key, [Context] Context context) Parameters Type Name Description TKey key The key Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task Delete(TKey, Context, CancellationToken) Send a Delete request with a key param, passing a Polly context and a cancellation token through the request Declaration [Delete(\"/{key}\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task Delete(TKey key, [Context] Context context, CancellationToken cancellationToken) Parameters Type Name Description TKey key The key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task Read(TKey) Send a Read request with a key param Declaration [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key) Parameters Type Name Description TKey key The key Returns Type Description System.Threading.Tasks.Task <T> Read(TKey, IApizrRequestOptions) Send a Read request with a key param Declaration [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [RequestOptions] IApizrRequestOptions options) Parameters Type Name Description TKey key The key IApizrRequestOptions options The request options Returns Type Description System.Threading.Tasks.Task <T> Read(TKey, Context) Send a Read request with a key param, passing a Polly context through the request Declaration [Get(\"/{key}\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task<T> Read([CacheKey] TKey key, [Context] Context context) Parameters Type Name Description TKey key The key Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task <T> Read(TKey, Int32) Send a Read request with a key param and an execution priority level Declaration [Get(\"/{key}\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task<T> Read([CacheKey] TKey key, [Property(\"Priority\")] int priority) Parameters Type Name Description TKey key The key System.Int32 priority The execution priority level Returns Type Description System.Threading.Tasks.Task <T> Read(TKey, Int32, Context) Send a Read request with a key param and an execution priority level, passing a Polly context through the request Declaration [Get(\"/{key}\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task<T> Read([CacheKey] TKey key, [Property(\"Priority\")] int priority, [Context] Context context) Parameters Type Name Description TKey key The key System.Int32 priority The execution priority level Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task <T> Read(TKey, Int32, Context, CancellationToken) Send a Read request with a key param and an execution priority level, passing a Polly context and a cancellation token through the request Declaration [Get(\"/{key}\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task<T> Read([CacheKey] TKey key, [Property(\"Priority\")] int priority, [Context] Context context, CancellationToken cancellationToken) Parameters Type Name Description TKey key The key System.Int32 priority The execution priority level Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task <T> Read(TKey, Int32, CancellationToken) Send a Read request with a key param and an execution priority level, passing a cancellation token through the request Declaration [Get(\"/{key}\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task<T> Read([CacheKey] TKey key, [Property(\"Priority\")] int priority, CancellationToken cancellationToken) Parameters Type Name Description TKey key The key System.Int32 priority The execution priority level System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task <T> ReadAll() Send a ReadAll request Declaration [Get(\"\")] Task<TReadAllResult> ReadAll() Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(TReadAllParams) Send a ReadAll request with some query params used as cache key Declaration [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams) Parameters Type Name Description TReadAllParams readAllParams Query params used as cache key Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(TReadAllParams, IApizrRequestOptions) Send a ReadAll request with some query params used as cache key Declaration [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [RequestOptions] IApizrRequestOptions options) Parameters Type Name Description TReadAllParams readAllParams Query params used as cache key IApizrRequestOptions options The request options Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(TReadAllParams, Context) Send a ReadAll request with some query params used as cache key and passing a Polly context through the request Declaration [Get(\"\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Context] Context context) Parameters Type Name Description TReadAllParams readAllParams Query params used as cache key Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(TReadAllParams, Context, CancellationToken) Send a ReadAll request with some query params used as cache key, passing a Polly context and a cancellation token through the request Declaration [Get(\"\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Context] Context context, CancellationToken cancellationToken) Parameters Type Name Description TReadAllParams readAllParams Query params used as cache key Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(TReadAllParams, Int32) Send a ReadAll request with some query params used as cache key and an execution priority level Declaration [Get(\"\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(\"Priority\")] int priority) Parameters Type Name Description TReadAllParams readAllParams Query params used as cache key System.Int32 priority The execution priority level Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(TReadAllParams, Int32, Context) Send a ReadAll request with some query params used as cache key and an execution priority level, passing a Polly context through the request Declaration [Get(\"\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(\"Priority\")] int priority, [Context] Context context) Parameters Type Name Description TReadAllParams readAllParams Query params used as cache key System.Int32 priority The execution priority level Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(TReadAllParams, Int32, Context, CancellationToken) Send a ReadAll request with some query params used as cache key and an execution priority level, passing a Polly context and a cancellation token through the request Declaration [Get(\"\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(\"Priority\")] int priority, [Context] Context context, CancellationToken cancellationToken) Parameters Type Name Description TReadAllParams readAllParams Query params used as cache key System.Int32 priority The execution priority level Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(TReadAllParams, Int32, CancellationToken) Send a ReadAll request with some query params used as cache key and an execution priority level, passing a cancellation token through the request Declaration [Get(\"\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(\"Priority\")] int priority, CancellationToken cancellationToken) Parameters Type Name Description TReadAllParams readAllParams Query params used as cache key System.Int32 priority The execution priority level System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(IApizrRequestOptions) Send a ReadAll request Declaration [Get(\"\")] Task<TReadAllResult> ReadAll([RequestOptions] IApizrRequestOptions options) Parameters Type Name Description IApizrRequestOptions options The request options Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(Context) Send a ReadAll request, passing a Polly context through the request Declaration [Get(\"\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task<TReadAllResult> ReadAll([Context] Context context) Parameters Type Name Description Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(Context, CancellationToken) Send a ReadAll request, passing a Polly context and a cancellation token through the request Declaration [Get(\"\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task<TReadAllResult> ReadAll([Context] Context context, CancellationToken cancellationToken) Parameters Type Name Description Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(Int32) Send a ReadAll request with an execution priority level Declaration [Get(\"\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task<TReadAllResult> ReadAll([Property(\"Priority\")] int priority) Parameters Type Name Description System.Int32 priority The execution priority level Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(Int32, Context) Send a ReadAll request with an execution priority level and passing a Polly context through the request Declaration [Get(\"\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task<TReadAllResult> ReadAll([Property(\"Priority\")] int priority, [Context] Context context) Parameters Type Name Description System.Int32 priority The execution priority level Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task <TReadAllResult> ReadAll(Int32, CancellationToken) Send a ReadAll request with an execution priority level, passing a cancellation token through the request Declaration [Get(\"\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task<TReadAllResult> ReadAll([Property(\"Priority\")] int priority, CancellationToken cancellationToken) Parameters Type Name Description System.Int32 priority The execution priority level System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task <TReadAllResult> Update(TKey, T) Send an Update request with a key and a payload Declaration [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload) Parameters Type Name Description TKey key The key T payload The payload Returns Type Description System.Threading.Tasks.Task Update(TKey, T, IApizrRequestOptions) Send an Update request with a key and a payload Declaration [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload, [RequestOptions] IApizrRequestOptions options) Parameters Type Name Description TKey key The key T payload The payload IApizrRequestOptions options The request options Returns Type Description System.Threading.Tasks.Task Update(TKey, T, Context) Send an Update request with a key and a payload, passing a Polly context through the request Declaration [Put(\"/{key}\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task Update(TKey key, [Body] T payload, [Context] Context context) Parameters Type Name Description TKey key The key T payload The payload Polly.Context context The Polly context Returns Type Description System.Threading.Tasks.Task Update(TKey, T, Context, CancellationToken) Send an Update request with a key and a payload, passing a Polly context and a cancellation token through the request Declaration [Put(\"/{key}\")] [Obsolete(\"Use the one with the request options parameter instead\")] Task Update(TKey key, [Body] T payload, [Context] Context context, CancellationToken cancellationToken) Parameters Type Name Description TKey key The key T payload The payload Polly.Context context The Polly context System.Threading.CancellationToken cancellationToken The cancellation token Returns Type Description System.Threading.Tasks.Task"
  },
  "api/Apizr.ServiceCollectionExtensions.html": {
    "href": "api/Apizr.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Apizr",
    "keywords": "Class ServiceCollectionExtensions Apizr service collection extensions Inheritance System.Object ServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.Extensions.Microsoft.DependencyInjection.dll Syntax public static class ServiceCollectionExtensions Methods AddApizr(IServiceCollection, Action<IApizrExtendedRegistryBuilder>, Action<IApizrExtendedCommonOptionsBuilder>) Create a registry with all managers built with both common and proper options Declaration public static IServiceCollection AddApizr(this IServiceCollection services, Action<IApizrExtendedRegistryBuilder> registryBuilder, Action<IApizrExtendedCommonOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedRegistryBuilder > registryBuilder The registry builder with access to proper options System.Action < IApizrExtendedCommonOptionsBuilder > optionsBuilder The common options shared by all managers Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>, Assembly[]) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options System.Reflection.Assembly [] assemblies Any assembly to scan for CrudEntityAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>, Type[]) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for CrudEntityAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Assembly[]) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, params Assembly[] assemblies) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Reflection.Assembly [] assemblies Any assembly to scan for CrudEntityAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> for crudedType object type (class), with key of type System.Int32 and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type crudedType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type crudedType The object type to manage with crud api calls (class) System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Action<IApizrExtendedManagerOptionsBuilder>, Assembly[]) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type apizrManagerType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options System.Reflection.Assembly [] assemblies Any assembly to scan for CrudEntityAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Action<IApizrExtendedManagerOptionsBuilder>, Type[]) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type apizrManagerType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for CrudEntityAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Assembly[]) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type apizrManagerType, params Assembly[] assemblies) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Reflection.Assembly [] assemblies Any assembly to scan for CrudEntityAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Type, Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> for crudedType object type (class), with key of type crudedKeyType (primitive) and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type crudedType, Type crudedKeyType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type crudedType The object type to manage with crud api calls (class) System.Type crudedKeyType The object key type (primitive) System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Type, Type, Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> for crudedType object type (class), with key of type crudedKeyType (primitive) and \"ReadAll\" query result of type crudedReadAllResultType (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters of type IDictionary{string,object} Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type crudedType The object type to manage with crud api calls (class) System.Type crudedKeyType The object key type (primitive) System.Type crudedReadAllResultType \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Type, Type, Type, Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> for crudedType object type (class), with key of type crudedKeyType (primitive) and \"ReadAll\" query result of type crudedReadAllResultType (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Type crudedReadAllParamsType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type crudedType The object type to manage with crud api calls (class) System.Type crudedKeyType The object key type (primitive) System.Type crudedReadAllResultType \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) System.Type crudedReadAllParamsType ReadAll query parameters type System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Type, Type, Type, Type, Action<IApizrExtendedManagerOptionsBuilder>) Register a custom IApizrManager<TWebApi> for crudedType object type (class), with key of type crudedKeyType (primitive) and \"ReadAll\" query result of type crudedReadAllResultType (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type crudedType, Type crudedKeyType, Type crudedReadAllResultType, Type crudedReadAllParamsType, Type apizrManagerType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type crudedType The object type to manage with crud api calls System.Type crudedKeyType The object key type System.Type crudedReadAllResultType \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) System.Type crudedReadAllParamsType ReadAll query parameters type System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type, Type[]) Register a custom IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, Type apizrManagerType, params Type[] assemblyMarkerTypes) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for CrudEntityAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor(IServiceCollection, Type[]) Register IApizrManager<TWebApi> for each CrudEntityAttribute decorated classes Declaration public static IServiceCollection AddApizrCrudManagerFor(this IServiceCollection services, params Type[] assemblyMarkerTypes) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for CrudEntityAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrCrudManagerFor<T>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> for T object type (class), with key of type System.Int32 and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration public static IServiceCollection AddApizrCrudManagerFor<T>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description T The object type to manage with crud api calls AddApizrCrudManagerFor<T, TKey>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type System.Collections.Generic.IEnumerable<T> and ReadAll query parameters of type IDictionary{string,object} Declaration public static IServiceCollection AddApizrCrudManagerFor<T, TKey>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description T The object type to manage with crud api calls TKey The object key type (primitive) AddApizrCrudManagerFor<T, TKey, TReadAllResult>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters of type IDictionary{string,object} Declaration public static IServiceCollection AddApizrCrudManagerFor<T, TKey, TReadAllResult>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> for T object type (class), with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration public static IServiceCollection AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where T : class Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description T The object type to manage with crud api calls (class) TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Register a custom IApizrManager<TWebApi> for T object type, with key of type TKey (primitive) and \"ReadAll\" query result of type TReadAllResult (inheriting from System.Collections.Generic.IEnumerable<T> or be of class type) and ReadAll query parameters type (inheriting from IDictionary{string,object} or be of class type) Declaration public static IServiceCollection AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams, TApizrManager>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where T : class where TApizrManager : IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description T The object type to manage with crud api calls TKey The object key type (primitive) TReadAllResult \"ReadAll\" query result type (should inherit from System.Collections.Generic.IEnumerable<T> or be of class type) TReadAllParams ReadAll query parameters TApizrManager A custom IApizrManager<TWebApi> implementation AddApizrManagerFor(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>, Assembly[]) Register a IApizrManager<TWebApi> for each WebApiAttribute decorated interfaces Declaration public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options System.Reflection.Assembly [] assemblies Any assembly to scan for WebApiAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrManagerFor(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>, Type[]) Register a IApizrManager<TWebApi> for each WebApiAttribute decorated interfaces Declaration public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for WebApiAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrManagerFor(IServiceCollection, Type, Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> Declaration public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Type webApiType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type webApiType The web api interface type to manage System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrManagerFor(IServiceCollection, Type, Action<IApizrExtendedManagerOptionsBuilder>, Assembly[]) Register a custom IApizrManager<TWebApi> for each WebApiAttribute decorated interfaces Declaration public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Type apizrManagerType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null, params Assembly[] assemblies) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options System.Reflection.Assembly [] assemblies Any assembly to scan for WebApiAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrManagerFor(IServiceCollection, Type, Action<IApizrExtendedManagerOptionsBuilder>, Type[]) Register a custom IApizrManager<TWebApi> for each WebApiAttribute decorated interfaces Declaration public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Type apizrManagerType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null, params Type[] assemblyMarkerTypes) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options System.Type [] assemblyMarkerTypes Any type contained in assembly to scan for WebApiAttribute Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrManagerFor(IServiceCollection, Type, Type, Action<IApizrExtendedManagerOptionsBuilder>) Register a custom IApizrManager<TWebApi> Declaration public static IServiceCollection AddApizrManagerFor(this IServiceCollection services, Type webApiType, Type apizrManagerType, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Type webApiType The web api interface type to manage System.Type apizrManagerType A custom IApizrManager<TWebApi> implementation type System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection AddApizrManagerFor<TWebApi>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Register IApizrManager<TWebApi> Declaration public static IServiceCollection AddApizrManagerFor<TWebApi>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description TWebApi The web api interface to manage AddApizrManagerFor<TWebApi, TApizrManager>(IServiceCollection, Action<IApizrExtendedManagerOptionsBuilder>) Register a custom IApizrManager<TWebApi> Declaration public static IServiceCollection AddApizrManagerFor<TWebApi, TApizrManager>(this IServiceCollection services, Action<IApizrExtendedManagerOptionsBuilder> optionsBuilder = null) where TApizrManager : IApizrManager<TWebApi> Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The service collection System.Action < IApizrExtendedManagerOptionsBuilder > optionsBuilder The builder defining specific Apizr options Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Type Parameters Name Description TWebApi The web api interface to manage TApizrManager A custom IApizrManager<TWebApi> implementation"
  },
  "api/Apizr.Transferring.Managing.ApizrDownloadManager.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrDownloadManager.html",
    "title": "Class ApizrDownloadManager | Apizr",
    "keywords": "Class ApizrDownloadManager Inheritance System.Object ApizrTransferManagerBase < IDownloadApi > ApizrDownloadManager < IDownloadApi , System.Collections.Generic.IDictionary < System.String , System.Object >> ApizrDownloadManager < IDownloadApi > ApizrDownloadManager Implements IApizrDownloadManager IApizrDownloadManager < IDownloadApi > IApizrDownloadManager < IDownloadApi , System.Collections.Generic.IDictionary < System.String , System.Object >> IApizrTransferManagerBase < IDownloadApi > IApizrManager Inherited Members ApizrDownloadManager<IDownloadApi, IDictionary<String, Object>>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrDownloadManager<IDownloadApi, IDictionary<String, Object>>.DownloadAsync(FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) ApizrTransferManagerBase<IDownloadApi>.TransferApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public class ApizrDownloadManager : ApizrDownloadManager<IDownloadApi>, IApizrDownloadManager, IApizrDownloadManager<IDownloadApi>, IApizrDownloadManager<IDownloadApi, IDictionary<string, object>>, IApizrTransferManagerBase<IDownloadApi>, IApizrManager Constructors ApizrDownloadManager(IApizrManager<IDownloadApi>) Declaration public ApizrDownloadManager(IApizrManager<IDownloadApi> fileTransferApiManager) Parameters Type Name Description IApizrManager < IDownloadApi > fileTransferApiManager Implements IApizrDownloadManager IApizrDownloadManager<TDownloadApi> IApizrDownloadManager<TDownloadApi, TDownloadParams> IApizrTransferManagerBase<TTransferApiBase> IApizrManager"
  },
  "api/Apizr.Transferring.Managing.ApizrDownloadManager-1.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrDownloadManager-1.html",
    "title": "Class ApizrDownloadManager<TDownloadApi> | Apizr",
    "keywords": "Class ApizrDownloadManager<TDownloadApi> Inheritance System.Object ApizrTransferManagerBase <TDownloadApi> ApizrDownloadManager <TDownloadApi, System.Collections.Generic.IDictionary < System.String , System.Object >> ApizrDownloadManager<TDownloadApi> ApizrDownloadManager Implements IApizrDownloadManager <TDownloadApi> IApizrDownloadManager <TDownloadApi, System.Collections.Generic.IDictionary < System.String , System.Object >> IApizrTransferManagerBase <TDownloadApi> IApizrManager Inherited Members ApizrDownloadManager<TDownloadApi, IDictionary<String, Object>>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrDownloadManager<TDownloadApi, IDictionary<String, Object>>.DownloadAsync(FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) ApizrTransferManagerBase<TDownloadApi>.TransferApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public class ApizrDownloadManager<TDownloadApi> : ApizrDownloadManager<TDownloadApi, IDictionary<string, object>>, IApizrDownloadManager<TDownloadApi>, IApizrDownloadManager<TDownloadApi, IDictionary<string, object>>, IApizrTransferManagerBase<TDownloadApi>, IApizrManager where TDownloadApi : IDownloadApi<IDictionary<string, object>> Type Parameters Name Description TDownloadApi Constructors ApizrDownloadManager(IApizrManager<TDownloadApi>) Declaration public ApizrDownloadManager(IApizrManager<TDownloadApi> fileTransferApiManager) Parameters Type Name Description IApizrManager <TDownloadApi> fileTransferApiManager Implements IApizrDownloadManager<TDownloadApi> IApizrDownloadManager<TDownloadApi, TDownloadParams> IApizrTransferManagerBase<TTransferApiBase> IApizrManager"
  },
  "api/Apizr.Transferring.Managing.ApizrDownloadManager-2.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrDownloadManager-2.html",
    "title": "Class ApizrDownloadManager<TDownloadApi, TDownloadParams> | Apizr",
    "keywords": "Class ApizrDownloadManager<TDownloadApi, TDownloadParams> Inheritance System.Object ApizrTransferManagerBase <TDownloadApi> ApizrDownloadManager<TDownloadApi, TDownloadParams> ApizrDownloadManager<TDownloadApi> Implements IApizrDownloadManager <TDownloadApi, TDownloadParams> IApizrTransferManagerBase <TDownloadApi> IApizrManager Inherited Members ApizrTransferManagerBase<TDownloadApi>.TransferApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public class ApizrDownloadManager<TDownloadApi, TDownloadParams> : ApizrTransferManagerBase<TDownloadApi>, IApizrDownloadManager<TDownloadApi, TDownloadParams>, IApizrTransferManagerBase<TDownloadApi>, IApizrManager where TDownloadApi : IDownloadApi<TDownloadParams> Type Parameters Name Description TDownloadApi TDownloadParams Constructors ApizrDownloadManager(IApizrManager<TDownloadApi>) Declaration public ApizrDownloadManager(IApizrManager<TDownloadApi> fileTransferApiManager) Parameters Type Name Description IApizrManager <TDownloadApi> fileTransferApiManager Methods DownloadAsync(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) Download a file with custom query parameters Declaration public async Task<FileInfo> DownloadAsync(FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download TDownloadParams downloadParams Some custom query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) Download a file Declaration public async Task<FileInfo> DownloadAsync(FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > Implements IApizrDownloadManager<TDownloadApi, TDownloadParams> IApizrTransferManagerBase<TTransferApiBase> IApizrManager"
  },
  "api/Apizr.Transferring.Managing.ApizrTransferManager.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrTransferManager.html",
    "title": "Class ApizrTransferManager | Apizr",
    "keywords": "Class ApizrTransferManager Inheritance System.Object ApizrTransferManager < ITransferApi , System.Collections.Generic.IDictionary < System.String , System.Object >> ApizrTransferManager < ITransferApi > ApizrTransferManager Implements IApizrTransferManager < ITransferApi , System.Collections.Generic.IDictionary < System.String , System.Object >> IApizrTransferManager < ITransferApi > IApizrDownloadManager < ITransferApi > IApizrDownloadManager < ITransferApi , System.Collections.Generic.IDictionary < System.String , System.Object >> IApizrUploadManager < ITransferApi > IApizrUploadManager < ITransferApi , System.Net.Http.HttpResponseMessage > IApizrTransferManagerBase < ITransferApi > IApizrTransferManager IApizrDownloadManager IApizrDownloadManager < IDownloadApi > IApizrDownloadManager < IDownloadApi , System.Collections.Generic.IDictionary < System.String , System.Object >> IApizrTransferManagerBase < IDownloadApi > IApizrUploadManager IApizrUploadManager < IUploadApi > IApizrUploadManager < IUploadApi , System.Net.Http.HttpResponseMessage > IApizrTransferManagerBase < IUploadApi > IApizrManager Inherited Members ApizrTransferManager<ITransferApi, IDictionary<String, Object>>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrTransferManager<ITransferApi, IDictionary<String, Object>>.DownloadAsync(FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) ApizrTransferManager<ITransferApi, IDictionary<String, Object>>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrTransferManager<ITransferApi, IDictionary<String, Object>>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrTransferManager<ITransferApi, IDictionary<String, Object>>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public class ApizrTransferManager : ApizrTransferManager<ITransferApi>, IApizrTransferManager<ITransferApi, IDictionary<string, object>>, IApizrTransferManager<ITransferApi>, IApizrDownloadManager<ITransferApi>, IApizrDownloadManager<ITransferApi, IDictionary<string, object>>, IApizrUploadManager<ITransferApi>, IApizrUploadManager<ITransferApi, HttpResponseMessage>, IApizrTransferManagerBase<ITransferApi>, IApizrTransferManager, IApizrDownloadManager, IApizrDownloadManager<IDownloadApi>, IApizrDownloadManager<IDownloadApi, IDictionary<string, object>>, IApizrTransferManagerBase<IDownloadApi>, IApizrUploadManager, IApizrUploadManager<IUploadApi>, IApizrUploadManager<IUploadApi, HttpResponseMessage>, IApizrTransferManagerBase<IUploadApi>, IApizrManager Constructors ApizrTransferManager(IApizrDownloadManager<ITransferApi>, IApizrUploadManager<ITransferApi>) Declaration public ApizrTransferManager(IApizrDownloadManager<ITransferApi> downloadManager, IApizrUploadManager<ITransferApi> uploadManager) Parameters Type Name Description IApizrDownloadManager < ITransferApi > downloadManager IApizrUploadManager < ITransferApi > uploadManager Implements IApizrTransferManager<TTransferApi, TDownloadParams> IApizrTransferManager<TTransferApi> IApizrDownloadManager<TDownloadApi> IApizrDownloadManager<TDownloadApi, TDownloadParams> IApizrUploadManager<TUploadApi> IApizrUploadManager<TUploadApi, TUploadApiResultData> IApizrTransferManagerBase<TTransferApiBase> IApizrTransferManager IApizrDownloadManager IApizrDownloadManager<TDownloadApi> IApizrDownloadManager<TDownloadApi, TDownloadParams> IApizrTransferManagerBase<TTransferApiBase> IApizrUploadManager IApizrUploadManager<TUploadApi> IApizrUploadManager<TUploadApi, TUploadApiResultData> IApizrTransferManagerBase<TTransferApiBase> IApizrManager"
  },
  "api/Apizr.Transferring.Managing.ApizrTransferManager-1.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrTransferManager-1.html",
    "title": "Class ApizrTransferManager<TTransferApi> | Apizr",
    "keywords": "Class ApizrTransferManager<TTransferApi> Inheritance System.Object ApizrTransferManager <TTransferApi, System.Collections.Generic.IDictionary < System.String , System.Object >> ApizrTransferManager<TTransferApi> ApizrTransferManager Implements IApizrTransferManager <TTransferApi, System.Collections.Generic.IDictionary < System.String , System.Object >> IApizrTransferManager <TTransferApi> IApizrDownloadManager <TTransferApi> IApizrDownloadManager <TTransferApi, System.Collections.Generic.IDictionary < System.String , System.Object >> IApizrUploadManager <TTransferApi> IApizrUploadManager <TTransferApi, System.Net.Http.HttpResponseMessage > IApizrTransferManagerBase <TTransferApi> IApizrManager Inherited Members ApizrTransferManager<TTransferApi, IDictionary<String, Object>>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) ApizrTransferManager<TTransferApi, IDictionary<String, Object>>.DownloadAsync(FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) ApizrTransferManager<TTransferApi, IDictionary<String, Object>>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrTransferManager<TTransferApi, IDictionary<String, Object>>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrTransferManager<TTransferApi, IDictionary<String, Object>>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public class ApizrTransferManager<TTransferApi> : ApizrTransferManager<TTransferApi, IDictionary<string, object>>, IApizrTransferManager<TTransferApi, IDictionary<string, object>>, IApizrTransferManager<TTransferApi>, IApizrDownloadManager<TTransferApi>, IApizrDownloadManager<TTransferApi, IDictionary<string, object>>, IApizrUploadManager<TTransferApi>, IApizrUploadManager<TTransferApi, HttpResponseMessage>, IApizrTransferManagerBase<TTransferApi>, IApizrManager where TTransferApi : ITransferApi Type Parameters Name Description TTransferApi Constructors ApizrTransferManager(IApizrDownloadManager<TTransferApi>, IApizrUploadManager<TTransferApi>) Declaration public ApizrTransferManager(IApizrDownloadManager<TTransferApi> downloadManager, IApizrUploadManager<TTransferApi> uploadManager) Parameters Type Name Description IApizrDownloadManager <TTransferApi> downloadManager IApizrUploadManager <TTransferApi> uploadManager Implements IApizrTransferManager<TTransferApi, TDownloadParams> IApizrTransferManager<TTransferApi> IApizrDownloadManager<TDownloadApi> IApizrDownloadManager<TDownloadApi, TDownloadParams> IApizrUploadManager<TUploadApi> IApizrUploadManager<TUploadApi, TUploadApiResultData> IApizrTransferManagerBase<TTransferApiBase> IApizrManager"
  },
  "api/Apizr.Transferring.Managing.ApizrTransferManager-2.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrTransferManager-2.html",
    "title": "Class ApizrTransferManager<TTransferApi, TDownloadParams> | Apizr",
    "keywords": "Class ApizrTransferManager<TTransferApi, TDownloadParams> Inheritance System.Object ApizrTransferManager<TTransferApi, TDownloadParams> ApizrTransferManager<TTransferApi> Implements IApizrTransferManager <TTransferApi, TDownloadParams> IApizrDownloadManager <TTransferApi, TDownloadParams> IApizrUploadManager <TTransferApi> IApizrUploadManager <TTransferApi, System.Net.Http.HttpResponseMessage > IApizrTransferManagerBase <TTransferApi> IApizrManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public class ApizrTransferManager<TTransferApi, TDownloadParams> : IApizrTransferManager<TTransferApi, TDownloadParams>, IApizrDownloadManager<TTransferApi, TDownloadParams>, IApizrUploadManager<TTransferApi>, IApizrUploadManager<TTransferApi, HttpResponseMessage>, IApizrTransferManagerBase<TTransferApi>, IApizrManager where TTransferApi : ITransferApi<TDownloadParams, HttpResponseMessage>, IUploadApi Type Parameters Name Description TTransferApi TDownloadParams Constructors ApizrTransferManager(IApizrDownloadManager<TTransferApi, TDownloadParams>, IApizrUploadManager<TTransferApi>) Declaration public ApizrTransferManager(IApizrDownloadManager<TTransferApi, TDownloadParams> downloadManager, IApizrUploadManager<TTransferApi> uploadManager) Parameters Type Name Description IApizrDownloadManager <TTransferApi, TDownloadParams> downloadManager IApizrUploadManager <TTransferApi> uploadManager Methods DownloadAsync(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) Download a file with custom query parameters Declaration public Task<FileInfo> DownloadAsync(FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download TDownloadParams downloadParams Some custom query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) Download a file Declaration public Task<FileInfo> DownloadAsync(FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data Declaration public Task<HttpResponseMessage> UploadAsync(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.ByteArrayPart byteArrayPart The file bytes data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data Declaration public Task<HttpResponseMessage> UploadAsync(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.FileInfoPart fileInfoPart The file info data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data Declaration public Task<HttpResponseMessage> UploadAsync(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.StreamPart streamPart The file stream data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > Implements IApizrTransferManager<TTransferApi, TDownloadParams> IApizrDownloadManager<TDownloadApi, TDownloadParams> IApizrUploadManager<TUploadApi> IApizrUploadManager<TUploadApi, TUploadApiResultData> IApizrTransferManagerBase<TTransferApiBase> IApizrManager"
  },
  "api/Apizr.Transferring.Managing.ApizrTransferManager-3.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrTransferManager-3.html",
    "title": "Class ApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> | Apizr",
    "keywords": "Class ApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> Inheritance System.Object ApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> Implements IApizrTransferManager <TTransferApi, TDownloadParams, TUploadApiResultData> IApizrDownloadManager <TTransferApi, TDownloadParams> IApizrUploadManager <TTransferApi, TUploadApiResultData> IApizrTransferManagerBase <TTransferApi> IApizrManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public class ApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> : IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData>, IApizrDownloadManager<TTransferApi, TDownloadParams>, IApizrUploadManager<TTransferApi, TUploadApiResultData>, IApizrTransferManagerBase<TTransferApi>, IApizrManager where TTransferApi : ITransferApi<TDownloadParams, TUploadApiResultData> Type Parameters Name Description TTransferApi TDownloadParams TUploadApiResultData Constructors ApizrTransferManager(IApizrDownloadManager<TTransferApi, TDownloadParams>, IApizrUploadManager<TTransferApi, TUploadApiResultData>) Declaration public ApizrTransferManager(IApizrDownloadManager<TTransferApi, TDownloadParams> downloadManager, IApizrUploadManager<TTransferApi, TUploadApiResultData> uploadManager) Parameters Type Name Description IApizrDownloadManager <TTransferApi, TDownloadParams> downloadManager IApizrUploadManager <TTransferApi, TUploadApiResultData> uploadManager Methods DownloadAsync(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) Download a file with custom query parameters Declaration public Task<FileInfo> DownloadAsync(FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download TDownloadParams downloadParams Some custom query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) Download a file Declaration public Task<FileInfo> DownloadAsync(FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data Declaration public Task<TUploadApiResultData> UploadAsync(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.ByteArrayPart byteArrayPart The file bytes data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data Declaration public Task<TUploadApiResultData> UploadAsync(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.FileInfoPart fileInfoPart The file info data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data Declaration public Task<TUploadApiResultData> UploadAsync(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.StreamPart streamPart The file stream data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> Implements IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> IApizrDownloadManager<TDownloadApi, TDownloadParams> IApizrUploadManager<TUploadApi, TUploadApiResultData> IApizrTransferManagerBase<TTransferApiBase> IApizrManager"
  },
  "api/Apizr.Transferring.Managing.ApizrTransferManagerBase-1.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrTransferManagerBase-1.html",
    "title": "Class ApizrTransferManagerBase<TTransferApiBase> | Apizr",
    "keywords": "Class ApizrTransferManagerBase<TTransferApiBase> Inheritance System.Object ApizrTransferManagerBase<TTransferApiBase> ApizrDownloadManager<TDownloadApi, TDownloadParams> ApizrUploadManager<TUploadApi, TUploadApiResultData> Implements IApizrTransferManagerBase <TTransferApiBase> IApizrManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public abstract class ApizrTransferManagerBase<TTransferApiBase> : IApizrTransferManagerBase<TTransferApiBase>, IApizrManager where TTransferApiBase : ITransferApiBase Type Parameters Name Description TTransferApiBase Constructors ApizrTransferManagerBase(IApizrManager<TTransferApiBase>) Declaration protected ApizrTransferManagerBase(IApizrManager<TTransferApiBase> transferApiManager) Parameters Type Name Description IApizrManager <TTransferApiBase> transferApiManager Fields TransferApiManager Declaration protected readonly IApizrManager<TTransferApiBase> TransferApiManager Field Value Type Description IApizrManager <TTransferApiBase> Implements IApizrTransferManagerBase<TTransferApiBase> IApizrManager"
  },
  "api/Apizr.Transferring.Managing.ApizrUploadManager.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrUploadManager.html",
    "title": "Class ApizrUploadManager | Apizr",
    "keywords": "Class ApizrUploadManager Inheritance System.Object ApizrTransferManagerBase < IUploadApi > ApizrUploadManager < IUploadApi , System.Net.Http.HttpResponseMessage > ApizrUploadManager < IUploadApi > ApizrUploadManager Implements IApizrUploadManager IApizrUploadManager < IUploadApi > IApizrUploadManager < IUploadApi , System.Net.Http.HttpResponseMessage > IApizrTransferManagerBase < IUploadApi > IApizrManager Inherited Members ApizrUploadManager<IUploadApi, HttpResponseMessage>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrUploadManager<IUploadApi, HttpResponseMessage>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrUploadManager<IUploadApi, HttpResponseMessage>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrTransferManagerBase<IUploadApi>.TransferApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public class ApizrUploadManager : ApizrUploadManager<IUploadApi>, IApizrUploadManager, IApizrUploadManager<IUploadApi>, IApizrUploadManager<IUploadApi, HttpResponseMessage>, IApizrTransferManagerBase<IUploadApi>, IApizrManager Constructors ApizrUploadManager(IApizrManager<IUploadApi>) Declaration public ApizrUploadManager(IApizrManager<IUploadApi> fileTransferApiManager) Parameters Type Name Description IApizrManager < IUploadApi > fileTransferApiManager Implements IApizrUploadManager IApizrUploadManager<TUploadApi> IApizrUploadManager<TUploadApi, TUploadApiResultData> IApizrTransferManagerBase<TTransferApiBase> IApizrManager"
  },
  "api/Apizr.Transferring.Managing.ApizrUploadManager-1.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrUploadManager-1.html",
    "title": "Class ApizrUploadManager<TUploadApi> | Apizr",
    "keywords": "Class ApizrUploadManager<TUploadApi> Inheritance System.Object ApizrTransferManagerBase <TUploadApi> ApizrUploadManager <TUploadApi, System.Net.Http.HttpResponseMessage > ApizrUploadManager<TUploadApi> ApizrUploadManager Implements IApizrUploadManager <TUploadApi> IApizrUploadManager <TUploadApi, System.Net.Http.HttpResponseMessage > IApizrTransferManagerBase <TUploadApi> IApizrManager Inherited Members ApizrUploadManager<TUploadApi, HttpResponseMessage>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) ApizrUploadManager<TUploadApi, HttpResponseMessage>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) ApizrUploadManager<TUploadApi, HttpResponseMessage>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) ApizrTransferManagerBase<TUploadApi>.TransferApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public class ApizrUploadManager<TUploadApi> : ApizrUploadManager<TUploadApi, HttpResponseMessage>, IApizrUploadManager<TUploadApi>, IApizrUploadManager<TUploadApi, HttpResponseMessage>, IApizrTransferManagerBase<TUploadApi>, IApizrManager where TUploadApi : IUploadApi Type Parameters Name Description TUploadApi Constructors ApizrUploadManager(IApizrManager<TUploadApi>) Declaration public ApizrUploadManager(IApizrManager<TUploadApi> fileTransferApiManager) Parameters Type Name Description IApizrManager <TUploadApi> fileTransferApiManager Implements IApizrUploadManager<TUploadApi> IApizrUploadManager<TUploadApi, TUploadApiResultData> IApizrTransferManagerBase<TTransferApiBase> IApizrManager"
  },
  "api/Apizr.Transferring.Managing.ApizrUploadManager-2.html": {
    "href": "api/Apizr.Transferring.Managing.ApizrUploadManager-2.html",
    "title": "Class ApizrUploadManager<TUploadApi, TUploadApiResultData> | Apizr",
    "keywords": "Class ApizrUploadManager<TUploadApi, TUploadApiResultData> Inheritance System.Object ApizrTransferManagerBase <TUploadApi> ApizrUploadManager<TUploadApi, TUploadApiResultData> ApizrUploadManager<TUploadApi> Implements IApizrUploadManager <TUploadApi, TUploadApiResultData> IApizrTransferManagerBase <TUploadApi> IApizrManager Inherited Members ApizrTransferManagerBase<TUploadApi>.TransferApiManager System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public class ApizrUploadManager<TUploadApi, TUploadApiResultData> : ApizrTransferManagerBase<TUploadApi>, IApizrUploadManager<TUploadApi, TUploadApiResultData>, IApizrTransferManagerBase<TUploadApi>, IApizrManager where TUploadApi : IUploadApi<TUploadApiResultData> Type Parameters Name Description TUploadApi TUploadApiResultData Constructors ApizrUploadManager(IApizrManager<TUploadApi>) Declaration public ApizrUploadManager(IApizrManager<TUploadApi> fileTransferApiManager) Parameters Type Name Description IApizrManager <TUploadApi> fileTransferApiManager Methods UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data Declaration public Task<TUploadApiResultData> UploadAsync(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.ByteArrayPart byteArrayPart The file bytes data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data Declaration public Task<TUploadApiResultData> UploadAsync(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.FileInfoPart fileInfoPart The file info data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data Declaration public Task<TUploadApiResultData> UploadAsync(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.StreamPart streamPart The file stream data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> Implements IApizrUploadManager<TUploadApi, TUploadApiResultData> IApizrTransferManagerBase<TTransferApiBase> IApizrManager"
  },
  "api/Apizr.Transferring.Managing.html": {
    "href": "api/Apizr.Transferring.Managing.html",
    "title": "Namespace Apizr.Transferring.Managing | Apizr",
    "keywords": "Namespace Apizr.Transferring.Managing Classes ApizrDownloadManager ApizrDownloadManager<TDownloadApi> ApizrDownloadManager<TDownloadApi, TDownloadParams> ApizrTransferManager ApizrTransferManager<TTransferApi> ApizrTransferManager<TTransferApi, TDownloadParams> ApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> ApizrTransferManagerBase<TTransferApiBase> ApizrUploadManager ApizrUploadManager<TUploadApi> ApizrUploadManager<TUploadApi, TUploadApiResultData> Interfaces IApizrDownloadManager The download manager with a dictionary query parameters type IApizrDownloadManager<TDownloadApi> The download manager with a dictionary query parameters type IApizrDownloadManager<TDownloadApi, TDownloadParams> The download manager with a custom query parameters type IApizrTransferManager The transfer manager to work with both downloads and uploads and with a dictionary query parameters type and no result IApizrTransferManager<TTransferApi> The transfer manager to work with both downloads and uploads and with a dictionary query parameters type and no result IApizrTransferManager<TTransferApi, TDownloadParams> The transfer manager to work with both downloads and uploads and with a custom download query parameters type and no result IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> The transfer manager to work with both downloads and uploads and with a custom download query parameters type and no result IApizrTransferManagerBase<TTransferApiBase> IApizrUploadManager The upload manager IApizrUploadManager<TUploadApi> The upload manager IApizrUploadManager<TUploadApi, TUploadApiResultData> The upload manager"
  },
  "api/Apizr.Transferring.Managing.IApizrDownloadManager.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrDownloadManager.html",
    "title": "Interface IApizrDownloadManager | Apizr",
    "keywords": "Interface IApizrDownloadManager The download manager with a dictionary query parameters type Inherited Members IApizrDownloadManager<IDownloadApi, IDictionary<String, Object>>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) IApizrDownloadManager<IDownloadApi, IDictionary<String, Object>>.DownloadAsync(FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public interface IApizrDownloadManager : IApizrDownloadManager<IDownloadApi>, IApizrDownloadManager<IDownloadApi, IDictionary<string, object>>, IApizrTransferManagerBase<IDownloadApi>, IApizrManager"
  },
  "api/Apizr.Transferring.Managing.IApizrDownloadManager-1.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrDownloadManager-1.html",
    "title": "Interface IApizrDownloadManager<TDownloadApi> | Apizr",
    "keywords": "Interface IApizrDownloadManager<TDownloadApi> The download manager with a dictionary query parameters type Inherited Members IApizrDownloadManager<TDownloadApi, IDictionary<String, Object>>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) IApizrDownloadManager<TDownloadApi, IDictionary<String, Object>>.DownloadAsync(FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public interface IApizrDownloadManager<TDownloadApi> : IApizrDownloadManager<TDownloadApi, IDictionary<string, object>>, IApizrTransferManagerBase<TDownloadApi>, IApizrManager where TDownloadApi : IDownloadApi<IDictionary<string, object>> Type Parameters Name Description TDownloadApi The download api type to manage"
  },
  "api/Apizr.Transferring.Managing.IApizrDownloadManager-2.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrDownloadManager-2.html",
    "title": "Interface IApizrDownloadManager<TDownloadApi, TDownloadParams> | Apizr",
    "keywords": "Interface IApizrDownloadManager<TDownloadApi, TDownloadParams> The download manager with a custom query parameters type Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public interface IApizrDownloadManager<TDownloadApi, in TDownloadParams> : IApizrTransferManagerBase<TDownloadApi>, IApizrManager where TDownloadApi : IDownloadApi<TDownloadParams> Type Parameters Name Description TDownloadApi The download api type to manage TDownloadParams The query parameters type Methods DownloadAsync(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) Download a file with custom query parameters Declaration Task<FileInfo> DownloadAsync(FileInfo fileInfo, TDownloadParams downloadParams, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download TDownloadParams downloadParams Some custom query parameters System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo > DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) Download a file Declaration Task<FileInfo> DownloadAsync(FileInfo fileInfo, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description System.IO.FileInfo fileInfo Some information about the file to download System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task < System.IO.FileInfo >"
  },
  "api/Apizr.Transferring.Managing.IApizrTransferManager.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrTransferManager.html",
    "title": "Interface IApizrTransferManager | Apizr",
    "keywords": "Interface IApizrTransferManager The transfer manager to work with both downloads and uploads and with a dictionary query parameters type and no result Inherited Members IApizrDownloadManager<IDownloadApi, IDictionary<String, Object>>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) IApizrDownloadManager<IDownloadApi, IDictionary<String, Object>>.DownloadAsync(FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<IUploadApi, HttpResponseMessage>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<IUploadApi, HttpResponseMessage>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<IUploadApi, HttpResponseMessage>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public interface IApizrTransferManager : IApizrDownloadManager, IApizrDownloadManager<IDownloadApi>, IApizrDownloadManager<IDownloadApi, IDictionary<string, object>>, IApizrTransferManagerBase<IDownloadApi>, IApizrUploadManager, IApizrUploadManager<IUploadApi>, IApizrUploadManager<IUploadApi, HttpResponseMessage>, IApizrTransferManagerBase<IUploadApi>, IApizrManager"
  },
  "api/Apizr.Transferring.Managing.IApizrTransferManager-1.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrTransferManager-1.html",
    "title": "Interface IApizrTransferManager<TTransferApi> | Apizr",
    "keywords": "Interface IApizrTransferManager<TTransferApi> The transfer manager to work with both downloads and uploads and with a dictionary query parameters type and no result Inherited Members IApizrDownloadManager<TTransferApi, IDictionary<String, Object>>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) IApizrDownloadManager<TTransferApi, IDictionary<String, Object>>.DownloadAsync(FileInfo, IDictionary<String, Object>, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TTransferApi, HttpResponseMessage>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TTransferApi, HttpResponseMessage>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TTransferApi, HttpResponseMessage>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public interface IApizrTransferManager<TTransferApi> : IApizrDownloadManager<TTransferApi>, IApizrDownloadManager<TTransferApi, IDictionary<string, object>>, IApizrUploadManager<TTransferApi>, IApizrUploadManager<TTransferApi, HttpResponseMessage>, IApizrTransferManagerBase<TTransferApi>, IApizrManager where TTransferApi : ITransferApi Type Parameters Name Description TTransferApi The transfer api type to manage"
  },
  "api/Apizr.Transferring.Managing.IApizrTransferManager-2.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrTransferManager-2.html",
    "title": "Interface IApizrTransferManager<TTransferApi, TDownloadParams> | Apizr",
    "keywords": "Interface IApizrTransferManager<TTransferApi, TDownloadParams> The transfer manager to work with both downloads and uploads and with a custom download query parameters type and no result Inherited Members IApizrDownloadManager<TTransferApi, TDownloadParams>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) IApizrDownloadManager<TTransferApi, TDownloadParams>.DownloadAsync(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TTransferApi, HttpResponseMessage>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TTransferApi, HttpResponseMessage>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TTransferApi, HttpResponseMessage>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public interface IApizrTransferManager<TTransferApi, in TDownloadParams> : IApizrDownloadManager<TTransferApi, TDownloadParams>, IApizrUploadManager<TTransferApi>, IApizrUploadManager<TTransferApi, HttpResponseMessage>, IApizrTransferManagerBase<TTransferApi>, IApizrManager where TTransferApi : ITransferApi<TDownloadParams, HttpResponseMessage>, IUploadApi Type Parameters Name Description TTransferApi The transfer api type to manage TDownloadParams The custom query parameters type"
  },
  "api/Apizr.Transferring.Managing.IApizrTransferManager-3.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrTransferManager-3.html",
    "title": "Interface IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> | Apizr",
    "keywords": "Interface IApizrTransferManager<TTransferApi, TDownloadParams, TUploadApiResultData> The transfer manager to work with both downloads and uploads and with a custom download query parameters type and no result Inherited Members IApizrDownloadManager<TTransferApi, TDownloadParams>.DownloadAsync(FileInfo, Action<IApizrRequestOptionsBuilder>) IApizrDownloadManager<TTransferApi, TDownloadParams>.DownloadAsync(FileInfo, TDownloadParams, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TTransferApi, TUploadApiResultData>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TTransferApi, TUploadApiResultData>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TTransferApi, TUploadApiResultData>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public interface IApizrTransferManager<TTransferApi, in TDownloadParams, TUploadApiResultData> : IApizrDownloadManager<TTransferApi, TDownloadParams>, IApizrUploadManager<TTransferApi, TUploadApiResultData>, IApizrTransferManagerBase<TTransferApi>, IApizrManager where TTransferApi : ITransferApi<TDownloadParams, TUploadApiResultData> Type Parameters Name Description TTransferApi The transfer api type to manage TDownloadParams The custom query parameters type TUploadApiResultData The transfer api result type"
  },
  "api/Apizr.Transferring.Managing.IApizrTransferManagerBase-1.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrTransferManagerBase-1.html",
    "title": "Interface IApizrTransferManagerBase<TTransferApiBase> | Apizr",
    "keywords": "Interface IApizrTransferManagerBase<TTransferApiBase> Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public interface IApizrTransferManagerBase<TTransferApiBase> : IApizrManager where TTransferApiBase : ITransferApiBase Type Parameters Name Description TTransferApiBase"
  },
  "api/Apizr.Transferring.Managing.IApizrUploadManager.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrUploadManager.html",
    "title": "Interface IApizrUploadManager | Apizr",
    "keywords": "Interface IApizrUploadManager The upload manager Inherited Members IApizrUploadManager<IUploadApi, HttpResponseMessage>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<IUploadApi, HttpResponseMessage>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<IUploadApi, HttpResponseMessage>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public interface IApizrUploadManager : IApizrUploadManager<IUploadApi>, IApizrUploadManager<IUploadApi, HttpResponseMessage>, IApizrTransferManagerBase<IUploadApi>, IApizrManager"
  },
  "api/Apizr.Transferring.Managing.IApizrUploadManager-1.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrUploadManager-1.html",
    "title": "Interface IApizrUploadManager<TUploadApi> | Apizr",
    "keywords": "Interface IApizrUploadManager<TUploadApi> The upload manager Inherited Members IApizrUploadManager<TUploadApi, HttpResponseMessage>.UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TUploadApi, HttpResponseMessage>.UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) IApizrUploadManager<TUploadApi, HttpResponseMessage>.UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public interface IApizrUploadManager<TUploadApi> : IApizrUploadManager<TUploadApi, HttpResponseMessage>, IApizrTransferManagerBase<TUploadApi>, IApizrManager where TUploadApi : IUploadApi Type Parameters Name Description TUploadApi The upload api type to manage"
  },
  "api/Apizr.Transferring.Managing.IApizrUploadManager-2.html": {
    "href": "api/Apizr.Transferring.Managing.IApizrUploadManager-2.html",
    "title": "Interface IApizrUploadManager<TUploadApi, TUploadApiResultData> | Apizr",
    "keywords": "Interface IApizrUploadManager<TUploadApi, TUploadApiResultData> The upload manager Namespace : Apizr.Transferring.Managing Assembly : Apizr.Integrations.FileTransfer.dll Syntax public interface IApizrUploadManager<TUploadApi, TUploadApiResultData> : IApizrTransferManagerBase<TUploadApi>, IApizrManager where TUploadApi : IUploadApi<TUploadApiResultData> Type Parameters Name Description TUploadApi The upload api type to manage TUploadApiResultData The upload api result type Methods UploadAsync(ByteArrayPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its bytes data Declaration Task<TUploadApiResultData> UploadAsync(ByteArrayPart byteArrayPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.ByteArrayPart byteArrayPart The file bytes data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> UploadAsync(FileInfoPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its file info data Declaration Task<TUploadApiResultData> UploadAsync(FileInfoPart fileInfoPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.FileInfoPart fileInfoPart The file info data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData> UploadAsync(StreamPart, Action<IApizrRequestOptionsBuilder>) Upload a file from its stream data Declaration Task<TUploadApiResultData> UploadAsync(StreamPart streamPart, Action<IApizrRequestOptionsBuilder> optionsBuilder = null) Parameters Type Name Description Refit.StreamPart streamPart The file stream data System.Action < IApizrRequestOptionsBuilder > optionsBuilder Some request options Returns Type Description System.Threading.Tasks.Task <TUploadApiResultData>"
  },
  "api/Apizr.Transferring.Requesting.html": {
    "href": "api/Apizr.Transferring.Requesting.html",
    "title": "Namespace Apizr.Transferring.Requesting | Apizr",
    "keywords": "Namespace Apizr.Transferring.Requesting Interfaces IDownloadApi IDownloadApi<TDownloadParams> ITransferApi ITransferApi<TDownloadParams, TUploadApiResultData> ITransferApiBase IUploadApi IUploadApi<TApiResultData>"
  },
  "api/Apizr.Transferring.Requesting.IDownloadApi.html": {
    "href": "api/Apizr.Transferring.Requesting.IDownloadApi.html",
    "title": "Interface IDownloadApi | Apizr",
    "keywords": "Interface IDownloadApi Inherited Members IDownloadApi<IDictionary<String, Object>>.DownloadAsync(String) IDownloadApi<IDictionary<String, Object>>.DownloadAsync(String, IApizrRequestOptions) IDownloadApi<IDictionary<String, Object>>.DownloadAsync(String, IDictionary<String, Object>) IDownloadApi<IDictionary<String, Object>>.DownloadAsync(String, IDictionary<String, Object>, IApizrRequestOptions) Namespace : Apizr.Transferring.Requesting Assembly : Apizr.Integrations.FileTransfer.dll Syntax public interface IDownloadApi : IDownloadApi<IDictionary<string, object>>, ITransferApiBase"
  },
  "api/Apizr.Transferring.Requesting.IDownloadApi-1.html": {
    "href": "api/Apizr.Transferring.Requesting.IDownloadApi-1.html",
    "title": "Interface IDownloadApi<TDownloadParams> | Apizr",
    "keywords": "Interface IDownloadApi<TDownloadParams> Namespace : Apizr.Transferring.Requesting Assembly : Apizr.Integrations.FileTransfer.dll Syntax public interface IDownloadApi<in TDownloadParams> : ITransferApiBase Type Parameters Name Description TDownloadParams Methods DownloadAsync(String) Declaration [Get(\"/{filePathOrName}\")] [QueryUriFormat(UriFormat.Unescaped)] [Cache(CacheMode.None)] Task<HttpResponseMessage> DownloadAsync(string filePathOrName) Parameters Type Name Description System.String filePathOrName Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > DownloadAsync(String, TDownloadParams) Declaration [Get(\"/{filePathOrName}\")] [QueryUriFormat(UriFormat.Unescaped)] [Cache(CacheMode.None)] Task<HttpResponseMessage> DownloadAsync(string filePathOrName, TDownloadParams downloadParams) Parameters Type Name Description System.String filePathOrName TDownloadParams downloadParams Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > DownloadAsync(String, TDownloadParams, IApizrRequestOptions) Declaration [Get(\"/{filePathOrName}\")] [QueryUriFormat(UriFormat.Unescaped)] [Cache(CacheMode.None)] Task<HttpResponseMessage> DownloadAsync(string filePathOrName, TDownloadParams downloadParams, [RequestOptions] IApizrRequestOptions options) Parameters Type Name Description System.String filePathOrName TDownloadParams downloadParams IApizrRequestOptions options Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage > DownloadAsync(String, IApizrRequestOptions) Declaration [Get(\"/{filePathOrName}\")] [QueryUriFormat(UriFormat.Unescaped)] [Cache(CacheMode.None)] Task<HttpResponseMessage> DownloadAsync(string filePathOrName, [RequestOptions] IApizrRequestOptions options) Parameters Type Name Description System.String filePathOrName IApizrRequestOptions options Returns Type Description System.Threading.Tasks.Task < System.Net.Http.HttpResponseMessage >"
  },
  "api/Apizr.Transferring.Requesting.ITransferApi.html": {
    "href": "api/Apizr.Transferring.Requesting.ITransferApi.html",
    "title": "Interface ITransferApi | Apizr",
    "keywords": "Interface ITransferApi Inherited Members IDownloadApi<IDictionary<String, Object>>.DownloadAsync(String) IDownloadApi<IDictionary<String, Object>>.DownloadAsync(String, IApizrRequestOptions) IDownloadApi<IDictionary<String, Object>>.DownloadAsync(String, IDictionary<String, Object>) IDownloadApi<IDictionary<String, Object>>.DownloadAsync(String, IDictionary<String, Object>, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(ByteArrayPart) IUploadApi<HttpResponseMessage>.UploadAsync(ByteArrayPart, String) IUploadApi<HttpResponseMessage>.UploadAsync(ByteArrayPart, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(ByteArrayPart, String, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(StreamPart) IUploadApi<HttpResponseMessage>.UploadAsync(StreamPart, String) IUploadApi<HttpResponseMessage>.UploadAsync(StreamPart, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(StreamPart, String, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(FileInfoPart) IUploadApi<HttpResponseMessage>.UploadAsync(FileInfoPart, String) IUploadApi<HttpResponseMessage>.UploadAsync(FileInfoPart, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(FileInfoPart, String, IApizrRequestOptions) Namespace : Apizr.Transferring.Requesting Assembly : Apizr.Integrations.FileTransfer.dll Syntax public interface ITransferApi : ITransferApi<IDictionary<string, object>, HttpResponseMessage>, IDownloadApi, IDownloadApi<IDictionary<string, object>>, IUploadApi, IUploadApi<HttpResponseMessage>, ITransferApiBase"
  },
  "api/Apizr.Transferring.Requesting.ITransferApi-2.html": {
    "href": "api/Apizr.Transferring.Requesting.ITransferApi-2.html",
    "title": "Interface ITransferApi<TDownloadParams, TUploadApiResultData> | Apizr",
    "keywords": "Interface ITransferApi<TDownloadParams, TUploadApiResultData> Inherited Members IDownloadApi<TDownloadParams>.DownloadAsync(String) IDownloadApi<TDownloadParams>.DownloadAsync(String, IApizrRequestOptions) IDownloadApi<TDownloadParams>.DownloadAsync(String, TDownloadParams) IDownloadApi<TDownloadParams>.DownloadAsync(String, TDownloadParams, IApizrRequestOptions) IUploadApi<TUploadApiResultData>.UploadAsync(ByteArrayPart) IUploadApi<TUploadApiResultData>.UploadAsync(ByteArrayPart, String) IUploadApi<TUploadApiResultData>.UploadAsync(ByteArrayPart, IApizrRequestOptions) IUploadApi<TUploadApiResultData>.UploadAsync(ByteArrayPart, String, IApizrRequestOptions) IUploadApi<TUploadApiResultData>.UploadAsync(StreamPart) IUploadApi<TUploadApiResultData>.UploadAsync(StreamPart, String) IUploadApi<TUploadApiResultData>.UploadAsync(StreamPart, IApizrRequestOptions) IUploadApi<TUploadApiResultData>.UploadAsync(StreamPart, String, IApizrRequestOptions) IUploadApi<TUploadApiResultData>.UploadAsync(FileInfoPart) IUploadApi<TUploadApiResultData>.UploadAsync(FileInfoPart, String) IUploadApi<TUploadApiResultData>.UploadAsync(FileInfoPart, IApizrRequestOptions) IUploadApi<TUploadApiResultData>.UploadAsync(FileInfoPart, String, IApizrRequestOptions) Namespace : Apizr.Transferring.Requesting Assembly : Apizr.Integrations.FileTransfer.dll Syntax public interface ITransferApi<in TDownloadParams, TUploadApiResultData> : IDownloadApi<TDownloadParams>, IUploadApi<TUploadApiResultData>, ITransferApiBase Type Parameters Name Description TDownloadParams TUploadApiResultData"
  },
  "api/Apizr.Transferring.Requesting.ITransferApiBase.html": {
    "href": "api/Apizr.Transferring.Requesting.ITransferApiBase.html",
    "title": "Interface ITransferApiBase | Apizr",
    "keywords": "Interface ITransferApiBase Namespace : Apizr.Transferring.Requesting Assembly : Apizr.Integrations.FileTransfer.dll Syntax [WebApi] [Cache(CacheMode.None)] public interface ITransferApiBase"
  },
  "api/Apizr.Transferring.Requesting.IUploadApi.html": {
    "href": "api/Apizr.Transferring.Requesting.IUploadApi.html",
    "title": "Interface IUploadApi | Apizr",
    "keywords": "Interface IUploadApi Inherited Members IUploadApi<HttpResponseMessage>.UploadAsync(ByteArrayPart) IUploadApi<HttpResponseMessage>.UploadAsync(ByteArrayPart, String) IUploadApi<HttpResponseMessage>.UploadAsync(ByteArrayPart, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(ByteArrayPart, String, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(StreamPart) IUploadApi<HttpResponseMessage>.UploadAsync(StreamPart, String) IUploadApi<HttpResponseMessage>.UploadAsync(StreamPart, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(StreamPart, String, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(FileInfoPart) IUploadApi<HttpResponseMessage>.UploadAsync(FileInfoPart, String) IUploadApi<HttpResponseMessage>.UploadAsync(FileInfoPart, IApizrRequestOptions) IUploadApi<HttpResponseMessage>.UploadAsync(FileInfoPart, String, IApizrRequestOptions) Namespace : Apizr.Transferring.Requesting Assembly : Apizr.Integrations.FileTransfer.dll Syntax public interface IUploadApi : IUploadApi<HttpResponseMessage>, ITransferApiBase"
  },
  "api/Apizr.Transferring.Requesting.IUploadApi-1.html": {
    "href": "api/Apizr.Transferring.Requesting.IUploadApi-1.html",
    "title": "Interface IUploadApi<TApiResultData> | Apizr",
    "keywords": "Interface IUploadApi<TApiResultData> Namespace : Apizr.Transferring.Requesting Assembly : Apizr.Integrations.FileTransfer.dll Syntax public interface IUploadApi<TApiResultData> : ITransferApiBase Type Parameters Name Description TApiResultData Methods UploadAsync(ByteArrayPart) Declaration [Multipart(\"----MyGreatBoundary\")] [Post(\"\")] Task<TApiResultData> UploadAsync(ByteArrayPart byteArrayPart) Parameters Type Name Description Refit.ByteArrayPart byteArrayPart Returns Type Description System.Threading.Tasks.Task <TApiResultData> UploadAsync(ByteArrayPart, IApizrRequestOptions) Declaration [Multipart(\"----MyGreatBoundary\")] [Post(\"\")] Task<TApiResultData> UploadAsync(ByteArrayPart byteArrayPart, [RequestOptions] IApizrRequestOptions options) Parameters Type Name Description Refit.ByteArrayPart byteArrayPart IApizrRequestOptions options Returns Type Description System.Threading.Tasks.Task <TApiResultData> UploadAsync(ByteArrayPart, String) Declaration [Multipart(\"----MyGreatBoundary\")] [Post(\"/{path}\")] [QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync(ByteArrayPart byteArrayPart, string path) Parameters Type Name Description Refit.ByteArrayPart byteArrayPart System.String path Returns Type Description System.Threading.Tasks.Task <TApiResultData> UploadAsync(ByteArrayPart, String, IApizrRequestOptions) Declaration [Multipart(\"----MyGreatBoundary\")] [Post(\"/{path}\")] [QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync(ByteArrayPart byteArrayPart, string path, [RequestOptions] IApizrRequestOptions options) Parameters Type Name Description Refit.ByteArrayPart byteArrayPart System.String path IApizrRequestOptions options Returns Type Description System.Threading.Tasks.Task <TApiResultData> UploadAsync(FileInfoPart) Declaration [Multipart(\"----MyGreatBoundary\")] [Post(\"\")] Task<TApiResultData> UploadAsync(FileInfoPart fileInfoPart) Parameters Type Name Description Refit.FileInfoPart fileInfoPart Returns Type Description System.Threading.Tasks.Task <TApiResultData> UploadAsync(FileInfoPart, IApizrRequestOptions) Declaration [Multipart(\"----MyGreatBoundary\")] [Post(\"\")] Task<TApiResultData> UploadAsync(FileInfoPart fileInfoPart, [RequestOptions] IApizrRequestOptions options) Parameters Type Name Description Refit.FileInfoPart fileInfoPart IApizrRequestOptions options Returns Type Description System.Threading.Tasks.Task <TApiResultData> UploadAsync(FileInfoPart, String) Declaration [Multipart(\"----MyGreatBoundary\")] [Post(\"/{filePath}\")] [QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync(FileInfoPart fileInfoPart, string filePath) Parameters Type Name Description Refit.FileInfoPart fileInfoPart System.String filePath Returns Type Description System.Threading.Tasks.Task <TApiResultData> UploadAsync(FileInfoPart, String, IApizrRequestOptions) Declaration [Multipart(\"----MyGreatBoundary\")] [Post(\"/{filePath}\")] [QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync(FileInfoPart fileInfoPart, string filePath, [RequestOptions] IApizrRequestOptions options) Parameters Type Name Description Refit.FileInfoPart fileInfoPart System.String filePath IApizrRequestOptions options Returns Type Description System.Threading.Tasks.Task <TApiResultData> UploadAsync(StreamPart) Declaration [Multipart(\"----MyGreatBoundary\")] [Post(\"\")] Task<TApiResultData> UploadAsync(StreamPart streamPart) Parameters Type Name Description Refit.StreamPart streamPart Returns Type Description System.Threading.Tasks.Task <TApiResultData> UploadAsync(StreamPart, IApizrRequestOptions) Declaration [Multipart(\"----MyGreatBoundary\")] [Post(\"\")] Task<TApiResultData> UploadAsync(StreamPart streamPart, [RequestOptions] IApizrRequestOptions options) Parameters Type Name Description Refit.StreamPart streamPart IApizrRequestOptions options Returns Type Description System.Threading.Tasks.Task <TApiResultData> UploadAsync(StreamPart, String) Declaration [Multipart(\"----MyGreatBoundary\")] [Post(\"/{path}\")] [QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync(StreamPart streamPart, string path) Parameters Type Name Description Refit.StreamPart streamPart System.String path Returns Type Description System.Threading.Tasks.Task <TApiResultData> UploadAsync(StreamPart, String, IApizrRequestOptions) Declaration [Multipart(\"----MyGreatBoundary\")] [Post(\"/{path}\")] [QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync(StreamPart streamPart, string path, [RequestOptions] IApizrRequestOptions options) Parameters Type Name Description Refit.StreamPart streamPart System.String path IApizrRequestOptions options Returns Type Description System.Threading.Tasks.Task <TApiResultData>"
  },
  "api/Apizr.WebApiAttribute.html": {
    "href": "api/Apizr.WebApiAttribute.html",
    "title": "Class WebApiAttribute | Apizr",
    "keywords": "Class WebApiAttribute Define general web api settings (could be defined with options builder) Inheritance System.Object System.Attribute WebApiAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Apizr Assembly : Apizr.dll Syntax [AttributeUsage(AttributeTargets.Interface)] public class WebApiAttribute : Attribute Constructors WebApiAttribute() Define a web api without any base absolute address or relative path (has to be defined fluently) but discoverable for auto registration Declaration public WebApiAttribute() WebApiAttribute(Boolean) Define a web api without any base absolute address or relative path (has to be defined fluently) and make it discoverable for auto registration or not Declaration public WebApiAttribute(bool isAutoRegistrable) Parameters Type Name Description System.Boolean isAutoRegistrable Makes decorated interface registrable by assembly scanning WebApiAttribute(String) Define a web api with a base absolute address or relative path (if path, base address has to be defined fluently) and discoverable for auto registration Declaration public WebApiAttribute(string baseAddressOrPath) Parameters Type Name Description System.String baseAddressOrPath The web api base absolute address or relative path WebApiAttribute(String, Boolean) Define a web api with a base absolute address or relative path (if path, base address has to be defined fluently) and make it discoverable for auto registration or not Declaration public WebApiAttribute(string baseAddressOrPath, bool isAutoRegistrable) Parameters Type Name Description System.String baseAddressOrPath The web api base absolute address or relative path System.Boolean isAutoRegistrable Makes decorated interface registrable by assembly scanning Properties BaseAddressOrPath The web api base absolute address or relative path Declaration public string BaseAddressOrPath { get; } Property Value Type Description System.String IsAutoRegistrable Makes decorated interface registrable by assembly scanning Declaration public bool IsAutoRegistrable { get; } Property Value Type Description System.Boolean"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Reference | Apizr",
    "keywords": "API Reference This API reference is auto generated by DocFX based on code summaries. Things may be missing so do not hesitate to let us know so that we can complete and fix it. Happy reading :)"
  },
  "articles/config.html": {
    "href": "articles/config.html",
    "title": "Configuring | Apizr",
    "keywords": "Configuring Many options could be set by attribute decoration. It allows you to use assembly scanning auto registration feature. Much more options could be set by fluent configuration. All fluent configuration flavors offer a contextualized options builder, depending on what you're asking and where. The option types: Proper: options available at api configuration level only and applied to it exclusively (e.g. BaseAddress obviously, ...) Common: options available at global configuration level only and applied to all registered apis (e.g. RefitSettings, PolicyRegistry, ...) Request: options available at request time, when actually sending a request (e.g. Context, CancellationToken, ...) There're also some Shared options available at different configuration level (e.g. LogLevel) Here is what using it with a registry, the extended way, could look like: public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizr( registry => registry .AddManagerFor<IReqResService>() .AddManagerFor<IHttpBinService>( options => options .WithLogging( HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Trace)) .AddCrudManagerFor<User, int, PagedResult<User>, IDictionary<string, object>>( options => options .WithBaseAddress(\"https://reqres.in/api/users\"))), config => config .WithPolicyRegistry(registry) .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); } And here is what we're saying in this example: Add a manager for IReqResService api interface into the registry, to register it into the container Add a manager for IHttpBinService api interface into the registry, to register it into the container Apply proper logging options dedicated to IHttpBinService's manager Add a manager for User entity with CRUD api interface and custom types into the registry, to register it into the container Apply proper address option dedicated to User's manager Apply common options to all managers by: Providing a policy registry Providing a cache handler Providing some logging settings (won't apply to IHttpBinService's manager as we set some specific ones) Note that fluent configuration almost allways wins over the attribute one (if both set) and the same for proper over common. For example, if you decorated your api interface with a Log attribute, but also set some common logging options fluently plus some proper logging options, the proper logging options will be applied to the api manager. But, if you decorated the api method itself instead of the interface with this Log attribute, it will win over all others :) Actualy, the closer the option is defined from the api method, the more chance it will have to be applied over all others. Are you still following? Don't worry! Every single option is detailed through this documentation, so let's browse it!"
  },
  "articles/config_address.html": {
    "href": "articles/config_address.html",
    "title": "Configuring base address | Apizr",
    "keywords": "Configuring base address You can configure base address either by attribute decoration or by fluent configuration. You can mix the configuration providing a base path by attribute and a base address/URI fluently. Attribute Fluent Configuring the base address by attribute allows you to use assembly scanning auto registration feature. Classic api You can set api interface base address or path thanks to the WebApi attribute like so: [WebApi(\"YOUR_API_INTERFACE_BASE_ADDRESS_OR_PATH/\")] public interface IYourApiInterface { // Your api interface methods } If you provided only a path, you must set the base address/URI fluently so that Apizr could merge it all together. Optional parameters: isAutoRegistrable (default: true) tells Apizr to include or not this specific interface while scanning assemblies for auto registration. It could be usefull when you ask for auto registration but want to do it fluently some specific interfaces. CRUD api You can set CRUD entity api base address thanks to the CrudEntity attribute like so: [CrudEntity(\"YOUR_CRUD_ENTITY_API_BASE_ADDRESS_OR_PATH_\")] public class YourCrudEntity { // Your CRUD entity properties } If you provided only a path, you must set the base address/URI fluently so that Apizr could merge it all together. Optional parameters: keyType : entity key type (default: null = typeof(int)) readAllResultType : ReadAll query result type (default: null = typeof(IEnumerable{})) readAllParamsType : ReadAll query parameters type (default: null = typeof(IDictionary{string, object})) modelEntityType : Model entity type mapped with this api entity type (default: null = decorated api entity type) Configuring the base address fluently allows you to set it dynamically (e.g. based on settings) You can set the base address or a base path thanks to these options: // Address options => options.WithBaseAddress(YourSettings.YourBaseAddress)) // Path options => options.WithBasePath(YourSettings.YourBasePath)) The extended world offers another option with a factory providing a service provider instance. It could help you to resolve the setting at runtime: // Address options => options.WithBaseAddress(serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().YourBaseAddress)) // Path options => options.WithBasePath(serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().YourBasePath)) In both cases, you can mix the configurations like providing a base path by attribute and a base address/URI fluently. WithBaseAddress and WithBasePath options are available at both common and specific configuration level, meanning that you can share a base address with several api interfaces and/or set a specific one for some others."
  },
  "articles/config_auth.html": {
    "href": "articles/config_auth.html",
    "title": "Configuring authentication | Apizr",
    "keywords": "Configuring authentication Apizr provides its own AuthenticationHandler to manage the authentication workflow . Defining As Apizr is based on Refit, you can decorate your authenticated apis like so (here with bearer authorization): namespace Apizr.Sample { [WebApi(\"https://httpbin.org/\")] public interface IHttpBinService { [Get(\"/bearer\")] [Headers(\"Authorization: Bearer\")] Task<HttpResponseMessage> AuthBearerAsync(); } } Configuring To activate this feature, you have to configure it thanks to the options builder: Static Extended options => options.WithAuthenticationHandler<YourSettingsService, YourSignInService>( YourSettingsServiceInstance, settingsService => settingsService.Token, YourSignInServiceInstance, signInService => signInService.SignInAsync) YourSettingsServiceInstance should be replaced by whatever settings manager instance of your choice YourSignInServiceInstance should be replaced by your service managing your login flow. options => options.WithAuthenticationHandler<ISettingsService, ISignInService>( settingsService => settingsService.Token, signInService => signInService.SignInAsync) settingsService is your service managing settings signInService is your service managing your login flow. Both services should be container registered as it will be resolved. In details: settingsService.Token should be a public string property, saved locally on device. signInService.SignInAsync should be a method taking an HttpRequestMessage parameter and returning a refreshed access token. More You may want to deal with authentication configuration in some other ways. Here are all other authentication options: Static Extended When you don't want Apizr to save the token into settings and want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler(OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler<YourSettingsService>( YourSettingsServiceInstance, settingsService => settingsService.Token, OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to provide the settings service by a factory and deal with the refresh token call with a method: options => options.WithAuthenticationHandler<YourSettingsService>( () => YourSettingsServiceInstance, settingsService => settingsService.Token, OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to provide both settings service and sign in service by a factory: options => options.WithAuthenticationHandler<YourSettingsService, YourSignInService>( () => YourSettingsServiceInstance, settingsService => settingsService.Token, () => YourSignInServiceInstance, signInService => signInService.SignInAsync) When you want to provide your own AuthenticationHandlerBase implementation: options => options.WithAuthenticationHandler<YourAuthenticationHandler>( (logger, options) => new YourAuthenticationHandler(...)) When you don't want Apizr to save the token into settings and want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler(OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler<ISettingsService>( settingsService => settingsService.Token, OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to provide your own AuthenticationHandlerBase implementation: options => options.WithAuthenticationHandler<YourAuthenticationHandler>( (serviceProvider, options) => new YourAuthenticationHandler(...)) Processing There's nothing more to deal with. Protected requests will be authenticated by Apizr, otherwise it will ask user to sign in. Anyway, here is the AuthenticationHandler's SendAsync method FYI: protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) { HttpRequestMessage clonedRequest = null; string token = null; var context = request.GetOrBuildPolicyExecutionContext(); if (!context.TryGetLogger(out var logger, out var logLevel, out _, out _)) { logger = _logger; logLevel = _apizrOptions.LogLevel; } // See if the request has an authorize header var auth = request.Headers.Authorization; if (auth != null) { // Authorization required! Get the token from saved settings if available logger?.Log(logLevel, $\"{context.OperationKey}: Authorization required with scheme {auth.Scheme}\"); token = GetToken(); if (!string.IsNullOrWhiteSpace(token)) { // We have one, then clone the request in case we need to re-issue it with a refreshed token logger?.Log(logLevel, $\"{context.OperationKey}: Saved token will be used\"); clonedRequest = await this.CloneHttpRequestMessageAsync(request); } else { // Refresh the token logger?.Log(logLevel, $\"{context.OperationKey}: No token saved yet. Refreshing token...\"); token = await this.RefreshTokenAsync(request).ConfigureAwait(false); } // Set the authentication header request.Headers.Authorization = new AuthenticationHeaderValue(auth.Scheme, token); logger?.Log(logLevel, $\"{context.OperationKey}: Authorization header has been set\"); } // Send the request logger?.Log(logLevel, $\"{context.OperationKey}: Sending request with authorization header...\"); var response = await base.SendAsync(request, cancellationToken).ConfigureAwait(false); // Check if we get an Unauthorized response with token from settings if (response.StatusCode == HttpStatusCode.Unauthorized && auth != null && clonedRequest != null) { logger?.Log(logLevel, $\"{context.OperationKey}: Unauthorized !\"); // Refresh the token logger?.Log(logLevel, $\"{context.OperationKey}: Refreshing token...\"); token = await this.RefreshTokenAsync(request).ConfigureAwait(false); // Set the authentication header with refreshed token clonedRequest.Headers.Authorization = new AuthenticationHeaderValue(auth.Scheme, token); logger?.Log(logLevel, $\"{context.OperationKey}: Authorization header has been set with refreshed token\"); // Send the request logger?.Log(logLevel, $\"{context.OperationKey}: Sending request again but with refreshed authorization header...\"); response = await base.SendAsync(clonedRequest, cancellationToken).ConfigureAwait(false); } // Clear the token if unauthorized if (response.StatusCode == HttpStatusCode.Unauthorized) { token = null; logger?.Log(logLevel, $\"{context.OperationKey}: Unauthorized ! Token has been cleared\"); } // Save the refreshed token if succeed or clear it if not this.SetToken(token); logger?.Log(logLevel, $\"{context.OperationKey}: Token saved\"); return response; } The workflow: We check if the request needs to be authenticated If so, we try to load a previously saved token If there’s one, we clone the request in case we need to re-issue it with a refreshed token (as token could be rejected server side) If there’s not, we ask for a refreshed one (launching your signin feature and waiting for the resulting token) We set the authentication header with the token We finally send the request We check if we get an Unauthorized response If so and if it was sent with a saved token, we ask for a refreshed one (launching your signin feature and waiting for the resulting token) We set the authentication header of the cloned request with the refreshed token We send the cloned request We save the token if succeed or clear it if not We return the response"
  },
  "articles/config_cancellation.html": {
    "href": "articles/config_cancellation.html",
    "title": "Configuring Cancellation | Apizr",
    "keywords": "Configuring Cancellation You may want to provide a CancellationToken, thanks to WithCancellation builder option, available at request time. // With static builder here but works the same with the extended one var reqResManager = ApizrBuilder.Current.CreateManagerFor<IReqResUserService>(); // Create your token source var cts = new CancellationTokenSource(); // Send the request with your token into options var users = await reqResManager.ExecuteAsync((options, api) => api.GetUsersAsync(options), options => options.WithCancellation(cts.Token)); You may notice that you don't have to pass the token itself directly to the request anymore. Just pass the resulting options insteed and everything will be wired for you. Don't forget to handle the exception."
  },
  "articles/config_connectivity.html": {
    "href": "articles/config_connectivity.html",
    "title": "Configuring Connectivity | Apizr",
    "keywords": "Configuring Connectivity Apizr can check network connectivity for you, right before sending any request. It will throw an ApizrException with an IOException as InnerException in case of network failure, which you can handle globally by showing a snack bar info or whatever. This way, your viewmodels are kept light and clear of it. With boolean factory You may want to provide just a simple boolean value to check connectivity. Here is the right option: Static Extended options => options.WithConnectivityHandler(() => YourConnectivityBoolean) // Boolean factory options => options.WithConnectivityHandler(serviceProvider => YourConnectivityBoolean) // Boolean expression factory options => options.WithConnectivityHandler<IYourRegisteredConnectivityService>(service => service.YourConnectivityBoolean) With Connectivity Handler You could also implement the IConnectivityHandler interface: public class YourConnectivityHandler : IConnectivityHandler { public bool IsConnected() { // Check connectivity here } } Then just register it with this option: Static Extended // direct configuration options => options.WithConnectivityHandler(YourConnectivityHandler) // OR factory configuration options => options.WithConnectivityHandler(() => YourConnectivityHandler) // direct configuration options => options.WithConnectivityHandler(YourConnectivityHandler) // OR factory configuration options => options.WithConnectivityHandler(serviceProvider => YourConnectivityHandler) // OR closed generic configuration options => options.WithConnectivityHandler<YourConnectivityHandler>() // OR type configuration options => options.WithConnectivityHandler(typeof(YourConnectivityHandler))"
  },
  "articles/config_context.html": {
    "href": "articles/config_context.html",
    "title": "Configuring Context | Apizr",
    "keywords": "Configuring Context You may want to provide a Polly Context, thanks to WithContext builder option, available at both register and request time. Registering Requesting Configuring a context at register time allows you to get a pre-defined one while requesting. WithContext builder option is available with or without using registry. It means that you can share a context globally by setting it at registry level and/or set some specific one at api level. As it's not recomended to share the same context instance between requests, WithContext registration option comes with a factory style. Here is a quite simple scenario: var reqResUserManager = ApizrBuilder.Current.CreateManagerFor<IReqResUserService>(options => options .WithContext(() => new Context { { testKey1, testValue1 } })); And here is a pretty complexe scenario: private Context FirstContextFactory() => new() { { testKey1, testValue1 } }; private Context SecondContextFactory() => new() { { testKey2, testValue2 } }; private Context ThirdContextFactory() => new() { { testKey3, testValue3 } }; var apizrRegistry = ApizrBuilder.Current.CreateRegistry(registry => registry .AddGroup(group => group .AddManagerFor<IReqResUserService>(options => options .WithContext(ThirdContextFactory)) .AddManagerFor<IReqResResourceService>(), options => options.WithContext(SecondContextFactory)) .AddManagerFor<IHttpBinService>() .AddCrudManagerFor<User, int, PagedResult<User>, IDictionary<string, object>>(), options => options.WithContext(FirstContextFactory)); Here I'm telling Apizr to: Merge all 3 context together and pass it while requesting with IReqResUserService api Merge first and second context and pass it while requesting with IReqResResourceService api Pass the first context while requesting with IHttpBinService api or User CRUD api Feel free to configure your context at the level of your choice, depending on your needs. You definitly can mix it all with request option context providing. Configuring a context at request time allows you to set it at the very end, just before sending the request. var reqResManager = apizrRegistry.GetManagerFor<IReqResUserService>(); var users = await reqResManager.ExecuteAsync(api => api.GetUsersAsync(), options => options.WithContext(() => new Context { { testKey4, testValue4 } })); You definitly can mix it with registration option context. You may notice that: strategy parameter let you adjust the behavior in case of mixing (default: Merge ): Ignore : if there's another context yet configured, ignore this one Add : add or merge this context with any yet configured ones Replace : replace all yet configured context by this one Merge : add or merge this context with any yet configured ones"
  },
  "articles/config_datacaching.html": {
    "href": "articles/config_datacaching.html",
    "title": "Configuring data caching | Apizr",
    "keywords": "Configuring data caching You may want to cache data returned from your API. Apizr could handle it for you by providing an ICachingHandler interface implementation to it. Fortunately, there are some integration Nuget packages to do so. Of course, you can implement your own integration, but here we'll talk about the provided ones. Please first install the integration package of your choice: Project Current Upcoming Apizr.Extensions.Microsoft.Caching Apizr.Integrations.Akavache Apizr.Integrations.MonkeyCache Where: Apizr.Extensions.Microsoft.Caching package brings an ICacheHandler implementation for MS Extensions Caching Apizr.Integrations.Akavache package brings an ICacheHandler implementation for Akavache Apizr.Integrations.MonkeyCache package brings an ICacheHandler implementation for MonkeyCache Warning Apizr.Extensions.Microsoft.Caching This integration package offers you to work with any of MS Extension Caching compatible caching engines. It means that you still have to install the one of your choice right after Apizr.Extensions.Microsoft.Caching. Defining Apizr comes with a Cache attribute which activate result data caching at any level (all Assembly apis, interface apis or specific api method). Here is classic api an example: namespace Apizr.Sample { [WebApi(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\"), Cache(CacheMode.GetAndFetch, \"01:00:00\")] Task<UserList> GetUsersAsync(); [Get(\"/users/{userId}\"), Cache(CacheMode.GetOrFetch, \"1.00:00:00\")] Task<UserDetails> GetUserAsync([CacheKey] int userId); } } You’ll find also cache attributes dedicated to CRUD apis like CacheRead and CacheReadAll , so you could define cache settings at any level (all Assembly apis, interface apis or specific CRUD method). Here is CRUD api an example: namespace Apizr.Sample.Models { [CrudEntity(\"https://reqres.in/api/users\", typeof(int), typeof(PagedResult<>))] [CacheReadAll(CacheMode.GetAndFetch, \"01:00:00\")] [CacheRead(CacheMode.GetOrFetch, \"1.00:00:00\")] public class User { [JsonProperty(\"id\")] public int Id { get; set; } [JsonProperty(\"first_name\")] public string FirstName { get; set; } [JsonProperty(\"last_name\")] public string LastName { get; set; } [JsonProperty(\"avatar\")] public string Avatar { get; set; } [JsonProperty(\"email\")] public string Email { get; set; } } } Both (classic and CRUD) define the same thing about cache life time and cache mode. Life time is actually a TimeSpan string representation which is parsed then. Its optional and if you don’t provide it, the default cache provider settings will be applyed. Cache mode could be set to: GetAndFetch (default): the result is returned from request if it succeed, otherwise from cache if there’s some data already cached. In this specific case of request failing, cached data will be wrapped with the original exception into an ApizrException thrown by Apizr, so don’t forget to catch it. GetOrFetch : the result is returned from cache if there’s some data already cached, otherwise from the request. In both cases, cached data is updated after each successful request call. You also can define global caching settings by decorating the assembly or interface, then manage specific scenarios at method level. Apizr will apply the lowest level settings it could find. Back to the example, we are saying: When getting all users, let’s admit we could have many new users registered each hour, so: Try to fetch it from web first if fetch failed, try to load it from previous cached result if fetch succeed, update cached data but make it expire after 1 hour When getting a specific user, let’s admit its details won’t change so much each day, so: Try to load it from cache first if no previous cached data or cache expired after 1 day, fetch it and update cached data but make it expire after 1 day Registering Please register the one corresponding to the package you just installed MS Extensions Caching As you can guess, MS Extensions Caching is available only with extended registration flavor. That said, you'll be able to register with one of the folowing options In-Memory Distributed // direct short configuration options => options.WithInMemoryCacheHandler() // OR closed type configuration options => options.WithCacheHandler<InMemoryCacheHandler>() // OR type configuration options => options.WithCacheHandler(typeof(InMemoryCacheHandler)) // OR direct configuration options => options.WithCacheHandler(new InMemoryCacheHandler(new YOUR_INMEMORY_CACHING_ENGINE())) // OR factory configuration with the service provider instance options => options.WithCacheHandler(serviceProvider => new InMemoryCacheHandler(serviceProvider.GetRequiredService<IMemoryCache>())) // direct short configuration options => options.WithDistributedCacheHandler<TCacheType>() // OR closed type configuration options => options.WithCacheHandler<DistributedCacheHandler<TCacheType>>() // OR type configuration options => options.WithCacheHandler(typeof(DistributedCacheHandler<TCacheType>)) // OR direct configuration options => options.WithCacheHandler(new DistributedCacheHandler<TCacheType>(new YOUR_DISTRIBUTED_CACHING_ENGINE())) // OR factory configuration options => options.WithCacheHandler(serviceProvider => new DistributedCacheHandler<TCacheType>( serviceProvider.GetRequiredService<IDistributedCache>(), serviceProvider.GetRequiredService<IHttpContentSerializer>())) Where TCacheType could be either string or byte[] , conforming to MS Extensions Distributed Cache definition. Warning Distributed cache Registering MS Extension Distributed Cache means that you have to install the distributed cache of your choice and register it too. Akavache You'll be able to register with one of the folowing options: Static Extended // direct short configuration options => options.WithAkavacheCacheHandler() // OR direct configuration options => options.WithCacheHandler(new AkavacheCacheHandler()) // OR factory configuration options => options.WithCacheHandler(() => new AkavacheCacheHandler()) // direct short configuration options => options.WithAkavacheCacheHandler() // OR closed type configuration options => options.WithCacheHandler<AkavacheCacheHandler>() // OR type configuration options => options.WithCacheHandler(typeof(AkavacheCacheHandler)) // OR direct configuration options => options.WithCacheHandler(new AkavacheCacheHandler()) // OR factory configuration options => options.WithCacheHandler(serviceProvider => new AkavacheCacheHandler()) Where most of it get overloads so you could set: blobCacheFactory : The factory to init the blob cache of your choice (default: LocalMachine) applicationName : The application name used by Akavache (default: ApizrAkavacheCacheHandler) MonkeyCache Start by initializing Barrel.ApplicationId as you used to do with MonkeyCache: Barrel.ApplicationId = \"YOUR_APPLICATION_NAME\"; Then you'll be able to register with one of the folowing options: Static Extended // direct configuration options => options.WithCacheHandler(new MonkeyCacheHandler(Barrel.Current)) // OR factory configuration options => options.WithCacheHandler(() => new MonkeyCacheHandler(Barrel.Current)) // closed type configuration options => options.WithCacheHandler<MonkeyCacheHandler>() // OR type configuration options => options.WithCacheHandler(typeof(MonkeyCacheHandler)) // OR direct configuration options => options.WithCacheHandler(new MonkeyCacheHandler(Barrel.Current)) // OR factory configuration options => options.WithCacheHandler(serviceProvider => new MonkeyCacheHandler(Barrel.Current)) Warning Barrel.Current If you don't provide Barrel.Current to the MonkeyCacheHandler, don't forget to register it into your DI container. Using Reading Using Apizr caching feature is just about catching exceptions like for example: IList<User>? users = null; try { var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync()); users = userList?.Data; } catch (ApizrException<UserList> e) { users = e.CachedResult?.Data; } finally { if (users != null && users.Any()) Users = new ObservableCollection<User>(users); } Here we catch an ApizrException<UserList> meaning that in case of exception, it will bring a typed object to you loaded from cache. Clearing You may need to clear cache. Remeber that cache will be cleared when it will expire, thanks to what you set within the Cache attribute. Anyway, sometime we need to clear it explicitly, like in a Refresh scenario. Here are different ways to clear cache: // Clear on call to force fetch and update cache var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync(), options => options.WithCacheClearing(true)); // Clear a specific request cache var succeed = await _reqResManager.ClearCacheAsync(api => api.GetUsersAsync()); // Clear all cache var succeed = await _reqResManager.ClearCacheAsync(); Clearing all cache of all managers of entire app could also be done thanks to your cache engine api."
  },
  "articles/config_datamapping.html": {
    "href": "articles/config_datamapping.html",
    "title": "Configuring data mapping | Apizr",
    "keywords": "Configuring data mapping You may need to map data between some API types and Model types, known as DTO design pattern. Apizr could handle it for you by providing an IMappingHandler interface implementation to it. Fortunately, there are some integration Nuget packages to do so. Of course, you can implement your own integration, but here we'll talk about the provided ones. Please first install this integration package of your choice: Project Current Upcoming Apizr.Integrations.AutoMapper Apizr.Integrations.Mapster Where: Apizr.Integrations.AutoMapper package brings an IMappingHandler implementation for AutoMapper Apizr.Integrations.Mapster package brings an IMappingHandler implementation for Mapster Defining AutoMapper As usually with AutoMapper, define your mapping profiles, like for example: public class UserMinUserProfile : Profile { public UserMinUserProfile() { CreateMap<User, MinUser>() .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.FirstName)); CreateMap<MinUser, User>() .ForMember(dest => dest.FirstName, opt => opt.MapFrom(src => src.Name)); } } Mapster No need to write your own DTO classes. Mapster provides Mapster.Tool to help you generating models. And if you would like to have explicit mapping, Mapster also generates mapper class for you. [AdaptTo(\"[name]Dto\"), GenerateMapper] public class Student { ... } Then Mapster will generate: public class StudentDto { ... } public static class StudentMapper { public static StudentDto AdaptToDto(this Student poco) { ... } public static StudentDto AdaptTo(this Student poco, StudentDto dto) { ... } public static Expression<Func<Student, StudentDto>> ProjectToDto => ... } But you can also write your own mapping configuration, like for example: TypeAdapterConfig<TSource, TDestination> .NewConfig() .Ignore(dest => dest.Age) .Map(dest => dest.FullName, src => string.Format(\"{0} {1}\", src.FirstName, src.LastName)); Advanced Warning Data Mapping with MediatR and/or Optional If you plan to use MediatR and/or Optional integrations, one more defining step has to be done. Only for those of you planning to use data mapping with MediatR and/or Optional , Apizr provide a MappedWith attribute telling it to map api object with model object. You’ll find another MappedCrudEntity attribute dedicated to CRUD apis, coming with auto-registration capabilities, in case of access restricted to only local client model. We could get a model class mapped to an api one like: [MappedWith(typeof(User))] public class MinUser { public int Id { get; set; } public string Name { get; set; } } Registering AutoMapper Static Extended First create a MapperConfiguration with your profiles: var mapperConfig = new MapperConfiguration(config => { config.AddProfile<UserMinUserProfile>(); config.AddProfile<WhateverProfile>(); }); Then you'll be able to register with this option: // direct short configuration options => options.WithAutoMapperMappingHandler(mapperConfig) // OR direct configuration options => options.WithMappingHandler(new AutoMapperMappingHandler(mapperConfig.CreateMapper())) // OR factory configuration options => options.WithMappingHandler(() => new AutoMapperMappingHandler(mapperConfig.CreateMapper())) First register AutoMapper as you used to do: services.AddAutoMapper(ASSEMBLIES_CONTAINING_PROFILES); Then you'll be able to register with this option: // direct short configuration options => options.WithAutoMapperMappingHandler() // OR direct configuration options => options.WithMappingHandler(new AutoMapperMappingHandler(YOUR_MAPPER_CONFIG)) // OR factory configuration options => options.WithMappingHandler(() => new AutoMapperMappingHandler(YOUR_MAPPER_CONFIG)) // OR factory configuration with the service provider instance options => options.WithMappingHandler(serviceProvider => new AutoMapperMappingHandler(YOUR_MAPPER_CONFIG)) // OR closed type configuration options => options.WithMappingHandler<AutoMapperMappingHandler>() // OR parameter type configuration options => options.WithMappingHandler(typeof(AutoMapperMappingHandler)) Mapster Static Extended Register with one of the following options: // direct short configuration options => options.WithMapsterMappingHandler(new Mapper()) // OR direct configuration options => options.WithMappingHandler(new AutoMapperMappingHandler(new Mapper())) // OR factory configuration options => options.WithMappingHandler(() => new AutoMapperMappingHandler(new Mapper())) First register Mapster as you used to do: var config = new TypeAdapterConfig(); // Or // var config = TypeAdapterConfig.GlobalSettings; services.AddSingleton(config); services.AddScoped<IMapper, ServiceMapper>(); Then you'll be able to register with this option: // direct short configuration options => options.WithMapsterMappingHandler() // OR closed type configuration options => options.WithMappingHandler<MapsterMappingHandler>() // OR parameter type configuration options => options.WithMappingHandler(typeof(MapsterMappingHandler)) Using You can tell Apizr to map data just by providing types when executing a request. Something like: var result = await reqResManager.ExecuteAsync<MinUser, User>((api, user) => api.CreateUser(user, CancellationToken.None), minUser); Here we give a MinUser typed object to Apizr, which will be mapped to User type just before sending it. Then Apizr will map the User typed result back to MinUser type just before returning it. There are much more overloads so you can map objects the way you need. The same while using MediatR and/or Optional ."
  },
  "articles/config_delegatinghandler.html": {
    "href": "articles/config_delegatinghandler.html",
    "title": "Configuring DelegatingHandlers | Apizr",
    "keywords": "Configuring DelegatingHandlers You can add DelegatingHandlers thanks to this option: Static Extended // direct configuration options => options.AddDelegatingHandler(YourDelegatingHandler) // OR factory configuration with the logger instance options => options.AddDelegatingHandler(logger => YourDelegatingHandler) // OR factory configuration with the logger and options instances options => options.AddDelegatingHandler((logger, options) => YourDelegatingHandler) // direct configuration options => options.AddDelegatingHandler(YourDelegatingHandler) // OR factory configuration with the service provider instance options => options.AddDelegatingHandler(serviceProvider => YourDelegatingHandler) // OR factory configuration with the service provider and options instances options => options.AddDelegatingHandler((serviceProvider, options) => YourDelegatingHandler) Warning Inner DelegatingHandler Don't manage delegating handlers hierarchy by yourself, providing any inner handlers. Instead, just add your handlers thanks to the AddDelegatingHandler option the order you want and Apizr will do it for you."
  },
  "articles/config_exceptions.html": {
    "href": "articles/config_exceptions.html",
    "title": "Configuring Exception handling | Apizr",
    "keywords": "Configuring Exception handling Using Try/Catch Here is an example of how to send a web request from an app - e.g. using Apizr in a Xamarin.Forms mobile app. Inject IApizrManager<IYourDefinedInterface> where you need it - e.g. into your ViewModel constructor IList<User>? users; try { var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync()); users = userList.Data; } catch (ApizrException<UserList> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); We catch any ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw an IO inner exception without sending the request. Using Action<Exception> Instead of trycatching all the things, you may want to provide an exception handling action, thanks to WithExCatching builder option, available at both register and request time. You can set it thanks to this option: // direct configuration options => options.WithExCatching(OnException) Registering Requesting Configuring an exception handler at register time allows you to get some Global Exception Handling concepts right in place. WithExCatching builder option is available with or without using registry. It means that you can share your exception handler globally by setting it at registry level and/or set some specific one at api level. Here is a quite simple scenario: var reqResUserManager = ApizrBuilder.Current.CreateManagerFor<IReqResUserService>(options => options .WithExCatching(OnException)); private void OnException(ApizrException ex) { // this is a global exception handler // called back in case of exception thrown // while requesting with IReqResUserService managed api } And here is a pretty complexe scenario: var apizrRegistry = ApizrBuilder.Current.CreateRegistry(registry => registry .AddGroup(group => group .AddManagerFor<IReqResUserService>(options => options .WithExCatching(OnReqResUserException, strategy: ApizrDuplicateStrategy.Add)) .AddManagerFor<IReqResResourceService>(), options => options.WithExCatching(OnReqResException, strategy: ApizrDuplicateStrategy.Add)) .AddManagerFor<IHttpBinService>() .AddCrudManagerFor<User, int, PagedResult<User>, IDictionary<string, object>>(), options => options.WithExCatching(OnException, strategy: ApizrDuplicateStrategy.Add)); private void OnException(ApizrException ex) { // this is a global exception handler // called back in case of exception thrown // while requesting with any managed api from the registry } private void OnReqResException(ApizrException ex) { // this is a group exception handler // called back in case of exception thrown // while requesting with any managed api from the group } private void OnReqResUserException(ApizrException ex) { // this is a dedicated exception handler // called back in case of exception thrown // while requesting with a specific managed api } Here I'm telling Apizr to: Call back all exception handlers in case of any exception thrown while requesting with IReqResUserService api Call back OnReqResException and OnException handlers in case of any exception thrown while requesting with IReqResResourceService api Call back only OnException handler in case of any exception thrown while requesting with IHttpBinService api or User CRUD api Feel free to configure your exception handlers at the level of your choice, depending on your needs. You definitly can mix it all with request option exception handling. Configuring an exception handler at request time allows you to set it at the very end, just before sending the request, like trycatching does. var reqResManager = apizrRegistry.GetManagerFor<IReqResUserService>(); var users = await reqResManager.ExecuteAsync((options, api) => api.GetUsersAsync(options), options => options.WithExCatching(OnGetUsersException, strategy: ApizrDuplicateStrategy.Add)); private void OnGetUsersException(ApizrException<ApiResult<User>> ex) { // this is a dedicated exception handler // called back in case of exception thrown // while requesting with a specific managed api } Here I'm telling Apizr in case of exception while resting to: Call back any other registered exception handlers if any, thanks to Add duplicate strategy Call back OnGetUsersException (e.g. to display a dedicated message or something) Return result from cache to users if any You definitly can mix it with registration option exception handling. You may notice that: strategy parameter let you adjust the behavior in case of mixing (default: Replace ): Ignore : if there's another handler yet configured, ignore this one Add : add/queue this handler, no matter of yet configured ones Replace : replace all yet configured handlers by this one Merge : add/queue this handler, no matter of yet configured ones letThrowOnExceptionWithEmptyCache parameter tells Apizr to throw the actual exception if there's no cached data to return Using Optional.Async Here is how we could handle exceptions using Optional.Async: var optionalUserList = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()); optionalPagedResult.Match(userList => { if (userList.Data != null && userList.Data.Any()) Users = new ObservableCollection<User>(userList.Data); }, e => { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); if (e.CachedResult?.Data != null && e.CachedResult.Data.Any()) Users = new ObservableCollection<User>(e.CachedResult.Data); }); Optional is pretty cool when trying to handle nullables and exceptions, but what if we still want to write it shorter to get our request done and managed with as less code as possible. Even if we use the typed optional mediator or typed crud optional mediator to get things shorter, we still have to deal with the result matching boilerplate. Fortunately, Apizr provides some dedicated extensions to help getting things as short as we can with exceptions handled. With OnResultAsync OnResultAsync ask you to provide one of these parameters: Action<TResult> onResult : this action will be invoked just before throwing any exception that might have occurred during request execution csharp await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .OnResultAsync(userList => { users = userList?.Data; }); Func<TResult, ApizrException<TResult>, bool> onResult : this function will be invoked with the returned result and potential occurred exception await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .OnResultAsync((userList, exception) => { users = userList?.Data; if(exception != null) throw exception; return true; }); Func<TResult, ApizrException<TResult>, Task<bool>> onResult : this function will be invoked async with the returned result and potential occurred exception var success = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .OnResultAsync((userList, exception) => { users = userList?.Data; return exception != null; }); All give you a result returned from fetch if succeed, or cache if failed (if configured). The main goal here is to set any binded property with the returned result (fetched or cached), no matter of exceptions. Then the Action will let the exception throw, where the Func will let you decide to throw manually or return a success boolean flag. Of course, remember to catch throwing exceptions. With CatchAsync CatchAsync let you provide these parameters: Action<Exception> onException : this action will be invoked just before returning the result from cache if fetch failed. Useful to inform the user of the api call failure and that data comes from cache. letThrowOnExceptionWithEmptyCache : True to let it throw the inner exception in case of empty cache, False to handle it with onException action and return empty cache result (default: False) This one returns result from fetch or cache (if configured), no matter of potential exception handled on the other side by an action callback var userList = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .CatchAsync(AsyncErrorHandler.HandleException, true); Here we ask the api to get users and if it fails: There’s some cached data? AsyncErrorHandler will handle the exception like to inform the user that call just failed Apizr will return the previous result from cache There’s no cached data yet! letThrowOnExceptionWithEmptyCache is True? (which is the case here) Apizr will throw the inner exception that will be catched further by AsyncErrorHander (this is its normal behavior) letThrowOnExceptionWithEmptyCache is False! (default) Apizr will return the empty cache data (null) which has to be handled then One line of code to get all the thing done safely and shorter than ever!"
  },
  "articles/config_httpclient.html": {
    "href": "articles/config_httpclient.html",
    "title": "Configuring HttpClient | Apizr",
    "keywords": "Configuring HttpClient Static Extended You can provide your own HttpClient thanks to this option: options => options.WithHttpClient((httpMessageHandler, baseUri) => new YourOwnHttpClient(httpMessageHandler, false){BaseAddress = baseUri}); You can configure HttpClient by its Builder thanks to this option: options => options.ConfigureHttpClientBuilder(httpClientBuilder => httpClientBuilder.WhateverOption()) Warning HttpClient Apizr makes use of HttpClient so keep in mind that you may override some of its features depending of what you're trying to do with it. Use with caution."
  },
  "articles/config_httpclienthandler.html": {
    "href": "articles/config_httpclienthandler.html",
    "title": "Configuring HttpClientHandler | Apizr",
    "keywords": "Configuring HttpClientHandler You can provide your own HttpClientHandler thanks to this option: Static Extended // direct configuration options => options.WithHttpClientHandler(YourOwnHttpClientHandler) // OR factory configuration options => options.WithHttpClientHandler(() => YourOwnHttpClientHandler) // direct configuration options => options.WithHttpClientHandler(YourOwnHttpClientHandler) // OR factory configuration options => options.WithHttpClientHandler(serviceProvider => YourOwnHttpClientHandler)"
  },
  "articles/config_logger.html": {
    "href": "articles/config_logger.html",
    "title": "Configuring logger | Apizr",
    "keywords": "Configuring logger Apizr v4+ relies on Microsoft.Extensions.Logging, which relies on any compatible logger of your choice. Apizr comes with a quite simple built-in Debug logger by default, but you'd better provide your own obviously. You can configure logger only by fluent configuration. Static Extended You can set logger configuration thanks to this option: options => options.WithLoggerFactory(LoggerFactory.Create(loggingBuilder => { loggingBuilder.AddConsole(); loggingBuilder.AddDebug(); })) LoggerFactory.Create method is provided by Microsoft.Extensions.Logging which lets you add any compatible logger. There's nothing specific to do with Apizr about logger when using the extended approach. Just don't forget to configure it like you usualy do: loggingBuilder.AddConsole() wherever in your app you get access to ILoggingBuilder ."
  },
  "articles/config_logging.html": {
    "href": "articles/config_logging.html",
    "title": "Configuring logging | Apizr",
    "keywords": "Configuring logging You can adjust logging configuration with: httpTracerMode (default: Everything ) Http traffic tracing mode: ExceptionsOnly logs only when an exception occurs ErrorsAndExceptionsOnly logs only when an exception or any error occurs Everything logs all, anytime trafficVerbosity (default: All ) Http traffic tracing verbosity (see HttpTracer), with: None RequestBody RequestHeaders RequestCookies RequestAll = RequestBody | RequestHeaders | RequestCookies ResponseBody ResponseHeaders ResponseAll = ResponseBody | ResponseHeaders All = ResponseAll | RequestAll logLevels (default: [Low] Trace , [Medium] Information and [High] Critical ) Log levels to apply while writing logs (see Microsoft.Enxtension.Logging), with: Trace Debug Information Warning Error Critical None Note that parameter logLevels is an array. It lets you provide from 0 to 3 different levels, as Apizr needs to get corresponding log level to each internal severity: Low: logs any internal and normal execution step Medium: logs all missconfigured things, like asking for cache without providing any cache provider High: logs errors and exceptions Obviously, providing more than 3 log levels would be pointlees. It means that: if you don't provide any log level at all, default levels will be applied ([Low] Trace , [Medium] Information and [High] Critical ) if you provide only 1 log level like Information , it will be applied to all log entries ([Low] Information , [Medium] Information and [High] Information ). Up to you to catch exceptions and to log it at any level of your choice. if you provide only 2 log levels like Debug and Error , the lowest will be applied to both Low and Medium ([Low] Debug , [Medium] Debug and [High] Error ) if you provide 3 log levels like Debug , Warning and Critical , it will be applied like you said ([Low] Debug , [Medium] Warning and [High] Critical ) if you provide more than 3 log levels, the lowest goes to Low, the highest to High and it will take the middle one for Medium if you provide a None at some point, it will disable logging for corresponding severity You can configure logging at: Design time by attribute decoration Register time by fluent configuration Request time by fluent configuration. Designing Registering Requesting You can set logging configuration at design time, decorating with the provided Log attribute. Configuring logging with attribute allows you to use assembly scanning auto registration feature. The Log attribute could decorate: Assembly: to set logging configuration to all assembly api interfaces/entities Interface/Class: to set logging configuration to all request methods of the decorated api interface/entity Method: to set logging configuration to a specific request method of an api interface or entity (with dedicated attribtes) You also can mix decoration levels to set a common logging configuration to all assembly api interfaces, and/or a specific to all api interface methods, and/or a specific to an api interface method. [assembly:Log] namespace Apizr.Sample { [WebApi(\"https://reqres.in/\"), Log(HttpMessageParts.RequestAll, HttpTracerMode.ErrorsAndExceptionsOnly, LogLevel.Information)] public interface IReqResService { [Get(\"/api/users\"), Log(HttpMessageParts.RequestBody, HttpTracerMode.ExceptionsOnly, LogLevel.Warning)] Task<UserList> GetUsersAsync(); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId); [Post(\"/api/users\")] Task<User> CreateUser(User user); } } In this example, we decided to apply the default logging configuration ([Low] Trace , [Medium] Information and [High] Critical ) to all assembly api interfaces/entities. But you can adjust logging configuration thanks to attribute parameters. Configuring the logging fluently at register time allows you to set it dynamically (e.g. based on settings) You can set it thanks to this option: // direct configuration options => options.WithLogging(HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Information) // OR static individual factory configuration options => options.WithLogging(() => Settings.HttpTracerMode, () => Settings.TrafficVerbosity, () => Settings.LogLevels) // OR static single factory configuration options => options.WithLogging(() => (Settings.HttpTracerMode, Settings.TrafficVerbosity, Settings.LogLevels)) // OR extended individual factory configuration options => options.WithLogging( serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().HttpTracerMode, serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().TrafficVerbosity serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().LogLevels) // OR extended single factory configuration options => options.WithLogging(servieProvider => { var settings = servieProvider.GetRequiredService<IYourSettingsService>(); return (settings.HttpTracerMode, settings.TrafficVerbosity, settings.LogLevels); }); All logging fluent options are available with and without using registry. It means that you can share logging configuration, setting it at registry level and/or set some specific one at api level. Configuring the logging fluently at request time allows you to set it at the very end, just before sending the request. You can set it thanks to this option: // direct configuration options => options.WithLogging(HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Information) Note that you can mix design, register and request time logging configurations. In case of mixed configurations, the internal duplicate strategy will be to take the closest one to the request. Logging configuration duplicate strategy order: take fluent request configuration first if defined (request options) otherwise the request attribute decoration one (method) otherwise the fluent proper resgistration one (api proper options) otherwise the api attribute decoration one (interface) otherwise the fluent common resgistration one (registry common options) otherwise the global attribute decoration one (assembly)"
  },
  "articles/config_mediatr.html": {
    "href": "articles/config_mediatr.html",
    "title": "Configuring MediatR | Apizr",
    "keywords": "Configuring MediatR Apizr offers an integration with MediatR , following the Mediator pattern , available only with the extended approach. Mediator pattern ensures to keep all the thing as loosely coupled as we can between our ViewModel/ViewControler and our Data Access Layer. As everything should be loosely coupled between Views and ViewModels (MVVM) or ViewControlers (MVC) thanks to data binding, MediatR offers you to keep it all loosely coupled between your VM/VC and your DAL too. Please read the official documentation to know more about MediatR. The main benefit in using it with Apizr is to offer you a very simple and unified way to send your request, no matter from where or about what. Simple and unified because instead of injecting/resolving each api interface you need to get your data, you just have to use the IMediator interface, everywhere, every time. Registering Please first install this integration package: Project Current Upcoming Apizr.Integrations.MediatR Then you'll be able to register with this option: options => options.WithMediation() And don't forget to register MediatR itself as usual: services.AddMediatR(YOUR_REQUESTHANDLER_ASSEMBLIES); Where YOUR_REQUESTHANDLER_ASSEMBLIES should be the assemblies containing your custom request handlers, if you get some (Apizr MediatR request handlers will be auto registered). Using IMediator IApizrMediator IApizrMediator<TWebApi> When registered, you don't have to inject/resolve anything else than IMediator , in order to play with your api services (both classic and crud). Everything you need to do then, is sending your request by calling: var result = await _mediator.Send(YOUR_REQUEST_HERE); Where YOUR_REQUEST_HERE could be: Classic API: With no result: ExecuteUnitRequest<TWebApi> : execute any method from TWebApi ExecuteUnitRequest<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData mapped with TApiData With result: ExecuteResultRequest<TWebApi, TApiData> : execute any method from TWebApi with a TApiData request/result data ExecuteResultRequest<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData request/result data mapped with TApiData ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : execute any method from TWebApi , sending TApiRequestData mapped from TModelRequestData , then returning TModelResultData mapped from TApiResultData CRUD API: Read: ReadQuery<TResultData> : get the TResultData entity matching an int key ReadQuery<TResultData, TKey> : get the TResultData entity matching a TKey ReadAll: ReadAllQuery<TReadAllResult> : get TReadAllResult with IDictionary<string, object> optional query parameters ReadAllQuery<TReadAllParams, TReadAllResult> : get TReadAllResult with TReadAllParams optional query parameters Create: CreateCommand<TModelData> : create a TModelData entity Update: UpdateCommand<TRequestData> : update the TRequestData entity matching an int key UpdateCommand<TKey, TRequestData> : update the TRequestData entity matching a TKey Delete: DeleteCommand<T> : delete the T entity matching an int key DeleteCommand<T, TKey> : delete the T entity matching a TKey Writting things shorter, instead of injecting/resolving IMediator , you could do it with IApizrMediator or IApizrCrudMediator . Everything you need to do then, is sending your request by calling something like: // Classic var result = await _apizrMediator.SendFor<TWebApi>(YOUR_API_METHOD_HERE); // OR CRUD var result = await _apizrCrudMediator.SendReadAllQuery<TReadAllResult>(); Classic mediator methods: No result: SendFor<TWebApi> : execute any method from TWebApi SendFor<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TWebApi, TApiData> : execute any method from TWebApi with a TApiData request/result data SendFor<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : execute any method from TWebApi , sending TApiRequestData mapped from TModelRequestData , then returning TModelResultData mapped from TApiResultData CRUD mediator methods: Read: SendReadQuery<TApiEntity, TApiEntityKey> : get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey> : get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery<TReadAllResult> : get TReadAllResult with IDictionary<string, object> optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult> : get TModelReadAllResult mapped from TApiReadAllResult SendReadAllQuery<TReadAllResult, TReadAllParams> : get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams> : get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand<TApiEntity> : create a TApiEntity SendCreateCommand<TModelEntity, TApiEntity> : create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand<TApiEntity, TApiEntityKey> : update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey> : update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand<TApiEntity, TApiEntityKey> : delete the TApiEntity matching a TApiEntityKey Writting things shorter than ever, instead of injecting/resolving IMediator , IApizrMediator or IApizrCrudMediator , you could do it with IApizrMediator<TWebApi> or IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> . Tip Apizr Registry Note that if you were using the registry feature while configuring, you'll be able to inject/resolve IApizrMediationRegistry instead and then just get an IApizrMediator<TWebApi> or IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> thanks to its Get methods. Everything you need to do then, is sending your request by calling something like: // Classic var result = await _apizrMediator.SendFor(YOUR_API_METHOD_HERE); // OR CRUD var result = await _apizrCrudMediator.SendReadAllQuery(); Classic typed mediator methods: No result: SendFor : execute any method from TWebApi SendFor<TModelData, TApiData> : execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TApiData> : execute any method from TWebApi with a TApiData request/result data SendFor<TModelData, TApiData> : execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : execute any method from TWebApi , sending TApiRequestData mapped from TModelRequestData , then returning TModelResultData mapped from TApiResultData CRUD typed mediator methods: Read: SendReadQuery : get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity> : get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery : get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult> : get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand : create a TApiEntity SendCreateCommand<TModelEntity> : create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand : update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity> : update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand : delete the TApiEntity matching a TApiEntityKey"
  },
  "articles/config_optional.html": {
    "href": "articles/config_optional.html",
    "title": "Configuring Optional.Async | Apizr",
    "keywords": "Configuring Optional.Async Apizr offers an integration with Optional.Async , following the Optional pattern , available only with the extended approach with MediatR integration activated. Optional.Async offers a strongly typed alternative to null values that lets you: Avoid those pesky null-reference exceptions Signal intent and model your data more explicitly Cut down on manual null checks and focus on your domain It allows you to chain Task<Option<T>> and Task<Option<T, TException>> without having to use await Registering Please first install this integration package: Project Current Upcoming Apizr.Integrations.Optional Then you'll be able to register with this option: options => options.WithOptionalMediation() And don't forget to register MediatR itself as usual: services.AddMediatR(YOUR_REQUESTHANDLER_ASSEMBLIES); Where YOUR_REQUESTHANDLER_ASSEMBLIES should be the assemblies containing your custom request handlers, if you get some (Apizr MediatR request handlers will be auto registered). Using IMediator IApizrOptionalMediator IApizrOptionalMediator<TWebApi> When registered, you don't have to inject/resolve anything else than IMediator , in order to play with your api services (both classic and crud). Everything you need to do then, is sending your request by calling: var optionalResult = await _mediator.Send(YOUR_REQUEST_HERE); Where YOUR_REQUEST_HERE could be: Classic API: With no result: ExecuteOptionalUnitRequest<TWebApi> : execute any method from TWebApi ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData mapped with TApiData With result: ExecuteOptionalResultRequest<TWebApi, TApiData> : execute any method from TWebApi with a TApiData request/result data ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData request/result data mapped with TApiData ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : execute any method from TWebApi , sending TApiRequestData mapped from TModelRequestData , then returning TModelResultData mapped from TApiResultData CRUD API: Read: ReadOptionalQuery<TResultData> : get the TResultData entity matching an int key ReadOptionalQuery<TResultData, TKey> : get the TResultData entity matching a TKey ReadAll: ReadAllOptionalQuery<TReadAllResult> : get TReadAllResult with IDictionary<string, object> optional query parameters ReadAllOptionalQuery<TReadAllParams, TReadAllResult> : get TReadAllResult with TReadAllParams optional query parameters Create: CreateOptionalCommand<TModelData> : create a TModelData entity Update: UpdateOptionalCommand<TRequestData> : update the TRequestData entity matching an int key UpdateOptionalCommand<TKey, TRequestData> : update the TRequestData entity matching a TKey Delete: DeleteOptionalCommand<T> : delete the T entity matching an int key DeleteOptionalCommand<T, TKey> : delete the T entity matching a TKey Writting things shorter, instead of injecting/resolving IMediator , you could do it with IApizrMediator or IApizrCrudMediator . Everything you need to do then, is sending your request by calling something like: // Classic var optionalResult = await _apizrOptionalMediator.SendFor<TWebApi>(YOUR_API_METHOD_HERE); // OR CRUD var optionalResult = await _apizrOptionalCrudMediator.SendReadAllQuery<TReadAllResult>(); Classic Optional mediator methods: No result: SendFor<TWebApi> : execute any method from TWebApi SendFor<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TWebApi, TApiData> : execute any method from TWebApi with a TApiData request/result data SendFor<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : execute any method from TWebApi , sending TApiRequestData mapped from TModelRequestData , then returning TModelResultData mapped from TApiResultData CRUD Optional mediator methods: Read: SendReadQuery<TApiEntity, TApiEntityKey> : get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey> : get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery<TReadAllResult> : get TReadAllResult with IDictionary<string, object> optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult> : get TModelReadAllResult mapped from TApiReadAllResult SendReadAllQuery<TReadAllResult, TReadAllParams> : get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams> : get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand<TApiEntity> : create a TApiEntity SendCreateCommand<TModelEntity, TApiEntity> : create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand<TApiEntity, TApiEntityKey> : update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey> : update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand<TApiEntity, TApiEntityKey> : delete the TApiEntity matching a TApiEntityKey Writting things shorter than ever, instead of injecting/resolving IMediator , IApizrOptionalMediator or IApizrCrudOptionalMediator , you could do it with IApizrOptionalMediator<TWebApi> or IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> . Tip Apizr Registry Note that if you were using the registry feature while configuring, you'll be able to inject/resolve IApizrOptionalMediationRegistry instead and then just get an IApizrOptionalMediator<TWebApi> or IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> thanks to its GetFor and GetCrudFor methods. Everything you need to do then, is sending your request by calling something like: // Classic var optionalResult = await _apizrOptionalMediator.SendFor(YOUR_API_METHOD_HERE); // OR CRUD var optionalResult = await _apizrCrudOptionalMediator.SendReadAllQuery(); Classic Optional typed mediator methods: No result: SendFor : execute any method from TWebApi SendFor<TModelData, TApiData> : execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TApiData> : execute any method from TWebApi with a TApiData request/result data SendFor<TModelData, TApiData> : execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : execute any method from TWebApi , sending TApiRequestData mapped from TModelRequestData , then returning TModelResultData mapped from TApiResultData CRUD typed mediator methods: Read: SendReadQuery : get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity> : get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery : get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult> : get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand : create a TApiEntity SendCreateCommand<TModelEntity> : create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand : update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity> : update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand : delete the TApiEntity matching a TApiEntityKey You should finaly end with something like: optionalResult.Match(result => { // Oh yeah, you get a result! }, e => { // Oh no, something went wrong! });"
  },
  "articles/config_policies.html": {
    "href": "articles/config_policies.html",
    "title": "Configuring Policies | Apizr",
    "keywords": "Configuring Policies Apizr comes with a Policy attribute to apply some policies on apis, handled by Polly . You’ll find also policy attributes dedicated to CRUD apis like CreatePolicy , ReadPolicy and so on… Polly will help you to manage some retry scenarios but can do more. Please refer to its official documentation if you’d like to know more about it. Registering Here is how to define a policy, adding it to a policy registry. var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }, LoggedPolicies.OnLoggedRetry).WithPolicyKey(\"TransientHttpError\") } }; TransiantHttpError policy is actually provided by Polly itself, so we jsut call its HttpPolicyExtensions.HandleTransientHttpError() method. We're also giving here an OnLoggedRetry method provided by Apizr, so we coud get some logging outputs when Polly comes in the party in case of handled failures. PolicyRegistry is where you register all your named policies to be used by Polly thanks to attribute decoration, TransiantHttpError is just an example. Now we have to register our policy registry: Static Extended You'll be able to register your policy registry with this option: // direct configuration options => options.WithPolicyRegistry(registry) // OR factory configuration options => options.WithPolicyRegistry(() => registry) There's nothing specific to do with Apizr about Polly when using the extended approach. Just don't forget to register it like you usualy do: services.AddPolicyRegistry(registry); Defining Now we can use it thanks to attribute decoration: [assembly:Policy(\"TransientHttpError\")] namespace Apizr.Sample { [WebApi(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\")] Task<UserList> GetUsersAsync(); } } Here we are using it at assembly level, telling Apizr to apply TransiantHttpError policy to all apis. You can mix levels and mix policies as all will be wrapped. Using Apizr will automatically tell Polly to handle request of any decorated api method."
  },
  "articles/config_priority.html": {
    "href": "articles/config_priority.html",
    "title": "Configuring Priority | Apizr",
    "keywords": "Configuring Priority Apizr could use Fusillade to offer some api priority management on calls. To be short, Fusillade is about: Auto-deduplication of relevant requests Request Limiting Request Prioritization Speculative requests Please refer to its official documentation if you’d like to know more about it. Installing Please first install this integration package: Project Current Upcoming Apizr.Integrations.Fusillade You can configure priority at: Design time by attribute decoration Register time by fluent configuration Request time by fluent configuration Designing Registering Requesting The first thing to do while designing your api interfaces using Apizr to send a request, is to add an IApizrRequestOptions param decorated with the provided RequestOptions attribute to your methods like: [WebApi(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\")] Task<UserList> GetUsersAsync([RequestOptions] IApizrRequestOptions options); [Get(\"/users/{userId}\")] Task<UserDetails> GetUserAsync(int userId, [RequestOptions] IApizrRequestOptions options); } This way you'll make sure to pass your priority to the priority handler, defined thanks to request options builder at request time. Another way to deal with priority at design time is to use the PriorityAttribute : [assembly:Priority(Priority.UserInitiated)] namespace Your.Namespace { [WebApi(\"https://reqres.in/api\"), Priority(Priority.Background)] public interface IReqResService { [Get(\"/users\"), Priority(Priority.Speculative)] Task<UserList> GetUsersAsync([RequestOptions] IApizrRequestOptions options); [Get(\"/users/{userId}\")] Task<UserDetails> GetUserAsync(int userId, [RequestOptions] IApizrRequestOptions options); } } Here I'm saying: Send all requests of all apis with a default UserInitiated priority (the assembly one) Excepted for all the requests of the IReqResService with a Background priority instead (the interface one) Excepted for any GetUsersAsync request with a Speculative priority instead (the method one) Of course, you could (should) mix it with the RequestOptions method parameter implementation, so you could change your mind at request time with the request options builder. Designing your apis using PriorityAttribute or not, you still have to activate priority management at register time. By activating it, you're free to provide a priority or not. Here is how to activate it, thanks to the WithPriority extension method: // activation configuration only options => options.WithPriority() // activation with default priority configuration options => options.WithPriority(Priority.Background) // activation with default custom priority configuration options => options.WithPriority(70) All priority fluent options are available with and without using registry. It means that you can share priority configuration, setting it at registry level and/or set some specific one at api level, something like: var apizrRegistry = ApizrBuilder.Current.CreateRegistry(registry => registry .AddGroup(group => group .AddManagerFor<IReqResUserService>(options => options .WithPriority(Priority.UserInitiated)) .AddManagerFor<IReqResResourceService>(), options => options.WithPriority(Priority.Background)) .AddManagerFor<IHttpBinService>() .AddCrudManagerFor<User, int, PagedResult<User>, IDictionary<string, object>>(options => options .WithBaseAddress(\"https://reqres.in/api/users\") .WithPriority(Priority.Speculative)), options => options.WithPriority()); In this quite complexe example, we can see we defined some default priorities to apply at deferent levels. Just call your api with your priority thanks to the request options builder (extension method): var result = await _reqResManager.ExecuteAsync((opt, api) => api.GetUsersAsync(opt), options => options.WithPriority(Priority.Background)); Note that you can mix design, register and request time priority configurations. In case of mixed configurations, the internal duplicate strategy will be to take the closest one to the request. Priority configuration duplicate strategy order: take fluent request configuration first if defined (request options) otherwise the request attribute decoration one (method) otherwise the fluent proper resgistration one (api proper options) otherwise the api attribute decoration one (interface) otherwise the fluent common resgistration one (registry common options) otherwise the global attribute decoration one (assembly)"
  },
  "articles/config_refitsettings.html": {
    "href": "articles/config_refitsettings.html",
    "title": "Configuring RefitSettings | Apizr",
    "keywords": "Configuring RefitSettings You can set RefitSettings thanks to this option: Static Extended // direct configuration options => options.WithRefitSettings(YourOwnRefitSettings) // OR factory configuration options => options.WithRefitSettings(() => YourOwnRefitSettings) // direct configuration options => options.WithRefitSettings(YourOwnRefitSettings) // OR factory configuration options => options.WithRefitSettings(serviceProvider => YourOwnRefitSettings) Warning AuthorizationHeaderValue Apizr provides its own AuthenticationHandler to manage authorization (see Configuring > Authentication). There's no need to use AuthorizationHeaderValue properties."
  },
  "articles/config_transfer.html": {
    "href": "articles/config_transfer.html",
    "title": "Configuring file transfer | Apizr",
    "keywords": "Configuring file transfer Apizr could extend its core features with file transfer management thanks to a dedicated integration package. Once installed, you'll be able to: Register upload, download or transfer (both) managers Upload files with dedicated methods Download files with dedicated methods Track transfer progress with a dedicated progress handler Installing Please first install one of these integration packages, depending of your needs: Project Registration Current Upcoming Apizr.Integrations.FileTransfer Static Apizr.Extensions.Microsoft.FileTransfer MS Extensions Apizr.Integrations.FileTransfer.MediatR MS Extensions with MediatR Apizr.Integrations.FileTransfer.Optional MS Extensions with MediatR & Optional Designing File Transfer package comes with some built-in apis son you don't have to create it yourself. Here is what the provided apis look like then: Upload Download Transfer public interface IUploadApi<TApiResultData> : ITransferApiBase { #region ByteArrayPart [Multipart] [Post(\"\")] Task<TApiResultData> UploadAsync(ByteArrayPart byteArrayPart); [Multipart] [Post(\"/{path}\"), QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync(ByteArrayPart byteArrayPart, string path); [Multipart] [Post(\"\")] Task<TApiResultData> UploadAsync(ByteArrayPart byteArrayPart, [RequestOptions] IApizrRequestOptions options); [Multipart] [Post(\"/{path}\"), QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync(ByteArrayPart byteArrayPart, string path, [RequestOptions] IApizrRequestOptions options); #endregion #region StreamPart [Multipart] [Post(\"\")] Task<TApiResultData> UploadAsync(StreamPart streamPart); [Multipart] [Post(\"/{path}\"), QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync(StreamPart streamPart, string path); [Multipart] [Post(\"\")] Task<TApiResultData> UploadAsync(StreamPart streamPart, [RequestOptions] IApizrRequestOptions options); [Multipart] [Post(\"/{path}\"), QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync(StreamPart streamPart, string path, [RequestOptions] IApizrRequestOptions options); #endregion #region FileInfoPart [Multipart] [Post(\"\")] Task<TApiResultData> UploadAsync(FileInfoPart fileInfoPart); [Multipart] [Post(\"/{filePath}\"), QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync(FileInfoPart fileInfoPart, string filePath); [Multipart] [Post(\"\")] Task<TApiResultData> UploadAsync(FileInfoPart fileInfoPart, [RequestOptions] IApizrRequestOptions options); [Multipart] [Post(\"/{filePath}\"), QueryUriFormat(UriFormat.Unescaped)] Task<TApiResultData> UploadAsync(FileInfoPart fileInfoPart, string filePath, [RequestOptions] IApizrRequestOptions options); #endregion } public interface IUploadApi : IUploadApi<HttpResponseMessage> { } The Upload api offers you the choice between ByteArray, Stream or FileInfo sources. You can set your own return type or use the default HttpResponseMessage one. filePath is an unesacped uri file path optionaly provided at request time, in case you want to use the same api for different uris. public interface IDownloadApi<in TDownloadParams> : ITransferApiBase { [Get(\"/{filePathOrName}\"), QueryUriFormat(UriFormat.Unescaped), Cache(CacheMode.None)] Task<HttpResponseMessage> DownloadAsync(string filePathOrName); [Get(\"/{filePathOrName}\"), QueryUriFormat(UriFormat.Unescaped), Cache(CacheMode.None)] Task<HttpResponseMessage> DownloadAsync(string filePathOrName, [RequestOptions] IApizrRequestOptions options); [Get(\"/{filePathOrName}\"), QueryUriFormat(UriFormat.Unescaped), Cache(CacheMode.None)] Task<HttpResponseMessage> DownloadAsync(string filePathOrName, TDownloadParams downloadParams); [Get(\"/{filePathOrName}\"), QueryUriFormat(UriFormat.Unescaped), Cache(CacheMode.None)] Task<HttpResponseMessage> DownloadAsync(string filePathOrName, TDownloadParams downloadParams, [RequestOptions] IApizrRequestOptions options); } public interface IDownloadApi : IDownloadApi<IDictionary<string, object>> { } The Download api could be used with IDictionary<string, object> parameter type by default thanks to IDownloadApi or any provided custom type thanks to IDownloadApi<TDownloadParams> . If you don't need it you'll definitly be able to ignore it. filePathOrName is an unesacped uri file path provided at request time, so you could use the same api for different uris. public interface ITransferApi<in TDownloadParams, TUploadApiResultData> : IDownloadApi<TDownloadParams>, IUploadApi<TUploadApiResultData> { } public interface ITransferApi : ITransferApi<IDictionary<string, object>, HttpResponseMessage>, IDownloadApi, IUploadApi { } The Transfer api inherits from both the upload and the download one, in case you want to deal with the both of it from the same api. One may have only one transfer endpoint with no dynamic path to deal with, so there's nothing more to design here. Other may have several transfer endpoints or some dynamic paths to deal with: feeling confortable with setting it at request time, so there's nothing more to design here. preferring getting a dedicated api with preconfigured base uri, so he should: create his own named and blank api interface make sure to inherit from one of the above apis define its base uri thanks to the WebApi attribute decoration Registering Designing your custom transfer apis or using the built-in ones directly, you still have to register you apis. Where you could register it as we used to do it with any other apis, FileTransfer package comes with some wrapping managers helping you to get things short and simple. Note Upload/Download/Transfer Following exemples use the Transfer manager but you definitly can use the Upload or the Download ones insteed. Registering a single manager Static Extended MediatR Optional // register the built-in transfer api var transferManager = ApizrBuilder.Current.CreateTransferManager( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")); // Or register the built-in transfer api with custom types var transferManager = ApizrBuilder.Current.CreateTransferManagerWith<MyDownloadParamType, MyUploadResultType>( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")); // OR register a custom transfer api var transferManager = ApizrBuilder.Current.CreateTransferManagerFor<ITransferSampleApi>(); Here you go with your Transfer manager instance. // register the built-in transfer api services.AddApizrTransferManager( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")); // OR register the built-in transfer api with custom types services.AddApizrTransferManagerWith<MyDownloadParamType, MyUploadResultType>( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")); // OR register a custom transfer api services.AddApizrTransferManagerFor<ITransferSampleApi>(); Then, get your Transfer manager instance by resolving/injecting IApizrTransferManager for the built-in one or IApizrTransferManager<TCustomApi> for the custom one. // register the built-in transfer api services.AddApizrTransferManager( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\") .WithFileTransferMediation()); // OR register the built-in transfer api with custom types services.AddApizrTransferManagerWith<MyDownloadParamType, MyUploadResultType>( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\") .WithFileTransferMediation()); // OR register a custom transfer api services.AddApizrTransferManagerFor<ITransferSampleApi>( options => options.WithFileTransferMediation()); Then, get an Apizr mediator instance by resolving/injecting IApizrMediator to send some transfer requests. // register the built-in transfer api services.AddApizrTransferManager( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\") .WithFileTransferOptionalMediation()); // OR register the built-in transfer api with custom types services.AddApizrTransferManagerWith<MyDownloadParamType, MyUploadResultType>( options => options.WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\") .WithFileTransferOptionalMediation()); // OR register a custom transfer api services.AddApizrTransferManagerFor<ITransferSampleApi>( options => options.WithFileTransferOptionalMediation()); Then, get an Apizr optional mediator instance by resolving/injecting IApizrOptionalMediator to send some transfer requests returning optional results. Registering multiple managers Static Extended MediatR Optional var apizrRegistry = ApizrBuilder.Current.CreateRegistry(registry => registry // Built-in api .AddTransferManager(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Built-in api with custom types .AddTransferManagerWith<MyDownloadParamType, MyUploadResultType>(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Custom api .AddTransferManagerFor<ITransferSampleApi>()); Then, get your Transfer manager instance by calling: // for the built-in transfer api var transferManager = apizrRegistry.GetTransferManager(); // OR for a custom transfer api var transferManager = apizrRegistry.GetTransferManagerFor<ITransferSampleApi>(); services.AddApizr(registry => registry // Built-in api .AddTransferManager(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Built-in api with custom types .AddTransferManagerWith<MyDownloadParamType, MyUploadResultType>(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Custom api .AddTransferManagerFor<ITransferSampleApi>()); Then, get your Transfer manager instance directly by resolving/injecting IApizrTransferManager for the built-in one or IApizrTransferManager<TCustomApi> for the custom one. You otherwise can resolve/inject IApizrExtendedRegistry to get the regisrty instance itself and then get your Transfer manager instance by calling: // for the built-in transfer api var transferManager = apizrRegistry.GetTransferManager(); // OR for the built-in transfer api with custom types var transferManager = apizrRegistry.GetTransferManagerWith<MyDownloadParamType, MyUploadResultType>(); // OR for a custom transfer api var transferManager = apizrRegistry.GetTransferManagerFor<ITransferSampleApi>(); services.AddApizr(registry => registry // Built-in api .AddTransferManager(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Built-in api with custom types .AddTransferManagerWith<MyDownloadParamType, MyUploadResultType>(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Custom api .AddTransferManagerFor<ITransferSampleApi>(), config => config.WithFileTransferMediation()); Then, get an Apizr mediator instance by resolving/injecting IApizrMediator to send some transfer requests. For more info about MediatR intergration, see Configuring MediatR . services.AddApizr(registry => registry // Built-in api .AddTransferManager(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Built-in api with custom types .AddTransferManagerWith<MyDownloadParamType, MyUploadResultType>(options => options .WithBaseAddress(\"YOUR_API_BASE_ADDRESS_HERE\")) // Custom api .AddTransferManagerFor<ITransferSampleApi>(), config => config.WithFileTransferOptionalMediation()); Then, get an Apizr optional mediator instance by resolving/injecting IApizrOptionalMediator to send some transfer requests returning optional results. For more info about Optional.Async intergration, see Configuring Optional.Async . You definitly can group registrations if needed like illustrated into the Getting started . Note that auto registration thanks to assembly scanning is not yet available for this package. Requesting Static Extended MediatR Optional Once you get an instance of your manager, here is how to play with it: var transferResult = await transferManager.DownloadAsync( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); Note that if you're in that case where you need to set a custom path dynamically at request time, here is how to do that: var transferResult = await transferManager.DownloadAsync(new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\"), options => options.WithDynamicPath(\"YOUR_DYNAMIC_PATH_HERE\")); If you registered with the registry, some provided shortcut methods could help you to write things without the need of the manager. You can call download or upload methods directly from the registry itself. // for the built-in transfer api var transferResult = await registry.DownloadAsync( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); // OR for the built-in transfer api with custom param type var transferResult = await registry.DownloadWithAsync<MyDownloadParamType>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\"), myDownloadParams); // OR for a custom transfer api var transferResult = await registry.DownloadAsync<ITransferSampleApi>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); Once you get an instance of your manager by resolving/injecting IApizrTransferManager for the built-in one or IApizrTransferManager<TCustomApi> for the custom one, here is how to play with it: var transferResult = await transferManager.DownloadAsync( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); Note that if you're in that case where you need to set a custom path dynamically at request time, here is how to do that: var transferResult = await transferManager.DownloadAsync(new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\"), options => options.WithDynamicPath(\"YOUR_DYNAMIC_PATH_HERE\")); If you registered with the registry, some provided shortcut methods could help you to write things without the need of the manager. You can call download or upload methods directly from the registry itself. // for the built-in transfer api var transferResult = await registry.DownloadAsync( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); // OR for the built-in transfer api with custom param type var transferResult = await registry.DownloadWithAsync<MyDownloadParamType>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\"), myDownloadParams); // OR for a custom transfer api var transferResult = await registry.DownloadAsync<ITransferSampleApi>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); Once you get an Apizr mediator instance by resolving/injecting IApizrMediator , here is how to play with it: // for the built-in transfer api var transferResult = await apizrMediator.SendDownloadQuery( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); // OR for the built-in transfer api with custom param type var transferResult = await apizrMediator.SendDownloadWithQuery<MyDownloadParamType>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\"), myDownloadParams); // OR for a custom transfer api var transferResult = await apizrMediator.SendDownloadQuery<ITransferSampleApi>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); For more info about MediatR intergration, see Configuring MediatR . Once you get an Apizr optional mediator instance by resolving/injecting IApizrOptionalMediator , here is how to play with it: // for the built-in transfer api var transferOptionalResult = await apizrOptionalMediator.SendDownloadOptionalQuery( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); // OR for the built-in transfer api with custom param type var transferResult = await apizrMediator.SendDownloadWithOptionalQuery<MyDownloadParamType>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\"), myDownloadParams); // OR for a custom transfer api var transferOptionalResult = await apizrOptionalMediator.SendDownloadOptionalQuery<ITransferSampleApi>( new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); For more info about Optional.Async intergration, see Configuring Optional.Async . Tracking progress This package can let you track any progress while downloading or uploading a file. First, create an ApizrProgress instance like so: var progress = new ApizrProgress(); progress.ProgressChanged += (sender, args) => { // Do whatever you want when progress reported var percentage = args.ProgressPercentage; }; From here, you may want to track all transfer requests globally or some of it locally when ask for. Globally Locally Just provide your ApizrProgress instance with options builder at registration time: options => options.WithProgress(progress); And that's it, you'll be notified when any transfer progress of any transfer request occcured, like for: var fileInfo = await transferManager.DownloadAsync(new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\")); You have to tell Apizr that you want to track progress with options builder at registration time: options => options.WithProgress() Then you can track progress of any transfer request of your choice, by providing your ApizrProgress instance with options builder at request time: var fileInfo = await transferManager.DownloadAsync(new FileInfo(\"YOUR_FILE_FULL_NAME_HERE\"), options => options.WithProgress(progress));"
  },
  "articles/gettingstarted_classic.html": {
    "href": "articles/gettingstarted_classic.html",
    "title": "Defining | Apizr",
    "keywords": "Defining We could define our web api service just like: [assembly:Policy(\"TransientHttpError\")] namespace Apizr.Sample { [WebApi(\"https://reqres.in/\"), Cache, Log] public interface IReqResService { [Get(\"/api/users\")] Task<UserList> GetUsersAsync(); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId); [Post(\"/api/users\")] Task<User> CreateUser(User user); } } And that's all. Every attributes here will inform Apizr on how to manage each web api request. No more boilerplate. Actually, you should consider to add a special parameter called RequestOptions to each methods, allowing some option adjustments later at request time: [assembly:Policy(\"TransientHttpError\")] namespace Apizr.Sample { [WebApi(\"https://reqres.in/\"), Cache, Log] public interface IReqResService { [Get(\"/api/users\")] Task<UserList> GetUsersAsync([RequestOptions] IApizrRequestOptions options); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId, [RequestOptions] IApizrRequestOptions options); [Post(\"/api/users\")] Task<User> CreateUser(User user, [RequestOptions] IApizrRequestOptions options); } } Registering It's not required to register anything in a container for DI purpose (you can use the returned static instance directly), but we'll describe here how to use it with DI anyway. Registering a single interface Static Extended Here is an example of how to register a managed instance of an api interface: // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; // Apizr registration myContainer.RegistrationMethodFactory(() => ApizrBuilder.Current.CreateManagerFor<IReqResService>(options => options .WithPolicyRegistry(registry) .WithAkavacheCacheHandler()) ); We provided a policy registry and a cache handler here as we asked for it with cache and policy attributes while designing the api interface. Also, you could use the manager directly instead of registering it. Here is an example of how to register a managed api interface: public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizrManagerFor<IReqResService>(options => options.WithAkavacheCacheHandler()); } We registered a policy registry and provided a cache handler here as we asked for it with cache and policy attributes while designing the api interface. Registering multiple interfaces You may want to register multiple managed api interfaces within the same project. Also, you may want to share some common configuration between apis without repeating yourself, but at the same time, you may need to set some specific ones for some of it. This is where the ApizrRegistry comes on stage. Single common configuration Here is an example of how to register a managed instance of multiple api interfaces, sharing a single common configuration: Static Extended // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; // Apizr registry var apizrRegistry = ApizrBuilder.Current.CreateRegistry( registry => registry .AddManagerFor<IReqResService>() .AddManagerFor<IHttpBinService>( options => options .WithLogging( HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Trace)), config => config .WithPolicyRegistry(registry) .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); // Container registration apizrRegistry.Populate((type, factory) => myContainer.RegistrationMethodFactory(type, factory) ); Here is what we're saying in this example: Add a manager for IReqResService api interface into the registry Add a manager for IHttpBinService api interface into the registry Set some specific logging settings dedicated to IHttpBinService's manager Apply common configuration to all managers by: Providing a policy registry Providing a cache handler Providing some logging settings (won't apply to IHttpBinService's manager as we set some specific ones) It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Also, you could register the registry itslef, instead of its populated managers and then use its managers directly. Or, you could use the managers directly from the registry instead of registering anything. public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizr( registry => registry .AddManagerFor<IReqResService>() .AddManagerFor<IHttpBinService>( options => options .WithLogging( HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Trace)), config => config .WithPolicyRegistry(registry) .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); } Here is what we're saying in this example: Add a manager for IReqResService api interface into the registry, to register it into the container Add a manager for IHttpBinService api interface into the registry, to register it into the container Set some specific logging settings dedicated to IHttpBinService's manager Apply common configuration to all managers by: Providing a policy registry Providing a cache handler Providing some logging settings (won't apply to IHttpBinService's manager as we set some specific ones) It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Of course, each managers will be regitered into the container so that you can use it directly. Also, the registry itslef will be registered into the container, so you could resolve it to get its managers, instead of resolving each managers. Here is how to get a manager from the registry: var reqResManager = apizrRegistry.GetManagerFor<IReqResService>(); var httpBinManager = apizrRegistry.GetManagerFor<IHttpBinService>(); Multiple common configurations Here is an example of how to register a managed instance of multiple api interfaces, sharing multiple common configurations at different group level. It could be usefull when requesting mutliple apis (multiple base address) comming with multiple endpoints (multiple base path). Static Extended // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; // Apizr registry var apizrRegistry = ApizrBuilder.Current.CreateRegistry( registry => registry .AddGroup( group => group .AddManagerFor<IReqResUserService>( config => config.WithBasePath(\"users\")) .AddManagerFor<IReqResResourceService>( config => config.WithBasePath(\"resources\")), config => config.WithBaseAddress(\"https://reqres.in/api\")) .AddManagerFor<IHttpBinService>( config => config.WithBaseAddress(\"https://httpbin.org\")), config => config .WithPolicyRegistry(registry) .WithAkavacheCacheHandler() .WithLogging(HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); // Container registration apizrRegistry.Populate((type, factory) => myContainer.RegistrationMethodFactory(type, factory) ); Here is what we're saying in this example: Add a manager for IReqResUserService api interface into the registry with a common base address ( https://reqres.in/api ) and a specific base path (users) Add a manager for IReqResResourceService api interface into the registry with a common base address ( https://reqres.in/api ) and a specific base path (resources) Add a manager for IHttpBinService api interface into the registry with a speific base address ( https://httpbin.org ) Apply common configuration to all managers by: Providing a policy registry Providing a cache handler Providing some logging settings It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry/group. You can add mutliple group at the same level and go deeper with group into group itself. Also, you could register the registry itslef, instead of its populated managers and then use its managers directly. Or, you could use the managers directly from the registry instead of registering anything. public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizr( registry => registry .AddGroup( group => group .AddManagerFor<IReqResUserService>( config => config.WithBasePath(\"users\")) .AddManagerFor<IReqResResourceService>( config => config.WithBasePath(\"resources\")), config => config.WithBaseAddress(\"https://reqres.in/api\")) .AddManagerFor<IHttpBinService>( config => config.WithBaseAddress(\"https://httpbin.org\")), config => config .WithPolicyRegistry(registry) .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); } Here is what we're saying in this example: Add a manager for IReqResUserService api interface into the registry with a common base address ( https://reqres.in/api ) and a specific base path (users), to register it into the container Add a manager for IReqResResourceService api interface into the registry with a common base address ( https://reqres.in/api ) and a specific base path (resources), to register it into the container Add a manager for IHttpBinService api interface into the registry with a speific base address ( https://httpbin.org ), to register it into the container Apply common configuration to all managers by: Providing a policy registry Providing a cache handler Providing some logging settings It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. You can add mutliple group at the same level and go deeper with group into group itself. Of course, each managers will be regitered into the container so that you can use it directly. Also, the registry itslef will be registered into the container, so you could use it to get its managers, instead of using each managers. Here's how to get a manager from the registry: var reqResUserManager = apizrRegistry.GetManagerFor<IReqResUserService>(); var reqResResourceManager = apizrRegistry.GetManagerFor<IReqResResourceService>(); var httpBinManager = apizrRegistry.GetManagerFor<IHttpBinService>(); Registering all scanned interfaces Static Extended Not available. Here is an example of how to auto register all scanned interfaces: public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizrManagerFor(options => options.WithAkavacheCacheHandler(), ASSEMBLIES_CONTAINING_INTERFACES); } Apizr will scan assemblies to auto register managers for decorated api interfaces. We registered a policy registry and provided a cache handler here as we asked for it with cache and policy attributes while designing the api interface. Using Here is an example of how to send a web request from an app - e.g. using Apizr in a Xamarin.Forms mobile app. Inject IApizrManager<IYourDefinedInterface> where you need it - e.g. into your ViewModel constructor public class YourViewModel { private readonly IApizrManager<IReqResService> _reqResManager; //private readonly IApizrRegistry _apizrRegistry; public YouViewModel(IApizrManager<IReqResService> reqResManager) // OR registry injection //public YouViewModel(IApizrRegistry apizrRegistry) { _reqResManager = reqResManager; // OR registry injection //_apizrRegistry = apizrRegistry; // Or registry injection AND getting the manager //_reqResManager = apizrRegistry.GetManagerFor<IReqResService>(); } public ObservableCollection<User>? Users { get; set; } private async Task GetUsersAsync() { IList<User>? users; try { var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync()); // OR with dedicated registry shortcut extension // var userList = await _apizrRegistry.ExecuteAsync<IReqResService>(api => api.GetUsersAsync()); // OR with some option adjustments // var userList = await _reqResManager.ExecuteAsync((options, api) => api.GetUsersAsync(options), // options => options.WithPriority(Priority.Background)); users = userList.Data; } catch (ApizrException<UserList> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); } } We catch any ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw an IO inner exception without sending the request."
  },
  "articles/gettingstarted_crud.html": {
    "href": "articles/gettingstarted_crud.html",
    "title": "Defining | Apizr",
    "keywords": "Defining As we'll use the built-in yet defined ICrudApi, there's no more definition to do. Here is what the provided interface looks like then: public interface ICrudApi<T, in TKey, TReadAllResult, in TReadAllParams> where T : class { [Post(\"\")] Task<T> Create([Body] T payload); [Post(\"\")] Task<T> Create([Body] T payload, [RequestOptions] IApizrRequestOptions options); [Get(\"\")] Task<TReadAllResult> ReadAll(); [Get(\"\")] Task<TReadAllResult> ReadAll([RequestOptions] IApizrRequestOptions options); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [RequestOptions] IApizrRequestOptions options); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [RequestOptions] IApizrRequestOptions options); [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload); [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload, [RequestOptions] IApizrRequestOptions options); [Delete(\"/{key}\")] Task Delete(TKey key); [Delete(\"/{key}\")] Task Delete(TKey key, [RequestOptions] IApizrRequestOptions options); } We can see that it comes with or without request options, allowing some option adjustments later at request time. About generic types: T and TKey (optional - default: int ) meanings are obvious TReadAllResult (optional - default: IEnumerable<T> ) is there to handle cases where ReadAll doesn't return an IEnumerable<T> or derived, but a paged result with some statistics TReadAllParams (optional - default: IDictionary<string, object> ) is there to handle cases where you don't want to provide an IDictionary<string, object> for a ReadAll reaquest, but a custom class But again, nothing to do around here. Registering It's not mandatory to register anything in a container for DI purpose (you can use the returned static instance directly), but we'll describe here how to use it with DI anyway. Registering a single interface Static Extended Here is an example of how to register a managed instance of the CRUD api interface: // Apizr registration myContainer.RegistrationMethod(() => ApizrBuilder.Current.CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(options => options .WithBaseAddress(\"your specific T entity crud base uri\")) ); T must be a class. TKey must be primitive. If you don't provide it here, it will be defined as int . TReadAllResult must inherit from IEnumerable<> or be a class. If you don't use paged result, just don't provide any TReadAllResult here and it will be defined as IEnumerable<T> . TReadAllParams must be a class. If you don't use a custom class holding your query parameters, just don't provide any TReadAllParams here and it will be defined as IDictionary<string, object> . You have to provide the specific entity crud base uri with the options builder (if you don't plan to use entity crud attribute). Also, you could use the manager directly instead of registering it. Here is an example of how to register a managed CRUD api interface: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(options => options .WithBaseAddress(\"your specific T entity crud base uri\")); } Again, T must be a class. TKey must be primitive. If you don't provide it here, it will be defined as int . TReadAllResult must inherit from IEnumerable<> or be a class. If you don't use paged result, just don't provide any TReadAllResult here and it will be defined as IEnumerable<T> . TReadAllParams must be a class. If you don't use a custom class holding your query parameters, just don't provide any TReadAllParams here and it will be defined as IDictionary<string, object> . You have to provide the specific entity crud base uri with the options builder (if you don't plan to use entity crud attribute). Registering multiple interfaces You may want to register multiple managed api interfaces within the same project. Also, you may want to share some common configuration between apis without repeating yourself, but at the same time, you may need to set some specific ones for some of it. This is where the ApizrRegistry comes on stage. Single common configuration Here is an example of how to register a managed instance of multiple api interfaces, sharing a single common configuration: Static Extended // Apizr registry var apizrRegistry = ApizrBuilder.Current.CreateRegistry( registry => registry .AddCrudManagerFor<T1>( options => options.WithBaseAddress(\"your specific T1 entity crud base uri\") .AddCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>( options => options.WithBaseAddress(\"your specific T2 entity crud base uri\"), config => config .WithAkavacheCacheHandler() ); // Container registration apizrRegistry.Populate((type, factory) => myContainer.RegistrationMethodFactory(type, factory) ); Here is what we're saying in this example: Add a manager for T1 entity with CRUD api interface and default types into the registry Set a specific address dedicated to T1's manager Add a manager for T2 entity with CRUD api interface and custom types into the registry Set a specific address dedicated to T2's manager Apply common configuration to all managers by: Providing a cache handler It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Also, you could register the registry itslef, instead of its populated managers and then use its managers directly. Or, you could use the managers directly from the registry instead of registering anything. Here's how to get a manager from the registry: // T1 with default registered types var t1Manager = apizrRegistry.GetCrudManagerFor<T1>(); // T2 with custom registered types var t2Manager = apizrRegistry.GetCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>(); public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizr( registry => registry .AddCrudManagerFor<T1>( options => options.WithBaseAddress(\"your specific T1 entity crud base uri\") .AddCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>( options => options.WithBaseAddress(\"your specific T2 entity crud base uri\"), config => config .WithAkavacheCacheHandler() ); } Here is what we're saying in this example: Add a manager for T1 entity with CRUD api interface and default types into the registry, to register it into the container Set a specific address dedicated to T1's manager Add a manager for T2 entity with CRUD api interface and custom types into the registry, to register it into the container Set a specific address dedicated to T2's manager Apply common configuration to all managers by: Providing a cache handler It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Of course, each managers will be regitered into the container so that you can use it directly. Also, the registry itslef will be registered into the container, so you could use it to get its managers, instead of using each managers. Here's how to get a manager from the registry: // T1 with default registered types var t1Manager = apizrRegistry.GetCrudManagerFor<T1>(); // T2 with custom registered types var t2Manager = apizrRegistry.GetCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>(); Multiple common configurations Here is an example of how to register a managed instance of multiple api interfaces, sharing multiple common configurations at different group level. It could be usefull when requesting mutliple apis (multiple base address) comming with multiple endpoints (multiple base path). Static Extended // Apizr registry var apizrRegistry = ApizrBuilder.Current.CreateRegistry( registry => registry .AddGroup( group => group .AddCrudManagerFor<T1>( config => config.WithBasePath(\"t1\") .AddCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>( config => config.WithBasePath(\"t2\"), config => config.WithBaseAddress(\"https://crud.io/api\")) .AddCrudManagerFor<T3>( config => config.WithBaseAddress(\"https://crud.com/api\"), config => config.WithAkavacheCacheHandler() ); // Container registration apizrRegistry.Populate((type, factory) => myContainer.RegistrationMethodFactory(type, factory) ); Here is what we're saying in this example: Add a manager for T1 entity with CRUD api interface and default types into the registry Set a common base address ( https://crud.io/api ) dedicated to T1's manager Set a specific base path (t1) dedicated to T1's manager Add a manager for T2 entity with CRUD api interface and custom types into the registry Set a common base address ( https://crud.io/api ) dedicated to T2's manager Set a specific base path (t1) dedicated to T2's manager Add a manager for T3 entity with CRUD api interface and default types into the registry Set a specific base address ( https://crud.com/api ) dedicated to T3's manager Apply common configuration to all managers by: Providing a cache handler It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry/group. You can add mutliple group at the same level and go deeper with group into group itself. Also, you could register the registry itslef, instead of its populated managers and then use its managers directly. Or, you could use the managers directly from the registry instead of registering anything. public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizr( registry => registry .AddGroup( group => group .AddCrudManagerFor<T1>( config => config.WithBasePath(\"t1\") .AddCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>( config => config.WithBasePath(\"t2\"), config => config.WithBaseAddress(\"https://crud.io/api\")) .AddCrudManagerFor<T3>( config => config.WithBaseAddress(\"https://crud.com/api\"), config => config.WithAkavacheCacheHandler() ); } Here is what we're saying in this example: Add a manager for T1 entity with CRUD api interface and default types into the registry, to register it into the container Set a common base address ( https://crud.io/api ) dedicated to T1's manager Set a specific base path (t1) dedicated to T1's manager Add a manager for T2 entity with CRUD api interface and custom types into the registry, to register it into the container Set a common base address ( https://crud.io/api ) dedicated to T2's manager Set a specific base path (t1) dedicated to T2's manager Add a manager for T3 entity with CRUD api interface and default types into the registry, to register it into the container Set a specific base address ( https://crud.com/api ) dedicated to T3's manager Apply common configuration to all managers by: Providing a cache handler It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry/group. You can add mutliple group at the same level and go deeper with group into group itself. Of course, each managers will be regitered into the container so that you can use it directly. Also, the registry itslef will be registered into the container, so you could use it to get its managers, instead of using each managers. Here's how to get a manager from the registry: // T1 with default registered types var t1Manager = apizrRegistry.GetCrudManagerFor<T1>(); // T2 with custom registered types var t2Manager = apizrRegistry.GetCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>(); // T3 with default registered types var t3Manager = apizrRegistry.GetCrudManagerFor<T3>(); Registering all scanned interfaces Static Extended Not available. You need to have access to your entity model classes for this option. Decorate your crud entities like so (but with your own settings): [CrudEntity(\"https://mybaseuri.com/api/myentity\", typeof(int), typeof(PagedResult<>), typeof(ReadAllUsersParams))] public class MyEntity { [JsonPropertyName(\"id\")] public int Id { get; set; } ... } Thanks to this attribute: (Mandatory) We have to provide the specific entity crud base uri (no more fluent declaration) (Optional) We can set TKey type to any primitive type (default to int) (Optional) We can set TReadAllResult to any class or must inherit from IEnumerable<> (default to IEnumerable<T> ) (Optional) We can set TReadAllParams to any class (default to IDictionary<string, object> ) Then, here is a registration example: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrCrudManagerFor(options => options.WithAkavacheCacheHandler(), ASSEMBLIES_CONTAINING_ENTITIES); } Apizr will scan assemblies to auto register managers for decorated entities. Using Here is an example of how to send a web request from an app - e.g. using Apizr in a Xamarin.Forms mobile app. Inject IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> where you need it - e.g. into your ViewModel constructor public class YourViewModel { private readonly IApizrManager<ICrudApi<User, int, PagedResult<User>, ReadAllUsersParams>> _userCrudManager; public YouViewModel(IApizrManager<ICrudApi<User, int, PagedResult<User>, ReadAllUsersParams>> userCrudManager) // Or registry injection //public YouViewModel(IApizrRegistry apizrRegistry) { _userCrudManager = userCrudManager; // Or registry injection //_userCrudManager = apizrRegistry.GetCrudManagerFor<User, int, PagedResult<User>, ReadAllUsersParams>>(); } public ObservableCollection<User>? Users { get; set; } private async Task GetUsersAsync() { IList<User>? users; try { var pagedUsers = await _userCrudManager.ExecuteAsync(api => api.ReadAll()); // OR with some option adjustments // var userList = await _userCrudManager.ExecuteAsync((options, api) => api.ReadAll(options), // options => options.WithPriority(Priority.Background)); users = pagedUsers.Data?.ToList(); } catch (ApizrException<PagedResult<User>> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); } } We catch any ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw with an IO inner exception without sending the request."
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "Intro | Apizr",
    "keywords": "Intro Note Versions Following documentation is all about the latest packages version available on NuGet . You can find older versions and potential breaking changes under the Legacy section. Apizr aims to provide a resilient and feature-rich web API client for .NET applications based on Refit, with the more resiliency we can, but without the boilerplate. It comes among other things with built-in support for retrying failed requests, handling network connectivity issues, caching responses, managing authentication, logging, and request prioritization, but there's more."
  },
  "articles/legacy/breakingchanges.html": {
    "href": "articles/legacy/breakingchanges.html",
    "title": "Breaking changes | Apizr",
    "keywords": "Breaking changes Please find here some breaking changes while upgrading from previous versions 5.0 Apizr Now ApizrBuilder static class exposes a single public property named Current and returning its own instance to get acces to its methods , so that it could be extended then by other packages Now write: ApizrBuilder.Current.WhatEver(); Don't write anymore: ApizrBuilder.WhatEver(); Some methods have been deprecated and moved as extension methods to a dedicated namespace , pointing to the new core ones Now write: // Designing [Get(\"/\")] Task<MyResult> WhatEver([RequestOptions] IApizrRequestOptions options); // Requesting myResult = await myManager.ExecuteAsync((opt, api) => api.WhatEver(opt), options => options.WithCacheClearing(true) .WithCancellation(token) .WithContext(context) .WithPriority(Priority.Background) .WithExCatcher(OnEx)); Don't write anymore: // Designing [Get(\"/\")] Task<MyResult> WhatEver([Priority] int priority, [Context] Context context, CancellationToken cancellationToken); // Requesting myManager.ExecuteAsync((ctx, ct, api) => api.WhatEver((int)Priority.Background, ct), context, token, true, OnEx) 4.1 Apizr Apizr static class renamed to ApizrBuilder to match its purpose and doesn't conflict with its namespace anymore ApizrBuilder's methods renamed to match their return type so that we know what we're about to build (e.g. CreateRegistry, AddManagerFor, CreateManagerFor) ApizrRegistry's methods renamed to match their return type so that we know what we're about to get (e.g. GetManagerFor, GetCrudManagerFor, ContainsManagerFor) Apizr.Extensions.Microsoft.DependencyInjection Extension methods renamed to match their return type so that we know what we're about to build (e.g. AddManagerFor, AddCrudManagerFor) ApizrExtendedRegistry's methods renamed to match their return type so that we know what we're about to get (e.g. GetManagerFor, GetCrudManagerFor, ContainsManagerFor) Apizr.Integrations.MediatR ApizrMediationRegistry's methods renamed to match their return type so that we know what we're about to get (e.g. GetMediatorFor, GetCrudMediatorFor, ContainsMediatorFor) Apizr.Integrations.Optional ApizrOptionalMediationRegistry's methods renamed to match their return type so that we know what we're about to get (e.g. GetOptionalMediatorFor, GetCrudOptionalMediatorFor, ContainsOptionalMediatorFor) 4.0 Apizr TraceAttribute has been renamed back to LogAttribute Now we can set a LogLevel value for each Low, Medium and High severity by attribute or fluent configuration Apizr.Integrations.MediatR Now Apizr.Integrations.MediatR targets .Net Standard 2.1 as MediatR v10+ does Apizr.Integrations.Optional Now Apizr.Integrations.Optional targets .Net Standard 2.1 as Apizr.Integrations.MediatR v4+ does Apizr.Integrations.AutoMapper Now Apizr.Integrations.AutoMapper targets .Net Standard 2.1 as AutoMapper v11+ does Warning Apizr.Integrations.Shiny has been discontinued This integration project has been dropped out as Shiny no longer provide built-in caching and logging feature anymore. Apizr now either relies on MS Caching extensions, Akavache or MonkeyCache for caching feature and MS Logging extensions for logging feature. You'll have to provide a connectivity handler if you want Apizr to check it. 3.0 Apizr Fusillade has been moved to an integration package . If you used to play with it, just install it from its brand new dedicated integration package and follow the new Readme instructions 2.0 Apizr TraceAttribute renamed to LogItAttribute to suits its tracing and logging both features activation CacheAttribute renamed to CacheItAttribute to keep things consistent No more cache and policy attribute decorating CRUD api by default. You can activate it fluently with the options builder. 1.4.0 Apizr.Integrations.MediatR WithCrudMediation renamed to WithMediation Apizr.Integrations.Optional WithCrudOptionalMediation renamed to WithOptionalMediation 1.2.0 Apizr Apizr instantiation/registration methods names standardized to Apizr.For and Apizr.CrudFor Apizr.Extensions.Microsoft.DependencyInjection Apizr instantiation/registration methods names standardized to services.AddApizrFor and services.AddApizrCrudFor Apizr.Integrations.Shiny Apizr instantiation/registration methods names standardized to services.UseApizrFor and services.UseApizrCrudFor"
  },
  "articles/legacy/v3_readme.html": {
    "href": "articles/legacy/v3_readme.html",
    "title": "Apizr V3 Readme | Apizr",
    "keywords": "Apizr V3 Readme This readme is all about v3 Libraries Install the NuGet package of your choice: Apizr package comes with the For and CrudFor static instantiation approach (which you can register in your DI container then) Apizr.Extensions.Microsoft.DependencyInjection package extends your IServiceCollection with AddApizrFor and AddApizrCrudFor registration methods (ASP.Net Core, etc) Apizr.Integrations.Shiny package brings ICacheHandler, ILogHandler and IConnectivityHandler method mapping implementations for Shiny , extending your IServiceCollection with a UseApizr and UseApizrCrudFor registration methods Apizr.Integrations.Fusillade package enables request priority management using Fusillade Apizr.Integrations.Akavache package brings an ICacheHandler method mapping implementation for Akavache Apizr.Integrations.MonkeyCache package brings an ICacheHandler method mapping implementation for MonkeyCache Apizr.Integrations.MediatR package enables request auto handling with mediation using MediatR Apizr.Integrations.Optional package enables Optional result from mediation requests (requires MediatR integration) using Optional.Async Apizr.Integrations.AutoMapper package enables auto mapping for mediation requests (requires MediatR integration and could work with Optional integration) using AutoMapper Apizr core package make use of well known nuget packages to make the magic appear: Package Features Refit Auto-implement web api interface and deal with HttpClient Polly Apply some policies like Retry, CircuitBreaker, etc... HttpTracer Trace Http(s) request/response traffic to log it It also comes with some handling interfaces to let you provide your own services for: Caching with ICacheHandler, which comes with its default VoidCacheHandler (no cache), but also with: AkavacheCacheHandler: Akavache method mapping interface (Integration package referenced above) MonkeyCacheHandler: MonkeyCache method mapping interface (Integration package referenced above) ShinyCacheHandler: Shiny chaching method mapping interface (Integration package referenced above) Logging with ILogHandler, which comes with its default DefaultLogHandler (Console and Debug), but also with: ShinyLogHandler: Shiny logging method mapping interface (Integration package referenced above) Connectivity with IConnectivityHandler, which comes with its default VoidConnectivityHandler (no connectivity check), but also with: ShinyConnectivityHandler: Shiny connectivity method mapping interface (Integration package referenced above) Mapping with IMappingHandler, which comes with its default VoidMappingHandler (no mapping conversion), but also with: AutoMapperMappingHandler: AutoMapper mapping method mapping interface (Integration package referenced above) How to: Classic APIs Defining Registering Static approach Extensions approach Manually Automatically Using CRUD APIs Defining Registering Static approach Extensions approach Manually Automatically Using Advanced configurations Service handlers Authentication DelegatingHandler Custom DelegatingHandler Refit settings Policy registry HttpClient External integrations Shiny MonkeyCache Akavache Fusillade MediatR OptionalAsync Optional helper extentions OnResultAsync CatchAsync AutoMapper AutoMapper with Crud apis Manually Automatically Using AutoMapper with classic apis Using Classic APIs: Defining: We could define our web api service just like: [assembly:Policy(\"TransientHttpError\")] namespace Apizr.Sample.Api { [WebApi(\"https://reqres.in/\"), CacheIt, LogIt] public interface IReqResService { [Get(\"/api/users\")] Task<UserList> GetUsersAsync(CancellationToken cancellationToken); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId, CancellationToken cancellationToken); [Post(\"/api/users\")] Task<User> CreateUser(User user, CancellationToken cancellationToken); } } And that's all. Every attributes here will inform Apizr on how to manage each web api request. No more boilerplate. Registering: As it's not mandatory to register anything in a container for DI purpose (you can use a static instance directly), I'll describe here how to use it with DI. Static approach: Somewhere where you can add services to your container, add the following: // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; // Apizr registration myContainer.SomeInstanceRegistrationMethod(Apizr.For<IReqResService>(optionsBuilder => optionsBuilder.WithPolicyRegistry(registry) .WithCacheHandler(new AkavacheCacheHandler()))); I provided a policy registry and a cache handler here as I asked for it with cache and policy attributes in my web api example. Extensions approach: For this one, two options : Manually: register calling AddApizrFor<TWebApi> service collection extension method or overloads for each service you want to manage Automatically: decorate your services with WebApiAttribute and let Apizr auto register it all for you Manually: Here is an example: public override void ConfigureServices(IServiceCollection services) { var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizrFor<IReqResService>(optionsBuilder => optionsBuilder.WithCacheHandler<AkavacheCacheHandler>()); // Or if you use Shiny //services.UseApizrFor<IReqResService>(); } Automatically: Decorate your api services like we did before (but with your own settings): [assembly:Policy(\"TransientHttpError\")] namespace Apizr.Sample.Api { [WebApi(\"https://reqres.in/\"), CacheIt, LogIt] public interface IReqResService { [Get(\"/api/users\")] Task<UserList> GetUsersAsync(CancellationToken cancellationToken); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId, CancellationToken cancellationToken); [Post(\"/api/users\")] Task<User> CreateUser(User user, CancellationToken cancellationToken); } } Then, register in your Startup class like so: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrFor(typeof(AnyClassFromServicesAssembly)); // Or if you use Shiny //services.UseApizrFor(typeof(AnyClassFromServicesAssembly)); } There are 4 AddApizrFor/UseApizrFor flavors for classic automatic registration, depending on what you want to do and provide. This one is the simplest. Using: Sending web request from your app - e.g. using Apizr in a Xamarin.Forms mobile app. Inject IApizrManager<YourWebApiInterface> where you need it - e.g. into your ViewModel constructor public class YourViewModel { private readonly IApizrManager<IReqResService> _reqResManager; public YouViewModel(IApizrManager<IReqResService> reqResManager) { _reqResManager = reqResManager; } public ObservableCollection<User>? Users { get; set; } private async Task GetUsersAsync() { IList<User>? users; try { var userList = await _reqResManager.ExecuteAsync((ct, api) => api.GetUsersAsync(ct), CancellationToken.None); users = userList.Data; } catch (ApizrException<UserList> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); } } I catch execution into an ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw with an IO inner exception without sending the request. CRUD APIs: When playing with RESTful CRUD api, you've got a couple of options: Define a web api interface like we just did before with each crud method (each entity into one interface or one interface for each entity) Use the built-in ICrudApi As the first option is described already, here we'll talk about the ICrudApi option Defining: As we'll use the built-in yet defined ICrudApi, there's no more definition to do. Here is what it looks like then: public interface ICrudApi<T, in TKey, TReadAllResult, in TReadAllParams> where T : class { [Post(\"\")] Task<T> Create([Body] T payload); [Post(\"\")] Task<T> Create([Body] T payload, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll(); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams); [Get(\"\")] Task<TReadAllResult> ReadAll([Property(\"Priority\")] int priority); [Get(\"\")] Task<TReadAllResult> ReadAll(CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(\"Priority\")] int priority); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([Property(\"Priority\")] int priority, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(\"Priority\")] int priority, CancellationToken cancellationToken); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(\"Priority\")] int priority); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, CancellationToken cancellationToken); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(\"Priority\")] int priority, CancellationToken cancellationToken); [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload); [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload, CancellationToken cancellationToken); [Delete(\"/{key}\")] Task Delete(TKey key); [Delete(\"/{key}\")] Task Delete(TKey key, CancellationToken cancellationToken); } We can see that it comes with some CacheKey and Priority attribute decorations, but it won't do anything until you ask Apizr to. Caching, Logging, Policing, Prioritizing... everything is activable fluently with the options builder. About generic types: T and TKey (optional - default: int ) meanings are obvious TReadAllResult (optional - default: IEnumerable<T> ) is there to handle cases where ReadAll doesn't return an IEnumerable<T> or derived, but a paged result with some statistics TReadAllParams (optional - default: IDictionary<string, object> ) is there to handle cases where you don't want to provide an IDictionary<string, object> for a ReadAll reaquest, but a custom class But again, nothing to do around here. Registering: Static approach: Somewhere where you can add services to your container, add the following: // Apizr registration myContainer.SomeInstanceRegistrationMethod(Apizr.CrudFor<T, TKey, TReadAllResult, TReadAllParams>(optionsBuilder => optionsBuilder.WithBaseAddress(\"your specific T entity crud base uri\"))); T must be a class. TKey must be primitive. If you don't provide it here, it will be defined as int . TReadAllResult must inherit from IEnumerable<> or be a class. If you don't use paged result, just don't provide any TReadAllResult here and it will be defined as IEnumerable<T> . TReadAllParams must be a class. If you don't use a custom class holding your query parameters, just don't provide any TReadAllParams here and it will be defined as IDictionary<string, object> . You have to provide the specific entity crud base uri with the options builder. There are 5 CrudFor flavors, depending on what you want to do and provide. One of it is the simple Apizr.CrudFor<T>() , which as you can expect, define TKey as int , TReadAllResult as IEnumerable<T> and TReadAllParams as IDictionary<string, object> . Extensions approach: Ok, for this one, two options again: Manually: register calling AddApizrCrudFor<T, TKey, TReadAllResult, TReadAllParams> service collection extension method or overloads for each entity you want to manage Automatically: decorate your entities with CrudEntityAttribute and let Apizr auto register it all for you Manually: In your Startup class, add the following: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrCrudFor<T, TKey, TReadAllResult, TReadAllParams>(optionsBuilder => optionsBuilder.WithBaseAddress(\"your specific T entity crud base uri\")); // Or if you use Shiny //services.UseApizrCrudFor<T, TKey, TReadAllResult, TReadAllParams>(optionsBuilder => optionsBuilder.WithBaseAddress(\"your specific T entity crud base uri\")); } Again, T must be a class. TKey must be primitive. If you don't provide it here, it will be defined as int . TReadAllResult must inherit from IEnumerable<> or be a class. If you don't use paged result, just don't provide any TReadAllResult here and it will be defined as IEnumerable<T> . TReadAllParams must be a class. If you don't use a custom class holding your query parameters, just don't provide any TReadAllParams here and it will be defined as IDictionary<string, object> . You have to provide the specific entity crud base uri with the options builder. There are 10 AddApizrCrudFor/UseApizrCrudFor flavors for crud manual registration, depending on what you want to do and provide. One of it is the simple services.AddApizrCrudFor<T>() or services.UseApizrCrudFor<T>() , which as you can expect, define TKey as int , TReadAllResult as IEnumerable<T> and TReadAllParams as IDictionary<string, object> . Automatically: You need to have access to your entity model classes for this option. Decorate your crud entities like so (but with your own settings): [CrudEntity(\"https://myapi.com/api/myentity\", typeof(int), typeof(PagedResult<>), typeof(ReadAllUsersParams))] public class MyEntity { [JsonPropertyName(\"id\")] public int Id { get; set; } ... } Thanks to this attribute: (Mandatory) We have to provide the specific entity crud base uri (Optional) We can set TKey type to any primitive type (default to int) (Optional) We can set TReadAllResult to any class or must inherit from IEnumerable<> (default to IEnumerable<T> ) (Optional) We can set TReadAllParams to any class (default to IDictionary<string, object> ) Then, register in your Startup class like so: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrCrudFor(typeof(MyEntity)); // Or if you use Shiny //services.UseApizrCrudFor(typeof(MyEntity)); } There are 4 AddApizrCrudFor/UseApizrCrudFor flavors for crud automatic registration, depending on what you want to do and provide. This is the simplest. Using: Sending web request from your app - e.g. using Apizr in a Xamarin.Forms mobile app. Inject IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> where you need it - e.g. into your ViewModel constructor public class YourViewModel { private readonly IApizrManager<ICrudApi<User, int, PagedResult<User>, ReadAllUsersParams>> _userCrudManager; public YouViewModel(IApizrManager<ICrudApi<User, int, PagedResult<User>, ReadAllUsersParams>> userCrudManager) { _userCrudManager = userCrudManager; } public ObservableCollection<User>? Users { get; set; } private async Task GetUsersAsync() { IList<User>? users; try { var pagedUsers = await _userCrudManager.ExecuteAsync((ct, api) => api.ReadAll(ct), CancellationToken.None); users = pagedUsers.Data?.ToList(); } catch (ApizrException<PagedResult<User>> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); } } I catch execution into an ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw with an IO inner exception without sending the request. Advanced configurations: There're some advanced scenarios where you want to adjust some settings and behaviors. This is where the options builder comes in. Each registration approach comes with its optionsBuilder optional parameter: optionsBuilder => optionsBuilder.SomeOptionsHere(someParametersThere) Service handlers: The options builder let you provide your own method mapping implementations for: ICacheHandler (thanks to WithCacheHandler) ILogHandler (thanks to WithLogHandler) IConnectivityHandler (thanks to WithConnectivityHandler) IMappingHandler (thanks to WithMappingHandler). Authentication DelegatingHandler: For autorized request calls, you can provide some properties and/or methods (thanks to WithAuthenticationHandler) to help Apizr to authenticate user when needed. Custom DelegatingHandler: The options builder let you add any custom delegating handler thanks to AddDelegatingHandler method Refit settings: You can adjust some specific Refit settings providing an instance of RefitSettings (thanks to WithRefitSettings). Note that for this one, only constructor parameters will be used (IContentSerializer, IUrlParameterFormatter and IFormUrlEncodedParameterFormatter). Please don't use AuthorizationHeaderValueGetter, AuthorizationHeaderValueWithParamGetter and HttpMessageHandlerFactory, as they'll be ignored. Prefer using WithAuthenticationHandler builder method to manage request authorization and AddDelegatingHandler builder method to add some other custom delegating handlers. Policy registry: If you plan to use the PoliciesAttribute, Apizr needs to know where to find your policy registry: With static instantiation, you have to provide it thanks to WithPolicyRegistry builder method. With extensions registration, you have to register it thanks to AddPolicyRegistry service collection extension method. In any case, you may want to log what's going on during policies excecution. To do so, there's an OnRetry helper action which provide your ILogHandler method mapping implementation to Polly. Here's how to use it: // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }, LoggedPolicies.OnLoggedRetry).WithPolicyKey(\"TransientHttpError\") } }; LoggedPolicies.OnLoggedRetry could also execute your own specific action if needed. HttpClient: With extensions registration, you can adjust some more HttpClient settings thanks to ConfigureHttpClientBuilder builder method. This one could interfere with all Apizr http client auto configuration, so please use it with caution. External integrations: Shiny: If you're a Shiny user, with the right extension package installed, just register Apizr calling UseApizr instead of AddApizr . Then, everything will be in place, ready to use, relying on Shiny features (Logging, Caching, Connectivity). MonkeyCache: If you're a MonkeyCache user, with the right extension package installed: Set the Barrel's ApplicationId: Barrel.ApplicationId = \"YOUR_APPLICATION_ID\"; Then tell Apizr you want to use MonkeyCache as caching layer: optionsBuilder => optionsBuilder.WithCacheHandler(() => new MonkeyCacheHandler(Barrel.Current)) Akavache: If you're an Akavache user, with the right extension package installed: Just tell Apizr you want to use Akavahe as caching layer: optionsBuilder => optionsBuilder.WithCacheHandler(() => new AkavacheCacheHandler()) Fusillade: Starting Apizr v3, Fusillade has been moved from core project to its dedicated integration package. If you plan to use it, you now have to install this package. Once installed, you should be able to activate it fluently with the provided extension: optionsBuilder => optionsBuilder.WithPriorityManagement() From there, everything will be user initiated. When you need to specify another priority, what you need to do is just adding the priority parameter into your api interface method definition: [Get(\"/api/users\")] Task<UserList> GetUsersAsync([Priority] int priority, CancellationToken cancellationToken); Mediation: In extensions registration approach and with the dedicated integration nuget package referenced, the options builder let you enable mediation by calling: optionsBuilder => optionsBuilder.WithMediation() Don't forget to register MediatR itself as usual: services.AddMediatR(typeof(Startup)); When activated, you don't have to inject/resolve anything else than an IMediator instance, in order to play with your api services (both classic and crud). Everything you need to do then, is sending your request calling: var result = await _mediator.Send(YOUR_REQUEST_HERE); Where YOUR_REQUEST_HERE could be, with classic api interfaces: ExecuteRequest<TWebApi> : execute any method from TWebApi defined by an expression parameter ExecuteRequest<TWebApi, TApiResponse> : execute any method from TWebApi with a TApiResponse result and defined by an expression parameter ExecuteRequest<TWebApi, TModelResponse, TApiResponse> : execute any method from TWebApi with a TApiResponse mapped to a TModelResponse result and defined by an expression parameter NOTE - Mapping : When I say \"mapped\", I talk about the mapping integration feature Please refer to AutoMapper section for more info Or with crud api interfaces: ReadQuery<T> : get the T entity with int ReadQuery<T, TKey> : get the T entity with TKey ReadAllQuery<TReadAllResult> : get TReadAllResult with IDictionary<string, object> optional query parameters ReadAllQuery<TReadAllParams, TReadAllResult> : get TReadAllResult with TReadAllParams optional query parameters CreateCommand<T> : create a T entity UpdateCommand<T> : update the T entity with int UpdateCommand<TKey, T> : update the T entity with TKey DeleteCommand<T> : delete the T entity with int DeleteCommand<T, TKey> : delete the T entity with TKey There's also a typed mediator available for each api interface (classic or crud), to help you write things shorter. With classic api interfaces, resolving IMediator<TWebApi> give you access to: SendFor(YOUR_API_METHOD_EXPRESSION) : send an ExecuteRequest<TWebApi> for you SendFor<TApiResponse>(YOUR_API_METHOD_EXPRESSION) : send an ExecuteRequest<TWebApi, TApiResponse> for you SendFor<TModelResponse, TApiResponse>(YOUR_API_METHOD_EXPRESSION) : send an ExecuteRequest<TWebApi, TModelResponse, TApiResponse> for you With crud api interfaces, resolving ICrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> give you access to: SendReadQuery(TApiEntityKey key) : send a ReadQuery<TApiEntity, TApiEntityKey> for you SendReadQuery<TModelEntity>(TApiEntityKey key) : send a ReadQuery<TModelEntity, TApiEntityKey> for you, with TModelEntity mapped with TApiEntity SendReadAllQuery() : send a ReadAllQuery<TReadAllResult> for you SendReadAllQuery<TModelEntityReadAllResult>() : send a ReadAllQuery<TModelEntityReadAllResult> for you, with TModelEntityReadAllResult mapped with TReadAllResult SendCreateCommand(TApiEntity payload) : send a CreateCommand<TApiEntity> for you SendCreateCommand<TModelEntity>(TModelEntity payload) : send a CreateCommand<TModelEntity> for you, with TModelEntity mapped with TApiEntity SendUpdateCommand(TApiEntityKey key, TApiEntity payload) : send an UpdateCommand<TApiEntityKey, TApiEntity> for you SendUpdateCommand<TModelEntity>(TApiEntityKey key, TModelEntity payload) : send an UpdateCommand<TApiEntityKey, TModelEntity> for you, with TModelEntity mapped with TApiEntity SendDeleteCommand(TApiEntityKey key) : send a DeleteCommand<TApiEntity, TApiEntityKey> for you Most of all requests get some overloads to provide some more parameters. Apizr will intercept your request and handle it to send the result back to you, thanks to MediatR. From there, our ViewModel can look like (only one interface necessary in real world): public class YourViewModel { private readonly IMediator _mediator; private readonly IMediator<IReqResService> _reqResMediator; private readonly ICrudMediator<User, int, PagedResult<User>, IDictionary<string, object>> _userMediator; public YouViewModel(IMediator mediator, IMediator<IReqResService> reqResMediator, ICrudMediator<User, int, PagedResult<User>, IDictionary<string, object>> userMediator) { _mediator = mediator; _reqResMediator = reqResMediator; _userMediator = userMediator; } public ObservableCollection<User>? Users { get; set; } // This won't compile obviously // It's an example presenting all ways to play with MediatR // You should choose one of these ways private async Task GetUsersAsync() { IList<User>? users; try { // The classic api interface way var userList = await _mediator.Send(new ExecuteRequest<IReqResService, UserList>((ct, api) => api.GetUsersAsync(ct)), CancellationToken.None); users = userList.Data; // The classic api interface way with typed mediator var userList = await _reqResMediator.SendFor(api => api.GetUsersAsync()); users = userList.Data; // The crud api interface way var pagedUsers = await _mediator.Send(new ReadAllQuery<PagedResult<User>>(), CancellationToken.None); users = pagedUsers.Data?.ToList(); // The crud api interface way with typed mediator var pagedUsers = await _userMediator.SendReadAllQuery(); users = pagedUsers.Data?.ToList(); } catch (ApizrException<PagedResult<User>> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); } } Optional: In extensions registration approach and with the dedicated integration nuget package referenced, the options builder let you enable mediation with Optional result by calling: optionsBuilder => optionsBuilder.WithOptionalMediation() Again, don't forget to register MediatR itself as usual : services.AddMediatR(typeof(Startup)); When activated, you don't have to inject/resolve anything else than an IMediator instance, in order to play with your api services (both classic and crud). Everything you need to do then, is sending your request calling: var result = await _mediator.Send(YOUR_REQUEST_HERE); Where YOUR_REQUEST_HERE could be, with classic api interfaces: ExecuteOptionalRequest<TWebApi> : execute any method from TWebApi defined by an expression parameter which returns Option<Unit, ApizrException> ExecuteOptionalRequest<TWebApi, TApiResponse> : execute any method from TWebApi defined by an expression parameter which returns Option<TApiResponse, ApizrException<TApiResponse>> ExecuteOptionalRequest<TWebApi, TModelResponse, TApiResponse> : execute any method from TWebApi defined by an expression parameter which returns Option<TModelResponse, ApizrException<TModelResponse>> where TModelResponse mapped from TApiResponse NOTE - Mapping : When I say \"mapped\", I talk about the mapping integration feature Please refer to AutoMapper section for more info Or with crud api interfaces: ReadOptionalQuery<T> : get the T entity with int and returns Option<T, ApizrException<T>> ReadOptionalQuery<T, TKey> : get the T entity with TKey and returns Option<T, ApizrException<T>> ReadAllOptionalQuery<TReadAllResult> : get TReadAllResult with IDictionary<string, object> optional query parameters and returns Option<TReadAllResult, ApizrException<TReadAllResult>> ReadAllOptionalQuery<TReadAllParams, TReadAllResult> : get TReadAllResult with TReadAllParams optional query parameters and returns Option<TReadAllResult, ApizrException<TReadAllResult>> CreateOptionalCommand<T> : create a T entity and returns Option<Unit, ApizrException> UpdateOptionalCommand<T> : update the T entity with int and returns Option<Unit, ApizrException> UpdateOptionalCommand<TKey, T> : update the T entity with TKey and returns Option<Unit, ApizrException> DeleteOptionalCommand<T> : delete the T entity with int and returns Option<Unit, ApizrException> DeleteOptionalCommand<T, TKey> : delete the T entity with TKey and returns Option<Unit, ApizrException> There's also a typed optional mediator available for each api interface (classic or crud), to help you write things shorter. With classic api interfaces, resolving IOptionalMediator<TWebApi> give you access to: SendFor(YOUR_API_METHOD_EXPRESSION) : send an ExecuteOptionalRequest<TWebApi> for you SendFor<TApiResponse>(YOUR_API_METHOD_EXPRESSION) : send an ExecuteOptionalRequest<TWebApi, TApiResponse> for you SendFor<TModelResponse, TApiResponse>(YOUR_API_METHOD_EXPRESSION) : send an ExecuteOptionalRequest<TWebApi, TModelResponse, TApiResponse> for you With crud api interfaces, resolving ICrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> give you access to: SendReadOptionalQuery(TApiEntityKey key) : send a ReadOptionalQuery<TApiEntity, TApiEntityKey> for you SendReadOptionalQuery<TModelEntity>(TApiEntityKey key) : send a ReadOptionalQuery<TModelEntity, TApiEntityKey> for you, with TModelEntity mapped with TApiEntity SendReadAllOptionalQuery() : send a ReadAllOptionalQuery<TReadAllResult> for you SendReadAllOptionalQuery<TModelEntityReadAllResult>() : send a ReadAllOptionalQuery<TModelEntityReadAllResult> for you, with TModelEntityReadAllResult mapped with TReadAllResult SendCreateOptionalCommand(TApiEntity payload) : send a CreateOptionalCommand<TApiEntity> for you SendCreateOptionalCommand<TModelEntity>(TModelEntity payload) : send a CreateOptionalCommand<TModelEntity> for you, with TModelEntity mapped with TApiEntity SendUpdateOptionalCommand(TApiEntityKey key, TApiEntity payload) : send an UpdateOptionalCommand<TApiEntityKey, TApiEntity> for you SendUpdateOptionalCommand<TModelEntity>(TApiEntityKey key, TModelEntity payload) : send an UpdateOptionalCommand<TApiEntityKey, TModelEntity> for you, with TModelEntity mapped with TApiEntity SendDeleteOptionalCommand(TApiEntityKey key) : send a DeleteOptionalCommand<TApiEntity, TApiEntityKey> for you Apizr will intercept it and handle it to send the result back to you, thanks to MediatR and Optional. From there, our ViewModel can look like (only one interface necessary in real world): public class YourViewModel { private readonly IMediator _mediator; private readonly IOptionalMediator<IReqResService> _reqResOptionalMediator; private readonly ICrudOptionalMediator<User, int, PagedResult<User>, IDictionary<string, object>> _userOptionalMediator; public YouViewModel(IMediator mediator, IOptionalMediator<IReqResService> reqResOptionalMediator, ICrudOptionalMediator<User, int, PagedResult<User>, IDictionary<string, object>> userOptionalMediator) { _mediator = mediator; _reqResOptionalMediator = reqResOptionalMediator; _userOptionalMediator = userOptionalMediator; } public ObservableCollection<User>? Users { get; set; } // This won't compile obviously // It's an example presenting all ways to play with Optional // You should choose one of these ways private async Task GetUsersAsync() { // The classic api interface way with mediator and optional request var optionalUserList = await _mediator.Send(new ExecuteOptionalRequest<IReqResService, UserList>((ct, api) => api.GetUsersAsync(ct)), CancellationToken.None); // The classic api interface way with typed optional mediator (the same but shorter) var optionalUserList = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()); // Handling the optional result for both previous ways optionalPagedResult.Match(userList => { if (userList.Data != null && userList.Data.Any()) Users = new ObservableCollection<User>(userList.Data); }, e => { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); if (e.CachedResult?.Data != null && e.CachedResult.Data.Any()) Users = new ObservableCollection<User>(e.CachedResult.Data); }); // The crud api interface way with mediator and optional request var optionalPagedResult = await _mediator.Send(new ReadAllOptionalQuery<PagedResult<User>>(), CancellationToken.None); // The crud api interface way with typed crud optional mediator var optionalPagedResult = await _userOptionalMediator.SendReadAllOptionalQuery(); // Handling the optional result for both previous ways optionalPagedResult.Match(pagedUsers => { if (pagedUsers.Data != null && pagedUsers.Data.Any()) Users = new ObservableCollection<User>(pagedUsers.Data); }, e => { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); if (e.CachedResult?.Data != null && e.CachedResult.Data.Any()) Users = new ObservableCollection<User>(e.CachedResult.Data); }); } } Same advantages than classic mediation but with exception handling. Both \"classic\" and \"optional\" mediation are compatibles with each other. It means that if you call both methods during registration, both request collection will be available, so you can decide which one suits to you when you need it. Optional helper extentions: Optional and MediatR are pretty cool. But even if we use the typed optional mediator or typed crud optional mediator to get things shorter, we still have to deal with the result boilerplate: // The classic api interface way with typed optional mediator (the same but shorter) var optionalUserList = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()); // Handling the optional result for both previous ways optionalPagedResult.Match(userList => { if (userList.Data != null && userList.Data.Any()) Users = new ObservableCollection<User>(userList.Data); }, e => { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); if (e.CachedResult?.Data != null && e.CachedResult.Data.Any()) Users = new ObservableCollection<User>(e.CachedResult.Data); }); Let's cut down the optional result handling thing, to get something as short as we can. OnResultAsync and CatchAsync are extension methods to handle optional result fluently. OnResultAsync: OnResultAsync ask you to provide one of these parameters: Action<TResult> onResult : this action will be invoked just before throwing any exception that might have occurred during request execution Func<TResult, ApizrException<TResult>, bool> onResult : this function will be invoked with the returned result and potential occurred exception Func<TResult, ApizrException<TResult>, Task<bool>> onResult : this function will be invoked async with the returned result and potential occurred exception All give you a result returned from fetch if succeed, or cache if failed. The main goal here is to set any binded property with the returned result (fetched or cached), no matter of exceptions. Then the Action will let the exception throw, where the Func will let you decide to throw manually or return a success boolean flag. Here is what our final request looks like with Action (auto throwing after invocation on excpetion): await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()).OnResultAsync(userList => { users = userList?.Data; }); Or with Func and throw: await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()).OnResultAsync((userList, exception) => { users = userList?.Data; if(exception != null) throw exception; return true; }); Or with Func and success flag: var success = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()).OnResultAsync((userList, exception) => { users = userList?.Data; return exception != null; }); We could combine the first two with AsyncErrorHandler , to catch them all globally and show any information dialog to the user, like: public static class AsyncErrorHandler { public static void HandleException(Exception exception) { var message = exception is IOException || exception.InnerException is IOException ? \"No network\" : (exception.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); Log.Write(exception); } } CatchAsync: CatchAsync let you provide these parameters: Action<Exception> onException : this action will be invoked just before returning the result from cache if fetch failed. Useful to inform the user of the api call failure and that data comes from cache. letThrowOnExceptionWithEmptyCache : True to let it throw the inner exception in case of empty cache, False to handle it with onException action and return empty cache result (default: False) This one is to return result from fetch or cache, no matter of execption handled on the other side by an action callback to inform the user var users = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()).CatchAsync(AsyncErrorHandler.HandleException, true); Here we ask the api to get users and if it fails: There's some cached data? AsyncErrorHandler will handle the exception to inform the user call just failed Apizr will return the previous result from cache There's no cached data yet! letThrowOnExceptionWithEmptyCache is True? (which is the case here) Apizr will throw the inner exception that will be catched further by AsyncErrorHander (this is its normal Fody usage) letThrowOnExceptionWithEmptyCache is False! (default) Apizr will return the empty cache data (null) which has to be handled further Safe and shorter than ever! AutoMapper: You can define your own model entities and then, your AutoMapper mapping profiles between api entities and model entities. Then, you have to tell Apizr which entities must use the mapping feature. AutoMapper with Crud apis: Manually: services.AddApizrCrudFor<MappedEntity<TModelEntity, TApiEntity>>(optionsBuilder => optionsBuilder.WithBaseAddress(\"https://myapi.com/api/myentity\") .WithMediation() .WithMappingHandler<AutoMapperMappingHandler>()); Manual registration makes use of MappedEntity<TModelEntity, TApiEntity> just in place of our usual T. You'll have to enable one or both mediation feature to handle requests (classic and/or optional) and provide a mapping handler. You'll have to repeat this registration for each crud mapping. Don't forget to register AutoMapper itself as usual : services.AddAutoMapper(typeof(Startup)); Automatically: Why not let Apizr do it for you? To do so, you have do decorate one of those two entities (api vs model) with corresponding attribute: CrudEntityAttribute above the api entity, with modelEntityType parameter set to the mapped model entity type MappedCrudEntityAttribute above the model entity, with apiEntityType parameter set to the mapped api entity type If you get access to both entities, it doesn't matter which one you decorate, just do it for one of it (if you decorate both, it will take the first found). If you don't get any access to the api entities, just decorate your model one with the MappedCrudEntityAttribute From here, let's write: services.AddApizrCrudFor(optionsBuilder => optionsBuilder .WithMediation() .WithMappingHandler<AutoMapperMappingHandler>(), typeof(AnyTApiEntity), typeof(AnyTModelEntity)); In this example, I provided both api entity and model entity assemblies to the attribute scanner, but actually you just have to provide the one containing your attribute decorated entities (api or model, depending of your scenario/access rights). Don't forget to register AutoMapper itself as usual : services.AddAutoMapper(typeof(Startup)); Using: Nothing different here but direct using of your model entities when sending mediation requests, like: var createdModelEntity = await _mediator.Send(new CreateCommand<TModelEntity>(myModelEntity), CancellationToken.None); Apizr will map myModelEntity to TApiEntity, send it to the server, map the result to TModelEntity and send it back to you. And yes, it works also with Optional. AutoMapper with classic apis: You have do decorate one among the api method, the model entity or the api entity with MappedWithAttribute , with mappedWithType set to the other mapped entity. From here, let's write: services.AddApizrFor(optionsBuilder => optionsBuilder .WithMediation() .WithMappingHandler<AutoMapperMappingHandler>(), typeof(AnyTApiEntity), typeof(AnyTModelEntity), typeof(AnyTWebApi)); Actually, the number of typeof depends on where your attribute decorations are defined. Don't forget to register AutoMapper itself as usual : services.AddAutoMapper(typeof(Startup)); Using: Nothing different here but direct using of your model entities when sending mediation requests, like: // Classic auto mapped result only var userInfos = await _mediator.Send(new ExecuteRequest<IReqResService, UserInfos, UserDetails>((ct, api) => api.GetUserAsync(userChoice, ct)), CancellationToken.None); Apizr will send the request to the server, map the api result from UserDetails to UserInfos and send it back to you. You can also map the request before being sent, like so: // Classic auto mapped request and result var minUser = new MinUser {Name = \"John\"}; var createdMinUser = await _mediator.Send( new ExecuteRequest<IReqResService, MinUser, User>((ct, api, mapper) => api.CreateUser(mapper.Map<MinUser, User>(minUser), ct)), CancellationToken.None); minUser will be mapped from MinUser to User just before being sent, then Apizr will map the api result back from User to MinUser and send it back to you. And yes, all the mapping feature works also with Optional."
  },
  "articles/legacy/v4/config.html": {
    "href": "articles/legacy/v4/config.html",
    "title": "Configuring | Apizr",
    "keywords": "Configuring Many options could be set by attribute decoration. It allows you to use assembly scanning auto registration feature. Much more options could be set by fluent configuration. All fluent configuration flavors offer a contextualized options builder, depending on what you're asking and where. The option types: Proper: options available at api configuration level only and applied to it exclusively (e.g. BaseAddress obviously) Common: options available at global configuration level only and applied to all registered apis (e.g. RefitSettings, PolicyRegistry) There're also some Shared options available at both api (proper) and global (common) configuration level (e.g. LogLevel) Here is what using it with a registry, the extended way, could look like: public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizr( registry => registry .AddManagerFor<IReqResService>() .AddManagerFor<IHttpBinService>( options => options .WithLogging( HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Trace)) .AddCrudManagerFor<User, int, PagedResult<User>, IDictionary<string, object>>( options => options .WithBaseAddress(\"https://reqres.in/api/users\"))), config => config .WithPolicyRegistry(registry) .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); } And here is what we're saying in this example: Add a manager for IReqResService api interface into the registry, to register it into the container Add a manager for IHttpBinService api interface into the registry, to register it into the container Apply proper logging options dedicated to IHttpBinService's manager Add a manager for User entity with CRUD api interface and custom types into the registry, to register it into the container Apply proper address option dedicated to User's manager Apply common options to all managers by: Providing a policy registry Providing a cache handler Providing some logging settings (won't apply to IHttpBinService's manager as we set some specific ones) Note that fluent configuration almost allways wins over the attribute one (if both set) and the same for proper over common. For example, if you decorated your api interface with a Log attribute, but also set some common logging options fluently plus some proper logging options, the proper logging options will be applied to the api manager. But, if you decorated the api method itself instead of the interface with this Log attribute, it will win over all others :) Actualy, the closer the option is defined from the api method, the more chance it will have to be applied over all others. Are you still following? Don't worry! Every single option is detailed through this documentation, so let's browse it!"
  },
  "articles/legacy/v4/config_address.html": {
    "href": "articles/legacy/v4/config_address.html",
    "title": "Configuring base address | Apizr",
    "keywords": "Configuring base address You can configure base address either by attribute decoration or by fluent configuration. Attribute Fluent Configuring the base address with attribute allows you to use assembly scanning auto registration feature. Classic api You can set api interface base address thanks to the WebApi attribute like so: [WebApi(\"https://YOUR_API_INTERFACE_BASE_ADDRESS/\")] public interface IYourApiInterface { // Your api interface methods } Optional parameters: isAutoRegistrable (default: true) tells Apizr to ignore this specific interface while scanning assemblies for auto registration. It could be usefull when you ask for auto registration but want to do it fluently some specific interfaces. CRUD api You can set CRUD entity api base address thanks to the CrudEntity attribute like so: [CrudEntity(\"https://YOUR_CRUD_ENTITY_API_BASE_ADDRESS\")] public class YourCrudEntity { // Your CRUD entity properties } Optional parameters: keyType : entity key type (default: null = typeof(int)) readAllResultType : ReadAll query result type (default: null = typeof(IEnumerable{})) readAllParamsType : ReadAll query parameters type (default: null = typeof(IDictionary{string, object})) modelEntityType : Model entity type mapped with this api entity type (default: null = decorated api entity type) Configuring the base address fluently allows you to set it dynamically (e.g. based on settings) You can set the base address thanks to this option: options => options.WithBaseAddress(YourStaticSettings.YourBaseAddress)) The extended world offers another option with a factory providing a service provider instance. It could help you to resolve the setting at runtime: options => options.WithBaseAddress(serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().YourBaseAddress)) The WithBaseAddress option is available at both common and specific configuration level, meanning that you can share a base address with several api interfaces and/or set a specific one for some others."
  },
  "articles/legacy/v4/config_auth.html": {
    "href": "articles/legacy/v4/config_auth.html",
    "title": "Configuring authentication | Apizr",
    "keywords": "Configuring authentication Apizr provides its own AuthenticationHandler to manage the authentication workflow . Defining As Apizr is based on Refit, you can decorate your authenticated apis like so (here with bearer authorization): namespace Apizr.Sample { [WebApi(\"https://httpbin.org/\")] public interface IHttpBinService { [Get(\"/bearer\")] [Headers(\"Authorization: Bearer\")] Task<HttpResponseMessage> AuthBearerAsync(); } } Configuring To activate this feature, you have to configure it thanks to the options builder: Static Extended options => options.WithAuthenticationHandler<YourSettingsService, YourSignInService>( YourSettingsServiceInstance, settingsService => settingsService.Token, YourSignInServiceInstance, signInService => signInService.SignInAsync) YourSettingsServiceInstance should be replaced by whatever settings manager instance of your choice YourSignInServiceInstance should be replaced by your service managing your login flow. options => options.WithAuthenticationHandler<ISettingsService, ISignInService>( settingsService => settingsService.Token, signInService => signInService.SignInAsync) settingsService is your service managing settings signInService is your service managing your login flow. Both services should be container registered as it will be resolved. In details: settingsService.Token should be a public string property, saved locally on device. signInService.SignInAsync should be a method taking an HttpRequestMessage parameter and returning a refreshed access token. More You may want to deal with authentication configuration in some other ways. Here are all other authentication options: Static Extended When you don't want Apizr to save the token into settings and want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler(OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler<YourSettingsService>( YourSettingsServiceInstance, settingsService => settingsService.Token, OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to provide the settings service by a factory and deal with the refresh token call with a method: options => options.WithAuthenticationHandler<YourSettingsService>( () => YourSettingsServiceInstance, settingsService => settingsService.Token, OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to provide both settings service and sign in service by a factory: options => options.WithAuthenticationHandler<YourSettingsService, YourSignInService>( () => YourSettingsServiceInstance, settingsService => settingsService.Token, () => YourSignInServiceInstance, signInService => signInService.SignInAsync) When you want to provide your own AuthenticationHandlerBase implementation: options => options.WithAuthenticationHandler<YourAuthenticationHandler>( (logger, options) => new YourAuthenticationHandler(...)) When you don't want Apizr to save the token into settings and want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler(OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to deal with the refresh token call with a method: options => options.WithAuthenticationHandler<ISettingsService>( settingsService => settingsService.Token, OnRefreshToken) ... private string OnRefreshTokden(HttpRequestMessage message) { // whatever returning a refreshed string token } When you want to provide your own AuthenticationHandlerBase implementation: options => options.WithAuthenticationHandler<YourAuthenticationHandler>( (serviceProvider, options) => new YourAuthenticationHandler(...)) Processing There's nothing more to deal with. Protected requests will be authenticated by Apizr, otherwise it will ask user to sign in. Anyway, here is the AuthenticationHandler's SendAsync method FYI: protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) { HttpRequestMessage clonedRequest = null; string token = null; var context = request.GetOrBuildPolicyExecutionContext(); if (!context.TryGetLogger(out var logger, out var logLevel, out _, out _)) { logger = _logger; logLevel = _apizrOptions.LogLevel; } // See if the request has an authorize header var auth = request.Headers.Authorization; if (auth != null) { // Authorization required! Get the token from saved settings if available logger?.Log(logLevel, $\"{context.OperationKey}: Authorization required with scheme {auth.Scheme}\"); token = GetToken(); if (!string.IsNullOrWhiteSpace(token)) { // We have one, then clone the request in case we need to re-issue it with a refreshed token logger?.Log(logLevel, $\"{context.OperationKey}: Saved token will be used\"); clonedRequest = await this.CloneHttpRequestMessageAsync(request); } else { // Refresh the token logger?.Log(logLevel, $\"{context.OperationKey}: No token saved yet. Refreshing token...\"); token = await this.RefreshTokenAsync(request).ConfigureAwait(false); } // Set the authentication header request.Headers.Authorization = new AuthenticationHeaderValue(auth.Scheme, token); logger?.Log(logLevel, $\"{context.OperationKey}: Authorization header has been set\"); } // Send the request logger?.Log(logLevel, $\"{context.OperationKey}: Sending request with authorization header...\"); var response = await base.SendAsync(request, cancellationToken).ConfigureAwait(false); // Check if we get an Unauthorized response with token from settings if (response.StatusCode == HttpStatusCode.Unauthorized && auth != null && clonedRequest != null) { logger?.Log(logLevel, $\"{context.OperationKey}: Unauthorized !\"); // Refresh the token logger?.Log(logLevel, $\"{context.OperationKey}: Refreshing token...\"); token = await this.RefreshTokenAsync(request).ConfigureAwait(false); // Set the authentication header with refreshed token clonedRequest.Headers.Authorization = new AuthenticationHeaderValue(auth.Scheme, token); logger?.Log(logLevel, $\"{context.OperationKey}: Authorization header has been set with refreshed token\"); // Send the request logger?.Log(logLevel, $\"{context.OperationKey}: Sending request again but with refreshed authorization header...\"); response = await base.SendAsync(clonedRequest, cancellationToken).ConfigureAwait(false); } // Clear the token if unauthorized if (response.StatusCode == HttpStatusCode.Unauthorized) { token = null; logger?.Log(logLevel, $\"{context.OperationKey}: Unauthorized ! Token has been cleared\"); } // Save the refreshed token if succeed or clear it if not this.SetToken(token); logger?.Log(logLevel, $\"{context.OperationKey}: Token saved\"); return response; } The workflow: We check if the request needs to be authenticated If so, we try to load a previously saved token If there’s one, we clone the request in case we need to re-issue it with a refreshed token (as token could be rejected server side) If there’s not, we ask for a refreshed one (launching your signin feature and waiting for the resulting token) We set the authentication header with the token We finally send the request We check if we get an Unauthorized response If so and if it was sent with a saved token, we ask for a refreshed one (launching your signin feature and waiting for the resulting token) We set the authentication header of the cloned request with the refreshed token We send the cloned request We save the token if succeed or clear it if not We return the response"
  },
  "articles/legacy/v4/config_connectivity.html": {
    "href": "articles/legacy/v4/config_connectivity.html",
    "title": "Configuring Connectivity | Apizr",
    "keywords": "Configuring Connectivity Apizr can check network connectivity for you, right before sending any request. It will throw an ApizrException with an IOException as InnerException in case of network failure, which you can handle globally by showing a snack bar info or whatever. This way, your viewmodels are kept light and clear of it. With boolean factory You may want to provide just a simple boolean value to check connectivity. Here is the right option: Static Extended options => options.WithConnectivityHandler(() => YourConnectivityBoolean) // Boolean factory options => options.WithConnectivityHandler(serviceProvider => YourConnectivityBoolean) // Boolean expression factory options => options.WithConnectivityHandler<IYourRegisteredConnectivityService>(service => service.YourConnectivityBoolean) With Connectivity Handler You could also implement the IConnectivityHandler interface: public class YourConnectivityHandler : IConnectivityHandler { public bool IsConnected() { // Check connectivity here } } Then just register it with this option: Static Extended // direct configuration options => options.WithConnectivityHandler(YourConnectivityHandler) // OR factory configuration options => options.WithConnectivityHandler(() => YourConnectivityHandler) // direct configuration options => options.WithConnectivityHandler(YourConnectivityHandler) // OR factory configuration options => options.WithConnectivityHandler(serviceProvider => YourConnectivityHandler) // OR closed generic configuration options => options.WithConnectivityHandler<YourConnectivityHandler>() // OR type configuration options => options.WithConnectivityHandler(typeof(YourConnectivityHandler))"
  },
  "articles/legacy/v4/config_datacaching.html": {
    "href": "articles/legacy/v4/config_datacaching.html",
    "title": "Configuring data caching | Apizr",
    "keywords": "Configuring data caching You may want to cache data returned from your API. Apizr could handle it for you by providing an ICachingHandler interface implementation to it. Fortunately, there are some integration Nuget packages to do so. Of course, you can implement your own integration, but here we'll talk about the provided ones. Please first install the integration package of your choice: Project Current V-Next Apizr.Extensions.Microsoft.Caching Apizr.Integrations.Akavache Apizr.Integrations.MonkeyCache Where: Apizr.Extensions.Microsoft.Caching package brings an ICacheHandler implementation for MS Extensions Caching Apizr.Integrations.Akavache package brings an ICacheHandler implementation for Akavache Apizr.Integrations.MonkeyCache package brings an ICacheHandler implementation for MonkeyCache Warning Apizr.Extensions.Microsoft.Caching This integration package offers you to work with any of MS Extension Caching compatible caching engines. It means that you still have to install the one of your choice right after Apizr.Extensions.Microsoft.Caching. Defining Apizr comes with a Cache attribute which activate result data caching at any level (all Assembly apis, interface apis or specific api method). Here is classic api an example: namespace Apizr.Sample { [WebApi(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\"), Cache(CacheMode.GetAndFetch, \"01:00:00\")] Task<UserList> GetUsersAsync(); [Get(\"/users/{userId}\"), Cache(CacheMode.GetOrFetch, \"1.00:00:00\")] Task<UserDetails> GetUserAsync([CacheKey] int userId, CancellationToken cancellationToken); } } You’ll find also cache attributes dedicated to CRUD apis like CacheRead and CacheReadAll , so you could define cache settings at any level (all Assembly apis, interface apis or specific CRUD method). Here is CRUD api an example: namespace Apizr.Sample.Models { [CrudEntity(\"https://reqres.in/api/users\", typeof(int), typeof(PagedResult<>))] [CacheReadAll(CacheMode.GetAndFetch, \"01:00:00\")] [CacheRead(CacheMode.GetOrFetch, \"1.00:00:00\")] public class User { [JsonProperty(\"id\")] public int Id { get; set; } [JsonProperty(\"first_name\")] public string FirstName { get; set; } [JsonProperty(\"last_name\")] public string LastName { get; set; } [JsonProperty(\"avatar\")] public string Avatar { get; set; } [JsonProperty(\"email\")] public string Email { get; set; } } } Both (classic and CRUD) define the same thing about cache life time and cache mode. Life time is actually a TimeSpan string representation which is parsed then. Its optional and if you don’t provide it, the default cache provider settings will be applyed. Cache mode could be set to: GetAndFetch (default): the result is returned from request if it succeed, otherwise from cache if there’s some data already cached. In this specific case of request failing, cached data will be wrapped with the original exception into an ApizrException thrown by Apizr, so don’t forget to catch it. GetOrFetch : the result is returned from cache if there’s some data already cached, otherwise from the request. In both cases, cached data is updated after each successful request call. You also can define global caching settings by decorating the assembly or interface, then manage specific scenarios at method level. Apizr will apply the lowest level settings it could find. Back to the example, we are saying: When getting all users, let’s admit we could have many new users registered each hour, so: Try to fetch it from web first if fetch failed, try to load it from previous cached result if fetch succeed, update cached data but make it expire after 1 hour When getting a specific user, let’s admit its details won’t change so much each day, so: Try to load it from cache first if no previous cached data or cache expired after 1 day, fetch it and update cached data but make it expire after 1 day Registering Please register the one corresponding to the package you just installed MS Extensions Caching As you can guess, MS Extensions Caching is available only with extended registration flavor. That said, you'll be able to register with one of the folowing options In-Memory Distributed // direct short configuration options => options.WithInMemoryCacheHandler() // OR closed type configuration options => options.WithCacheHandler<InMemoryCacheHandler>() // OR type configuration options => options.WithCacheHandler(typeof(InMemoryCacheHandler)) // OR direct configuration options => options.WithCacheHandler(new InMemoryCacheHandler(new YOUR_INMEMORY_CACHING_ENGINE())) // OR factory configuration with the service provider instance options => options.WithCacheHandler(serviceProvider => new InMemoryCacheHandler(serviceProvider.GetRequiredService<IMemoryCache>())) // direct short configuration options => options.WithDistributedCacheHandler<TCacheType>() // OR closed type configuration options => options.WithCacheHandler<DistributedCacheHandler<TCacheType>>() // OR type configuration options => options.WithCacheHandler(typeof(DistributedCacheHandler<TCacheType>)) // OR direct configuration options => options.WithCacheHandler(new DistributedCacheHandler<TCacheType>(new YOUR_DISTRIBUTED_CACHING_ENGINE())) // OR factory configuration options => options.WithCacheHandler(serviceProvider => new DistributedCacheHandler<TCacheType>( serviceProvider.GetRequiredService<IDistributedCache>(), serviceProvider.GetRequiredService<IHttpContentSerializer>())) Where TCacheType could be either string or byte[] , conforming to MS Extensions Distributed Cache definition. Warning Distributed cache Registering MS Extension Distributed Cache means that you have to install the distributed cache of your choice and register it too. Akavache You'll be able to register with one of the folowing options: Static Extended // direct short configuration options => options.WithAkavacheCacheHandler() // OR direct configuration options => options.WithCacheHandler(new AkavacheCacheHandler()) // OR factory configuration options => options.WithCacheHandler(() => new AkavacheCacheHandler()) // direct short configuration options => options.WithAkavacheCacheHandler() // OR closed type configuration options => options.WithCacheHandler<AkavacheCacheHandler>() // OR type configuration options => options.WithCacheHandler(typeof(AkavacheCacheHandler)) // OR direct configuration options => options.WithCacheHandler(new AkavacheCacheHandler()) // OR factory configuration options => options.WithCacheHandler(serviceProvider => new AkavacheCacheHandler()) Where most of it get overloads so you could set: blobCacheFactory : The factory to init the blob cache of your choice (default: LocalMachine) applicationName : The application name used by Akavache (default: ApizrAkavacheCacheHandler) MonkeyCache Start by initializing Barrel.ApplicationId as you used to do with MonkeyCache: Barrel.ApplicationId = \"YOUR_APPLICATION_NAME\"; Then you'll be able to register with one of the folowing options: Static Extended // direct configuration options => options.WithCacheHandler(new MonkeyCacheHandler(Barrel.Current)) // OR factory configuration options => options.WithCacheHandler(() => new MonkeyCacheHandler(Barrel.Current)) // closed type configuration options => options.WithCacheHandler<MonkeyCacheHandler>() // OR type configuration options => options.WithCacheHandler(typeof(MonkeyCacheHandler)) // OR direct configuration options => options.WithCacheHandler(new MonkeyCacheHandler(Barrel.Current)) // OR factory configuration options => options.WithCacheHandler(serviceProvider => new MonkeyCacheHandler(Barrel.Current)) Warning Barrel.Current If you don't provide Barrel.Current to the MonkeyCacheHandler, don't forget to register it into your DI container. Using Reading Using Apizr caching feature is just about catching exceptions like for example: IList<User>? users = null; try { var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync()); users = userList?.Data; } catch (ApizrException<UserList> e) { users = e.CachedResult?.Data; } finally { if (users != null && users.Any()) Users = new ObservableCollection<User>(users); } Here we catch an ApizrException<UserList> meaning that in case of exception, it will bring a typed object to you loaded from cache. Clearing You may need to clear cache. Remeber that cache will be cleared when it will expire, thanks to what you set within the Cache attribute. Anyway, sometime we need to clear it explicitly, like in a Refresh scenario. Here are different ways to clear cache: // Clear on call to force fetch and update cache var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync(), true); // Clear a specific request cache var succeed = await _reqResManager.ClearCacheAsync(api => api.GetUsersAsync()); // Clear all cache var succeed = await _reqResManager.ClearCacheAsync(); Clearing all cache of all managers of entire app could also be done thanks to your cache engine api."
  },
  "articles/legacy/v4/config_datamapping.html": {
    "href": "articles/legacy/v4/config_datamapping.html",
    "title": "Configuring data mapping | Apizr",
    "keywords": "Configuring data mapping You may need to map data between some API types and Model types, known as DTO design pattern. Apizr could handle it for you by providing an IMappingHandler interface implementation to it. Fortunately, there's an integration Nuget package called Apizr.Integration.AutoMapper to integrate... AutoMapper obviously. Of course, you can implement your own integration, but here we'll talk about the provided AutoMapper one. Please first install this integration package: Project Current V-Next Apizr.Integrations.AutoMapper Defining As usually with AutoMapper, define your mapping profiles, like for example: public class UserMinUserProfile : Profile { public UserMinUserProfile() { CreateMap<User, MinUser>() .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.FirstName)); CreateMap<MinUser, User>() .ForMember(dest => dest.FirstName, opt => opt.MapFrom(src => src.Name)); } } Warning Data Mapping with MediatR and/or Optional If you plan to use MediatR and/or Optional integrations, one more defining step need to be done. Only for those of you planning to use data mapping with MediatR and/or Optional , Apizr provide a MappedWith attribute telling it to map api object with model object. You’ll find another MappedCrudEntity attribute dedicated to CRUD apis, coming with auto-registration capabilities, in case of access restricted to only local client model. We could get a model class mapped to an api one like: [MappedWith(typeof(User))] public class MinUser { public int Id { get; set; } public string Name { get; set; } } Registering Static Extended First create a MapperConfiguration with your profiles: var mapperConfig = new MapperConfiguration(config => { config.AddProfile<UserMinUserProfile>(); config.AddProfile<WhateverProfile>(); }); Then you'll be able to register with this option: // direct short configuration options => options.WithAutoMapperMappingHandler(mapperConfig) // OR direct configuration options => options.WithMappingHandler(new AutoMapperMappingHandler(mapperConfig.CreateMapper())) // OR factory configuration options => options.WithMappingHandler(() => new AutoMapperMappingHandler(mapperConfig.CreateMapper())) First register AutoMapper as you used to do: services.AddAutoMapper(ASSEMBLIES_CONTAINING_PROFILES); Then you'll be able to register with this option: // direct short configuration options => options.WithAutoMapperMappingHandler() // OR direct configuration options => options.WithMappingHandler(new AutoMapperMappingHandler(YOUR_MAPPER_CONFIG)) // OR factory configuration options => options.WithMappingHandler(() => new AutoMapperMappingHandler(YOUR_MAPPER_CONFIG)) // OR factory configuration with the service provider instance options => options.WithMappingHandler(serviceProvider => new AutoMapperMappingHandler(YOUR_MAPPER_CONFIG)) // OR closed type configuration options => options.WithMappingHandler<AutoMapperMappingHandler>() // OR parameter type configuration options => options.WithMappingHandler(typeof(AutoMapperMappingHandler)) Using You can tell Apizr to map data just by providing types when executing a request. Something like: var result = await reqResManager.ExecuteAsync<MinUser, User>((api, user) => api.CreateUser(user, CancellationToken.None), minUser); Here we give a MinUser typed object to Apizr, which will be mapped to User type just before sending it. Then Apizr will map the User typed result back to MinUser type just before returning it. There are much more overloads so you can map objects the way you need. The same while using MediatR and/or Optional ."
  },
  "articles/legacy/v4/config_delegatinghandler.html": {
    "href": "articles/legacy/v4/config_delegatinghandler.html",
    "title": "Configuring DelegatingHandlers | Apizr",
    "keywords": "Configuring DelegatingHandlers You can add DelegatingHandlers thanks to this option: Static Extended // direct configuration options => options.AddDelegatingHandler(YourDelegatingHandler) // OR factory configuration with the logger instance options => options.AddDelegatingHandler(logger => YourDelegatingHandler) // OR factory configuration with the logger and options instances options => options.AddDelegatingHandler((logger, options) => YourDelegatingHandler) // direct configuration options => options.AddDelegatingHandler(YourDelegatingHandler) // OR factory configuration with the service provider instance options => options.AddDelegatingHandler(serviceProvider => YourDelegatingHandler) // OR factory configuration with the service provider and options instances options => options.AddDelegatingHandler((serviceProvider, options) => YourDelegatingHandler) Warning Inner DelegatingHandler Don't manage delegating handlers hierarchy by yourself, providing any inner handlers. Instead, just add your handlers thanks to the AddDelegatingHandler option the order you want and Apizr will do it for you."
  },
  "articles/legacy/v4/config_exceptions.html": {
    "href": "articles/legacy/v4/config_exceptions.html",
    "title": "Configuring Exception handling | Apizr",
    "keywords": "Configuring Exception handling Using Try/Catch Here is an example of how to send a web request from an app - e.g. using Apizr in a Xamarin.Forms mobile app. Inject IApizrManager<IYourDefinedInterface> where you need it - e.g. into your ViewModel constructor IList<User>? users; try { var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync()); users = userList.Data; } catch (ApizrException<UserList> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); We catch any ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw an IO inner exception without sending the request. Using Action<Exception> onException Instead of trycatching all the things, you may want to provide an exception handling action on call, thanks to Action<Exception> onException optional parameter. Something like: reqResManager.ExecuteAsync(api => api.GetUsersAsync(), clearCache: false, onException: OnGetUsersException); ... private void OnGetUsersException(Exception ex) { ... } Using Optional.Async Here is how we could handle exceptions using Optional.Async: var optionalUserList = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()); optionalPagedResult.Match(userList => { if (userList.Data != null && userList.Data.Any()) Users = new ObservableCollection<User>(userList.Data); }, e => { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); if (e.CachedResult?.Data != null && e.CachedResult.Data.Any()) Users = new ObservableCollection<User>(e.CachedResult.Data); }); Optional is pretty cool when trying to handle nullables and exceptions, but what if we still want to write it shorter to get our request done and managed with as less code as possible. Even if we use the typed optional mediator or typed crud optional mediator to get things shorter, we still have to deal with the result matching boilerplate. Fortunately, Apizr provides some dedicated extensions to help getting things as short as we can with exceptions handled. With OnResultAsync OnResultAsync ask you to provide one of these parameters: Action<TResult> onResult : this action will be invoked just before throwing any exception that might have occurred during request execution csharp await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .OnResultAsync(userList => { users = userList?.Data; }); Func<TResult, ApizrException<TResult>, bool> onResult : this function will be invoked with the returned result and potential occurred exception await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .OnResultAsync((userList, exception) => { users = userList?.Data; if(exception != null) throw exception; return true; }); Func<TResult, ApizrException<TResult>, Task<bool>> onResult : this function will be invoked async with the returned result and potential occurred exception var success = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .OnResultAsync((userList, exception) => { users = userList?.Data; return exception != null; }); All give you a result returned from fetch if succeed, or cache if failed (if configured). The main goal here is to set any binded property with the returned result (fetched or cached), no matter of exceptions. Then the Action will let the exception throw, where the Func will let you decide to throw manually or return a success boolean flag. Of course, remember to catch throwing exceptions. With CatchAsync CatchAsync let you provide these parameters: Action<Exception> onException : this action will be invoked just before returning the result from cache if fetch failed. Useful to inform the user of the api call failure and that data comes from cache. letThrowOnExceptionWithEmptyCache : True to let it throw the inner exception in case of empty cache, False to handle it with onException action and return empty cache result (default: False) This one returns result from fetch or cache (if configured), no matter of potential exception handled on the other side by an action callback var userList = await _reqResOptionalMediator.SendFor(api => api.GetUsersAsync()) .CatchAsync(AsyncErrorHandler.HandleException, true); Here we ask the api to get users and if it fails: There’s some cached data? AsyncErrorHandler will handle the exception like to inform the user that call just failed Apizr will return the previous result from cache There’s no cached data yet! letThrowOnExceptionWithEmptyCache is True? (which is the case here) Apizr will throw the inner exception that will be catched further by AsyncErrorHander (this is its normal behavior) letThrowOnExceptionWithEmptyCache is False! (default) Apizr will return the empty cache data (null) which has to be handled then One line of code to get all the thing done safely and shorter than ever!"
  },
  "articles/legacy/v4/config_httpclientbuilder.html": {
    "href": "articles/legacy/v4/config_httpclientbuilder.html",
    "title": "Configuring HttpClientBuilder | Apizr",
    "keywords": "Configuring HttpClientBuilder With the extended approach only, you can configure HttpClientBuilder thanks to this option: options => options.ConfigureHttpClientBuilder(httpClientBuilder => httpClientBuilder.WhateverOption()) Warning HttpClientBuilder Apizr makes use of HttpClientBuilder so keep in mind that you may override some of its features depending of what you're trying to do with HttpClientBuilder. Use with caution."
  },
  "articles/legacy/v4/config_httpclienthandler.html": {
    "href": "articles/legacy/v4/config_httpclienthandler.html",
    "title": "Configuring HttpClientHandler | Apizr",
    "keywords": "Configuring HttpClientHandler You can provide your own HttpClientHandler thanks to this option: Static Extended // direct configuration options => options.WithHttpClientHandler(YourOwnHttpClientHandler) // OR factory configuration options => options.WithHttpClientHandler(() => YourOwnHttpClientHandler) // direct configuration options => options.WithHttpClientHandler(YourOwnHttpClientHandler) // OR factory configuration options => options.WithHttpClientHandler(serviceProvider => YourOwnHttpClientHandler)"
  },
  "articles/legacy/v4/config_logger.html": {
    "href": "articles/legacy/v4/config_logger.html",
    "title": "Configuring logger | Apizr",
    "keywords": "Configuring logger Apizr v4+ relies on Microsoft.Extensions.Logging, which relies on any compatible logger of your choice. Apizr comes with a quite simple built-in Debug logger by default, but you'd better provide your own obviously. You can configure logger only by fluent configuration. Static Extended You can set logger configuration thanks to this option: options => options.WithLoggerFactory(LoggerFactory.Create(loggingBuilder => { loggingBuilder.AddConsole(); loggingBuilder.AddDebug(); })) LoggerFactory.Create method is provided by Microsoft.Extensions.Logging which lets you add any compatible logger. There's nothing specific to do with Apizr about logger when using the extended approach. Just don't forget to configure it like you usualy do: loggingBuilder.AddConsole() wherever in your app you get access to ILoggingBuilder ."
  },
  "articles/legacy/v4/config_logging.html": {
    "href": "articles/legacy/v4/config_logging.html",
    "title": "Configuring logging | Apizr",
    "keywords": "Configuring logging You can adjust logging configuration with: httpTracerMode (default: Everything ) Http traffic tracing mode: ExceptionsOnly logs only when an exception occurs ErrorsAndExceptionsOnly logs only when an exception or any error occurs Everything logs all, anytime trafficVerbosity (default: All ) Http traffic tracing verbosity (see HttpTracer), with: None RequestBody RequestHeaders RequestCookies RequestAll = RequestBody | RequestHeaders | RequestCookies ResponseBody ResponseHeaders ResponseAll = ResponseBody | ResponseHeaders All = ResponseAll | RequestAll logLevels (default: [Low] Trace , [Medium] Information and [High] Critical ) Log levels to apply while writing logs (see Microsoft.Enxtension.Logging), with: Trace Debug Information Warning Error Critical None You can configure logging either by attribute decoration or by fluent configuration. In both cases, logLevels is a parameter array. It lets you provide from 0 to 3 different levels, as Apizr needs to get corresponding log level to each internal severity: Low: logs any internal and normal execution step Medium: logs all missconfigured things, like asking for cache without providing any cache provider High: logs errors and exceptions Obviously, providing more than 3 log levels would be pointlees. It means that: if you don't provide any log level at all, default levels will be applied ([Low] Trace , [Medium] Information and [High] Critical ) if you provide only 1 log level like Information , it will be applied to all log entries ([Low] Information , [Medium] Information and [High] Information ). Up to you to catch exceptions and to log it at any level of your choice. if you provide only 2 log levels like Debug and Error , the lowest will be applied to both Low and Medium ([Low] Debug , [Medium] Debug and [High] Error ) if you provide 3 log levels like Debug , Warning and Critical , it will be applied like you said ([Low] Debug , [Medium] Warning and [High] Critical ) if you provide more than 3 log levels, the lowest goes to Low, the highest to High and it will take the middle one for Medium if you provide a None at some point, it will disable logging for corresponding severity Attribute Fluent You can set logging configuration thanks to Log attribute. Configuring logging with attribute allows you to use assembly scanning auto registration feature. The Log attribute could decorate: Assembly: to set logging configuration to all assembly api interfaces/entities Interface/Class: to set logging configuration to all request methods of the decorated api interface/entity Method: to set logging configuration to a specific request method of an api interface or entity (with dedicated attribtes) You also can mix decoration levels to set a common logging configuration to all assembly api interfaces, and/or a specific to all api interface methods, and/or a specific to an api interface method. [assembly:Log] namespace Apizr.Sample { [WebApi(\"https://reqres.in/\")] public interface IReqResService { [Get(\"/api/users\")] Task<UserList> GetUsersAsync(); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId); [Post(\"/api/users\")] Task<User> CreateUser(User user); } } In this example, we decided to apply the default logging configuration ([Low] Trace , [Medium] Information and [High] Critical ) to all assembly api interfaces/entities. But you can adjust logging configuration thanks to attribute parameters. Configuring the logging fluently allows you to set it dynamically (e.g. based on settings) You can set it thanks to this option: // direct configuration options => options.WithLogging(HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Information) // OR static factory configuration options => options.WithLogging(() => Settings.HttpTracerMode, () => Settings.TrafficVerbosity, () => Settings.LogLevels) // OR extended factory configuration options => options.WithLogging( serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().HttpTracerMode, serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().TrafficVerbosity serviceProvider => serviceProvider.GetRequiredService<IYourSettingsService>().LogLevels) All logging fluent options are available with and without using registry. It means that you can share logging configuration, setting it at registry level and/or set some specific one at api level."
  },
  "articles/legacy/v4/config_mediatr.html": {
    "href": "articles/legacy/v4/config_mediatr.html",
    "title": "Configuring MediatR | Apizr",
    "keywords": "Configuring MediatR Apizr offers an integration with MediatR , following the Mediator pattern , available only with the extended approach. Mediator pattern ensures to keep all the thing as loosely coupled as we can between our ViewModel/ViewControler and our Data Access Layer. As everything should be loosely coupled between Views and ViewModels (MVVM) or ViewControlers (MVC) thanks to data binding, MediatR offers you to keep it all loosely coupled between your VM/VC and your DAL too. Please read the official documentation to know more about MediatR. The main benefit in using it with Apizr is to offer you a very simple and unified way to send your request, no matter from where or about what. Simple and unified because instead of injecting/resolving each api interface you need to get your data, you just have to use the IMediator interface, everywhere, every time. Registering Please first install this integration package: Project Current V-Next Apizr.Integrations.MediatR Then you'll be able to register with this option: options => options.WithMediation() And don't forget to register MediatR itself as usual: services.AddMediatR(YOUR_REQUESTHANDLER_ASSEMBLIES); Where YOUR_REQUESTHANDLER_ASSEMBLIES should be the assemblies containing your custom request handlers, if you get some (Apizr MediatR request handlers will be auto registered). Using IMediator IApizrMediator IApizrMediator<TWebApi> When registered, you don't have to inject/resolve anything else than IMediator , in order to play with your api services (both classic and crud). Everything you need to do then, is sending your request by calling: var result = await _mediator.Send(YOUR_REQUEST_HERE); Where YOUR_REQUEST_HERE could be: Classic API: With no result: ExecuteUnitRequest<TWebApi> : execute any method from TWebApi ExecuteUnitRequest<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData mapped with TApiData With result: ExecuteResultRequest<TWebApi, TApiData> : execute any method from TWebApi with a TApiData request/result data ExecuteResultRequest<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData request/result data mapped with TApiData ExecuteResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : execute any method from TWebApi , sending TApiRequestData mapped from TModelRequestData , then returning TModelResultData mapped from TApiResultData CRUD API: Read: ReadQuery<TResultData> : get the TResultData entity matching an int key ReadQuery<TResultData, TKey> : get the TResultData entity matching a TKey ReadAll: ReadAllQuery<TReadAllResult> : get TReadAllResult with IDictionary<string, object> optional query parameters ReadAllQuery<TReadAllParams, TReadAllResult> : get TReadAllResult with TReadAllParams optional query parameters Create: CreateCommand<TModelData> : create a TModelData entity Update: UpdateCommand<TRequestData> : update the TRequestData entity matching an int key UpdateCommand<TKey, TRequestData> : update the TRequestData entity matching a TKey Delete: DeleteCommand<T> : delete the T entity matching an int key DeleteCommand<T, TKey> : delete the T entity matching a TKey Writting things shorter, instead of injecting/resolving IMediator , you could do it with IApizrMediator or IApizrCrudMediator . Everything you need to do then, is sending your request by calling something like: // Classic var result = await _apizrMediator.SendFor<TWebApi>(YOUR_API_METHOD_HERE); // OR CRUD var result = await _apizrCrudMediator.SendReadAllQuery<TReadAllResult>(); Classic mediator methods: No result: SendFor<TWebApi> : execute any method from TWebApi SendFor<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TWebApi, TApiData> : execute any method from TWebApi with a TApiData request/result data SendFor<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : execute any method from TWebApi , sending TApiRequestData mapped from TModelRequestData , then returning TModelResultData mapped from TApiResultData CRUD mediator methods: Read: SendReadQuery<TApiEntity, TApiEntityKey> : get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey> : get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery<TReadAllResult> : get TReadAllResult with IDictionary<string, object> optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult> : get TModelReadAllResult mapped from TApiReadAllResult SendReadAllQuery<TReadAllResult, TReadAllParams> : get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams> : get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand<TApiEntity> : create a TApiEntity SendCreateCommand<TModelEntity, TApiEntity> : create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand<TApiEntity, TApiEntityKey> : update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey> : update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand<TApiEntity, TApiEntityKey> : delete the TApiEntity matching a TApiEntityKey Writting things shorter than ever, instead of injecting/resolving IMediator , IApizrMediator or IApizrCrudMediator , you could do it with IApizrMediator<TWebApi> or IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> . Tip Apizr Registry Note that if you were using the registry feature while configuring, you'll be able to inject/resolve IApizrMediationRegistry instead and then just get an IApizrMediator<TWebApi> or IApizrCrudMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> thanks to its Get methods. Everything you need to do then, is sending your request by calling something like: // Classic var result = await _apizrMediator.SendFor(YOUR_API_METHOD_HERE); // OR CRUD var result = await _apizrCrudMediator.SendReadAllQuery(); Classic typed mediator methods: No result: SendFor : execute any method from TWebApi SendFor<TModelData, TApiData> : execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TApiData> : execute any method from TWebApi with a TApiData request/result data SendFor<TModelData, TApiData> : execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : execute any method from TWebApi , sending TApiRequestData mapped from TModelRequestData , then returning TModelResultData mapped from TApiResultData CRUD typed mediator methods: Read: SendReadQuery : get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity> : get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery : get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult> : get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand : create a TApiEntity SendCreateCommand<TModelEntity> : create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand : update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity> : update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand : delete the TApiEntity matching a TApiEntityKey"
  },
  "articles/legacy/v4/config_optional.html": {
    "href": "articles/legacy/v4/config_optional.html",
    "title": "Configuring Optional.Async | Apizr",
    "keywords": "Configuring Optional.Async Apizr offers an integration with Optional.Async , following the Optional pattern , available only with the extended approach with MediatR integration activated. Optional.Async offers a strongly typed alternative to null values that lets you: Avoid those pesky null-reference exceptions Signal intent and model your data more explicitly Cut down on manual null checks and focus on your domain It allows you to chain Task<Option<T>> and Task<Option<T, TException>> without having to use await Registering Please first install this integration package: Project Current V-Next Apizr.Integrations.Optional Then you'll be able to register with this option: options => options.WithOptionalMediation() And don't forget to register MediatR itself as usual: services.AddMediatR(YOUR_REQUESTHANDLER_ASSEMBLIES); Where YOUR_REQUESTHANDLER_ASSEMBLIES should be the assemblies containing your custom request handlers, if you get some (Apizr MediatR request handlers will be auto registered). Using IMediator IApizrOptionalMediator IApizrOptionalMediator<TWebApi> When registered, you don't have to inject/resolve anything else than IMediator , in order to play with your api services (both classic and crud). Everything you need to do then, is sending your request by calling: var optionalResult = await _mediator.Send(YOUR_REQUEST_HERE); Where YOUR_REQUEST_HERE could be: Classic API: With no result: ExecuteOptionalUnitRequest<TWebApi> : execute any method from TWebApi ExecuteOptionalUnitRequest<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData mapped with TApiData With result: ExecuteOptionalResultRequest<TWebApi, TApiData> : execute any method from TWebApi with a TApiData request/result data ExecuteOptionalResultRequest<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData request/result data mapped with TApiData ExecuteOptionalResultRequest<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : execute any method from TWebApi , sending TApiRequestData mapped from TModelRequestData , then returning TModelResultData mapped from TApiResultData CRUD API: Read: ReadOptionalQuery<TResultData> : get the TResultData entity matching an int key ReadOptionalQuery<TResultData, TKey> : get the TResultData entity matching a TKey ReadAll: ReadAllOptionalQuery<TReadAllResult> : get TReadAllResult with IDictionary<string, object> optional query parameters ReadAllOptionalQuery<TReadAllParams, TReadAllResult> : get TReadAllResult with TReadAllParams optional query parameters Create: CreateOptionalCommand<TModelData> : create a TModelData entity Update: UpdateOptionalCommand<TRequestData> : update the TRequestData entity matching an int key UpdateOptionalCommand<TKey, TRequestData> : update the TRequestData entity matching a TKey Delete: DeleteOptionalCommand<T> : delete the T entity matching an int key DeleteOptionalCommand<T, TKey> : delete the T entity matching a TKey Writting things shorter, instead of injecting/resolving IMediator , you could do it with IApizrMediator or IApizrCrudMediator . Everything you need to do then, is sending your request by calling something like: // Classic var optionalResult = await _apizrOptionalMediator.SendFor<TWebApi>(YOUR_API_METHOD_HERE); // OR CRUD var optionalResult = await _apizrOptionalCrudMediator.SendReadAllQuery<TReadAllResult>(); Classic Optional mediator methods: No result: SendFor<TWebApi> : execute any method from TWebApi SendFor<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TWebApi, TApiData> : execute any method from TWebApi with a TApiData request/result data SendFor<TWebApi, TModelData, TApiData> : execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TWebApi, TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : execute any method from TWebApi , sending TApiRequestData mapped from TModelRequestData , then returning TModelResultData mapped from TApiResultData CRUD Optional mediator methods: Read: SendReadQuery<TApiEntity, TApiEntityKey> : get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity, TApiEntity, TApiEntityKey> : get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery<TReadAllResult> : get TReadAllResult with IDictionary<string, object> optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult> : get TModelReadAllResult mapped from TApiReadAllResult SendReadAllQuery<TReadAllResult, TReadAllParams> : get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult, TApiReadAllResult, TReadAllParams> : get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand<TApiEntity> : create a TApiEntity SendCreateCommand<TModelEntity, TApiEntity> : create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand<TApiEntity, TApiEntityKey> : update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity, TApiEntity, TApiEntityKey> : update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand<TApiEntity, TApiEntityKey> : delete the TApiEntity matching a TApiEntityKey Writting things shorter than ever, instead of injecting/resolving IMediator , IApizrOptionalMediator or IApizrCrudOptionalMediator , you could do it with IApizrOptionalMediator<TWebApi> or IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> . Tip Apizr Registry Note that if you were using the registry feature while configuring, you'll be able to inject/resolve IApizrOptionalMediationRegistry instead and then just get an IApizrOptionalMediator<TWebApi> or IApizrCrudOptionalMediator<TApiEntity, TApiEntityKey, TReadAllResult, TReadAllParams> thanks to its GetFor and GetCrudFor methods. Everything you need to do then, is sending your request by calling something like: // Classic var optionalResult = await _apizrOptionalMediator.SendFor(YOUR_API_METHOD_HERE); // OR CRUD var optionalResult = await _apizrCrudOptionalMediator.SendReadAllQuery(); Classic Optional typed mediator methods: No result: SendFor : execute any method from TWebApi SendFor<TModelData, TApiData> : execute any method from TWebApi with TModelData mapped with TApiData With result: SendFor<TApiData> : execute any method from TWebApi with a TApiData request/result data SendFor<TModelData, TApiData> : execute any method from TWebApi with TModelData request/result data mapped with TApiData SendFor<TModelResultData, TApiResultData, TApiRequestData, TModelRequestData> : execute any method from TWebApi , sending TApiRequestData mapped from TModelRequestData , then returning TModelResultData mapped from TApiResultData CRUD typed mediator methods: Read: SendReadQuery : get the TApiEntity matching a TApiEntityKey SendReadQuery<TModelEntity> : get the TModelEntity mapped from TApiEntity and matching a TApiEntityKey ReadAll: SendReadAllQuery : get TReadAllResult with TReadAllParams optional query parameters SendReadAllQuery<TModelReadAllResult> : get TModelReadAllResult mapped from TApiReadAllResult with TReadAllParams optional query parameters Create: SendCreateCommand : create a TApiEntity SendCreateCommand<TModelEntity> : create a TApiEntity mapped from TModelEntity Update: SendUpdateCommand : update the TApiEntity entity matching a TApiEntityKey SendUpdateCommand<TModelEntity> : update the TApiEntity mapped from TModelEntity and matching a TApiEntityKey Delete: SendDeleteCommand : delete the TApiEntity matching a TApiEntityKey You should finaly end with something like: optionalResult.Match(result => { // Oh yeah, you get a result! }, e => { // Oh no, something went wrong! });"
  },
  "articles/legacy/v4/config_policies.html": {
    "href": "articles/legacy/v4/config_policies.html",
    "title": "Configuring Policies | Apizr",
    "keywords": "Configuring Policies Apizr comes with a Policy attribute to apply some policies on apis, handled by Polly . You’ll find also policy attributes dedicated to CRUD apis like CreatePolicy , ReadPolicy and so on… Polly will help you to manage some retry scenarios but can do more. Please refer to its official documentation if you’d like to know more about it. Registering Here is how to define a policy, adding it to a policy registry. var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }, LoggedPolicies.OnLoggedRetry).WithPolicyKey(\"TransientHttpError\") } }; TransiantHttpError policy is actually provided by Polly itself, so we jsut call its HttpPolicyExtensions.HandleTransientHttpError() method. We're also giving here an OnLoggedRetry method provided by Apizr, so we coud get some logging outputs when Polly comes in the party in case of handled failures. PolicyRegistry is where you register all your named policies to be used by Polly thanks to attribute decoration, TransiantHttpError is just an example. Now we have to register our policy registry: Static Extended You'll be able to register your policy registry with this option: // direct configuration options => options.WithPolicyRegistry(registry) // OR factory configuration options => options.WithPolicyRegistry(() => registry) There's nothing specific to do with Apizr about Polly when using the extended approach. Just don't forget to register it like you usualy do: services.AddPolicyRegistry(registry); Defining Now we can use it thanks to attribute decoration: [assembly:Policy(\"TransientHttpError\")] namespace Apizr.Sample { [WebApi(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\")] Task<UserList> GetUsersAsync(); } } Here we are using it at assembly level, telling Apizr to apply TransiantHttpError policy to all apis. You can mix levels and mix policies as all will be wrapped. Using Apizr will automatically tell Polly to handle request of any decorated api method."
  },
  "articles/legacy/v4/config_priority.html": {
    "href": "articles/legacy/v4/config_priority.html",
    "title": "Configuring Priority | Apizr",
    "keywords": "Configuring Priority Apizr could use Fusillade to offer some api priority management on calls. To be short, Fusillade is about: Auto-deduplication of relevant requests Request Limiting Request Prioritization Speculative requests Please refer to its official documentation if you’d like to know more about it. Registering Please first install this integration package: Project Current V-Next Apizr.Integrations.Fusillade Then you'll be able to register with this option: options => options.WithPriorityManagement() Defining While defining your api interfaces using Apizr to send a request, you can add an int property param decorated with the provided Property attribute to your methods like: [WebApi(\"https://reqres.in/api\")] public interface IReqResService { [Get(\"/users\")] Task<UserList> GetUsersAsync([Priority] int priority); } Using Just call your api with your priority: var result = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync((int)Priority.Background));"
  },
  "articles/legacy/v4/config_refitsettings.html": {
    "href": "articles/legacy/v4/config_refitsettings.html",
    "title": "Configuring RefitSettings | Apizr",
    "keywords": "Configuring RefitSettings You can set RefitSettings thanks to this option: Static Extended // direct configuration options => options.WithRefitSettings(YourOwnRefitSettings) // OR factory configuration options => options.WithRefitSettings(() => YourOwnRefitSettings) // direct configuration options => options.WithRefitSettings(YourOwnRefitSettings) // OR factory configuration options => options.WithRefitSettings(serviceProvider => YourOwnRefitSettings) Warning AuthorizationHeaderValue Apizr provides its own AuthenticationHandler to manage authorization (see Configuring > Authentication). There's no need to use AuthorizationHeaderValue properties."
  },
  "articles/legacy/v4/gettingstarted_classic.html": {
    "href": "articles/legacy/v4/gettingstarted_classic.html",
    "title": "Defining | Apizr",
    "keywords": "Defining We could define our web api service just like: [assembly:Policy(\"TransientHttpError\")] namespace Apizr.Sample { [WebApi(\"https://reqres.in/\"), Cache, Log] public interface IReqResService { [Get(\"/api/users\")] Task<UserList> GetUsersAsync(); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId); [Post(\"/api/users\")] Task<User> CreateUser(User user); } } And that's all. Every attributes here will inform Apizr on how to manage each web api request. No more boilerplate. Registering It's not required to register anything in a container for DI purpose (you can use the returned static instance directly), but we'll describe here how to use it with DI anyway. Registering a single interface Static Extended Here is an example of how to register a managed instance of an api interface: // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; // Apizr registration myContainer.RegistrationMethodFactory(() => ApizrBuilder.CreateManagerFor<IReqResService>(options => options .WithPolicyRegistry(registry) .WithAkavacheCacheHandler()) ); We provided a policy registry and a cache handler here as we asked for it with cache and policy attributes while designing the api interface. Also, you could use the manager directly instead of registering it. Here is an example of how to register a managed api interface: public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizrManagerFor<IReqResService>(options => options.WithAkavacheCacheHandler()); } We registered a policy registry and provided a cache handler here as we asked for it with cache and policy attributes while designing the api interface. Registering multiple interfaces Static Extended You may want to register multiple managed api interfaces within the same project. Also, you may want to share some common configuration between apis without repeating yourself, but at the same time, you may need to set some specific ones for some of it. This is where the ApizrRegistry comes on stage. Here is an example of how to register a managed instance of multiple api interfaces: // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; // Apizr registry var apizrRegistry = ApizrBuilder.CreateRegistry( registry => registry .AddManagerFor<IReqResService>() .AddManagerFor<IHttpBinService>( options => options .WithLogging( HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Trace)), config => config .WithPolicyRegistry(registry) .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); // Container registration apizrRegistry.Populate((type, factory) => myContainer.RegistrationMethodFactory(type, factory) ); Here is what we're saying in this example: Add a manager for IReqResService api interface into the registry Add a manager for IHttpBinService api interface into the registry Set some specific logging settings dedicated to IHttpBinService's manager Apply common configuration to all managers by: Providing a policy registry Providing a cache handler Providing some logging settings (won't apply to IHttpBinService's manager as we set some specific ones) It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Also, you could register the registry itslef, instead of its populated managers and then use its managers directly. Or, you could use the managers directly from the registry instead of registering anything. Here's how to get a manager from the registry: var reqResManager = apizrRegistry.GetManagerFor<IReqResService>(); var httpBinManager = apizrRegistry.GetManagerFor<IHttpBinService>(); You may want to register multiple managed api interfaces within the same project. Also, you may want to share some common configuration between apis without repeating yourself, but at the same time, you may need to set some specific ones for some of it. This is where the ApizrRegistry comes on stage. Here is an example of how to register multiple managed api interfaces manually: public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizr( registry => registry .AddManagerFor<IReqResService>() .AddManagerFor<IHttpBinService>( options => options .WithLogging( HttpTracerMode.Everything, HttpMessageParts.All, LogLevel.Trace)), config => config .WithPolicyRegistry(registry) .WithAkavacheCacheHandler() .WithLogging( HttpTracerMode.ExceptionsOnly, HttpMessageParts.ResponseAll, LogLevel.Error) ); } Here is what we're saying in this example: Add a manager for IReqResService api interface into the registry, to register it into the container Add a manager for IHttpBinService api interface into the registry, to register it into the container Set some specific logging settings dedicated to IHttpBinService's manager Apply common configuration to all managers by: Providing a policy registry Providing a cache handler Providing some logging settings (won't apply to IHttpBinService's manager as we set some specific ones) It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Of course, each managers will be regitered into the container so that you can use it directly. Also, the registry itslef will be registered into the container, so you could use it to get its managers, instead of using each managers. Here's how to get a manager from the registry: var reqResManager = apizrRegistry.GetManagerFor<IReqResService>(); var httpBinManager = apizrRegistry.GetManagerFor<IHttpBinService>(); Registering all scanned interfaces Static Extended Not available. Here is an example of how to auto register all scanned interfaces: public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizrManagerFor(options => options.WithAkavacheCacheHandler(), ASSEMBLIES_CONTAINING_INTERFACES); } Apizr will scan assemblies to auto register managers for decorated api interfaces. We registered a policy registry and provided a cache handler here as we asked for it with cache and policy attributes while designing the api interface. Using Here is an example of how to send a web request from an app - e.g. using Apizr in a Xamarin.Forms mobile app. Inject IApizrManager<IYourDefinedInterface> where you need it - e.g. into your ViewModel constructor public class YourViewModel { private readonly IApizrManager<IReqResService> _reqResManager; public YouViewModel(IApizrManager<IReqResService> reqResManager) // Or registry injection //public YouViewModel(IApizrRegistry apizrRegistry) { _reqResManager = reqResManager; // Or registry injection //_reqResManager = apizrRegistry.GetManagerFor<IReqResService>(); } public ObservableCollection<User>? Users { get; set; } private async Task GetUsersAsync() { IList<User>? users; try { var userList = await _reqResManager.ExecuteAsync(api => api.GetUsersAsync()); users = userList.Data; } catch (ApizrException<UserList> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); } } We catch any ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw an IO inner exception without sending the request."
  },
  "articles/legacy/v4/gettingstarted_crud.html": {
    "href": "articles/legacy/v4/gettingstarted_crud.html",
    "title": "Defining | Apizr",
    "keywords": "Defining As we'll use the built-in yet defined ICrudApi, there's no more definition to do. Here is what the provided interface looks like then: public interface ICrudApi<T, in TKey, TReadAllResult, in TReadAllParams> where T : class { #region Create [Post(\"\")] Task<T> Create([Body] T payload); [Post(\"\")] Task<T> Create([Body] T payload, [Context] Context context); [Post(\"\")] Task<T> Create([Body] T payload, CancellationToken cancellationToken); [Post(\"\")] Task<T> Create([Body] T payload, [Context] Context context, CancellationToken cancellationToken); #endregion #region ReadAll [Get(\"\")] Task<TReadAllResult> ReadAll(); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams); [Get(\"\")] Task<TReadAllResult> ReadAll([Property(Constants.PriorityKey)] int priority); [Get(\"\")] Task<TReadAllResult> ReadAll([Context] Context context); [Get(\"\")] Task<TReadAllResult> ReadAll(CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(Constants.PriorityKey)] int priority); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Context] Context context); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([Property(Constants.PriorityKey)] int priority, [Context] Context context); [Get(\"\")] Task<TReadAllResult> ReadAll([Property(Constants.PriorityKey)] int priority, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([Context] Context context, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(Constants.PriorityKey)] int priority, [Context] Context context); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(Constants.PriorityKey)] int priority, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Context] Context context, CancellationToken cancellationToken); [Get(\"\")] Task<TReadAllResult> ReadAll([CacheKey] TReadAllParams readAllParams, [Property(Constants.PriorityKey)] int priority, [Context] Context context, CancellationToken cancellationToken); #endregion #region Read [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(Constants.PriorityKey)] int priority); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Context] Context context); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, CancellationToken cancellationToken); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(Constants.PriorityKey)] int priority, [Context] Context context); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(Constants.PriorityKey)] int priority, CancellationToken cancellationToken); [Get(\"/{key}\")] Task<T> Read([CacheKey] TKey key, [Property(Constants.PriorityKey)] int priority, [Context] Context context, CancellationToken cancellationToken); #endregion #region Update [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload); [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload, [Context] Context context); [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload, CancellationToken cancellationToken); [Put(\"/{key}\")] Task Update(TKey key, [Body] T payload, [Context] Context context, CancellationToken cancellationToken); #endregion #region Delete [Delete(\"/{key}\")] Task Delete(TKey key); [Delete(\"/{key}\")] Task Delete(TKey key, [Context] Context context); [Delete(\"/{key}\")] Task Delete(TKey key, CancellationToken cancellationToken); [Delete(\"/{key}\")] Task Delete(TKey key, [Context] Context context, CancellationToken cancellationToken); #endregion } We can see that it comes with many parameter combinations, but it won't do anything until you ask Apizr to. Caching, Logging, Policing, Prioritizing... everything is activable fluently with the options builder. About generic types: T and TKey (optional - default: int ) meanings are obvious TReadAllResult (optional - default: IEnumerable<T> ) is there to handle cases where ReadAll doesn't return an IEnumerable<T> or derived, but a paged result with some statistics TReadAllParams (optional - default: IDictionary<string, object> ) is there to handle cases where you don't want to provide an IDictionary<string, object> for a ReadAll reaquest, but a custom class But again, nothing to do around here. Registering It's not mandatory to register anything in a container for DI purpose (you can use the returned static instance directly), but we'll describe here how to use it with DI anyway. Registering a single interface Static Extended Here is an example of how to register a managed instance of the CRUD api interface: // Apizr registration myContainer.RegistrationMethod(() => ApizrBuilder.CreateCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(options => options .WithBaseAddress(\"your specific T entity crud base uri\")) ); T must be a class. TKey must be primitive. If you don't provide it here, it will be defined as int . TReadAllResult must inherit from IEnumerable<> or be a class. If you don't use paged result, just don't provide any TReadAllResult here and it will be defined as IEnumerable<T> . TReadAllParams must be a class. If you don't use a custom class holding your query parameters, just don't provide any TReadAllParams here and it will be defined as IDictionary<string, object> . You have to provide the specific entity crud base uri with the options builder (if you don't plan to use entity crud attribute). Also, you could use the manager directly instead of registering it. Here is an example of how to register a managed CRUD api interface: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrCrudManagerFor<T, TKey, TReadAllResult, TReadAllParams>(options => options .WithBaseAddress(\"your specific T entity crud base uri\")); } Again, T must be a class. TKey must be primitive. If you don't provide it here, it will be defined as int . TReadAllResult must inherit from IEnumerable<> or be a class. If you don't use paged result, just don't provide any TReadAllResult here and it will be defined as IEnumerable<T> . TReadAllParams must be a class. If you don't use a custom class holding your query parameters, just don't provide any TReadAllParams here and it will be defined as IDictionary<string, object> . You have to provide the specific entity crud base uri with the options builder (if you don't plan to use entity crud attribute). Registering multiple interfaces Static Extended You may want to register multiple managed api interfaces within the same project. Also, you may want to share some common configuration between apis without repeating yourself, but at the same time, you may need to set some specific ones for some of it. This is where the ApizrRegistry comes on stage. Here is an example of how to register a managed instance of multiple api interfaces: // Apizr registry var apizrRegistry = ApizrBuilder.CreateRegistry( registry => registry .AddCrudManagerFor<T1>( options => options .WithBaseAddress(\"your specific T1 entity crud base uri\") .AddCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>( options => options .WithBaseAddress(\"your specific T2 entity crud base uri\"), config => config .WithAkavacheCacheHandler() ); // Container registration apizrRegistry.Populate((type, factory) => myContainer.RegistrationMethodFactory(type, factory) ); Here is what we're saying in this example: Add a manager for T1 entity with CRUD api interface and default types into the registry Set a specific address dedicated to T1's manager Add a manager for T2 entity with CRUD api interface and custom types into the registry Set a specific address dedicated to T2's manager Apply common configuration to all managers by: Providing a cache handler It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Also, you could register the registry itslef, instead of its populated managers and then use its managers directly. Or, you could use the managers directly from the registry instead of registering anything. Here's how to get a manager from the registry: // T1 with default registered types var t1Manager = apizrRegistry.GetCrudManagerFor<T1>(); // T2 with custom registered types var t2Manager = apizrRegistry.GetCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>(); You may want to register multiple managed CRUD api interfaces within the same project. Also, you may want to share some common configuration between apis without repeating yourself, but at the same time, you may need to set some specific ones for some of it. This is where the ApizrRegistry comes on stage. Here is an example of how to register multiple managed CRUD api interfaces manually: public override void ConfigureServices(IServiceCollection services) { // Some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions.HandleTransientHttpError().WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; services.AddPolicyRegistry(registry); // Apizr registration services.AddApizr( registry => registry .AddCrudManagerFor<T1>( options => options .WithBaseAddress(\"your specific T1 entity crud base uri\") .AddCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>( options => options .WithBaseAddress(\"your specific T2 entity crud base uri\"), config => config .WithAkavacheCacheHandler() ); } Here is what we're saying in this example: Add a manager for T1 entity with CRUD api interface and default types into the registry, to register it into the container Set a specific address dedicated to T1's manager Add a manager for T2 entity with CRUD api interface and custom types into the registry, to register it into the container Set a specific address dedicated to T2's manager Apply common configuration to all managers by: Providing a cache handler It's an example, meaning if you don't need common and/or specific configuration, just don't provide it. And yes you can mix classic and CRUD manager registration into the same registry. Of course, each managers will be regitered into the container so that you can use it directly. Also, the registry itslef will be registered into the container, so you could use it to get its managers, instead of using each managers. Here's how to get a manager from the registry: // T1 with default registered types var t1Manager = apizrRegistry.GetCrudManagerFor<T1>(); // T2 with custom registered types var t2Manager = apizrRegistry.GetCrudManagerFor<T2, T2Key, T2ReadAllResult, T2ReadAllParams>(); Registering all scanned interfaces Static Extended Not available. You need to have access to your entity model classes for this option. Decorate your crud entities like so (but with your own settings): [CrudEntity(\"https://mybaseuri.com/api/myentity\", typeof(int), typeof(PagedResult<>), typeof(ReadAllUsersParams))] public class MyEntity { [JsonPropertyName(\"id\")] public int Id { get; set; } ... } Thanks to this attribute: (Mandatory) We have to provide the specific entity crud base uri (no more fluent declaration) (Optional) We can set TKey type to any primitive type (default to int) (Optional) We can set TReadAllResult to any class or must inherit from IEnumerable<> (default to IEnumerable<T> ) (Optional) We can set TReadAllParams to any class (default to IDictionary<string, object> ) Then, here is a registration example: public override void ConfigureServices(IServiceCollection services) { // Apizr registration services.AddApizrCrudManagerFor(options => options.WithAkavacheCacheHandler(), ASSEMBLIES_CONTAINING_ENTITIES); } Apizr will scan assemblies to auto register managers for decorated entities. Using Here is an example of how to send a web request from an app - e.g. using Apizr in a Xamarin.Forms mobile app. Inject IApizrManager<ICrudApi<T, TKey, TReadAllResult, TReadAllParams>> where you need it - e.g. into your ViewModel constructor public class YourViewModel { private readonly IApizrManager<ICrudApi<User, int, PagedResult<User>, ReadAllUsersParams>> _userCrudManager; public YouViewModel(IApizrManager<ICrudApi<User, int, PagedResult<User>, ReadAllUsersParams>> userCrudManager) // Or registry injection //public YouViewModel(IApizrRegistry apizrRegistry) { _userCrudManager = userCrudManager; // Or registry injection //_userCrudManager = apizrRegistry.GetCrudManagerFor<User, int, PagedResult<User>, ReadAllUsersParams>>(); } public ObservableCollection<User>? Users { get; set; } private async Task GetUsersAsync() { IList<User>? users; try { var pagedUsers = await _userCrudManager.ExecuteAsync(api => api.ReadAll()); users = pagedUsers.Data?.ToList(); } catch (ApizrException<PagedResult<User>> e) { var message = e.InnerException is IOException ? \"No network\" : (e.Message ?? \"Error\"); UserDialogs.Instance.Toast(new ToastConfig(message) { BackgroundColor = Color.Red, MessageTextColor = Color.White }); users = e.CachedResult?.Data; } if(users != null) Users = new ObservableCollection<User>(users); } } We catch any ApizrException as it will contain the original inner exception, but also the previously cached result if some. If you provided an IConnectivityHandler implementation and there's no network connectivity before sending request, Apizr will throw with an IO inner exception without sending the request."
  },
  "articles/tools.html": {
    "href": "articles/tools.html",
    "title": "Tools | Apizr",
    "keywords": "Tools You'll find here some tools around Apizr helping to get things up and runing, the quick and easy way"
  },
  "articles/tools_nswag.html": {
    "href": "articles/tools_nswag.html",
    "title": "NSwag | Apizr",
    "keywords": "NSwag Apizr comes with a tool called Apizr.Tools.NSwag that offers to get all files generated by a couple of command lines. It relies on the well known NSwag CLI, letting define all we need in a json configuration file, and generating models, services and a registration helper class. Installing The first time you plan to use the tool, start by installing it: Project Current Upcoming Apizr.Tools.NSwag > dotnet tool install --global Apizr.Tools.NSwag --version 5.0.0-preview.1 Configuring With Apizr.Tools.NSwag installed, navigate to the directory of your choice (the one where you want to generate files). Create a configuration file The first time you plan to use the tool for an api, you need to navigate to your target output folder and then run the new command: > apizr new From here, you'll get your apizr.json default configuration file into your current directory, looking like: { \"codeGenerators\": { \"openApiToApizrClient\": { \"registrationType\": \"Both\", \"withPriority\": false, \"withRetry\": false, \"withLogs\": false, \"withRequestOptions\": false, \"withCacheProvider\": \"None\", \"withMediation\": false, \"withOptionalMediation\": false, \"withMapping\": false, \"className\": \"{controller}\", \"operationGenerationMode\": \"MultipleClientsFromOperationId\", \"additionalNamespaceUsages\": [], \"additionalContractNamespaceUsages\": [], \"generateOptionalParameters\": false, \"generateJsonMethods\": false, \"enforceFlagEnums\": false, \"parameterArrayType\": \"System.Collections.Generic.IEnumerable\", \"parameterDictionaryType\": \"System.Collections.Generic.IDictionary\", \"responseArrayType\": \"System.Collections.Generic.ICollection\", \"responseDictionaryType\": \"System.Collections.Generic.IDictionary\", \"wrapResponses\": false, \"wrapResponseMethods\": [], \"generateResponseClasses\": true, \"responseClass\": \"SwaggerResponse\", \"namespace\": \"MyNamespace\", \"requiredPropertiesMustBeDefined\": true, \"dateType\": \"System.DateTimeOffset\", \"jsonConverters\": null, \"anyType\": \"object\", \"dateTimeType\": \"System.DateTimeOffset\", \"timeType\": \"System.TimeSpan\", \"timeSpanType\": \"System.TimeSpan\", \"arrayType\": \"System.Collections.Generic.List\", \"arrayInstanceType\": \"System.Collections.Generic.List\", \"dictionaryType\": \"System.Collections.Generic.IDictionary\", \"dictionaryInstanceType\": \"System.Collections.Generic.Dictionary\", \"arrayBaseType\": \"System.Collections.ObjectModel.Collection\", \"dictionaryBaseType\": \"System.Collections.Generic.Dictionary\", \"classStyle\": \"Poco\", \"jsonLibrary\": \"NewtonsoftJson\", \"generateDefaultValues\": true, \"generateDataAnnotations\": true, \"excludedTypeNames\": [], \"excludedParameterNames\": [], \"handleReferences\": false, \"generateImmutableArrayProperties\": false, \"generateImmutableDictionaryProperties\": false, \"jsonSerializerSettingsTransformationMethod\": null, \"inlineNamedArrays\": false, \"inlineNamedDictionaries\": false, \"inlineNamedTuples\": true, \"inlineNamedAny\": false, \"generateDtoTypes\": true, \"generateOptionalPropertiesAsNullable\": false, \"generateNullableReferenceTypes\": false, \"templateDirectory\": null, \"typeNameGeneratorType\": null, \"propertyNameGeneratorType\": null, \"enumNameGeneratorType\": null, \"serviceHost\": null, \"serviceSchemes\": null, \"output\": null, \"newLineBehavior\": \"Auto\" } }, \"runtime\": \"Net70\", \"defaultVariables\": null, \"documentGenerator\": { \"fromDocument\": { \"url\": \"http://redocly.github.io/redoc/openapi.yaml\", \"output\": null, \"newLineBehavior\": \"Auto\" } } } Adjust configuration in file Open your apizr.json file to edit the configuration. Most of its settings are coming from NSwag configuration document definition as OpenApiToApizrClient comes from OpenApiToCSharpClient. It means that you can adjust everything you used to with classic NSwag generation. Some of it must be adjusted: into the openApiToApizrClient section: namespace : the namespace used into generated files output : a sub directory where to put generated files into the fromDocument section: url : the openapi json or yaml definition url Warning Minimal adjustments Like for classic NSwag generation, you must at least complete these 3 settings. If not, nothing wil be generated. That said, let's focus on Apizr dedicated settings into the openApiToApizrClient section: registrationType (default: Both ): generate a fluent registration helper class or not None : do not generate Static : generate with the static builder method Extended : generate with the service collection extending method Both : generate both methods (could be interesting to read but not relevant for production) withPriority (default: false ): include priority management into registration process withRetry (default: false ): add a Policy assembly attribute handling transient http error and a policy registry into registration process withLogs (default: false ): add a Log assembly attribute and a logger factory into static only registration process withRequestOptions (default: false ): add a RequestOptions parameter to your api methods so that you can adjust configuration at request time withCacheProvider (default: None ): None : do not cache Akavache : use Akavache MonkeyCache : use MonkeyCache InMemory : use Microsoft.Extensions.Caching.Memory (extended registration only) Distributed : use any caching engine compatible with Microsoft.Extensions.Caching.Distributed.IDistributedCache (extended registration only) Custom : use your own ICachingHandler implementation withMediation (default: false ): add mediation into extended registration process (extended registration only) withOptionalMediation (default: false ): add optional mediation into extended registration process (extended registration only) withMapping (default: false ): add AutoMapper into registration process Generating Once configuration file has been adjusted to your needs, execute the run command from the same directory where your apizr.json stands: > apizr run Note Optional arguments You can provide optional arguments: Input argument if you'd like to set a specific json configuration file path to run with. Ignore it as long as your directory contains only one of it. Variables argument if you need to set some dynamic values. Ignore it if you don't know what you're doing or read the NSwag doc about it . You should now get all your generated files right in place in your configured output folder. While you'll be including these files in your project, don't forget to install Nuget package dependencies as listed into the generated comments."
  },
  "changelog.html": {
    "href": "changelog.html",
    "title": "5.0 | Apizr",
    "keywords": "5.0 All [New] Now we can group registry common configurations at any level to share configurations without any limit [New] Now we can set a base path with the brand new WithBasePath fluent option or using attribute [New] Now we can set options at request time with the brand new fluent request options builder [New] Now we can execute api requests directly from the registry containing the managed api Apizr [New] [Core] Now we can set a custom HttpClient with the brand new WithHttpClient fluent option [Improvement] [Core] No more dependency to Microsoft.Extensions.Http.Polly from the core package [Breaking] [Naming] Now ApizrBuilder static class offers only a Current property returning its own instance to get acces to its methods , so that it could be extended then by other packages [Fix] Some bugs and performance issues fixed Apizr.Integrations.Mapster [New] Brand new integration with Mapster Apizr.Integrations.FileTransfer [New] Brand new integration package to manage file transfers like a breeze with static registration/instanciation [New] We can track file transfer progress with the brand new WithProgress fluent option Apizr.Extensions.Microsoft.FileTransfer [New] Brand new integration package to manage file transfers like a breeze with extended registration Apizr.Integrations.FileTransfer.MediatR [New] Brand new integration package to manage file transfers like a breeze with mediator pattern Apizr.Integrations.FileTransfer.Optional [New] Brand new integration package to manage file transfers like a breeze with mediator pattern and optional result Apizr.Tools.NSwag [New] Brand new CLI tool so that Apizr files can now be generated by command line (Models, Apis and Registrations) from an OpenApi/Swagger definition using NSwag 4.1 Apizr [Breaking] [Naming] Apizr static class renamed to ApizrBuilder to match its purpose and doesn't conflict with its namespace anymore [Breaking] [Naming] ApizrBuilder's methods renamed to match their return type so that we know what we're about to build (e.g. CreateRegistry, AddManagerFor, CreateManagerFor) [Breaking] [Naming] ApizrRegistry's methods renamed to match their return type so that we know what we're about to get (e.g. GetManagerFor, GetCrudManagerFor, ContainsManagerFor) [Fix] [Connectivity] No more exception while using Apizr the extended way but without providing any IConnectivityHandler implementation with Fusillade priority management enabled [Improvement] [Address] Now we can set base address at both common and proper levels so we can define a base address shared by all apis, but also a specific one if needed Apizr.Extensions.Microsoft.DependencyInjection [Breaking] [Naming] Extension methods renamed to match their return type so that we know what we're about to build (e.g. AddManagerFor, AddCrudManagerFor) [Breaking] [Naming] ApizrExtendedRegistry's methods renamed to match their return type so that we know what we're about to get (e.g. GetManagerFor, GetCrudManagerFor, ContainsManagerFor) Apizr.Integrations.MediatR [Breaking] [Naming] ApizrMediationRegistry's methods renamed to match their return type so that we know what we're about to get (e.g. GetMediatorFor, GetCrudMediatorFor, ContainsMediatorFor) Apizr.Integrations.Optional [Breaking] [Naming] ApizrOptionalMediationRegistry's methods renamed to match their return type so that we know what we're about to get (e.g. GetOptionalMediatorFor, GetCrudOptionalMediatorFor, ContainsOptionalMediatorFor) 4.0 Apizr [New] [Logging] Now fully relies on MS Logging extensions [New] [Logging] Static fluent configuration now offers a WithLoggerFactory option to provide a custom logger factory [Breaking] [Logging] TraceAttribute has been renamed back to LogAttribute [Breaking] [Logging] Now we can set a LogLevel value for each Low, Medium and High severity by attribute or fluent configuration [New] [Logging] Now we can set logging settings within LogAttribute at method level [New] [Logging] Now we can set http tracing mode within LogAttribute to ajust log writting conditions (ExceptionsOnly, ErrorsAndExceptionsOnly or Everything) [New] [Logging] No more HttpTracer NuGet package dependency as source code has been integrated and largely adjusted to Apizr needs [New] [Configuring] Both static and extended fluent configuration now offers a Registry to set common options once for all registered apis, while keeping proper options applied to selected apis [New] [Configuring] Static fluent configuration could return the registry that expose a Populate method to register each generated Apizr manager in a container [New] [Configuring] Generated registry exposes GetFor, TryGetFor, GetCrudFor and TryGetCrudFor methods so that it could be used everywhere to get managers, instead of direct access [New] [Policing] Now we can provide a custom PollyContext if defined into the called api interface method, it will carry all logging settings for DelegatingHandler use. [New] [Mapping] Now we can enjoy data mapping with both static and extended configurations [Improvement] [Mapping] Now we can let Apizr auto map data right before sending request and/or after recieving response by providing types on ExecuteAsync call [New] [Caching] Now we can ask for clearing request cache before executing [New] [Exceptions] Brand new onException Action parameter to handle it globally (e.g. user dialog/toast) and let potential cached data return to caller as expected (e.g. refreshing UI) Apizr.Extensions.Microsoft.DependencyInjection [New] We can now auto register crud managers for all scanned classes decorated by crud attributes Apizr.Extensions.Microsoft.Caching [New] Brand new integration project to set MS Caching extensions as caching handler Apizr.Integrations.Akavache [Improvement] Now we can ajust Akavache settings while configuring [New] Now we can register Akavache directly with the brand new WithAkavacheCacheHandler option Apizr.Integrations.MediatR [Breaking] Now Apizr.Integrations.MediatR targets .Net Standard 2.1 as MediatR v10+ does [New] Now we can let Apizr auto map data right before sending request and/or after recieving response by providing types on Apizr mediators Send call [New] Brand new IApizrMediator & IApizrCrudMediator interfaces to get things shorter than IMediator [New] Now we can ask for clearing request cache before executing [New] Brand new onException Action parameter to handle it globally (e.g. user dialog/toast) and let potential cached data return to caller as expected (e.g. refreshing UI) Apizr.Integrations.Optional [Breaking] Now Apizr.Integrations.Optional targets .Net Standard 2.1 as Apizr.Integrations.MediatR v4+ does [New] Now we can let Apizr auto map data right before sending request and/or after recieving response by providing types on Apizr optional mediators Send call [New] Brand new IApizrOptionalMediator & IApizrCrudOptionalMediator interfaces to get things shorter than IMediator [New] Now we can ask for clearing request cache before executing Apizr.Integrations.AutoMapper [Breaking] Now Apizr.Integrations.AutoMapper targets .Net Standard 2.1 as AutoMapper v11+ does [New] Now we can register AutoMapper directly with the brand new WithAutoMapperMappingHandler option [Improvement] No more extended package dependency to enjoy data mapping with both static and extended configurations Warning Apizr.Integrations.Shiny has been discontinued This integration project has been dropped out as Shiny no longer provide built-in caching and logging feature anymore. Apizr now either relies on MS Caching extensions, Akavache or MonkeyCache for caching feature and MS Logging extensions for logging feature. You'll have to provide a connectivity handler if you want Apizr to check it. 3.0 Apizr [New] Now based on Refit v6+ which introduce properties parameter provided to DelegateHandlers by the Http message. This is used by the new Fusillade priority management package. [New] Now based on Refit v6+ which introduce dynamic headers dictionary parameter allowing adding multiple dynamic headers in a single parameter thanks to [HeaderCollection] IDictionary<string, string> headers [New] Now based on Refit v6+ which now relies on System.Text.Json instead of Newtonsoft.Json. If you'd like to continue to use Newtonsoft.Json, add the Refit.Newtonsoft.Json NuGet package and follow the new Readme instructions [New] Now AuthenticationHandler is log level sensitive so we could tell it to keep quiet while using it heavily [New] Now caching could be disabled with CacheIt attribute thanks to CacheMode.None parameter to compose with assembly, interface and method level cache rules all together (e.g. you could now enable Cache globaly at assembly level but turn it off for a specific method like the login one) [New] Now you can initialize parameters directly from the managed method . No more pitfalls [Improvement] Cache key generator has been deeply reshaped to support all scenarios, including path parameters [Improvement] Nuget references have been updated to latest versions [BreakingChange] Fusillade has been moved to an integration package . If you used to play with it, just install it from its brand new dedicated integration package and follow the new Readme instructions [Fix] No more exception while using Apizr with Prism.Magician with Fusillade priority management enabled Apizr.Integrations.Fusillade [New] Brand new integration package to use Apizr with Fusillade, only if you need it (no more core references and NuGet dependencies) 2.0 Apizr [New] Now initialization options are typed to be dedicated to each api interface manager. It means you can now get a specific configuration for each Apizr manager instance, like for caching, logging, and so on... [New] Now caching could be defined at method level for CRUD api to. It means you can define specific cache settings for each Read and ReadAll request for each your CRUD model class [New] Now caching could be defined at class level for CRUD api like you does for classic interface one. It means you can define specific cache settings for both Read and ReadAll requests for each your CRUD model class [New] Now caching could be defined at assembly level for global cache settings. It means you can define global cache settings for all your apis in one place, and then define specific settings at sub-levels to override this behavior when needed [New] Now policy keys could be defined at method level for CRUD api to. It means you can define specific policy keys for each request of each CRUD model class [New] Now policy keys could be defined at class level for CRUD api like you does for classic interface one. It means you can define specific policy keys for all requests of each CRUD model class [New] Now logging could be defined at class level for CRUD api like you does for classic interface one. It means you can define specific logging settings for all requests of each CRUD model class [New] Now logging could be defined at assembly level for global logging settings. It means you can define global logging settings for all your apis in one place, and then define specific settings at sub-levels to override this behavior when needed [BreakingChange] TraceAttribute renamed to LogItAttribute to suits its tracing and logging both features activation [BreakingChange] CacheAttribute renamed to CacheItAttribute to keep things consistent [BreakingChange] No more cache and policy attribute decorating CRUD api by default. You can activate it fluently with the options builder. 1.9 Apizr [New] Handling complex type as CacheKey [New] Now we can set Apizr log level within TraceAttribute to manage execution tracing verbosity Apizr.Integrations.MediatR [Change] Mediation's ICommand interface renamed to IMediationCommand, avoiding conflict with System.Windows.Input.ICommand 1.8.1 Apizr [Fix] Parsing life span representation as TimeSpan from CacheAttribute 1.8 Apizr.Integrations.Optional [New] Introducing CatchAsync optional extension method to return result from fetch or cache, no matter of execption handled on the other side by an action callback to inform the user 1.7 Apizr [New] Now we can toggle Fusillade priority management activation [New] Now we can provide a base uri factory (e.g. depending on config) Apizr.Extensions.Microsoft.DependencyInjection [New] Now we can toggle Fusillade priority management activation [New] Now we can provide a base uri factory (e.g. depending on DI resovled settings) 1.6 [Fix] Preserve attribute added Apizr [New] Now we can provide a custom HttpClientHandler instance Apizr.Extensions.Microsoft.DependencyInjection [New] Now we can provide a custom HttpClientHandler instance 1.5 Apizr [Fix] Now the manager waits for task with no result to handle exceptions properly Apizr.Integrations.MediatR [New] Introducing typed mediator and typed crud mediator for shorter request [Fix] Now MediatR handlers are registered correctly when asked from a manual registration context [Fix] Mapping null object now works correctly [Fix] Now MediatR handlers wait for its handling task to handle exceptions properly Apizr.Integrations.Optional [New] Introducing typed optional mediator and typed crud optional mediator for shorter request [New] Introducing OnResultAsync optional extension method to make all the thing shorter than ever [Fix] Now Optional handlers are registered correctly when asked from a manual registration context [Fix] Optional request handlers now handle exceptions as expected [Fix] Now Optional handlers wait for its handling task to handle exceptions properly 1.4.2 Apizr.Integrations.MediatR [Fix] Now nuget package as library both reference MediatR.Extensions.Microsoft.DependencyInjection nuget package for assembly version compatibility 1.4.1 Apizr.Extensions.Microsoft.DependencyInjection [Fix] Now Apizr works with DryIoc and Unity containers, returning a single UserInitiated instance, while waiting for external issues beeing fixed Apizr.Integrations.MediatR [Workaround] Doc updated to work with MediatR alongside DryIoc or Unity container, while waiting for external issues beeing fixed [Fix] No more WithCrudMediation method available but only WithMediation 1.4.0 Apizr.Extensions.Microsoft.DependencyInjection [New] We can now auto register both crud and classic api interfaces Apizr.Integrations.MediatR [New] We can now use mediation with both crud and classic api interfaces [New] We can now use execution priority with both crud and classic api mediation [BreakingChange] WithCrudMediation renamed to WithMediation Apizr.Integrations.Optional [New] We can now use optional mediation with both crud and classic api interfaces [New] We can now use execution priority with both crud and classic api optional mediation [BreakingChange] WithCrudOptionalMediation renamed to WithOptionalMediation Apizr.Integrations.Shiny [New] Shiny integration now offers all the same registration extensions methods Apizr.Integrations.AutoMapper [New] We can now use auto mapping with both crud and classic api mediation and optional mediation 1.3.0 Apizr [New] We can now define mapped model entity type from the CrudEntityAttribute above api entities for automatic crud registration Apizr.Extensions.Microsoft.DependencyInjection [New] We can now provide an IMappingHandler implementation to the options builder for auto mapping [New] We can now decorate model entities with MappedCrudEntityAttribute to define mapped crud settings for automatic crud registration [New] We can now associate api and model entities with MappedEntity<TModelEntity, TApiEntity> during manual crud registration Apizr.Integrations.MediatR [Fix] Cacheable ReadQuery now use the key value when defining cache key [Fix] Auto handling now works as expected with manual crud registration Apizr.Integrations.Optional [Fix] Cacheable ReadOptionalQuery now use the key value when defining cache key Apizr.Integrations.AutoMapper [New] Brand new integration with AutoMapper, to let Apizr handle crud entity mapping during mediation handling 1.2.0 Apizr [BreakingChange] Apizr instantiation/registration methods names standardized to Apizr.For and Apizr.CrudFor [New] Introducing ICrudApi service to manage standard CRUD api calls built-in Apizr.Extensions.Microsoft.DependencyInjection [BreakingChange] Apizr instantiation/registration methods names standardized to services.AddApizrFor and services.AddApizrCrudFor [New] Enabling ICrudApi auto registration feature with CrudEntityAttribute and assembly scanning Apizr.Integrations.Shiny [BreakingChange] Apizr instantiation/registration methods names standardized to services.UseApizrFor and services.UseApizrCrudFor [New] Enabling ICrudApi auto registration feature with CrudEntityAttribute and assembly scanning Apizr.Integrations.MediatR [New] Brand new integration with MediatR, to let Apizr handle crud requests execution with mediation Apizr.Integrations.Optional [New] Brand new integration with Optional, to let Apizr handle crud requests execution with mediation and optional result 1.1.0 Apizr [New] Aibility to manage generic web apis by setting base address with the options builder Apizr.Extensions.Microsoft.DependencyInjection [New] Same as Apizr Apizr.Integrations.Shiny [New] Same as Apizr 1.0.0 Initial Release for Apizr Apizr.Extensions.Microsoft.DependencyInjection Apizr.Integrations.Akavache Apizr.Integrations.MonkeyCache Apizr.Integrations.Shiny"
  },
  "index.html": {
    "href": "index.html",
    "title": "Apizr | Apizr",
    "keywords": "Apizr Refit based web api client management, but resilient (retry, connectivity, cache, auth, log, priority, etc...) What The Apizr project was motivated by this 2015 famous blog post about resilient networking. Its main focus was to address at least everything explained into this article, meanning: Easy access to restful services Work offline with cache management Handle errors with retry pattern and global catching Handle request priority Check connectivity Fast development time Easy maintenance Reuse existing libraries But also, some more core features like: Trace http traffic Handle authentication And more integration/extension independent optional features like: Choose cache, log and connectivity providers Register it as an MS DI extension Map model with DTO Use Mediator pattern Use Optional pattern Manage file transfers The list is not exhaustive, there’s more, but what we wanted was playing with all of it with as less code as we could, not worrying about plumbing things and being sure everything is wired and handled by design or almost. Inspired by Refit.Insane.PowerPack , we wanted to make it simple to use, mixing attribute decorations and fluent configuration. Also, we built this lib to make it work with any .Net Standard 2.0 compliant platform, so we could use it seamlessly from any kind of app, with or without DI goodness. How An api definition with some attributes: [assembly:Policy(\"TransientHttpError\")] namespace Apizr.Sample { [WebApi(\"https://reqres.in/\"), Cache, Log] public interface IReqResService { [Get(\"/api/users\")] Task<UserList> GetUsersAsync(); [Get(\"/api/users/{userId}\")] Task<UserDetails> GetUserAsync([CacheKey] int userId); [Post(\"/api/users\")] Task<User> CreateUser(User user); } } An instance of this managed api: // Define some policies var registry = new PolicyRegistry { { \"TransientHttpError\", HttpPolicyExtensions .HandleTransientHttpError() .WaitAndRetryAsync(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(10) }) } }; // Get your manager instance var reqResManager = ApizrBuilder.Current.CreateManagerFor<IReqResService>( options => options .WithPolicyRegistry(registry) .WithAkavacheCacheHandler()); And then you're good to go: var userList = await reqResManager.ExecuteAsync(api => api.GetUsersAsync()); This request will be managed with the defined policies, data cached, http traces logged. Apizr has a lot more to offer, just read the doc ! Where Change Log Managing (Core) Project Current Upcoming Apizr Apizr.Extensions.Microsoft.DependencyInjection Caching Project Current Upcoming Apizr.Extensions.Microsoft.Caching Apizr.Integrations.Akavache Apizr.Integrations.MonkeyCache Handling Project Current Upcoming Apizr.Integrations.Fusillade Apizr.Integrations.MediatR Apizr.Integrations.Optional Mapping Project Current Upcoming Apizr.Integrations.AutoMapper Apizr.Integrations.Mapster Transferring Project Current Upcoming Apizr.Integrations.FileTransfer Apizr.Extensions.Microsoft.FileTransfer Apizr.Integrations.FileTransfer.MediatR Apizr.Integrations.FileTransfer.Optional Generating Project Current Upcoming Apizr.Tools.NSwag Install the NuGet reference package of your choice: Apizr package comes with the static builder instantiation approach (which you can register in your DI container then) Apizr.Extensions.Microsoft.DependencyInjection package extends your IServiceCollection with AddApizr, AddApizrFor and AddApizrCrudFor registration methods Apizr.Extensions.Microsoft.Caching package brings an ICacheHandler method mapping implementation for MS Extensions Caching Apizr.Integrations.Akavache package brings an ICacheHandler method mapping implementation for Akavache Apizr.Integrations.MonkeyCache package brings an ICacheHandler method mapping implementation for MonkeyCache Apizr.Integrations.Fusillade package enables request priority management using Fusillade Apizr.Integrations.MediatR package enables request auto handling with mediation using MediatR Apizr.Integrations.Optional package enables Optional result from mediation requests (requires MediatR integration) using Optional.Async Apizr.Integrations.AutoMapper package enables data mapping using AutoMapper Apizr.Integrations.Mapster package enables data mapping using Mapster Apizr.Integrations.FileTransfer package enables file transfer management for static registration Apizr.Extensions.Microsoft.FileTransfer package enables file transfer management for extended registration Apizr.Integrations.FileTransfer.MediatR package enables file transfer management for mediation requests (requires MediatR integration and could work with Optional integration) using MediatR Apizr.Integrations.FileTransfer.Optional package enables file transfer management for mediation requests with optional result (requires MediatR integration and could work with Optional integration) using Optional.Async Install the NuGet .NET CLI Tool package if needed: Apizr.Tools.NSwag package enables Apizr files generation by command lines (Models, Apis and Registrations) from an OpenApi/Swagger definition using NSwag Apizr core package make use of well known nuget packages to make the magic appear: Package Features Refit Auto-implement web api interface and deal with HttpClient Polly Apply some policies like Retry, CircuitBreaker, etc... Microsoft.Extensions.Logging.Abstractions Delegate logging layer to MS Extensions Logging It also comes with some handling interfaces to let you provide your own services for: Caching with ICacheHandler, which comes with its default VoidCacheHandler (no cache), but also with: InMemoryCacheHandler & DistributedCacheHandler: MS Extensions Caching methods mapping interface (Integration package referenced above), meaning you can provide any compatible caching engine AkavacheCacheHandler: Akavache methods mapping interface (Integration package referenced above) MonkeyCacheHandler: MonkeyCache methods mapping interface (Integration package referenced above) Logging As Apizr relies on official MS ILogger interface , you may want to provide any compatible logging engine (built-in DebugLogger activated by default) Connectivity with IConnectivityHandler, which comes with its default VoidConnectivityHandler (no connectivity check) Mapping with IMappingHandler, which comes with its default VoidMappingHandler (no mapping conversion), but also with: AutoMapperMappingHandler: AutoMapper mapping methods mapping interface (Integration package referenced above) MapsterMappingHandler: Mapster mapping methods mapping interface (Integration package referenced above)"
  }
}